{
    "project_name": "Angel-ML-angel",
    "violation_id": "454",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/454/WorkerCounterBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/454/WorkerCounterBlock.java\nindex ea3d10d90eb..23f0d6d9f09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/454/WorkerCounterBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/454/WorkerCounterBlock.java\n@@ -31,34 +31,34 @@ import static org.apache.hadoop.yarn.util.StringHelper.join;\n import static org.apache.hadoop.yarn.webapp.view.JQueryUI._TH;\n \n public class WorkerCounterBlock extends HtmlBlock {\n-  final AMContext amContext;\n+    final AMContext amContext;\n \n-  @Inject\n-  WorkerCounterBlock(AMContext amctx) {\n-    amContext = amctx;\n-  }\n+    @Inject\n+    WorkerCounterBlock(AMContext amctx) {\n+        amContext = amctx;\n+    }\n \n-  @Override\n-  protected void render(Block html) {\n-    set(TITLE, join(\"Angel WorkerCounterBlock\", $(WORKER_ATTEMPT_ID)));\n+    @Override\n+    protected void render(Block html) {\n+        set(TITLE, join(\"Angel WorkerCounterBlock\", $(WORKER_ATTEMPT_ID)));\n \n-    try {\n-      WorkerAttemptId workerAttemptId = new WorkerAttemptId($(WORKER_ATTEMPT_ID));\n+        try {\n+            WorkerAttemptId workerAttemptId = new WorkerAttemptId($(WORKER_ATTEMPT_ID));\n \n-      Map<String, String> metricsMap =\n-          amContext.getWorkerManager().getWorker(workerAttemptId.getWorkerId())\n-              .getWorkerAttempt(workerAttemptId).getMetrics();\n-      TABLE<Hamlet> worker_metrics_table = html.table();\n-      html.h6($(WORKER_ATTEMPT_ID));\n+            Map<String, String> metricsMap =\n+                    amContext.getWorkerManager().getWorker(workerAttemptId.getWorkerId())\n+                            .getWorkerAttempt(workerAttemptId).getMetrics();\n+            TABLE<Hamlet> worker_metrics_table = html.table();\n+            html.h6($(WORKER_ATTEMPT_ID));\n \n-      worker_metrics_table.tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")._();\n-      for (String key : metricsMap.keySet()) {\n-        String value = metricsMap.get(key);\n-        worker_metrics_table.tr().td(String.valueOf(key)).td(value)._();\n-      }\n-      worker_metrics_table._();\n-    } catch (UnvalidIdStrException e) {\n-      LOG.error(\"unvalid id string, \", e);\n+            worker_metrics_table.tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")._();\n+            for (String key : metricsMap.keySet()) {\n+                String value = metricsMap.get(key);\n+                worker_metrics_table.tr().td(String.valueOf(key)).td(value)._();\n+            }\n+            worker_metrics_table._();\n+        } catch (UnvalidIdStrException e) {\n+            LOG.error(\"unvalid id string, \", e);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/454/WorkerCounterBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/454/WorkerCounterBlock.java\nindex ea3d10d90eb..b19a8b6a8f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/454/WorkerCounterBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/454/WorkerCounterBlock.java\n@@ -41,14 +41,13 @@ public class WorkerCounterBlock extends HtmlBlock {\n   @Override\n   protected void render(Block html) {\n     set(TITLE, join(\"Angel WorkerCounterBlock\", $(WORKER_ATTEMPT_ID)));\n-\n-    try {\n+try {\n       WorkerAttemptId workerAttemptId = new WorkerAttemptId($(WORKER_ATTEMPT_ID));\n \n       Map<String, String> metricsMap =\n           amContext.getWorkerManager().getWorker(workerAttemptId.getWorkerId())\n               .getWorkerAttempt(workerAttemptId).getMetrics();\n-      TABLE<Hamlet> worker_metrics_table = html.table();\n+TABLE<Hamlet> worker_metrics_table = html.table();\n       html.h6($(WORKER_ATTEMPT_ID));\n \n       worker_metrics_table.tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")._();\n@@ -61,4 +60,4 @@ public class WorkerCounterBlock extends HtmlBlock {\n       LOG.error(\"unvalid id string, \", e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/454/WorkerCounterBlock.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/454/WorkerCounterBlock.java\nindex ea3d10d90eb..92dc74a739a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/454/WorkerCounterBlock.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/454/WorkerCounterBlock.java\n@@ -23,14 +23,13 @@ import com.tencent.angel.worker.WorkerAttemptId;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet;\n import org.apache.hadoop.yarn.webapp.hamlet.Hamlet.TABLE;\n import org.apache.hadoop.yarn.webapp.view.HtmlBlock;\n-\n import java.util.Map;\n-\n import static com.tencent.angel.webapp.AngelParams.WORKER_ATTEMPT_ID;\n import static org.apache.hadoop.yarn.util.StringHelper.join;\n import static org.apache.hadoop.yarn.webapp.view.JQueryUI._TH;\n \n public class WorkerCounterBlock extends HtmlBlock {\n+\n   final AMContext amContext;\n \n   @Inject\n@@ -41,16 +40,11 @@ public class WorkerCounterBlock extends HtmlBlock {\n   @Override\n   protected void render(Block html) {\n     set(TITLE, join(\"Angel WorkerCounterBlock\", $(WORKER_ATTEMPT_ID)));\n-\n     try {\n       WorkerAttemptId workerAttemptId = new WorkerAttemptId($(WORKER_ATTEMPT_ID));\n-\n-      Map<String, String> metricsMap =\n-          amContext.getWorkerManager().getWorker(workerAttemptId.getWorkerId())\n-              .getWorkerAttempt(workerAttemptId).getMetrics();\n+      Map<String, String> metricsMap = amContext.getWorkerManager().getWorker(workerAttemptId.getWorkerId()).getWorkerAttempt(workerAttemptId).getMetrics();\n       TABLE<Hamlet> worker_metrics_table = html.table();\n       html.h6($(WORKER_ATTEMPT_ID));\n-\n       worker_metrics_table.tr().th(_TH, \"NAME\").th(_TH, \"VALUE\")._();\n       for (String key : metricsMap.keySet()) {\n         String value = metricsMap.get(key);\n@@ -61,4 +55,5 @@ public class WorkerCounterBlock extends HtmlBlock {\n       LOG.error(\"unvalid id string, \", e);\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}