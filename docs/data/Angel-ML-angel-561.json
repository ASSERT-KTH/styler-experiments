{
    "project_name": "Angel-ML-angel",
    "violation_id": "561",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/561/LongLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/561/LongLongVectorStorage.java\nindex 5d836b1e86a..8953af377d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/561/LongLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/561/LongLongVectorStorage.java\n@@ -35,251 +35,254 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n  */\n public class LongLongVectorStorage extends LongLongStorage {\n \n-  /**\n-   * A vector storage: it can be LongLongVector or IntLongVector and can use DENSE,SPARSE and SORTED\n-   * storage type\n-   */\n-  private LongLongVector vector;\n-\n-  public LongLongVectorStorage(LongLongVector vector, long indexOffset) {\n-    super(indexOffset);\n-    this.vector = vector;\n-  }\n-\n-  public LongLongVectorStorage() {\n-    this(null, 0L);\n-  }\n-\n-  public LongLongVector getVector() {\n-    return vector;\n-  }\n-\n-  public void setVector(LongLongVector vector) {\n-    this.vector = vector;\n-  }\n-\n-  @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n-    if (func != null) {\n-      if (keyType == KeyType.INT) {\n-        throw new UnsupportedOperationException(\"Only support long index for Long key storage\");\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeLong(initAndGet(ByteBufSerdeUtils.deserializeLong(in), func));\n+    /**\n+     * A vector storage: it can be LongLongVector or IntLongVector and can use DENSE,SPARSE and SORTED\n+     * storage type\n+     */\n+    private LongLongVector vector;\n+\n+    public LongLongVectorStorage(LongLongVector vector, long indexOffset) {\n+        super(indexOffset);\n+        this.vector = vector;\n+    }\n+\n+    public LongLongVectorStorage() {\n+        this(null, 0L);\n+    }\n+\n+    public LongLongVector getVector() {\n+        return vector;\n+    }\n+\n+    public void setVector(LongLongVector vector) {\n+        this.vector = vector;\n+    }\n+\n+    @Override\n+    public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+        if (func != null) {\n+            if (keyType == KeyType.INT) {\n+                throw new UnsupportedOperationException(\n+                        \"Only support long index for Long key storage\");\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeLong(initAndGet(ByteBufSerdeUtils.deserializeLong(in), func));\n+                }\n+            }\n+        } else {\n+            if (keyType == KeyType.INT) {\n+                throw new UnsupportedOperationException(\n+                        \"Only support long index for Long key storage\");\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeLong(get(ByteBufSerdeUtils.deserializeLong(in)));\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      if (keyType == KeyType.INT) {\n-        throw new UnsupportedOperationException(\"Only support long index for Long key storage\");\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeLong(get(ByteBufSerdeUtils.deserializeLong(in)));\n+    }\n+\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        switch (updateType) {\n+            case T_LONG_SPARSE_LONGKEY:\n+                updateUseLongLongSparse(buf, op);\n+                break;\n+\n+            case T_INT_SPARSE_LONGKEY:\n+                updateUseLongIntSparse(buf, op);\n+                break;\n+\n+            default: {\n+                throw new UnsupportedOperationException(\n+                        \"Unsupport operation: update \" + updateType + \" to \" +\n+                                this.getClass().getName());\n+            }\n         }\n-      }\n     }\n-  }\n-\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    switch (updateType) {\n-      case T_LONG_SPARSE_LONGKEY:\n-        updateUseLongLongSparse(buf, op);\n-        break;\n-\n-      case T_INT_SPARSE_LONGKEY:\n-        updateUseLongIntSparse(buf, op);\n-        break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n-      }\n+\n+\n+    private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n+        int size = ByteBufSerdeUtils.deserializeInt(buf);\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                long index = ByteBufSerdeUtils.deserializeLong(buf);\n+                long oldValue = get(index);\n+                set(index, oldValue + ByteBufSerdeUtils.deserializeLong(buf));\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                set(ByteBufSerdeUtils.deserializeLong(buf), ByteBufSerdeUtils.deserializeLong(buf));\n+            }\n+        }\n     }\n-  }\n-\n-\n-  private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n-    int size = ByteBufSerdeUtils.deserializeInt(buf);\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        long index = ByteBufSerdeUtils.deserializeLong(buf);\n-        long oldValue = get(index);\n-        set(index, oldValue + ByteBufSerdeUtils.deserializeLong(buf));\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        set(ByteBufSerdeUtils.deserializeLong(buf), ByteBufSerdeUtils.deserializeLong(buf));\n-      }\n+\n+    private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n+        int size = ByteBufSerdeUtils.deserializeInt(buf);\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                long index = ByteBufSerdeUtils.deserializeLong(buf);\n+                long oldValue = get(index);\n+                set(index, oldValue + ByteBufSerdeUtils.deserializeInt(buf));\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                set(ByteBufSerdeUtils.deserializeLong(buf), ByteBufSerdeUtils.deserializeInt(buf));\n+            }\n+        }\n     }\n-  }\n-\n-  private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n-    int size = ByteBufSerdeUtils.deserializeInt(buf);\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        long index = ByteBufSerdeUtils.deserializeLong(buf);\n-        long oldValue = get(index);\n-        set(index, oldValue + ByteBufSerdeUtils.deserializeInt(buf));\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        set(ByteBufSerdeUtils.deserializeLong(buf), ByteBufSerdeUtils.deserializeInt(buf));\n-      }\n+\n+    @Override\n+    public long get(long index) {\n+        return vector.get(index - indexOffset);\n     }\n-  }\n-\n-  @Override\n-  public long get(long index) {\n-    return vector.get(index - indexOffset);\n-  }\n-\n-  @Override\n-  public void set(long index, long value) {\n-    vector.set(index - indexOffset, value);\n-  }\n-\n-  @Override\n-  public long[] get(long[] indices) {\n-    long[] values = new long[indices.length];\n-    for (int i = 0; i < indices.length; i++) {\n-      values[i] = get(indices[i]);\n+\n+    @Override\n+    public void set(long index, long value) {\n+        vector.set(index - indexOffset, value);\n     }\n \n-    return values;\n-  }\n+    @Override\n+    public long[] get(long[] indices) {\n+        long[] values = new long[indices.length];\n+        for (int i = 0; i < indices.length; i++) {\n+            values[i] = get(indices[i]);\n+        }\n+\n+        return values;\n+    }\n \n-  @Override\n-  public void set(long[] indices, long[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], values[i]);\n+    @Override\n+    public void set(long[] indices, long[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], values[i]);\n+        }\n     }\n-  }\n-\n-  @Override\n-  public void addTo(long index, long value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  @Override\n-  public void addTo(long[] indices, long[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n+\n+    @Override\n+    public void addTo(long index, long value) {\n+        set(index, get(index) + value);\n     }\n-  }\n-\n-  @Override\n-  public void mergeTo(LongLongVector mergedRow) {\n-    StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n-    switch (method) {\n-      case SPARSE: {\n-        ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage().entryIterator();\n-        Long2LongMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          mergedRow.set(entry.getLongKey() + indexOffset, entry.getLongValue());\n+\n+    @Override\n+    public void addTo(long[] indices, long[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], get(indices[i]) + values[i]);\n         }\n-        break;\n-      }\n+    }\n \n-      default:\n-        throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n+    @Override\n+    public void mergeTo(LongLongVector mergedRow) {\n+        StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n+        switch (method) {\n+            case SPARSE: {\n+                ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage().entryIterator();\n+                Long2LongMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    mergedRow.set(entry.getLongKey() + indexOffset, entry.getLongValue());\n+                }\n+                break;\n+            }\n+\n+            default:\n+                throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n+        }\n     }\n-  }\n-\n-  @Override\n-  public long initAndGet(long index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      long value = (long) func.action();\n-      set(index, value);\n-      return value;\n+\n+    @Override\n+    public long initAndGet(long index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            long value = (long) func.action();\n+            set(index, value);\n+            return value;\n+        }\n+    }\n+\n+    @Override\n+    public boolean exist(long index) {\n+        return vector.hasKey(index - indexOffset);\n+    }\n+\n+    @Override\n+    public void elemUpdate(LongElemUpdateFunc func) {\n+        StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n+        switch (method) {\n+            case SPARSE: {\n+                // Attention: Only update exist element\n+                ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage()\n+                        .entryIterator();\n+                Long2LongMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+            }\n+            break;\n+\n+            default:\n+                throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n+        }\n+    }\n+\n+    @Override\n+    public void clear() {\n+        VectorStorageUtils.clear(vector);\n+    }\n+\n+    @Override\n+    public LongLongVectorStorage deepClone() {\n+        return new LongLongVectorStorage(vector.copy(), indexOffset);\n+    }\n+\n+    @Override\n+    public int size() {\n+        return VectorStorageUtils.size(vector);\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return VectorStorageUtils.isDense(vector);\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return VectorStorageUtils.isSparse(vector);\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return VectorStorageUtils.isSorted(vector);\n     }\n-  }\n-\n-  @Override\n-  public boolean exist(long index) {\n-    return vector.hasKey(index - indexOffset);\n-  }\n-\n-  @Override\n-  public void elemUpdate(LongElemUpdateFunc func) {\n-    StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n-    switch (method) {\n-      case SPARSE: {\n-        // Attention: Only update exist element\n-        ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage()\n-            .entryIterator();\n-        Long2LongMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+\n+    @Override\n+    public LongLongVectorStorage adaptiveClone() {\n+        if (isSparse()) {\n+            return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(),\n+                    vector.getStorage().getIndices(),\n+                    vector.getStorage().getValues()), indexOffset);\n+        } else {\n+            return this;\n         }\n-      }\n-      break;\n+    }\n \n-      default:\n-        throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        VectorStorageUtils.serialize(buf, vector);\n     }\n-  }\n-\n-  @Override\n-  public void clear() {\n-    VectorStorageUtils.clear(vector);\n-  }\n-\n-  @Override\n-  public LongLongVectorStorage deepClone() {\n-    return new LongLongVectorStorage(vector.copy(), indexOffset);\n-  }\n-\n-  @Override\n-  public int size() {\n-    return VectorStorageUtils.size(vector);\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return VectorStorageUtils.isDense(vector);\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return VectorStorageUtils.isSparse(vector);\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return VectorStorageUtils.isSorted(vector);\n-  }\n-\n-  @Override\n-  public LongLongVectorStorage adaptiveClone() {\n-    if (isSparse()) {\n-      return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(),\n-          vector.getStorage().getIndices(),\n-          vector.getStorage().getValues()), indexOffset);\n-    } else {\n-      return this;\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        vector = (LongLongVector) VectorStorageUtils.deserialize(buf);\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+        return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n     }\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    VectorStorageUtils.serialize(buf, vector);\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    vector = (LongLongVector) VectorStorageUtils.deserialize(buf);\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n-  }\n }\n",
            "diff_size": 332
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/561/LongLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/561/LongLongVectorStorage.java\nindex 5d836b1e86a..283ec35c22e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/561/LongLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/561/LongLongVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.storage;\n \n import com.tencent.angel.common.ByteBufSerdeUtils;\n@@ -85,14 +84,11 @@ public class LongLongVectorStorage extends LongLongStorage {\n       case T_LONG_SPARSE_LONGKEY:\n         updateUseLongLongSparse(buf, op);\n         break;\n-\n-      case T_INT_SPARSE_LONGKEY:\n+  case T_INT_SPARSE_LONGKEY:\n         updateUseLongIntSparse(buf, op);\n         break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n   }\n@@ -219,8 +215,7 @@ public class LongLongVectorStorage extends LongLongStorage {\n         }\n       }\n       break;\n-\n-      default:\n+  default:\n         throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n     }\n   }\n@@ -261,7 +256,7 @@ public class LongLongVectorStorage extends LongLongStorage {\n       return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(),\n           vector.getStorage().getIndices(),\n           vector.getStorage().getValues()), indexOffset);\n-    } else {\n+  } else {\n       return this;\n     }\n   }\n@@ -282,4 +277,4 @@ public class LongLongVectorStorage extends LongLongStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "259",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/561/LongLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/561/LongLongVectorStorage.java\nindex 5d836b1e86a..068ffa98d05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/561/LongLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/561/LongLongVectorStorage.java\n@@ -33,12 +33,14 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * A long key long value storage: use a LongVector as storage\n  */\n+\n public class LongLongVectorStorage extends LongLongStorage {\n \n   /**\n    * A vector storage: it can be LongLongVector or IntLongVector and can use DENSE,SPARSE and SORTED\n    * storage type\n    */\n+\n   private LongLongVector vector;\n \n   public LongLongVectorStorage(LongLongVector vector, long indexOffset) {\n@@ -59,7 +61,8 @@ public class LongLongVectorStorage extends LongLongStorage {\n   }\n \n   @Override\n-  public void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (func != null) {\n       if (keyType == KeyType.INT) {\n         throw new UnsupportedOperationException(\"Only support long index for Long key storage\");\n@@ -80,24 +83,22 @@ public class LongLongVectorStorage extends LongLongStorage {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     switch (updateType) {\n       case T_LONG_SPARSE_LONGKEY:\n         updateUseLongLongSparse(buf, op);\n         break;\n-\n       case T_INT_SPARSE_LONGKEY:\n         updateUseLongIntSparse(buf, op);\n         break;\n-\n       default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n+\n     }\n   }\n \n-\n   private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n     int size = ByteBufSerdeUtils.deserializeInt(buf);\n     if (op == UpdateOp.PLUS) {\n@@ -144,7 +145,6 @@ public class LongLongVectorStorage extends LongLongStorage {\n     for (int i = 0; i < indices.length; i++) {\n       values[i] = get(indices[i]);\n     }\n-\n     return values;\n   }\n \n@@ -210,16 +210,14 @@ public class LongLongVectorStorage extends LongLongStorage {\n     switch (method) {\n       case SPARSE: {\n         // Attention: Only update exist element\n-        ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage()\n-            .entryIterator();\n+        ObjectIterator<Long2LongMap.Entry> iter = vector.getStorage().entryIterator();\n         Long2LongMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n           entry.setValue(func.update());\n         }\n       }\n-      break;\n-\n+                   break;\n       default:\n         throw new UnsupportedOperationException(\"unsupport storage method \" + method);\n     }\n@@ -258,9 +256,7 @@ public class LongLongVectorStorage extends LongLongStorage {\n   @Override\n   public LongLongVectorStorage adaptiveClone() {\n     if (isSparse()) {\n-      return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(),\n-          vector.getStorage().getIndices(),\n-          vector.getStorage().getValues()), indexOffset);\n+      return new LongLongVectorStorage(VFactory.sortedLongKeyLongVector(vector.dim(), vector.getStorage().getIndices(), vector.getStorage().getValues()), indexOffset);\n     } else {\n       return this;\n     }\n@@ -282,4 +278,5 @@ public class LongLongVectorStorage extends LongLongStorage {\n   public int bufferLen() {\n     return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}