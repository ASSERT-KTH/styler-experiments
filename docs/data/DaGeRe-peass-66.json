{
    "project_name": "DaGeRe-peass",
    "violation_id": "66",
    "information": {
        "violations": [
            {
                "line": "44",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 203).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   }\n\n   public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n      LOG.debug(\"Generating views for {}\", version);\n      boolean allWorked = true;\n      GitUtils.reset(folders.getProjectFolder());",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/DaGeRe-peass/styler/05_predictions/final/files-repaired/66/TraceViewGenerator.java\nindex ad046c932eb..b63cf73cb76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/DaGeRe-peass/styler/05_predictions/final/files-repaired/66/TraceViewGenerator.java\n@@ -39,9 +39,7 @@ public class TraceViewGenerator {\n       this.folders = folders;\n       this.version = version;\n       this.traceFileMapping = mapping;\n-   }\n-\n-   public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n+   } public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n       LOG.debug(\"Generating views for {}\", version);\n       boolean allWorked = true;\n       GitUtils.reset(folders.getProjectFolder());\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/checkstyle_idea/66/TraceViewGenerator.java\nindex ad046c932eb..40de1785d81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/checkstyle_idea/66/TraceViewGenerator.java\n@@ -26,47 +26,48 @@ import de.dagere.peass.dependencyprocessors.ViewNotFoundException;\n import de.dagere.peass.vcs.GitUtils;\n \n public class TraceViewGenerator {\n-   \n-   private static final Logger LOG = LogManager.getLogger(TraceViewGenerator.class);\n-   \n-   private final DependencyManager dependencyManager;\n-   private final PeASSFolders folders;\n-   private final String version;\n-   private final TraceFileMapping traceFileMapping;\n-   \n-   public TraceViewGenerator(final DependencyManager dependencyManager, final PeASSFolders folders, final String version, final TraceFileMapping mapping) {\n-      this.dependencyManager = dependencyManager;\n-      this.folders = folders;\n-      this.version = version;\n-      this.traceFileMapping = mapping;\n-   }\n \n-   public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n-      LOG.debug(\"Generating views for {}\", version);\n-      boolean allWorked = true;\n-      GitUtils.reset(folders.getProjectFolder());\n-      ProjectModules modules = dependencyManager.getExecutor().getModules();\n-      ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), modules);\n-      List<File> classpathFolders = getClasspathFolders(modules);\n-      for (TestCase testcase : examinedTests.getTests()) {\n-         final File moduleFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n-         final OneTraceGenerator oneViewGenerator = new OneTraceGenerator(resultsFolders, folders, testcase, traceFileMapping, version, moduleFolder,\n-               classpathFolders, mapping);\n-          final boolean workedLocal = oneViewGenerator.generateTrace(version);\n-          allWorked &= workedLocal;\n-      }\n-      return allWorked;\n-   }\n-   \n-   private List<File> getClasspathFolders(final ProjectModules modules) {\n-      final List<File> files = new LinkedList<>();\n-      for (int i = 0; i < modules.getModules().size(); i++) {\n-         final File module = modules.getModules().get(i);\n-         for (int folderIndex = 0; folderIndex < ChangedEntity.potentialClassFolders.length; folderIndex++) {\n-            final String path = ChangedEntity.potentialClassFolders[folderIndex];\n-            files.add(new File(module, path));\n-         }\n+  private static final Logger LOG = LogManager.getLogger(TraceViewGenerator.class);\n+\n+  private final DependencyManager dependencyManager;\n+  private final PeASSFolders folders;\n+  private final String version;\n+  private final TraceFileMapping traceFileMapping;\n+\n+  public TraceViewGenerator(final DependencyManager dependencyManager, final PeASSFolders folders, final String version, final TraceFileMapping mapping) {\n+    this.dependencyManager = dependencyManager;\n+    this.folders = folders;\n+    this.version = version;\n+    this.traceFileMapping = mapping;\n+  }\n+\n+  public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests)\n+      throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n+    LOG.debug(\"Generating views for {}\", version);\n+    boolean allWorked = true;\n+    GitUtils.reset(folders.getProjectFolder());\n+    ProjectModules modules = dependencyManager.getExecutor().getModules();\n+    ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), modules);\n+    List<File> classpathFolders = getClasspathFolders(modules);\n+    for (TestCase testcase : examinedTests.getTests()) {\n+      final File moduleFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n+      final OneTraceGenerator oneViewGenerator = new OneTraceGenerator(resultsFolders, folders, testcase, traceFileMapping, version, moduleFolder,\n+          classpathFolders, mapping);\n+      final boolean workedLocal = oneViewGenerator.generateTrace(version);\n+      allWorked &= workedLocal;\n+    }\n+    return allWorked;\n+  }\n+\n+  private List<File> getClasspathFolders(final ProjectModules modules) {\n+    final List<File> files = new LinkedList<>();\n+    for (int i = 0; i < modules.getModules().size(); i++) {\n+      final File module = modules.getModules().get(i);\n+      for (int folderIndex = 0; folderIndex < ChangedEntity.potentialClassFolders.length; folderIndex++) {\n+        final String path = ChangedEntity.potentialClassFolders[folderIndex];\n+        files.add(new File(module, path));\n       }\n-      return files;\n-   }\n+    }\n+    return files;\n+  }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/naturalize/66/TraceViewGenerator.java\nindex ad046c932eb..c3e11b7b44b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/naturalize/66/TraceViewGenerator.java\n@@ -26,47 +26,46 @@ import de.dagere.peass.dependencyprocessors.ViewNotFoundException;\n import de.dagere.peass.vcs.GitUtils;\n \n public class TraceViewGenerator {\n-   \n-   private static final Logger LOG = LogManager.getLogger(TraceViewGenerator.class);\n+\n+\tprivate static final Logger LOG = LogManager.getLogger(TraceViewGenerator.class);\n    \n    private final DependencyManager dependencyManager;\n-   private final PeASSFolders folders;\n+private final PeASSFolders folders;\n    private final String version;\n    private final TraceFileMapping traceFileMapping;\n-   \n-   public TraceViewGenerator(final DependencyManager dependencyManager, final PeASSFolders folders, final String version, final TraceFileMapping mapping) {\n-      this.dependencyManager = dependencyManager;\n+\n+public TraceViewGenerator(final DependencyManager dependencyManager, final PeASSFolders folders, final String version, final TraceFileMapping mapping) {\n+\tthis.dependencyManager = dependencyManager;\n       this.folders = folders;\n       this.version = version;\n       this.traceFileMapping = mapping;\n-   }\n+\t}\n \n    public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n-      LOG.debug(\"Generating views for {}\", version);\n+\tLOG.debug(\"Generating views for {}\", version);\n       boolean allWorked = true;\n       GitUtils.reset(folders.getProjectFolder());\n       ProjectModules modules = dependencyManager.getExecutor().getModules();\n       ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), modules);\n       List<File> classpathFolders = getClasspathFolders(modules);\n       for (TestCase testcase : examinedTests.getTests()) {\n-         final File moduleFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n-         final OneTraceGenerator oneViewGenerator = new OneTraceGenerator(resultsFolders, folders, testcase, traceFileMapping, version, moduleFolder,\n-               classpathFolders, mapping);\n-          final boolean workedLocal = oneViewGenerator.generateTrace(version);\n+\tfinal File moduleFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n+         final OneTraceGenerator oneViewGenerator = new OneTraceGenerator(resultsFolders, folders, testcase, traceFileMapping, version, moduleFolder, classpathFolders, mapping);\n+final boolean workedLocal = oneViewGenerator.generateTrace(version);\n           allWorked &= workedLocal;\n-      }\n+\t}\n       return allWorked;\n-   }\n-   \n-   private List<File> getClasspathFolders(final ProjectModules modules) {\n+\t}\n+\n+private List<File> getClasspathFolders(final ProjectModules modules) {\n       final List<File> files = new LinkedList<>();\n       for (int i = 0; i < modules.getModules().size(); i++) {\n-         final File module = modules.getModules().get(i);\n+\tfinal File module = modules.getModules().get(i);\n          for (int folderIndex = 0; folderIndex < ChangedEntity.potentialClassFolders.length; folderIndex++) {\n-            final String path = ChangedEntity.potentialClassFolders[folderIndex];\n+\tfinal String path = ChangedEntity.potentialClassFolders[folderIndex];\n             files.add(new File(module, path));\n-         }\n-      }\n+\t}\n+\t}\n       return files;\n-   }\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/codebuff/66/TraceViewGenerator.java\nindex ad046c932eb..84724b0740a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/codebuff/66/TraceViewGenerator.java\n@@ -4,13 +4,10 @@ import java.io.File;\n import java.io.IOException;\n import java.util.LinkedList;\n import java.util.List;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n-\n import com.github.javaparser.ParseException;\n-\n import de.dagere.peass.dependency.DependencyManager;\n import de.dagere.peass.dependency.PeASSFolders;\n import de.dagere.peass.dependency.ResultsFolders;\n@@ -25,48 +22,48 @@ import de.dagere.peass.dependency.traces.TraceFileMapping;\n import de.dagere.peass.dependencyprocessors.ViewNotFoundException;\n import de.dagere.peass.vcs.GitUtils;\n \n+\n public class TraceViewGenerator {\n-   \n-   private static final Logger LOG = LogManager.getLogger(TraceViewGenerator.class);\n-   \n-   private final DependencyManager dependencyManager;\n-   private final PeASSFolders folders;\n-   private final String version;\n-   private final TraceFileMapping traceFileMapping;\n-   \n-   public TraceViewGenerator(final DependencyManager dependencyManager, final PeASSFolders folders, final String version, final TraceFileMapping mapping) {\n-      this.dependencyManager = dependencyManager;\n-      this.folders = folders;\n-      this.version = version;\n-      this.traceFileMapping = mapping;\n-   }\n+ private static final Logger LOG = LogManager.getLogger(TraceViewGenerator.class);\n+ private final DependencyManager dependencyManager;\n+ private final PeASSFolders folders;\n+ private final String version;\n+ private final TraceFileMapping traceFileMapping;\n \n-   public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n-      LOG.debug(\"Generating views for {}\", version);\n-      boolean allWorked = true;\n-      GitUtils.reset(folders.getProjectFolder());\n-      ProjectModules modules = dependencyManager.getExecutor().getModules();\n-      ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), modules);\n-      List<File> classpathFolders = getClasspathFolders(modules);\n-      for (TestCase testcase : examinedTests.getTests()) {\n-         final File moduleFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n-         final OneTraceGenerator oneViewGenerator = new OneTraceGenerator(resultsFolders, folders, testcase, traceFileMapping, version, moduleFolder,\n-               classpathFolders, mapping);\n-          final boolean workedLocal = oneViewGenerator.generateTrace(version);\n-          allWorked &= workedLocal;\n-      }\n-      return allWorked;\n-   }\n-   \n-   private List<File> getClasspathFolders(final ProjectModules modules) {\n-      final List<File> files = new LinkedList<>();\n-      for (int i = 0; i < modules.getModules().size(); i++) {\n-         final File module = modules.getModules().get(i);\n-         for (int folderIndex = 0; folderIndex < ChangedEntity.potentialClassFolders.length; folderIndex++) {\n-            final String path = ChangedEntity.potentialClassFolders[folderIndex];\n-            files.add(new File(module, path));\n-         }\n-      }\n-      return files;\n+ public TraceViewGenerator(final DependencyManager dependencyManager, final PeASSFolders folders, final String version, final TraceFileMapping mapping) {\n+  this.dependencyManager = dependencyManager;\n+  this.folders = folders;\n+  this.version = version;\n+  this.traceFileMapping = mapping;\n+ }\n+\n+\n+ public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n+  LOG.debug(\"Generating views for {}\", version);\n+  boolean allWorked = true;\n+  GitUtils.reset(folders.getProjectFolder());\n+\n+  ProjectModules modules = dependencyManager.getExecutor().getModules();\n+  ModuleClassMapping mapping = new ModuleClassMapping(folders.getProjectFolder(), modules);\n+  List<File> classpathFolders = getClasspathFolders(modules);\n+  for (TestCase testcase : examinedTests.getTests()) {\n+   final File moduleFolder = KiekerFolderUtil.getModuleResultFolder(folders, testcase);\n+   final OneTraceGenerator oneViewGenerator = new OneTraceGenerator(resultsFolders, folders, testcase, traceFileMapping, version, moduleFolder, classpathFolders, mapping);\n+   final boolean workedLocal = oneViewGenerator.generateTrace(version);\n+   allWorked &= workedLocal;\n+  }\n+  return allWorked;\n+ }\n+\n+ private List<File> getClasspathFolders(final ProjectModules modules) {\n+  final List<File> files = new LinkedList<>();\n+  for (int i = 0; i < modules.getModules().size(); i++) {\n+   final File module = modules.getModules().get(i);\n+   for (int folderIndex = 0; folderIndex < ChangedEntity.potentialClassFolders.length; folderIndex++) {\n+    final String path = ChangedEntity.potentialClassFolders[folderIndex];\n+    files.add(new File(module, path));\n    }\n-}\n+  }\n+  return files;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 54
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/styler/05_predictions/three_grams/files-repaired/66/TraceViewGenerator.java\nindex ad046c932eb..b63cf73cb76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/66/TraceViewGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/styler/05_predictions/three_grams/files-repaired/66/TraceViewGenerator.java\n@@ -39,9 +39,7 @@ public class TraceViewGenerator {\n       this.folders = folders;\n       this.version = version;\n       this.traceFileMapping = mapping;\n-   }\n-\n-   public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n+   } public boolean generateViews(final ResultsFolders resultsFolders, final TestSet examinedTests) throws IOException, XmlPullParserException, ParseException, ViewNotFoundException, InterruptedException {\n       LOG.debug(\"Generating views for {}\", version);\n       boolean allWorked = true;\n       GitUtils.reset(folders.getProjectFolder());\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}