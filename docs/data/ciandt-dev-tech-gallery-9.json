{
    "project_name": "ciandt-dev-tech-gallery",
    "violation_id": "9",
    "information": {
        "violations": [
            {
                "line": "60",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * You must supply resource and dynamicData fields.\n   */\n  public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule, String reason, String ... to) {\n    \n    this.to = to;\n    this.subject = subject;",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/ciandt-dev-tech-gallery/styler/05_predictions/final/files-repaired/9/EmailConfig.java\nindex 8706c35ca2b..7513fb2e061 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/ciandt-dev-tech-gallery/styler/05_predictions/final/files-repaired/9/EmailConfig.java\n@@ -58,7 +58,7 @@ public class EmailConfig {\n    * You must supply resource and dynamicData fields.\n    */\n   public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule, String reason, String ... to) {\n-    \n+\n     this.to = to;\n     this.subject = subject;\n     this.rule = rule;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/checkstyle_idea/9/EmailConfig.java\nindex 8706c35ca2b..a90674550f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/checkstyle_idea/9/EmailConfig.java\n@@ -10,41 +10,41 @@ import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n /**\n- * Email configuration object. \n- * \n- * @author bcarneiro\n+ * Email configuration object.\n  *\n+ * @author bcarneiro\n  */\n public class EmailConfig {\n \n   private String[] to;\n-  \n+\n   private String subject;\n \n   private String body;\n-  \n+\n   private String transferId;\n \n   private String rule;\n \n   private String reason;\n-  \n+\n   private String resource;\n-  \n+\n   /**\n-   * Variable and value to be replaced in template. \n+   * Variable and value to be replaced in template.\n    */\n   private Map<String, String> dynamicData;\n \n-  public EmailConfig(){}\n-  \n-  \n+  public EmailConfig() {\n+  }\n+\n+\n   /**\n    * Default constructor if email does not use template email feature.\n    */\n   public EmailConfig(String subject, String body, String transferId, String rule,\n-      String reason, String ... to) {\n-    \n+                     String reason, String... to) {\n+\n     this.to = to;\n     this.subject = subject;\n     this.body = body;\n@@ -57,8 +57,9 @@ public class EmailConfig {\n    * Default constructor if email use template email feature.\n    * You must supply resource and dynamicData fields.\n    */\n-  public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule, String reason, String ... to) {\n-    \n+  public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule,\n+                     String reason, String... to) {\n+\n     this.to = to;\n     this.subject = subject;\n     this.rule = rule;\n@@ -75,7 +76,7 @@ public class EmailConfig {\n     return to;\n   }\n \n-  public EmailConfig to(String ... to) {\n+  public EmailConfig to(String... to) {\n     this.to = to;\n     return this;\n   }\n@@ -132,9 +133,9 @@ public class EmailConfig {\n   /**\n    * Adds variable and value to be overwritten\n    * in the resource content.\n-   *  \n-   * @param variable - variable in the resource including prefixes \n-   * @param value - value to be overwritten\n+   *\n+   * @param variable - variable in the resource including prefixes\n+   * @param value    - value to be overwritten\n    * @return dynamic map to be used inline.\n    */\n   public Map<String, String> putVariableAndValue(String variable, String value) {\n@@ -144,7 +145,7 @@ public class EmailConfig {\n     dynamicData.put(variable, value);\n     return dynamicData;\n   }\n-  \n+\n   public EmailConfig setDynamicData(Map<String, String> dynamicData) {\n     this.dynamicData = dynamicData;\n     return this;\n@@ -157,22 +158,22 @@ public class EmailConfig {\n   public void resource(String resource) {\n     this.resource = resource;\n   }\n-  \n+\n   /**\n    * Must be called if email is a template email.\n    * Resource and dynamic data must not be null.\n    */\n   public void processTemplate() {\n-    \n+\n     if (resource != null) {\n       try {\n-        String bodyTemplate = \n+        String bodyTemplate =\n             IOUtils.toString(Thread.currentThread()\n                 .getContextClassLoader()\n                 .getResourceAsStream(resource), \"UTF-8\");\n-        \n+\n         if (bodyTemplate != null && dynamicData != null && !dynamicData.isEmpty()) {\n-          \n+\n           for (Entry<String, String> keyValue : dynamicData.entrySet()) {\n             String value = keyValue.getValue();\n             bodyTemplate =\n@@ -181,11 +182,11 @@ public class EmailConfig {\n           }\n         }\n         this.body = bodyTemplate;\n-        \n+\n       } catch (IOException io) {\n         throw new RuntimeException(\"Could not find resource file\");\n       }\n-    }   \n+    }\n   }\n-  \n+\n }\n",
            "diff_size": 31
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "28",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "'ctor def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "163",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 2, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 2, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "'for rcurly' has incorrect indentation level 2, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'catch' child has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/naturalize/9/EmailConfig.java\nindex 8706c35ca2b..23d957bc490 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/naturalize/9/EmailConfig.java\n@@ -21,11 +21,11 @@ public class EmailConfig {\n   \n   private String subject;\n \n-  private String body;\n+private String body;\n   \n   private String transferId;\n \n-  private String rule;\n+private String rule;\n \n   private String reason;\n   \n@@ -34,19 +34,17 @@ public class EmailConfig {\n   /**\n    * Variable and value to be replaced in template. \n    */\n-  private Map<String, String> dynamicData;\n+private Map<String, String> dynamicData;\n \n-  public EmailConfig(){}\n-  \n-  \n-  /**\n+  public EmailConfig() {}\n+\n+/**\n    * Default constructor if email does not use template email feature.\n    */\n-  public EmailConfig(String subject, String body, String transferId, String rule,\n+public EmailConfig(String subject, String body, String transferId, String rule,\n       String reason, String ... to) {\n-    \n-    this.to = to;\n-    this.subject = subject;\n+  this.to = to;\n+this.subject = subject;\n     this.body = body;\n     this.transferId = transferId;\n     this.rule = rule;\n@@ -58,9 +56,8 @@ public class EmailConfig {\n    * You must supply resource and dynamicData fields.\n    */\n   public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule, String reason, String ... to) {\n-    \n-    this.to = to;\n-    this.subject = subject;\n+  this.to = to;\n+this.subject = subject;\n     this.rule = rule;\n     this.reason = reason;\n     this.resource = resource;\n@@ -163,29 +160,25 @@ public class EmailConfig {\n    * Resource and dynamic data must not be null.\n    */\n   public void processTemplate() {\n-    \n-    if (resource != null) {\n+  if (resource != null) {\n       try {\n-        String bodyTemplate = \n-            IOUtils.toString(Thread.currentThread()\n-                .getContextClassLoader()\n+        String bodyTemplate = IOUtils.toString(Thread.currentThread().getContextClassLoader()\n                 .getResourceAsStream(resource), \"UTF-8\");\n         \n         if (bodyTemplate != null && dynamicData != null && !dynamicData.isEmpty()) {\n-          \n-          for (Entry<String, String> keyValue : dynamicData.entrySet()) {\n-            String value = keyValue.getValue();\n+  for (Entry<String, String> keyValue : dynamicData.entrySet()) {\n+  String value = keyValue.getValue();\n             bodyTemplate =\n                 bodyTemplate.replaceAll(Pattern.quote(keyValue.getKey()).toString(),\n                     value == null ? \"\" : Matcher.quoteReplacement(value));\n-          }\n+  }\n         }\n         this.body = bodyTemplate;\n-        \n-      } catch (IOException io) {\n-        throw new RuntimeException(\"Could not find resource file\");\n+  } catch (IOException io) {\n+  throw new RuntimeException(\"Could not find resource file\");\n       }\n-    }   \n+    }\n+\n   }\n-  \n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "'String' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "'\"UTF-8\"' has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/codebuff/9/EmailConfig.java\nindex 8706c35ca2b..93eedfa840f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/codebuff/9/EmailConfig.java\n@@ -1,7 +1,6 @@\n package com.ciandt.techgallery.service.email;\n \n import org.apache.commons.io.IOUtils;\n-\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n@@ -15,36 +14,39 @@ import java.util.regex.Pattern;\n  * @author bcarneiro\n  *\n  */\n+\n+\n public class EmailConfig {\n \n   private String[] to;\n-  \n+\n   private String subject;\n \n   private String body;\n-  \n+\n   private String transferId;\n \n   private String rule;\n \n   private String reason;\n-  \n+\n   private String resource;\n   \n   /**\n    * Variable and value to be replaced in template. \n    */\n+\n   private Map<String, String> dynamicData;\n \n-  public EmailConfig(){}\n+\n+  public EmailConfig() {}\n   \n   \n   /**\n    * Default constructor if email does not use template email feature.\n    */\n-  public EmailConfig(String subject, String body, String transferId, String rule,\n-      String reason, String ... to) {\n-    \n+\n+  public EmailConfig(String subject, String body, String transferId, String rule, String reason, String... to) {\n     this.to = to;\n     this.subject = subject;\n     this.body = body;\n@@ -57,8 +59,12 @@ public class EmailConfig {\n    * Default constructor if email use template email feature.\n    * You must supply resource and dynamicData fields.\n    */\n-  public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule, String reason, String ... to) {\n-    \n+\n+  public EmailConfig(String subject,\n+    String resource,\n+      Map<String, String> dynamicData,\n+        String rule,\n+          String reason, String... to) {\n     this.to = to;\n     this.subject = subject;\n     this.rule = rule;\n@@ -75,7 +81,7 @@ public class EmailConfig {\n     return to;\n   }\n \n-  public EmailConfig to(String ... to) {\n+  public EmailConfig to(String... to) {\n     this.to = to;\n     return this;\n   }\n@@ -137,6 +143,7 @@ public class EmailConfig {\n    * @param value - value to be overwritten\n    * @return dynamic map to be used inline.\n    */\n+\n   public Map<String, String> putVariableAndValue(String variable, String value) {\n     if (dynamicData == null) {\n       dynamicData = new HashMap<String, String>();\n@@ -144,7 +151,7 @@ public class EmailConfig {\n     dynamicData.put(variable, value);\n     return dynamicData;\n   }\n-  \n+\n   public EmailConfig setDynamicData(Map<String, String> dynamicData) {\n     this.dynamicData = dynamicData;\n     return this;\n@@ -162,30 +169,25 @@ public class EmailConfig {\n    * Must be called if email is a template email.\n    * Resource and dynamic data must not be null.\n    */\n+\n   public void processTemplate() {\n-    \n     if (resource != null) {\n       try {\n-        String bodyTemplate = \n-            IOUtils.toString(Thread.currentThread()\n-                .getContextClassLoader()\n-                .getResourceAsStream(resource), \"UTF-8\");\n-        \n+        String bodyTemplate = IOUtils.toString(Thread.currentThread().getContextClassLoader().getResourceAsStream(resource),\n+          \"UTF-8\");\n         if (bodyTemplate != null && dynamicData != null && !dynamicData.isEmpty()) {\n-          \n           for (Entry<String, String> keyValue : dynamicData.entrySet()) {\n             String value = keyValue.getValue();\n-            bodyTemplate =\n-                bodyTemplate.replaceAll(Pattern.quote(keyValue.getKey()).toString(),\n-                    value == null ? \"\" : Matcher.quoteReplacement(value));\n+            bodyTemplate = bodyTemplate.replaceAll(Pattern.quote(keyValue.getKey()).toString(),\n+              value == null ? \"\" : Matcher.quoteReplacement(value));\n           }\n         }\n         this.body = bodyTemplate;\n-        \n       } catch (IOException io) {\n         throw new RuntimeException(\"Could not find resource file\");\n+\n       }\n-    }   \n+    }\n   }\n-  \n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/styler/05_predictions/random/files-repaired/9/EmailConfig.java\nindex 8706c35ca2b..7513fb2e061 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/styler/05_predictions/random/files-repaired/9/EmailConfig.java\n@@ -58,7 +58,7 @@ public class EmailConfig {\n    * You must supply resource and dynamicData fields.\n    */\n   public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule, String reason, String ... to) {\n-    \n+\n     this.to = to;\n     this.subject = subject;\n     this.rule = rule;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "60",
                    "column": "58",
                    "severity": "warning",
                    "message": "GenericWhitespace '<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'dynamicData' has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 5, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/styler/05_predictions/three_grams/files-repaired/9/EmailConfig.java\nindex 8706c35ca2b..72009d89ac2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/violations/9/EmailConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ciandt-dev-tech-gallery/styler/05_predictions/three_grams/files-repaired/9/EmailConfig.java\n@@ -57,9 +57,10 @@ public class EmailConfig {\n    * Default constructor if email use template email feature.\n    * You must supply resource and dynamicData fields.\n    */\n-  public EmailConfig(String subject, String resource, Map<String, String> dynamicData, String rule, String reason, String ... to) {\n-    \n-    this.to = to;\n+  public EmailConfig(String subject, String resource, Map <String , String>\n+  dynamicData, String rule, String reason, String ... to) {\n+\n+     this.to = to;\n     this.subject = subject;\n     this.rule = rule;\n     this.reason = reason;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}