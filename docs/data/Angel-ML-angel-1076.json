{
    "project_name": "Angel-ML-angel",
    "violation_id": "1076",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1076/PartUpdateRowsParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1076/PartUpdateRowsParam.java\nindex 52576e5c98c..4e0bfca04f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1076/PartUpdateRowsParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1076/PartUpdateRowsParam.java\n@@ -30,63 +30,63 @@ import java.util.List;\n \n public class PartUpdateRowsParam extends PartitionUpdateParam {\n \n-  private List<RowUpdateSplit> updates;\n+    private List<RowUpdateSplit> updates;\n \n-  public PartUpdateRowsParam(int matrixId, PartitionKey part, List<RowUpdateSplit> updates) {\n-    super(matrixId, part);\n-    this.updates = updates;\n-  }\n+    public PartUpdateRowsParam(int matrixId, PartitionKey part, List<RowUpdateSplit> updates) {\n+        super(matrixId, part);\n+        this.updates = updates;\n+    }\n \n-  public PartUpdateRowsParam() {\n-    this(-1, null, null);\n-  }\n+    public PartUpdateRowsParam() {\n+        this(-1, null, null);\n+    }\n \n-  public List<RowUpdateSplit> getUpdates() {\n-    return updates;\n-  }\n+    public List<RowUpdateSplit> getUpdates() {\n+        return updates;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    int size = updates.size();\n-    buf.writeInt(size);\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        int size = updates.size();\n+        buf.writeInt(size);\n \n-    RowUpdateSplitContext context = new RowUpdateSplitContext();\n-    context.setEnableFilter(false);\n-    context.setPartKey(getPartKey());\n+        RowUpdateSplitContext context = new RowUpdateSplitContext();\n+        context.setEnableFilter(false);\n+        context.setPartKey(getPartKey());\n \n-    for (int i = 0; i < size; i++) {\n-      buf.writeInt(updates.get(i).getRowType().getNumber());\n-      updates.get(i).setSplitContext(context);\n-      updates.get(i).serialize(buf);\n+        for (int i = 0; i < size; i++) {\n+            buf.writeInt(updates.get(i).getRowType().getNumber());\n+            updates.get(i).setSplitContext(context);\n+            updates.get(i).serialize(buf);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    int size = buf.readInt();\n-    updates = new ArrayList<>(size);\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        int size = buf.readInt();\n+        updates = new ArrayList<>(size);\n \n-    RowUpdateSplitContext context = new RowUpdateSplitContext();\n-    context.setPartKey(getPartKey());\n-    for (int i = 0; i < size; i++) {\n-      RowUpdateSplit split = RowUpdateSplitFactory.get(RowType.valueOf(buf.readInt()));\n-      split.setSplitContext(context);\n-      split.deserialize(buf);\n-      updates.add(split);\n+        RowUpdateSplitContext context = new RowUpdateSplitContext();\n+        context.setPartKey(getPartKey());\n+        for (int i = 0; i < size; i++) {\n+            RowUpdateSplit split = RowUpdateSplitFactory.get(RowType.valueOf(buf.readInt()));\n+            split.setSplitContext(context);\n+            split.deserialize(buf);\n+            updates.add(split);\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = super.bufferLen();\n-    len += 4;\n-    int size = updates.size();\n-    for (int i = 0; i < size; i++) {\n-      len += 4;\n-      len += updates.get(i).bufferLen();\n+    @Override\n+    public int bufferLen() {\n+        int len = super.bufferLen();\n+        len += 4;\n+        int size = updates.size();\n+        for (int i = 0; i < size; i++) {\n+            len += 4;\n+            len += updates.get(i).bufferLen();\n+        }\n+        return len;\n     }\n-    return len;\n-  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1076/PartUpdateRowsParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1076/PartUpdateRowsParam.java\nindex 52576e5c98c..e12dff4556a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1076/PartUpdateRowsParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1076/PartUpdateRowsParam.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.matrix.psf.update.update;\n \n import com.tencent.angel.PartitionKey;\n@@ -89,4 +88,4 @@ public class PartUpdateRowsParam extends PartitionUpdateParam {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1076/PartUpdateRowsParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1076/PartUpdateRowsParam.java\nindex 52576e5c98c..23b49e01e0f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1076/PartUpdateRowsParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1076/PartUpdateRowsParam.java\n@@ -48,13 +48,12 @@ public class PartUpdateRowsParam extends PartitionUpdateParam {\n   @Override\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n+\n     int size = updates.size();\n     buf.writeInt(size);\n-\n     RowUpdateSplitContext context = new RowUpdateSplitContext();\n     context.setEnableFilter(false);\n     context.setPartKey(getPartKey());\n-\n     for (int i = 0; i < size; i++) {\n       buf.writeInt(updates.get(i).getRowType().getNumber());\n       updates.get(i).setSplitContext(context);\n@@ -65,9 +64,9 @@ public class PartUpdateRowsParam extends PartitionUpdateParam {\n   @Override\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n+\n     int size = buf.readInt();\n     updates = new ArrayList<>(size);\n-\n     RowUpdateSplitContext context = new RowUpdateSplitContext();\n     context.setPartKey(getPartKey());\n     for (int i = 0; i < size; i++) {\n@@ -82,6 +81,7 @@ public class PartUpdateRowsParam extends PartitionUpdateParam {\n   public int bufferLen() {\n     int len = super.bufferLen();\n     len += 4;\n+\n     int size = updates.size();\n     for (int i = 0; i < size; i++) {\n       len += 4;\n@@ -89,4 +89,5 @@ public class PartUpdateRowsParam extends PartitionUpdateParam {\n     }\n     return len;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}