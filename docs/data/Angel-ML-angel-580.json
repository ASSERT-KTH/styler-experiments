{
    "project_name": "Angel-ML-angel",
    "violation_id": "580",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/580/BasicTypePipelineOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/580/BasicTypePipelineOp.java\nindex d0045107f1d..282f8f002b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/580/BasicTypePipelineOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/580/BasicTypePipelineOp.java\n@@ -27,14 +27,14 @@ import io.netty.buffer.ByteBuf;\n  */\n public interface BasicTypePipelineOp {\n \n-  /**\n-   * Get data use indices from storage\n-   *\n-   * @param keyType index type: int or long\n-   * @param indexSize index number\n-   * @param in input buffer that stored un-deserialized indices\n-   * @param out output buffer\n-   * @param func element init function, if not null, the element will be initialized by func\n-   */\n-  void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func);\n+    /**\n+     * Get data use indices from storage\n+     *\n+     * @param keyType   index type: int or long\n+     * @param indexSize index number\n+     * @param in        input buffer that stored un-deserialized indices\n+     * @param out       output buffer\n+     * @param func      element init function, if not null, the element will be initialized by func\n+     */\n+    void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func);\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/580/BasicTypePipelineOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/580/BasicTypePipelineOp.java\nindex d0045107f1d..1feb1fe7ed9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/580/BasicTypePipelineOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/580/BasicTypePipelineOp.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector.op;\n \n import com.tencent.angel.ps.server.data.request.InitFunc;\n@@ -37,4 +36,4 @@ public interface BasicTypePipelineOp {\n    * @param func element init function, if not null, the element will be initialized by func\n    */\n   void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/580/BasicTypePipelineOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/580/BasicTypePipelineOp.java\nindex d0045107f1d..bc60bbc066b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/580/BasicTypePipelineOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/580/BasicTypePipelineOp.java\n@@ -25,6 +25,8 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Pipeline operation interface for basic data type\n  */\n+\n+\n public interface BasicTypePipelineOp {\n \n   /**\n@@ -36,5 +38,6 @@ public interface BasicTypePipelineOp {\n    * @param out output buffer\n    * @param func element init function, if not null, the element will be initialized by func\n    */\n-  void indexGet(KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func);\n-}\n+  void indexGet(\n+    KeyType keyType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func);\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}