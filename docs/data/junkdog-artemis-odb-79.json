{
    "project_name": "junkdog-artemis-odb",
    "violation_id": "79",
    "information": {
        "violations": [
            {
                "line": "93",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 178).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        Set<Method> result = allPublicMethods.get(type);\n        if (result == null) {\n            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n            allPublicMethods.put(type, result);\n        }\n        return result;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/79/ExtendedTypeReflection.java\nindex e9c7ecaadd2..3dc9c34fc30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/79/ExtendedTypeReflection.java\n@@ -90,7 +90,9 @@ public abstract class ExtendedTypeReflection {\n     public static Set<Method> getAllPublicMethods(Class type) {\n         Set<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+        result=getAllMethods( type , withModifier (Modifier.PUBLIC),withoutModifier(Modifier.ABSTRACT)\n+        ,withoutModifier(Modifier.STATIC ),withoutModifier(Modifier\n+        .VOLATILE));\n             allPublicMethods.put(type, result);\n         }\n         return result;\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/79/ExtendedTypeReflection.java\nindex e9c7ecaadd2..76413c0715b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/79/ExtendedTypeReflection.java\n@@ -18,90 +18,95 @@ import static org.reflections.ReflectionUtils.*;\n  */\n public abstract class ExtendedTypeReflection {\n \n-    private static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n-    private static Map<Type, Set<Method>> allPublicMethods = new HashMap<Type, Set<Method>>();\n-    private static Map<Type, List<Annotation>> allAnnotations = new HashMap<Type, List<Annotation>>();\n+  private static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n+  private static Map<Type, Set<Method>> allPublicMethods = new HashMap<Type, Set<Method>>();\n+  private static Map<Type, List<Annotation>> allAnnotations = new HashMap<Type, List<Annotation>>();\n \n-    /**\n-     * Get if component is a flag component.\n-     *\n-     * @return {@code true} is simple flag, {@code false} if it is a data container.\n-     */\n-    public static boolean isFlagComponent(Class type) {\n-        return getAllPublicFields(type).isEmpty() &&\n-                getAllPublicMethods(type).isEmpty();\n-    }\n+  /**\n+   * Get if component is a flag component.\n+   *\n+   * @return {@code true} is simple flag, {@code false} if it is a data container.\n+   */\n+  public static boolean isFlagComponent(Class type) {\n+    return getAllPublicFields(type).isEmpty() &&\n+        getAllPublicMethods(type).isEmpty();\n+  }\n \n-    /**\n-     * Get all public fields of this type, cached.\n-     * <p>\n-     * Excludes static.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Field> getAllPublicFields(Class type) {\n-        Set<Field> result = allPublicFields.get(type);\n-        if (result == null) {\n-            result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n-            allPublicFields.put(type, result);\n-        }\n-        return result;\n+  /**\n+   * Get all public fields of this type, cached.\n+   * <p>\n+   * Excludes static.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static Set<Field> getAllPublicFields(Class type) {\n+    Set<Field> result = allPublicFields.get(type);\n+    if (result == null) {\n+      result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n+      allPublicFields.put(type, result);\n     }\n+    return result;\n+  }\n \n-    /**\n-     * Get all public annotations of type, throughout the hierarchy!\n-     * Ordered from superclass to subclass.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static List<Annotation> getAllAnnotations(Class type) {\n-        List<Annotation> result = allAnnotations.get(type);\n-        if (result == null) {\n-            result = getAllAnnotationsList(type);\n-            allAnnotations.put(type, result);\n-        }\n-        return result;\n+  /**\n+   * Get all public annotations of type, throughout the hierarchy!\n+   * Ordered from superclass to subclass.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static List<Annotation> getAllAnnotations(Class type) {\n+    List<Annotation> result = allAnnotations.get(type);\n+    if (result == null) {\n+      result = getAllAnnotationsList(type);\n+      allAnnotations.put(type, result);\n     }\n+    return result;\n+  }\n \n-    /** Returns all annotations on hierarchy. Ignores Object and interfaces. */\n-    public static List<Annotation> getAllAnnotationsList(Class type) {\n-        ArrayList<Annotation> result = new ArrayList<Annotation>(4);\n-        for (Class t : getHierarchy(type)) {\n-            result.addAll(ReflectionUtils.getAnnotations(t));\n-        }\n-        return result;\n+  /**\n+   * Returns all annotations on hierarchy. Ignores Object and interfaces.\n+   */\n+  public static List<Annotation> getAllAnnotationsList(Class type) {\n+    ArrayList<Annotation> result = new ArrayList<Annotation>(4);\n+    for (Class t : getHierarchy(type)) {\n+      result.addAll(ReflectionUtils.getAnnotations(t));\n     }\n+    return result;\n+  }\n \n-    /** Return class hierarchy, except object. */\n-    private static List<Class> getHierarchy(Class type) {\n-        ArrayList<Class> results = new ArrayList<Class>();\n-        while (type != Object.class && !type.isInterface()) {\n-            results.add(type);\n-            type = type.getSuperclass();\n-        }\n-        return Lists.reverse(results);\n+  /**\n+   * Return class hierarchy, except object.\n+   */\n+  private static List<Class> getHierarchy(Class type) {\n+    ArrayList<Class> results = new ArrayList<Class>();\n+    while (type != Object.class && !type.isInterface()) {\n+      results.add(type);\n+      type = type.getSuperclass();\n     }\n+    return Lists.reverse(results);\n+  }\n \n \n-    /**\n-     * Get all public methods of type, cached.\n-     * <p>\n-     * Excludes static, abstract.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Method> getAllPublicMethods(Class type) {\n-        Set<Method> result = allPublicMethods.get(type);\n-        if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n-            allPublicMethods.put(type, result);\n-        }\n-        return result;\n+  /**\n+   * Get all public methods of type, cached.\n+   * <p>\n+   * Excludes static, abstract.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static Set<Method> getAllPublicMethods(Class type) {\n+    Set<Method> result = allPublicMethods.get(type);\n+    if (result == null) {\n+      result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT),\n+          withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+      allPublicMethods.put(type, result);\n     }\n+    return result;\n+  }\n \n-    public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n-        return new Predicate<T>() {\n-            public boolean apply(@Nullable T input) {\n-                return input != null && (input.getModifiers() & mod) == 0;\n-            }\n-        };\n-    }\n+  public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n+    return new Predicate<T>() {\n+      public boolean apply(@Nullable T input) {\n+        return input != null && (input.getModifiers() & mod) == 0;\n+      }\n+    };\n+  }\n \n }\n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/79/ExtendedTypeReflection.java\nindex e9c7ecaadd2..c11be508357 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/79/ExtendedTypeReflection.java\n@@ -17,8 +17,7 @@ import static org.reflections.ReflectionUtils.*;\n  * @author Daan van Yperen\n  */\n public abstract class ExtendedTypeReflection {\n-\n-    private static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n+\tprivate static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n     private static Map<Type, Set<Method>> allPublicMethods = new HashMap<Type, Set<Method>>();\n     private static Map<Type, List<Annotation>> allAnnotations = new HashMap<Type, List<Annotation>>();\n \n@@ -28,9 +27,9 @@ public abstract class ExtendedTypeReflection {\n      * @return {@code true} is simple flag, {@code false} if it is a data container.\n      */\n     public static boolean isFlagComponent(Class type) {\n-        return getAllPublicFields(type).isEmpty() &&\n-                getAllPublicMethods(type).isEmpty();\n-    }\n+\treturn getAllPublicFields(type).isEmpty() &&\n+getAllPublicMethods(type).isEmpty();\n+\t}\n \n     /**\n      * Get all public fields of this type, cached.\n@@ -39,13 +38,13 @@ public abstract class ExtendedTypeReflection {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static Set<Field> getAllPublicFields(Class type) {\n-        Set<Field> result = allPublicFields.get(type);\n+\tSet<Field> result = allPublicFields.get(type);\n         if (result == null) {\n             result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n             allPublicFields.put(type, result);\n-        }\n+\t}\n         return result;\n-    }\n+\t}\n \n     /**\n      * Get all public annotations of type, throughout the hierarchy!\n@@ -53,30 +52,30 @@ public abstract class ExtendedTypeReflection {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static List<Annotation> getAllAnnotations(Class type) {\n-        List<Annotation> result = allAnnotations.get(type);\n+\tList<Annotation> result = allAnnotations.get(type);\n         if (result == null) {\n             result = getAllAnnotationsList(type);\n             allAnnotations.put(type, result);\n-        }\n+\t}\n         return result;\n-    }\n+\t}\n \n     /** Returns all annotations on hierarchy. Ignores Object and interfaces. */\n     public static List<Annotation> getAllAnnotationsList(Class type) {\n-        ArrayList<Annotation> result = new ArrayList<Annotation>(4);\n+\tArrayList<Annotation> result = new ArrayList<Annotation>(4);\n         for (Class t : getHierarchy(type)) {\n             result.addAll(ReflectionUtils.getAnnotations(t));\n-        }\n+\t}\n         return result;\n-    }\n+\t}\n \n     /** Return class hierarchy, except object. */\n     private static List<Class> getHierarchy(Class type) {\n-        ArrayList<Class> results = new ArrayList<Class>();\n+\tArrayList<Class> results = new ArrayList<Class>();\n         while (type != Object.class && !type.isInterface()) {\n             results.add(type);\n             type = type.getSuperclass();\n-        }\n+\t}\n         return Lists.reverse(results);\n     }\n \n@@ -88,20 +87,20 @@ public abstract class ExtendedTypeReflection {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static Set<Method> getAllPublicMethods(Class type) {\n-        Set<Method> result = allPublicMethods.get(type);\n+\tSet<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n             result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n             allPublicMethods.put(type, result);\n-        }\n+\t}\n         return result;\n-    }\n+\t}\n \n     public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n-        return new Predicate<T>() {\n-            public boolean apply(@Nullable T input) {\n-                return input != null && (input.getModifiers() & mod) == 0;\n+\treturn new Predicate<T>() {\n+\tpublic boolean apply(@Nullable T input) {\n+\treturn input != null && (input.getModifiers() & mod) == 0;\n             }\n         };\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/79/ExtendedTypeReflection.java\nindex e9c7ecaadd2..df3f9ea9b1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/79/ExtendedTypeReflection.java\n@@ -3,82 +3,93 @@ package com.artemis.generator.util;\n import com.google.common.base.Predicate;\n import com.google.common.collect.Lists;\n import org.reflections.ReflectionUtils;\n-\n import javax.annotation.Nullable;\n import java.lang.annotation.Annotation;\n+\n import java.lang.reflect.*;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-import java.util.*;\n \n+import java.util.*;\n import static org.reflections.ReflectionUtils.*;\n \n /**\n  * @author Daan van Yperen\n  */\n+\n public abstract class ExtendedTypeReflection {\n+ private static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n \n-    private static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n-    private static Map<Type, Set<Method>> allPublicMethods = new HashMap<Type, Set<Method>>();\n-    private static Map<Type, List<Annotation>> allAnnotations = new HashMap<Type, List<Annotation>>();\n+ private static Map<Type, Set<Method>> allPublicMethods = new HashMap<Type, Set<Method>>();\n+\n+ private static Map<Type, List<Annotation>> allAnnotations = new HashMap<Type, List<Annotation>>();\n \n     /**\n      * Get if component is a flag component.\n      *\n      * @return {@code true} is simple flag, {@code false} if it is a data container.\n      */\n-    public static boolean isFlagComponent(Class type) {\n-        return getAllPublicFields(type).isEmpty() &&\n-                getAllPublicMethods(type).isEmpty();\n-    }\n+ public static boolean isFlagComponent(Class type) {\n+  return getAllPublicFields(type).isEmpty() &&\n+  getAllPublicMethods(type).isEmpty();\n+ }\n \n     /**\n      * Get all public fields of this type, cached.\n      * <p>\n      * Excludes static.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Field> getAllPublicFields(Class type) {\n-        Set<Field> result = allPublicFields.get(type);\n-        if (result == null) {\n-            result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n-            allPublicFields.put(type, result);\n-        }\n-        return result;\n-    }\n+\n+ @SuppressWarnings(\"unchecked\")\n+ public static Set<Field> getAllPublicFields(Class type) {\n+  Set<Field> result = allPublicFields.get(type);\n+  if (result == null) {\n+   result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n+   allPublicFields.put(type, result);\n+  }\n+\n+  return result;\n+ }\n \n     /**\n      * Get all public annotations of type, throughout the hierarchy!\n      * Ordered from superclass to subclass.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public static List<Annotation> getAllAnnotations(Class type) {\n-        List<Annotation> result = allAnnotations.get(type);\n-        if (result == null) {\n-            result = getAllAnnotationsList(type);\n-            allAnnotations.put(type, result);\n-        }\n-        return result;\n-    }\n+\n+ @SuppressWarnings(\"unchecked\")\n+ public static List<Annotation> getAllAnnotations(Class type) {\n+  List<Annotation> result = allAnnotations.get(type);\n+  if (result == null) {\n+   result = getAllAnnotationsList(type);\n+   allAnnotations.put(type, result);\n+  }\n+\n+  return result;\n+ }\n \n     /** Returns all annotations on hierarchy. Ignores Object and interfaces. */\n-    public static List<Annotation> getAllAnnotationsList(Class type) {\n-        ArrayList<Annotation> result = new ArrayList<Annotation>(4);\n-        for (Class t : getHierarchy(type)) {\n-            result.addAll(ReflectionUtils.getAnnotations(t));\n-        }\n-        return result;\n-    }\n+\n+\n+ public static List<Annotation> getAllAnnotationsList(Class type) {\n+  ArrayList<Annotation> result = new ArrayList<Annotation>(4);\n+  for (Class t : getHierarchy(type)) {\n+   result.addAll(ReflectionUtils.getAnnotations(t));\n+  }\n+\n+  return result;\n+ }\n \n     /** Return class hierarchy, except object. */\n-    private static List<Class> getHierarchy(Class type) {\n-        ArrayList<Class> results = new ArrayList<Class>();\n-        while (type != Object.class && !type.isInterface()) {\n-            results.add(type);\n-            type = type.getSuperclass();\n-        }\n-        return Lists.reverse(results);\n-    }\n+\n+ private static List<Class> getHierarchy(Class type) {\n+  ArrayList<Class> results = new ArrayList<Class>();\n+  while (type != Object.class && !type.isInterface()) {\n+   results.add(type);\n+   type = type.getSuperclass();\n+  }\n+\n+  return Lists.reverse(results);\n+ }\n \n \n     /**\n@@ -86,22 +97,24 @@ public abstract class ExtendedTypeReflection {\n      * <p>\n      * Excludes static, abstract.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Method> getAllPublicMethods(Class type) {\n-        Set<Method> result = allPublicMethods.get(type);\n-        if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n-            allPublicMethods.put(type, result);\n-        }\n-        return result;\n-    }\n-\n-    public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n-        return new Predicate<T>() {\n-            public boolean apply(@Nullable T input) {\n-                return input != null && (input.getModifiers() & mod) == 0;\n-            }\n-        };\n-    }\n \n+ @SuppressWarnings(\"unchecked\")\n+ public static Set<Method> getAllPublicMethods(Class type) {\n+  Set<Method> result = allPublicMethods.get(type);\n+  if (result == null) {\n+   result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+   allPublicMethods.put(type, result);\n+  }\n+\n+  return result;\n+ }\n+\n+\n+ public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n+  return new Predicate<T>() {\n+public boolean apply(@Nullable T input) {\n+ return input != null && (input.getModifiers() & mod) == 0;\n }\n+};\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 91
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/79/ExtendedTypeReflection.java\nindex e9c7ecaadd2..8e8b10ee1db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/79/ExtendedTypeReflection.java\n@@ -90,8 +90,9 @@ public abstract class ExtendedTypeReflection {\n     public static Set<Method> getAllPublicMethods(Class type) {\n         Set<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n-            allPublicMethods.put(type, result);\n+\t\t\t\t\t\t\t\t\tresult =getAllMethods ( type,withModifier(Modifier.PUBLIC) , withoutModifier (Modifier.ABSTRACT) ,withoutModifier (\n+\t\t\t\t\t\t\t\t\tModifier.STATIC),withoutModifier(Modifier.VOLATILE));allPublicMethods\n+        .put(type, result);\n         }\n         return result;\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/79/ExtendedTypeReflection.java\nindex e9c7ecaadd2..3dc9c34fc30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/79/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/79/ExtendedTypeReflection.java\n@@ -90,7 +90,9 @@ public abstract class ExtendedTypeReflection {\n     public static Set<Method> getAllPublicMethods(Class type) {\n         Set<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+        result=getAllMethods( type , withModifier (Modifier.PUBLIC),withoutModifier(Modifier.ABSTRACT)\n+        ,withoutModifier(Modifier.STATIC ),withoutModifier(Modifier\n+        .VOLATILE));\n             allPublicMethods.put(type, result);\n         }\n         return result;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}