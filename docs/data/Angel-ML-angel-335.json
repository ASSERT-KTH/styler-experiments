{
    "project_name": "Angel-ML-angel",
    "violation_id": "335",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/335/LINENode.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/335/LINENode.java\nindex 1e659e6af9f..8f42154baa7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/335/LINENode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/335/LINENode.java\n@@ -29,183 +29,183 @@ import java.io.IOException;\n  */\n public class LINENode implements IElement {\n \n-  private float[] inputFeats;\n-  private float[] outputFeats;\n-\n-  // Use by line with weight\n-  private transient int[] neighbors;\n-  private transient float[] weights;\n-\n-  public LINENode(float[] inputFeats, float[] outputFeats) {\n-    this.inputFeats = inputFeats;\n-    this.outputFeats = outputFeats;\n-  }\n-\n-  public LINENode() {\n-    this(null, null);\n-  }\n-\n-  public float[] getInputFeats() {\n-    return inputFeats;\n-  }\n-\n-  public void setInputFeats(float[] inputFeats) {\n-    this.inputFeats = inputFeats;\n-  }\n-\n-  public float[] getOutputFeats() {\n-    return outputFeats;\n-  }\n-\n-  public void setOutputFeats(float[] outputFeats) {\n-    this.outputFeats = outputFeats;\n-  }\n-\n-  public int[] getNeighbors() {\n-    return neighbors;\n-  }\n-\n-  public void setNeighbors(int[] neighbors) {\n-    this.neighbors = neighbors;\n-  }\n-\n-  public float[] getWeights() {\n-    return weights;\n-  }\n-\n-  public void setWeights(float[] weights) {\n-    this.weights = weights;\n-  }\n-\n-  @Override\n-  public Object deepClone() {\n-    float [] cloneInputFeats = new float[inputFeats.length];\n-    System.arraycopy(inputFeats, 0, cloneInputFeats, 0, inputFeats.length);\n-\n-    float [] cloneOutputFeats;\n-    if(outputFeats != null) {\n-      cloneOutputFeats = new float[outputFeats.length];\n-      System.arraycopy(outputFeats, 0, cloneOutputFeats, 0, outputFeats.length);\n-    }\n-    return new LINENode(inputFeats, outputFeats);\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf output) {\n-    output.writeInt(inputFeats.length);\n-    for(int i = 0; i < inputFeats.length; i++) {\n-      output.writeFloat(inputFeats[i]);\n-    }\n-\n-    if (outputFeats != null) {\n-      output.writeInt(outputFeats.length);\n-      for(int i = 0; i < outputFeats.length; i++) {\n-        output.writeFloat(outputFeats[i]);\n-      }\n-    } else {\n-      output.writeInt(0);\n-    }\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    inputFeats = new float[input.readInt()];\n-    for(int i = 0; i < inputFeats.length; i++) {\n-      inputFeats[i] = input.readFloat();\n-    }\n-\n-    int size = input.readInt();\n-    if(size > 0) {\n-      outputFeats = new float[size];\n-      for(int i = 0; i < outputFeats.length; i++) {\n-        outputFeats[i] = input.readFloat();\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    return 4 + inputFeats.length * 4 + 4 + (outputFeats != null ? outputFeats.length * 4 : 0);\n-  }\n-\n-  @Override\n-  public void serialize(DataOutputStream output) throws IOException {\n-    byte [] data = new byte[bufferLen()];\n-    int index = 0;\n-    output.writeInt(data.length);\n-    index = writeInt(data, inputFeats.length, index);\n-    for(int i = 0; i < inputFeats.length; i++) {\n-      index = writeFloat(data, inputFeats[i], index);\n-    }\n-\n-    if (outputFeats != null) {\n-      index = writeInt(data, outputFeats.length, index);\n-\n-      for(int i = 0; i < outputFeats.length; i++) {\n-        index = writeFloat(data, outputFeats[i], index);\n-      }\n-    } else {\n-      writeInt(data, 0, index);\n-    }\n-    output.write(data);\n-  }\n-\n-  private int writeInt(byte[] data, int v, int index) {\n-    data[index] = (byte)((v >>> 24) & 0xFF);\n-    data[index + 1] = (byte)((v >>> 16) & 0xFF);\n-    data[index + 2] = (byte)((v >>> 8) & 0xFF);\n-    data[index + 3] = (byte)((v >>> 0) & 0xFF);\n-    return index + 4;\n-  }\n-\n-  private int writeFloat(byte[] data, float v, int index) {\n-    int iv = Float.floatToIntBits(v);\n-    return writeInt(data, iv, index);\n-  }\n-\n-  private int readInt(byte[] data, int index) {\n-    int ch1 = data[index] & 255;\n-    int ch2 = data[index + 1] & 255;\n-    int ch3 = data[index + 2] & 255;\n-    int ch4 = data[index + 3] & 255;\n-    int c =  (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4);\n-    return c;\n-  }\n-\n-  private float readFloat(byte[] data, int index) {\n-    return Float.intBitsToFloat(readInt(data, index));\n-  }\n-\n-\n-  @Override\n-  public void deserialize(DataInputStream input) throws IOException {\n-    byte [] data = new byte[input.readInt()];\n-    input.readFully(data);\n-    int index = 0;\n-\n-    int inputFeatLen = readInt(data, index);\n-    inputFeats = new float[inputFeatLen];\n-    index += 4;\n-\n-    for(int i = 0; i < inputFeatLen; i++) {\n-      inputFeats[i] = readFloat(data, index);\n-      index += 4;\n-    }\n-\n-    int outputFeatLen = readInt(data, index);\n-    index += 4;\n-\n-    if(outputFeatLen > 0) {\n-      outputFeats = new float[outputFeatLen];\n-      for(int i = 0; i < outputFeatLen; i++) {\n-        outputFeats[i] = readFloat(data, index);\n+    private float[] inputFeats;\n+    private float[] outputFeats;\n+\n+    // Use by line with weight\n+    private transient int[] neighbors;\n+    private transient float[] weights;\n+\n+    public LINENode(float[] inputFeats, float[] outputFeats) {\n+        this.inputFeats = inputFeats;\n+        this.outputFeats = outputFeats;\n+    }\n+\n+    public LINENode() {\n+        this(null, null);\n+    }\n+\n+    public float[] getInputFeats() {\n+        return inputFeats;\n+    }\n+\n+    public void setInputFeats(float[] inputFeats) {\n+        this.inputFeats = inputFeats;\n+    }\n+\n+    public float[] getOutputFeats() {\n+        return outputFeats;\n+    }\n+\n+    public void setOutputFeats(float[] outputFeats) {\n+        this.outputFeats = outputFeats;\n+    }\n+\n+    public int[] getNeighbors() {\n+        return neighbors;\n+    }\n+\n+    public void setNeighbors(int[] neighbors) {\n+        this.neighbors = neighbors;\n+    }\n+\n+    public float[] getWeights() {\n+        return weights;\n+    }\n+\n+    public void setWeights(float[] weights) {\n+        this.weights = weights;\n+    }\n+\n+    @Override\n+    public Object deepClone() {\n+        float[] cloneInputFeats = new float[inputFeats.length];\n+        System.arraycopy(inputFeats, 0, cloneInputFeats, 0, inputFeats.length);\n+\n+        float[] cloneOutputFeats;\n+        if (outputFeats != null) {\n+            cloneOutputFeats = new float[outputFeats.length];\n+            System.arraycopy(outputFeats, 0, cloneOutputFeats, 0, outputFeats.length);\n+        }\n+        return new LINENode(inputFeats, outputFeats);\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        output.writeInt(inputFeats.length);\n+        for (int i = 0; i < inputFeats.length; i++) {\n+            output.writeFloat(inputFeats[i]);\n+        }\n+\n+        if (outputFeats != null) {\n+            output.writeInt(outputFeats.length);\n+            for (int i = 0; i < outputFeats.length; i++) {\n+                output.writeFloat(outputFeats[i]);\n+            }\n+        } else {\n+            output.writeInt(0);\n+        }\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        inputFeats = new float[input.readInt()];\n+        for (int i = 0; i < inputFeats.length; i++) {\n+            inputFeats[i] = input.readFloat();\n+        }\n+\n+        int size = input.readInt();\n+        if (size > 0) {\n+            outputFeats = new float[size];\n+            for (int i = 0; i < outputFeats.length; i++) {\n+                outputFeats[i] = input.readFloat();\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+        return 4 + inputFeats.length * 4 + 4 + (outputFeats != null ? outputFeats.length * 4 : 0);\n+    }\n+\n+    @Override\n+    public void serialize(DataOutputStream output) throws IOException {\n+        byte[] data = new byte[bufferLen()];\n+        int index = 0;\n+        output.writeInt(data.length);\n+        index = writeInt(data, inputFeats.length, index);\n+        for (int i = 0; i < inputFeats.length; i++) {\n+            index = writeFloat(data, inputFeats[i], index);\n+        }\n+\n+        if (outputFeats != null) {\n+            index = writeInt(data, outputFeats.length, index);\n+\n+            for (int i = 0; i < outputFeats.length; i++) {\n+                index = writeFloat(data, outputFeats[i], index);\n+            }\n+        } else {\n+            writeInt(data, 0, index);\n+        }\n+        output.write(data);\n+    }\n+\n+    private int writeInt(byte[] data, int v, int index) {\n+        data[index] = (byte) ((v >>> 24) & 0xFF);\n+        data[index + 1] = (byte) ((v >>> 16) & 0xFF);\n+        data[index + 2] = (byte) ((v >>> 8) & 0xFF);\n+        data[index + 3] = (byte) ((v >>> 0) & 0xFF);\n+        return index + 4;\n+    }\n+\n+    private int writeFloat(byte[] data, float v, int index) {\n+        int iv = Float.floatToIntBits(v);\n+        return writeInt(data, iv, index);\n+    }\n+\n+    private int readInt(byte[] data, int index) {\n+        int ch1 = data[index] & 255;\n+        int ch2 = data[index + 1] & 255;\n+        int ch3 = data[index + 2] & 255;\n+        int ch4 = data[index + 3] & 255;\n+        int c = (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4);\n+        return c;\n+    }\n+\n+    private float readFloat(byte[] data, int index) {\n+        return Float.intBitsToFloat(readInt(data, index));\n+    }\n+\n+\n+    @Override\n+    public void deserialize(DataInputStream input) throws IOException {\n+        byte[] data = new byte[input.readInt()];\n+        input.readFully(data);\n+        int index = 0;\n+\n+        int inputFeatLen = readInt(data, index);\n+        inputFeats = new float[inputFeatLen];\n         index += 4;\n-      }\n+\n+        for (int i = 0; i < inputFeatLen; i++) {\n+            inputFeats[i] = readFloat(data, index);\n+            index += 4;\n+        }\n+\n+        int outputFeatLen = readInt(data, index);\n+        index += 4;\n+\n+        if (outputFeatLen > 0) {\n+            outputFeats = new float[outputFeatLen];\n+            for (int i = 0; i < outputFeatLen; i++) {\n+                outputFeats[i] = readFloat(data, index);\n+                index += 4;\n+            }\n+        }\n     }\n-  }\n \n-  @Override\n-  public int dataLen() {\n-    return bufferLen();\n-  }\n+    @Override\n+    public int dataLen() {\n+        return bufferLen();\n+    }\n }\n",
            "diff_size": 191
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/335/LINENode.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/335/LINENode.java\nindex 1e659e6af9f..2a674866bcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/335/LINENode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/335/LINENode.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.spark.ml.embedding.line2;\n \n import com.tencent.angel.ps.storage.vector.element.IElement;\n@@ -79,11 +78,11 @@ public class LINENode implements IElement {\n \n   @Override\n   public Object deepClone() {\n-    float [] cloneInputFeats = new float[inputFeats.length];\n+    float[] cloneInputFeats = new float[inputFeats.length];\n     System.arraycopy(inputFeats, 0, cloneInputFeats, 0, inputFeats.length);\n \n-    float [] cloneOutputFeats;\n-    if(outputFeats != null) {\n+    float[] cloneOutputFeats;\n+    if (outputFeats != null) {\n       cloneOutputFeats = new float[outputFeats.length];\n       System.arraycopy(outputFeats, 0, cloneOutputFeats, 0, outputFeats.length);\n     }\n@@ -93,13 +92,13 @@ public class LINENode implements IElement {\n   @Override\n   public void serialize(ByteBuf output) {\n     output.writeInt(inputFeats.length);\n-    for(int i = 0; i < inputFeats.length; i++) {\n+    for (int i = 0; i < inputFeats.length; i++) {\n       output.writeFloat(inputFeats[i]);\n     }\n \n     if (outputFeats != null) {\n       output.writeInt(outputFeats.length);\n-      for(int i = 0; i < outputFeats.length; i++) {\n+      for (int i = 0; i < outputFeats.length; i++) {\n         output.writeFloat(outputFeats[i]);\n       }\n     } else {\n@@ -110,14 +109,14 @@ public class LINENode implements IElement {\n   @Override\n   public void deserialize(ByteBuf input) {\n     inputFeats = new float[input.readInt()];\n-    for(int i = 0; i < inputFeats.length; i++) {\n+    for (int i = 0; i < inputFeats.length; i++) {\n       inputFeats[i] = input.readFloat();\n     }\n \n     int size = input.readInt();\n-    if(size > 0) {\n+    if (size > 0) {\n       outputFeats = new float[size];\n-      for(int i = 0; i < outputFeats.length; i++) {\n+      for (int i = 0; i < outputFeats.length; i++) {\n         outputFeats[i] = input.readFloat();\n       }\n     }\n@@ -130,18 +129,18 @@ public class LINENode implements IElement {\n \n   @Override\n   public void serialize(DataOutputStream output) throws IOException {\n-    byte [] data = new byte[bufferLen()];\n+    byte[] data = new byte[bufferLen()];\n     int index = 0;\n     output.writeInt(data.length);\n     index = writeInt(data, inputFeats.length, index);\n-    for(int i = 0; i < inputFeats.length; i++) {\n+    for (int i = 0; i < inputFeats.length; i++) {\n       index = writeFloat(data, inputFeats[i], index);\n     }\n \n     if (outputFeats != null) {\n       index = writeInt(data, outputFeats.length, index);\n \n-      for(int i = 0; i < outputFeats.length; i++) {\n+      for (int i = 0; i < outputFeats.length; i++) {\n         index = writeFloat(data, outputFeats[i], index);\n       }\n     } else {\n@@ -151,10 +150,10 @@ public class LINENode implements IElement {\n   }\n \n   private int writeInt(byte[] data, int v, int index) {\n-    data[index] = (byte)((v >>> 24) & 0xFF);\n-    data[index + 1] = (byte)((v >>> 16) & 0xFF);\n-    data[index + 2] = (byte)((v >>> 8) & 0xFF);\n-    data[index + 3] = (byte)((v >>> 0) & 0xFF);\n+    data[index] = (byte)((v>>> 24) & 0xFF);\n+    data[index + 1] = (byte)((v>>> 16) & 0xFF);\n+    data[index + 2] = (byte)((v>>> 8) & 0xFF);\n+    data[index + 3] = (byte)((v>>> 0) & 0xFF);\n     return index + 4;\n   }\n \n@@ -168,7 +167,7 @@ public class LINENode implements IElement {\n     int ch2 = data[index + 1] & 255;\n     int ch3 = data[index + 2] & 255;\n     int ch4 = data[index + 3] & 255;\n-    int c =  (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4);\n+    int c = (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4);\n     return c;\n   }\n \n@@ -176,10 +175,9 @@ public class LINENode implements IElement {\n     return Float.intBitsToFloat(readInt(data, index));\n   }\n \n-\n-  @Override\n+@Override\n   public void deserialize(DataInputStream input) throws IOException {\n-    byte [] data = new byte[input.readInt()];\n+    byte[] data = new byte[input.readInt()];\n     input.readFully(data);\n     int index = 0;\n \n@@ -187,17 +185,16 @@ public class LINENode implements IElement {\n     inputFeats = new float[inputFeatLen];\n     index += 4;\n \n-    for(int i = 0; i < inputFeatLen; i++) {\n+    for (int i = 0; i < inputFeatLen; i++) {\n       inputFeats[i] = readFloat(data, index);\n       index += 4;\n     }\n \n     int outputFeatLen = readInt(data, index);\n     index += 4;\n-\n-    if(outputFeatLen > 0) {\n+if (outputFeatLen > 0) {\n       outputFeats = new float[outputFeatLen];\n-      for(int i = 0; i < outputFeatLen; i++) {\n+      for (int i = 0; i < outputFeatLen; i++) {\n         outputFeats[i] = readFloat(data, index);\n         index += 4;\n       }\n@@ -208,4 +205,4 @@ public class LINENode implements IElement {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/335/LINENode.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/335/LINENode.java\nindex 1e659e6af9f..a55c5cd9302 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/335/LINENode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/335/LINENode.java\n@@ -27,6 +27,7 @@ import java.io.IOException;\n /**\n  * A user-define data type that store node information on PS\n  */\n+\n public class LINENode implements IElement {\n \n   private float[] inputFeats;\n@@ -79,11 +80,10 @@ public class LINENode implements IElement {\n \n   @Override\n   public Object deepClone() {\n-    float [] cloneInputFeats = new float[inputFeats.length];\n+    float[] cloneInputFeats = new float[inputFeats.length];\n     System.arraycopy(inputFeats, 0, cloneInputFeats, 0, inputFeats.length);\n-\n-    float [] cloneOutputFeats;\n-    if(outputFeats != null) {\n+    float[] cloneOutputFeats;\n+    if (outputFeats != null) {\n       cloneOutputFeats = new float[outputFeats.length];\n       System.arraycopy(outputFeats, 0, cloneOutputFeats, 0, outputFeats.length);\n     }\n@@ -93,13 +93,13 @@ public class LINENode implements IElement {\n   @Override\n   public void serialize(ByteBuf output) {\n     output.writeInt(inputFeats.length);\n-    for(int i = 0; i < inputFeats.length; i++) {\n+    for (int i = 0; i < inputFeats.length; i++) {\n       output.writeFloat(inputFeats[i]);\n     }\n \n     if (outputFeats != null) {\n       output.writeInt(outputFeats.length);\n-      for(int i = 0; i < outputFeats.length; i++) {\n+      for (int i = 0; i < outputFeats.length; i++) {\n         output.writeFloat(outputFeats[i]);\n       }\n     } else {\n@@ -110,14 +110,14 @@ public class LINENode implements IElement {\n   @Override\n   public void deserialize(ByteBuf input) {\n     inputFeats = new float[input.readInt()];\n-    for(int i = 0; i < inputFeats.length; i++) {\n+    for (int i = 0; i < inputFeats.length; i++) {\n       inputFeats[i] = input.readFloat();\n     }\n \n     int size = input.readInt();\n-    if(size > 0) {\n+    if (size > 0) {\n       outputFeats = new float[size];\n-      for(int i = 0; i < outputFeats.length; i++) {\n+      for (int i = 0; i < outputFeats.length; i++) {\n         outputFeats[i] = input.readFloat();\n       }\n     }\n@@ -130,18 +130,17 @@ public class LINENode implements IElement {\n \n   @Override\n   public void serialize(DataOutputStream output) throws IOException {\n-    byte [] data = new byte[bufferLen()];\n+    byte[] data = new byte[bufferLen()];\n     int index = 0;\n     output.writeInt(data.length);\n     index = writeInt(data, inputFeats.length, index);\n-    for(int i = 0; i < inputFeats.length; i++) {\n+    for (int i = 0; i < inputFeats.length; i++) {\n       index = writeFloat(data, inputFeats[i], index);\n     }\n \n     if (outputFeats != null) {\n       index = writeInt(data, outputFeats.length, index);\n-\n-      for(int i = 0; i < outputFeats.length; i++) {\n+      for (int i = 0; i < outputFeats.length; i++) {\n         index = writeFloat(data, outputFeats[i], index);\n       }\n     } else {\n@@ -151,10 +150,10 @@ public class LINENode implements IElement {\n   }\n \n   private int writeInt(byte[] data, int v, int index) {\n-    data[index] = (byte)((v >>> 24) & 0xFF);\n-    data[index + 1] = (byte)((v >>> 16) & 0xFF);\n-    data[index + 2] = (byte)((v >>> 8) & 0xFF);\n-    data[index + 3] = (byte)((v >>> 0) & 0xFF);\n+    data[index] = (byte) ((v >>> 24) & 0xFF);\n+    data[index + 1] = (byte) ((v >>> 16) & 0xFF);\n+    data[index + 2] = (byte) ((v >>> 8) & 0xFF);\n+    data[index + 3] = (byte) ((v >>> 0) & 0xFF);\n     return index + 4;\n   }\n \n@@ -168,7 +167,7 @@ public class LINENode implements IElement {\n     int ch2 = data[index + 1] & 255;\n     int ch3 = data[index + 2] & 255;\n     int ch4 = data[index + 3] & 255;\n-    int c =  (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4);\n+    int c = (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4);\n     return c;\n   }\n \n@@ -176,28 +175,25 @@ public class LINENode implements IElement {\n     return Float.intBitsToFloat(readInt(data, index));\n   }\n \n-\n   @Override\n   public void deserialize(DataInputStream input) throws IOException {\n-    byte [] data = new byte[input.readInt()];\n+    byte[] data = new byte[input.readInt()];\n     input.readFully(data);\n-    int index = 0;\n \n+    int index = 0;\n     int inputFeatLen = readInt(data, index);\n     inputFeats = new float[inputFeatLen];\n     index += 4;\n-\n-    for(int i = 0; i < inputFeatLen; i++) {\n+    for (int i = 0; i < inputFeatLen; i++) {\n       inputFeats[i] = readFloat(data, index);\n       index += 4;\n     }\n \n     int outputFeatLen = readInt(data, index);\n     index += 4;\n-\n-    if(outputFeatLen > 0) {\n+    if (outputFeatLen > 0) {\n       outputFeats = new float[outputFeatLen];\n-      for(int i = 0; i < outputFeatLen; i++) {\n+      for (int i = 0; i < outputFeatLen; i++) {\n         outputFeats[i] = readFloat(data, index);\n         index += 4;\n       }\n@@ -208,4 +204,5 @@ public class LINENode implements IElement {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}