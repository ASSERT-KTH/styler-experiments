{
    "project_name": "ppati000-visualDFA",
    "violation_id": "9",
    "information": {
        "violations": [
            {
                "line": "34",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     *            performed\n     */\n    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n        if (factory == null) {\n            throw new IllegalArgumentException(\"factory must not be null\");\n        }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/checkstyle_idea/9/DFAPrecalculator.java\nindex 57d6097a2b5..51d88b1fd0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/checkstyle_idea/9/DFAPrecalculator.java\n@@ -7,64 +7,59 @@ import dfa.framework.SimpleBlockGraph;\n import dfa.framework.Worklist;\n \n /**\n- * \n  * @author Anika Nietzer Unit, used by the {@code DFAExecution} to precalculate\n- *         all analysis steps in a different thread.\n- *\n+ * all analysis steps in a different thread.\n  */\n public class DFAPrecalculator implements Runnable {\n \n-    private DFAExecution<? extends LatticeElement> dfaExecution;\n-    private DFAFactory<? extends LatticeElement> factory;\n-    private Worklist worklist;\n-    private SimpleBlockGraph simpleBlockGraph;\n+  private DFAExecution<? extends LatticeElement> dfaExecution;\n+  private DFAFactory<? extends LatticeElement> factory;\n+  private Worklist worklist;\n+  private SimpleBlockGraph simpleBlockGraph;\n \n-    /**\n-     * Creates a new {@code DFAPrecalculator} to calculate all steps at the\n-     * beginning of the analysis.\n-     * \n-     * @param factory\n-     *            {@code DFAFactory} that will be used\n-     * @param worklist\n-     *            {@code Worklist} that will be used for the analysis\n-     * @param simpleBlockGraph\n-     *            {@code SimpleBlockGraph} on that the analysis will be\n-     *            performed\n-     */\n-    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n-        if (factory == null) {\n-            throw new IllegalArgumentException(\"factory must not be null\");\n-        }\n-        if (worklist == null) {\n-            throw new IllegalArgumentException(\"worklist must not be null\");\n-        }\n-        if (simpleBlockGraph == null) {\n-            throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n-        }\n-        this.factory = factory;\n-        this.worklist = worklist;\n-        this.simpleBlockGraph = simpleBlockGraph;\n+  /**\n+   * Creates a new {@code DFAPrecalculator} to calculate all steps at the\n+   * beginning of the analysis.\n+   *\n+   * @param factory          {@code DFAFactory} that will be used\n+   * @param worklist         {@code Worklist} that will be used for the analysis\n+   * @param simpleBlockGraph {@code SimpleBlockGraph} on that the analysis will be\n+   *                         performed\n+   */\n+  public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n+    if (factory == null) {\n+      throw new IllegalArgumentException(\"factory must not be null\");\n     }\n-\n-    @Override\n-    /**\n-     * Used during creation of a new thread, that performs the steps of the\n-     * analysis.\n-     */\n-    public void run() {\n-        this.dfaExecution = new DFAExecution(factory, worklist, simpleBlockGraph);\n+    if (worklist == null) {\n+      throw new IllegalArgumentException(\"worklist must not be null\");\n+    }\n+    if (simpleBlockGraph == null) {\n+      throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n     }\n+    this.factory = factory;\n+    this.worklist = worklist;\n+    this.simpleBlockGraph = simpleBlockGraph;\n+  }\n+\n+  @Override\n+  /**\n+   * Used during creation of a new thread, that performs the steps of the\n+   * analysis.\n+   */\n+  public void run() {\n+    this.dfaExecution = new DFAExecution(factory, worklist, simpleBlockGraph);\n+  }\n \n-    /**\n-     * Returns the dfaExecution.\n-     * \n-     * @return created instance of {@code DFAExecution}\n-     */\n-    public DFAExecution<? extends LatticeElement> getDFAExecution() {\n-        if (this.dfaExecution == null) {\n-            throw new IllegalStateException(\"dfaExecution must no be null\");\n-        }\n-        return this.dfaExecution;\n+  /**\n+   * Returns the dfaExecution.\n+   *\n+   * @return created instance of {@code DFAExecution}\n+   */\n+  public DFAExecution<? extends LatticeElement> getDFAExecution() {\n+    if (this.dfaExecution == null) {\n+      throw new IllegalStateException(\"dfaExecution must no be null\");\n     }\n+    return this.dfaExecution;\n+  }\n \n }\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/naturalize/9/DFAPrecalculator.java\nindex 57d6097a2b5..c4020cb8524 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/naturalize/9/DFAPrecalculator.java\n@@ -35,13 +35,16 @@ public class DFAPrecalculator implements Runnable {\n         if (factory == null) {\n             throw new IllegalArgumentException(\"factory must not be null\");\n         }\n-        if (worklist == null) {\n+\n+if (worklist == null) {\n             throw new IllegalArgumentException(\"worklist must not be null\");\n         }\n-        if (simpleBlockGraph == null) {\n+\n+if (simpleBlockGraph == null) {\n             throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n         }\n-        this.factory = factory;\n+\n+this.factory = factory;\n         this.worklist = worklist;\n         this.simpleBlockGraph = simpleBlockGraph;\n     }\n@@ -64,7 +67,8 @@ public class DFAPrecalculator implements Runnable {\n         if (this.dfaExecution == null) {\n             throw new IllegalStateException(\"dfaExecution must no be null\");\n         }\n-        return this.dfaExecution;\n+\n+return this.dfaExecution;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/codebuff/9/DFAPrecalculator.java\nindex 57d6097a2b5..fdd4308947d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/codebuff/9/DFAPrecalculator.java\n@@ -12,11 +12,16 @@ import dfa.framework.Worklist;\n  *         all analysis steps in a different thread.\n  *\n  */\n+\n+\n public class DFAPrecalculator implements Runnable {\n \n     private DFAExecution<? extends LatticeElement> dfaExecution;\n+\n     private DFAFactory<? extends LatticeElement> factory;\n+\n     private Worklist worklist;\n+\n     private SimpleBlockGraph simpleBlockGraph;\n \n     /**\n@@ -31,16 +36,21 @@ public class DFAPrecalculator implements Runnable {\n      *            {@code SimpleBlockGraph} on that the analysis will be\n      *            performed\n      */\n+\n+\n     public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n         if (factory == null) {\n             throw new IllegalArgumentException(\"factory must not be null\");\n         }\n+\n         if (worklist == null) {\n             throw new IllegalArgumentException(\"worklist must not be null\");\n         }\n+\n         if (simpleBlockGraph == null) {\n             throw new IllegalArgumentException(\"simpleBlockGraph must not be null\");\n         }\n+\n         this.factory = factory;\n         this.worklist = worklist;\n         this.simpleBlockGraph = simpleBlockGraph;\n@@ -60,11 +70,14 @@ public class DFAPrecalculator implements Runnable {\n      * \n      * @return created instance of {@code DFAExecution}\n      */\n+\n+\n     public DFAExecution<? extends LatticeElement> getDFAExecution() {\n         if (this.dfaExecution == null) {\n             throw new IllegalStateException(\"dfaExecution must no be null\");\n         }\n+\n         return this.dfaExecution;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "column": "29",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/styler/05_predictions/random/files-repaired/9/DFAPrecalculator.java\nindex 57d6097a2b5..7fd9b0fb692 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/violations/9/DFAPrecalculator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ppati000-visualDFA/styler/05_predictions/random/files-repaired/9/DFAPrecalculator.java\n@@ -31,7 +31,7 @@ public class DFAPrecalculator implements Runnable {\n      *            {@code SimpleBlockGraph} on that the analysis will be\n      *            performed\n      */\n-    public DFAPrecalculator(DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n+    public DFAPrecalculator (DFAFactory<? extends LatticeElement> factory, Worklist worklist, SimpleBlockGraph simpleBlockGraph) {\n         if (factory == null) {\n             throw new IllegalArgumentException(\"factory must not be null\");\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}