{
    "project_name": "wso2-attic-commons",
    "violation_id": "13",
    "information": {
        "violations": [
            {
                "line": "29",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class GroupByAttributeGeneratorMap {\n\n    private Map<String, AbstractAggregateAttributeGenerator> attributeGeneratorMap = new HashMap<String, AbstractAggregateAttributeGenerator>();\n    private ExpressionExecutor[] expressionExecutors;\n    private AbstractAggregateAttributeGenerator attributeGenerator;\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/13/GroupByAttributeGeneratorMap.java\nindex f92d9d259a3..07a4cdecb45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/13/GroupByAttributeGeneratorMap.java\n@@ -26,8 +26,9 @@ import java.util.Map;\n \n public class GroupByAttributeGeneratorMap {\n \n-    private Map<String, AbstractAggregateAttributeGenerator> attributeGeneratorMap = new HashMap<String, AbstractAggregateAttributeGenerator>();\n-    private ExpressionExecutor[] expressionExecutors;\n+    private Map<String, AbstractAggregateAttributeGenerator> attributeGeneratorMap =\n+            new HashMap<String, AbstractAggregateAttributeGenerator>();\n+     private ExpressionExecutor[] expressionExecutors;\n     private AbstractAggregateAttributeGenerator attributeGenerator;\n \n     public GroupByAttributeGeneratorMap(ExpressionExecutor[] expressionExecutors,\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/13/GroupByAttributeGeneratorMap.java\nindex f92d9d259a3..2024473c858 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/13/GroupByAttributeGeneratorMap.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.projector.attibute.generator.groupby;\n \n import org.wso2.siddhi.core.event.AtomicEvent;\n@@ -26,34 +27,35 @@ import java.util.Map;\n \n public class GroupByAttributeGeneratorMap {\n \n-    private Map<String, AbstractAggregateAttributeGenerator> attributeGeneratorMap = new HashMap<String, AbstractAggregateAttributeGenerator>();\n-    private ExpressionExecutor[] expressionExecutors;\n-    private AbstractAggregateAttributeGenerator attributeGenerator;\n-\n-    public GroupByAttributeGeneratorMap(ExpressionExecutor[] expressionExecutors,\n-                                        AbstractAggregateAttributeGenerator attributeGenerator) {\n-        this.expressionExecutors = expressionExecutors;\n-        this.attributeGenerator = attributeGenerator;\n-    }\n+  private Map<String, AbstractAggregateAttributeGenerator> attributeGeneratorMap =\n+    new HashMap<String, AbstractAggregateAttributeGenerator>();\n+  private ExpressionExecutor[] expressionExecutors;\n+  private AbstractAggregateAttributeGenerator attributeGenerator;\n+\n+  public GroupByAttributeGeneratorMap(ExpressionExecutor[] expressionExecutors,\n+                                      AbstractAggregateAttributeGenerator attributeGenerator) {\n+    this.expressionExecutors = expressionExecutors;\n+    this.attributeGenerator = attributeGenerator;\n+  }\n+\n+  public AbstractAggregateAttributeGenerator get(AtomicEvent event) {\n+    String key = getKey(event);\n+    AbstractAggregateAttributeGenerator generator = attributeGeneratorMap.get(key);\n+    if (generator != null) {\n+      return generator;\n+    } else {\n+      generator = attributeGenerator.createNewInstance();\n+      attributeGeneratorMap.put(key, generator);\n+      return generator;\n \n-    public AbstractAggregateAttributeGenerator get(AtomicEvent event) {\n-        String key = getKey(event);\n-        AbstractAggregateAttributeGenerator generator = attributeGeneratorMap.get(key);\n-        if (generator != null) {\n-            return generator;\n-        } else {\n-            generator = attributeGenerator.createNewInstance();\n-            attributeGeneratorMap.put(key, generator);\n-           return generator;\n-\n-        }\n     }\n+  }\n \n-    private String getKey(AtomicEvent event) {\n-        StringBuilder sb = new StringBuilder();\n-        for (ExpressionExecutor executor : expressionExecutors) {\n-            sb.append(executor.execute(event)).append(\"::\");\n-        }\n-        return sb.toString();\n+  private String getKey(AtomicEvent event) {\n+    StringBuilder sb = new StringBuilder();\n+    for (ExpressionExecutor executor : expressionExecutors) {\n+      sb.append(executor.execute(event)).append(\"::\");\n     }\n+    return sb.toString();\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/13/GroupByAttributeGeneratorMap.java\nindex f92d9d259a3..a466b7d6d22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/13/GroupByAttributeGeneratorMap.java\n@@ -30,9 +30,8 @@ public class GroupByAttributeGeneratorMap {\n     private ExpressionExecutor[] expressionExecutors;\n     private AbstractAggregateAttributeGenerator attributeGenerator;\n \n-    public GroupByAttributeGeneratorMap(ExpressionExecutor[] expressionExecutors,\n-                                        AbstractAggregateAttributeGenerator attributeGenerator) {\n-        this.expressionExecutors = expressionExecutors;\n+    public GroupByAttributeGeneratorMap(ExpressionExecutor[] expressionExecutors, AbstractAggregateAttributeGenerator attributeGenerator) {\n+    this.expressionExecutors = expressionExecutors;\n         this.attributeGenerator = attributeGenerator;\n     }\n \n@@ -45,8 +44,7 @@ public class GroupByAttributeGeneratorMap {\n             generator = attributeGenerator.createNewInstance();\n             attributeGeneratorMap.put(key, generator);\n            return generator;\n-\n-        }\n+    }\n     }\n \n     private String getKey(AtomicEvent event) {\n@@ -56,4 +54,4 @@ public class GroupByAttributeGeneratorMap {\n         }\n         return sb.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/13/GroupByAttributeGeneratorMap.java\nindex f92d9d259a3..07a4cdecb45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/13/GroupByAttributeGeneratorMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/13/GroupByAttributeGeneratorMap.java\n@@ -26,8 +26,9 @@ import java.util.Map;\n \n public class GroupByAttributeGeneratorMap {\n \n-    private Map<String, AbstractAggregateAttributeGenerator> attributeGeneratorMap = new HashMap<String, AbstractAggregateAttributeGenerator>();\n-    private ExpressionExecutor[] expressionExecutors;\n+    private Map<String, AbstractAggregateAttributeGenerator> attributeGeneratorMap =\n+            new HashMap<String, AbstractAggregateAttributeGenerator>();\n+     private ExpressionExecutor[] expressionExecutors;\n     private AbstractAggregateAttributeGenerator attributeGenerator;\n \n     public GroupByAttributeGeneratorMap(ExpressionExecutor[] expressionExecutors,\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}