{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "3880",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3880/CharSeeker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3880/CharSeeker.java\nindex 907c2ec13d7..9b3f3d63b81 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3880/CharSeeker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3880/CharSeeker.java\n@@ -17,17 +17,19 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.Closeable;\n import java.io.IOException;\n \n import org.neo4j.values.storable.CSVHeaderInformation;\n+\n /**\n  * Seeks for specific characters in a stream of characters, e.g. a {@link CharReadable}. Uses a {@link Mark}\n  * as keeper of position. Once a {@link #seek(Mark, int)} has succeeded the characters specified by\n  * the mark can be {@link #extract(Mark, Extractor, CSVHeaderInformation) extracted} into a value of an arbitrary type.\n- *\n+ * <p>\n  * Typical usage is:\n  *\n  * <pre>\n@@ -45,63 +47,67 @@ import org.neo4j.values.storable.CSVHeaderInformation;\n  *     }\n  * }\n  * </pre>\n- *\n+ * <p>\n  * Any {@link Closeable} resource that gets passed in will be closed in {@link #close()}.\n  *\n  * @author Mattias Persson\n  */\n public interface CharSeeker extends Closeable, SourceTraceability\n {\n-    /**\n-     * Seeks the next occurrence of any of the characters in {@code untilOneOfChars}, or if end-of-line,\n-     * or even end-of-file.\n-     *\n-     * @param mark the mutable {@link Mark} which will be updated with the findings, if any.\n-     * @param untilChar array of characters to seek.\n-     * @return {@code false} if the end was reached and hence no value found, otherwise {@code true}.\n-     * @throws IOException in case of I/O error.\n-     */\n-    boolean seek( Mark mark, int untilChar ) throws IOException;\n+  /**\n+   * Seeks the next occurrence of any of the characters in {@code untilOneOfChars}, or if end-of-line,\n+   * or even end-of-file.\n+   *\n+   * @param mark      the mutable {@link Mark} which will be updated with the findings, if any.\n+   * @param untilChar array of characters to seek.\n+   * @return {@code false} if the end was reached and hence no value found, otherwise {@code true}.\n+   * @throws IOException in case of I/O error.\n+   */\n+  boolean seek(Mark mark, int untilChar) throws IOException;\n \n-    /**\n-     * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n-     * @param mark the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n-     * @param extractor {@link Extractor} capable of extracting the value.\n-     * @param optionalData holds additional information for spatial and temporal values or null\n-     * @return the supplied {@link Extractor}, which after the call carries the extracted value itself,\n-     * where either {@link Extractor#value()} or a more specific accessor method can be called to access the value.\n-     * @throws IllegalStateException if the {@link Extractor#extract(char[], int, int, boolean, org.neo4j.values.storable.CSVHeaderInformation) extraction}\n-     * returns {@code false}.\n-     */\n-    <EXTRACTOR extends Extractor<?>> EXTRACTOR extract( Mark mark, EXTRACTOR extractor, CSVHeaderInformation optionalData );\n+  /**\n+   * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n+   *\n+   * @param mark         the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n+   * @param extractor    {@link Extractor} capable of extracting the value.\n+   * @param optionalData holds additional information for spatial and temporal values or null\n+   * @return the supplied {@link Extractor}, which after the call carries the extracted value itself,\n+   * where either {@link Extractor#value()} or a more specific accessor method can be called to access the value.\n+   * @throws IllegalStateException if the {@link Extractor#extract(char[], int, int, boolean, org.neo4j.values.storable.CSVHeaderInformation) extraction}\n+   *                               returns {@code false}.\n+   */\n+  <EXTRACTOR extends Extractor<?>> EXTRACTOR extract(Mark mark, EXTRACTOR extractor, CSVHeaderInformation optionalData);\n \n-    /**\n-     * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n-     * @param mark the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n-     * @param extractor {@link Extractor} capable of extracting the value.\n-     * @return the supplied {@link Extractor}, which after the call carries the extracted value itself,\n-     * where either {@link Extractor#value()} or a more specific accessor method can be called to access the value.\n-     * @throws IllegalStateException if the {@link Extractor#extract(char[], int, int, boolean, org.neo4j.values.storable.CSVHeaderInformation) extraction}\n-     * returns {@code false}.\n-     */\n-    <EXTRACTOR extends Extractor<?>> EXTRACTOR extract( Mark mark, EXTRACTOR extractor );\n+  /**\n+   * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n+   *\n+   * @param mark      the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n+   * @param extractor {@link Extractor} capable of extracting the value.\n+   * @return the supplied {@link Extractor}, which after the call carries the extracted value itself,\n+   * where either {@link Extractor#value()} or a more specific accessor method can be called to access the value.\n+   * @throws IllegalStateException if the {@link Extractor#extract(char[], int, int, boolean, org.neo4j.values.storable.CSVHeaderInformation) extraction}\n+   *                               returns {@code false}.\n+   */\n+  <EXTRACTOR extends Extractor<?>> EXTRACTOR extract(Mark mark, EXTRACTOR extractor);\n \n-    /**\n-     * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n-     * @param mark the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n-     * @param extractor {@link Extractor} capable of extracting the value.\n-     * @param optionalData holds additional information for spatial and temporal values or null\n-     * @return {@code true} if a value was extracted, otherwise {@code false}. Probably the only reason for\n-     * returning {@code false} would be if the data to extract was empty.\n-     */\n-    boolean tryExtract( Mark mark, Extractor<?> extractor, CSVHeaderInformation optionalData );\n+  /**\n+   * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n+   *\n+   * @param mark         the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n+   * @param extractor    {@link Extractor} capable of extracting the value.\n+   * @param optionalData holds additional information for spatial and temporal values or null\n+   * @return {@code true} if a value was extracted, otherwise {@code false}. Probably the only reason for\n+   * returning {@code false} would be if the data to extract was empty.\n+   */\n+  boolean tryExtract(Mark mark, Extractor<?> extractor, CSVHeaderInformation optionalData);\n \n-    /**\n-     * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n-     * @param mark the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n-     * @param extractor {@link Extractor} capable of extracting the value.\n-     * @return {@code true} if a value was extracted, otherwise {@code false}. Probably the only reason for\n-     * returning {@code false} would be if the data to extract was empty.\n-     */\n-    boolean tryExtract( Mark mark, Extractor<?> extractor );\n+  /**\n+   * Extracts the value specified by the {@link Mark}, previously populated by a call to {@link #seek(Mark, int)}.\n+   *\n+   * @param mark      the {@link Mark} specifying which part of a bigger piece of data contains the found value.\n+   * @param extractor {@link Extractor} capable of extracting the value.\n+   * @return {@code true} if a value was extracted, otherwise {@code false}. Probably the only reason for\n+   * returning {@code false} would be if the data to extract was empty.\n+   */\n+  boolean tryExtract(Mark mark, Extractor<?> extractor);\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3880/CharSeeker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3880/CharSeeker.java\nindex 907c2ec13d7..ad5ccffe617 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3880/CharSeeker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3880/CharSeeker.java\n@@ -23,6 +23,7 @@ import java.io.Closeable;\n import java.io.IOException;\n \n import org.neo4j.values.storable.CSVHeaderInformation;\n+\n /**\n  * Seeks for specific characters in a stream of characters, e.g. a {@link CharReadable}. Uses a {@link Mark}\n  * as keeper of position. Once a {@link #seek(Mark, int)} has succeeded the characters specified by\n@@ -104,4 +105,4 @@ public interface CharSeeker extends Closeable, SourceTraceability\n      * returning {@code false} would be if the data to extract was empty.\n      */\n     boolean tryExtract( Mark mark, Extractor<?> extractor );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}