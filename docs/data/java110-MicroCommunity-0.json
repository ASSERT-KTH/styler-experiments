{
    "project_name": "java110-MicroCommunity",
    "violation_id": "0",
    "information": {
        "violations": [
            {
                "line": "129",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 166).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            for (FileRelDto tmpFileRelDto : fileRelDtos) {\n                photoVo = new PhotoVo();\n                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n                photoVos.add(photoVo);\n            }\n            complaintDataVo.setPhotos(photoVos);",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "129",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "79",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/java110-MicroCommunity/styler/05_predictions/final/files-repaired/0/ListComplaintsListener.java\nindex e17b59c81d8..f459b19b59c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/java110-MicroCommunity/styler/05_predictions/final/files-repaired/0/ListComplaintsListener.java\n@@ -126,8 +126,9 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n                 photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n-                photoVos.add(photoVo);\n+                photoVo.setUrl( \"/callComponent/download/getFile/file?fileId=\"+ tmpFileRelDto.getFileRealName()\n+                + \"&communityId=\" + complaintDataVo.getCommunityId());\n+                 photoVos.add(photoVo);\n             }\n             complaintDataVo.setPhotos(photoVos);\n         }\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "129",
                    "column": "131",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/checkstyle_idea/0/ListComplaintsListener.java\nindex e17b59c81d8..a5b81c2dba7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/checkstyle_idea/0/ListComplaintsListener.java\n@@ -126,7 +126,8 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n                 photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n+                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" +\n+                    complaintDataVo.getCommunityId());\n                 photoVos.add(photoVo);\n             }\n             complaintDataVo.setPhotos(photoVos);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/naturalize/0/ListComplaintsListener.java\nindex e17b59c81d8..7a880620db1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/naturalize/0/ListComplaintsListener.java\n@@ -133,4 +133,4 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/codebuff/0/ListComplaintsListener.java\nindex e17b59c81d8..2cef4e4180b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/codebuff/0/ListComplaintsListener.java\n@@ -21,7 +21,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -29,6 +28,8 @@ import java.util.List;\n /**\n  * \u67e5\u8be2\u5c0f\u533a\u4fa6\u542c\u7c7b\n  */\n+\n+\n @Java110Listener(\"listComplaintsListener\")\n public class ListComplaintsListener extends AbstractServiceApiListener {\n \n@@ -40,6 +41,7 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n \n     @Autowired\n     private IComplaintUserInnerServiceSMO complaintUserInnerServiceSMOImpl;\n+\n     @Autowired\n     private IFileRelInnerServiceSMO fileRelInnerServiceSMOImpl;\n \n@@ -53,13 +55,11 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         return HttpMethod.GET;\n     }\n \n-\n     @Override\n     public int getOrder() {\n         return DEFAULT_ORDER;\n     }\n \n-\n     public IComplaintInnerServiceSMO getComplaintInnerServiceSMOImpl() {\n         return complaintInnerServiceSMOImpl;\n     }\n@@ -71,18 +71,17 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n     @Override\n     protected void validate(ServiceDataFlowEvent event, JSONObject reqJson) {\n         Assert.hasKeyAndValue(reqJson, \"communityId\", \"\u5fc5\u586b\uff0c\u8bf7\u586b\u5199\u5c0f\u533a\u4fe1\u606f\");\n+\n+\n         super.validatePageInfo(reqJson);\n     }\n \n     @Override\n-    protected void doSoService(ServiceDataFlowEvent event, DataFlowContext context, JSONObject reqJson) {\n-\n+    protected void doSoService(ServiceDataFlowEvent event,\n+                               DataFlowContext context, JSONObject reqJson) {\n         ComplaintDto complaintDto = BeanConvertUtil.covertBean(reqJson, ComplaintDto.class);\n-\n         int count = complaintInnerServiceSMOImpl.queryComplaintsCount(complaintDto);\n-\n         List<ApiComplaintDataVo> complaints = null;\n-\n         if (count > 0) {\n             List<ComplaintDto> complaintDtos = complaintInnerServiceSMOImpl.queryComplaints(complaintDto);\n             complaintDtos = freshCurrentUser(complaintDtos);\n@@ -93,32 +92,28 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n         }\n \n         ApiComplaintVo apiComplaintVo = new ApiComplaintVo();\n-\n         apiComplaintVo.setTotal(count);\n         apiComplaintVo.setRecords((int) Math.ceil((double) count / (double) reqJson.getInteger(\"row\")));\n         apiComplaintVo.setComplaints(complaints);\n-\n         ResponseEntity<String> responseEntity = new ResponseEntity<String>(JSONObject.toJSONString(apiComplaintVo), HttpStatus.OK);\n-\n         context.setResponseEntity(responseEntity);\n-\n     }\n \n+\n     private List<ComplaintDto> freshCurrentUser(List<ComplaintDto> complaintDtos) {\n         List<ComplaintDto> tmpComplaintDtos = new ArrayList<>();\n         for (ComplaintDto complaintDto : complaintDtos) {\n             complaintDto = complaintUserInnerServiceSMOImpl.getTaskCurrentUser(complaintDto);\n             tmpComplaintDtos.add(complaintDto);\n         }\n-\n         return tmpComplaintDtos;\n     }\n \n+\n     private void refreshPhotos(List<ApiComplaintDataVo> complaints) {\n         List<PhotoVo> photoVos = null;\n         PhotoVo photoVo = null;\n         for (ApiComplaintDataVo complaintDataVo : complaints) {\n-\n             FileRelDto fileRelDto = new FileRelDto();\n             fileRelDto.setObjId(complaintDataVo.getComplaintId());\n             fileRelDto.setRelTypeCd(\"13000\");\n@@ -129,8 +124,8 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n                 photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n                 photoVos.add(photoVo);\n             }\n+\n             complaintDataVo.setPhotos(photoVos);\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "column": "78",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "112",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "112",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "128",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "129",
                    "column": "164",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/styler/05_predictions/random/files-repaired/0/ListComplaintsListener.java\nindex e17b59c81d8..8f5e59942eb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/styler/05_predictions/random/files-repaired/0/ListComplaintsListener.java\n@@ -126,8 +126,7 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n                 photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n-                photoVos.add(photoVo);\n+                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\"+ tmpFileRelDto .getFileRealName()+\"&communityId=\"+ complaintDataVo .getCommunityId());photoVos .add(photoVo);\n             }\n             complaintDataVo.setPhotos(photoVos);\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "129",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "79",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/styler/05_predictions/three_grams/files-repaired/0/ListComplaintsListener.java\nindex e17b59c81d8..f459b19b59c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/violations/0/ListComplaintsListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/java110-MicroCommunity/styler/05_predictions/three_grams/files-repaired/0/ListComplaintsListener.java\n@@ -126,8 +126,9 @@ public class ListComplaintsListener extends AbstractServiceApiListener {\n             photoVos = new ArrayList<>();\n             for (FileRelDto tmpFileRelDto : fileRelDtos) {\n                 photoVo = new PhotoVo();\n-                photoVo.setUrl(\"/callComponent/download/getFile/file?fileId=\" + tmpFileRelDto.getFileRealName() + \"&communityId=\" + complaintDataVo.getCommunityId());\n-                photoVos.add(photoVo);\n+                photoVo.setUrl( \"/callComponent/download/getFile/file?fileId=\"+ tmpFileRelDto.getFileRealName()\n+                + \"&communityId=\" + complaintDataVo.getCommunityId());\n+                 photoVos.add(photoVo);\n             }\n             complaintDataVo.setPhotos(photoVos);\n         }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}