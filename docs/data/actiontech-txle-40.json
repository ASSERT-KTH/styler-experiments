{
    "project_name": "actiontech-txle",
    "violation_id": "40",
    "information": {
        "violations": [
            {
                "line": "28",
                "severity": "error",
                "message": "Line is longer than 300 characters (found 321).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * 4.do nothing after deleting original data\n * 5.in a transaction, to prepare backup data and delete original data, the aim is to prevent a dirty change\n * 6.perform the compensation sql immediately in case of error, the compensation sql likes [INSERT INTO txle_sample_user SELECT id,name,balance,version,createtime FROM txle.backup_txle_sample_user WHERE globalTxId = '0457a9fd-5203-42c5-b5dc-817e4028d07e' AND localTxId = '6ff9679c-409c-4de5-b800-f3da04b581b6' FOR UPDATE]\n */\npublic class MySqlDeleteHandler extends AutoCompensateDeleteHandler {\n",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 300 characters (found 321).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 300 characters (found 321).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/violations/40/MySqlDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/naturalize/40/MySqlDeleteHandler.java\nindex 18ba7ae5583..c897479e25e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/violations/40/MySqlDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/naturalize/40/MySqlDeleteHandler.java\n@@ -100,4 +100,4 @@ public class MySqlDeleteHandler extends AutoCompensateDeleteHandler {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 300 characters (found 321).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/violations/40/MySqlDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/codebuff/40/MySqlDeleteHandler.java\nindex 18ba7ae5583..174c46a7226 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/violations/40/MySqlDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/actiontech-txle/codebuff/40/MySqlDeleteHandler.java\n@@ -11,7 +11,6 @@ import com.alibaba.druid.sql.dialect.mysql.ast.statement.MySqlDeleteStatement;\n import org.apache.servicecomb.saga.common.TxleConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n@@ -27,8 +26,8 @@ import java.util.Map;\n  * 5.in a transaction, to prepare backup data and delete original data, the aim is to prevent a dirty change\n  * 6.perform the compensation sql immediately in case of error, the compensation sql likes [INSERT INTO txle_sample_user SELECT id,name,balance,version,createtime FROM txle.backup_txle_sample_user WHERE globalTxId = '0457a9fd-5203-42c5-b5dc-817e4028d07e' AND localTxId = '6ff9679c-409c-4de5-b800-f3da04b581b6' FOR UPDATE]\n  */\n-public class MySqlDeleteHandler extends AutoCompensateDeleteHandler {\n \n+public class MySqlDeleteHandler extends AutoCompensateDeleteHandler {\n     private static volatile MySqlDeleteHandler mySqlDeleteHandler = null;\n     private static final Logger LOG = LoggerFactory.getLogger(MySqlDeleteHandler.class);\n \n@@ -60,14 +59,22 @@ public class MySqlDeleteHandler extends AutoCompensateDeleteHandler {\n             SQLExpr where = deleteStatement.getWhere();\n             // It doesn't matter, even though the 'where-sql' contains prepareBackupTable line break.\n             String whereSql = where.toString();\n-            LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"currentThreadId: [{}] - table: [{}] - where: [{}].\", Thread.currentThread().getId(), tableName, whereSql);\n+            LOG.debug(\n+                TxleConstants.logDebugPrefixWithTime() + \"currentThreadId: [{}] - table: [{}] - where: [{}].\",\n+                Thread.currentThread().getId(),\n+                tableName,\n+                whereSql);\n \n             // 3.create backup table\n             connection = delegate.getConnection();\n             this.prepareBackupTable(connection, tableName, txleBackupTableName);\n \n             // 4.backup data\n-            String backupDataSql = String.format(\"INSERT INTO \" + this.schema + \".\" + txleBackupTableName + \" SELECT *, '%s', '%s' FROM %s WHERE %s FOR UPDATE \" + TxleConstants.ACTION_SQL, globalTxId, localTxId, tableName, whereSql);\n+            String backupDataSql = String.format(\"INSERT INTO \" + this.schema + \".\" + txleBackupTableName + \" SELECT *, '%s', '%s' FROM %s WHERE %s FOR UPDATE \" + TxleConstants.ACTION_SQL,\n+                                                 globalTxId,\n+                                                 localTxId,\n+                                                 tableName,\n+                                                 whereSql);\n             LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"currentThreadId: [{}] - backupDataSql: [{}].\", Thread.currentThread().getId(), backupDataSql);\n             int backupResult = connection.prepareStatement(backupDataSql).executeUpdate();\n             if (backupResult > 0) {\n@@ -99,5 +106,4 @@ public class MySqlDeleteHandler extends AutoCompensateDeleteHandler {\n             }\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}