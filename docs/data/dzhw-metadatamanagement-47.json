{
    "project_name": "dzhw-metadatamanagement",
    "violation_id": "47",
    "information": {
        "violations": [
            {
                "line": "20",
                "column": "69",
                "severity": "error",
                "message": "'}' at column 69 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidQuestionIdName constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/47/ValidQuestionIdNameValidator.java\nindex 3b7355b44b1..5f167b251c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/47/ValidQuestionIdNameValidator.java\n@@ -17,7 +17,9 @@ public class ValidQuestionIdNameValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidQuestionIdName constraintAnnotation) {}\n+  public void initialize(ValidQuestionIdName constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/47/ValidQuestionIdNameValidator.java\nindex 3b7355b44b1..2b1a662cabb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/47/ValidQuestionIdNameValidator.java\n@@ -13,15 +13,16 @@ public class ValidQuestionIdNameValidator\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidQuestionIdName constraintAnnotation) {}\n+  public void initialize(ValidQuestionIdName constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "20",
                    "column": "69",
                    "severity": "error",
                    "message": "'}' at column 69 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/naturalize/47/ValidQuestionIdNameValidator.java\nindex 3b7355b44b1..9d6a15ff587 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/naturalize/47/ValidQuestionIdNameValidator.java\n@@ -27,8 +27,7 @@ public class ValidQuestionIdNameValidator\n    */\n   @Override\n   public boolean isValid(Question question, ConstraintValidatorContext context) {\n-\n-    if (question.isShadow()) {\n+  if (question.isShadow()) {\n       return true;\n     } else {\n       // check precondition\n@@ -40,4 +39,4 @@ public class ValidQuestionIdNameValidator\n           + question.getInstrumentNumber() + \"-\" + question.getNumber() + \"$\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'ConstraintValidatorContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/47/ValidQuestionIdNameValidator.java\nindex 3b7355b44b1..a35615fbcb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/47/ValidQuestionIdNameValidator.java\n@@ -2,22 +2,25 @@ package eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.Question;\n \n /**\n  * Validates the name of a id.\n  */\n-public class ValidQuestionIdNameValidator\n-    implements ConstraintValidator<ValidQuestionIdName, Question> {\n+\n+\n+public class ValidQuestionIdNameValidator implements ConstraintValidator<ValidQuestionIdName, Question> {\n \n   /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n+\n   @Override\n-  public void initialize(ValidQuestionIdName constraintAnnotation) {}\n+  public void initialize(ValidQuestionIdName constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n@@ -25,19 +28,21 @@ public class ValidQuestionIdNameValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n-  @Override\n-  public boolean isValid(Question question, ConstraintValidatorContext context) {\n \n+\n+  @Override\n+  public boolean isValid(Question question,\n+    ConstraintValidatorContext context) {\n     if (question.isShadow()) {\n       return true;\n     } else {\n       // check precondition\n-      if (question.getInstrumentId() == null || question.getNumber() == null) {\n+      if (question.getInstrumentId() == null\n+          || question.getNumber() == null) {\n         return false;\n       }\n \n-      return question.getId().equals(\"que-\" + question.getDataAcquisitionProjectId() + \"-ins\"\n-          + question.getInstrumentNumber() + \"-\" + question.getNumber() + \"$\");\n+      return question.getId().equals(\"que-\" + question.getDataAcquisitionProjectId() + \"-ins\" + question.getInstrumentNumber() + \"-\" + question.getNumber() + \"$\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/47/ValidQuestionIdNameValidator.java\nindex 3b7355b44b1..5f167b251c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/47/ValidQuestionIdNameValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/47/ValidQuestionIdNameValidator.java\n@@ -17,7 +17,9 @@ public class ValidQuestionIdNameValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidQuestionIdName constraintAnnotation) {}\n+  public void initialize(ValidQuestionIdName constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "20",
                    "column": "69",
                    "severity": "error",
                    "message": "'}' at column 69 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}