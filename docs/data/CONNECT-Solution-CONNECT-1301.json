{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "1301",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.event;\n\n/**\n * DelegatingEventDescriptionBuilder that transforms arguments from one method into the format used by another concrete",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1301/ArgTransformerEventDescriptionBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/1301/ArgTransformerEventDescriptionBuilder.java\nindex 55305cc5ced..f50f941c2fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1301/ArgTransformerEventDescriptionBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/1301/ArgTransformerEventDescriptionBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n /**\n@@ -33,31 +34,31 @@ package gov.hhs.fha.nhinc.event;\n  */\n public abstract class ArgTransformerEventDescriptionBuilder extends DelegatingEventDescriptionBuilder {\n \n-    @Override\n-    public final void setArguments(Object... arguments) {\n-        Object[] transformedArguments = transformArguments(arguments);\n-        getDelegate().setArguments(transformedArguments);\n-    }\n+  @Override\n+  public final void setArguments(Object... arguments) {\n+    Object[] transformedArguments = transformArguments(arguments);\n+    getDelegate().setArguments(transformedArguments);\n+  }\n \n-    @Override\n-    public final void setReturnValue(Object returnValue) {\n-        Object transformedReturnValue = transformReturnValue(returnValue);\n-        getDelegate().setReturnValue(transformedReturnValue);\n-    }\n+  @Override\n+  public final void setReturnValue(Object returnValue) {\n+    Object transformedReturnValue = transformReturnValue(returnValue);\n+    getDelegate().setReturnValue(transformedReturnValue);\n+  }\n \n-    /**\n-     * Go from the input arguments to the delegate's input arguments.\n-     *\n-     * @param arguments input arguments that <code>setArguments</code> will be called with\n-     * @return arguments expected by the delegate\n-     */\n-    public abstract Object[] transformArguments(Object[] arguments);\n+  /**\n+   * Go from the input arguments to the delegate's input arguments.\n+   *\n+   * @param arguments input arguments that <code>setArguments</code> will be called with\n+   * @return arguments expected by the delegate\n+   */\n+  public abstract Object[] transformArguments(Object[] arguments);\n \n-    /**\n-     * Go from the input return value to the delegate's return value.\n-     *\n-     * @param returnValue value <code>setReturnValue</code> will be called with\n-     * @return value expected by the delegate\n-     */\n-    public abstract Object transformReturnValue(Object returnValue);\n+  /**\n+   * Go from the input return value to the delegate's return value.\n+   *\n+   * @param returnValue value <code>setReturnValue</code> will be called with\n+   * @return value expected by the delegate\n+   */\n+  public abstract Object transformReturnValue(Object returnValue);\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1301/ArgTransformerEventDescriptionBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/1301/ArgTransformerEventDescriptionBuilder.java\nindex 55305cc5ced..c9b8015a1a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1301/ArgTransformerEventDescriptionBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/1301/ArgTransformerEventDescriptionBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n /**\n@@ -60,4 +61,4 @@ public abstract class ArgTransformerEventDescriptionBuilder extends DelegatingEv\n      * @return value expected by the delegate\n      */\n     public abstract Object transformReturnValue(Object returnValue);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "42",
                    "column": "15",
                    "severity": "error",
                    "message": "'Object' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1301/ArgTransformerEventDescriptionBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/1301/ArgTransformerEventDescriptionBuilder.java\nindex 55305cc5ced..4bfce5ac545 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1301/ArgTransformerEventDescriptionBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/1301/ArgTransformerEventDescriptionBuilder.java\n@@ -31,14 +31,19 @@ package gov.hhs.fha.nhinc.event;\n  * builder. Useful for gateway to non-gateway transformations. Concrete implementations should call\n  * <code>setDelegate</code> during construction.\n  */\n-public abstract class ArgTransformerEventDescriptionBuilder extends DelegatingEventDescriptionBuilder {\n+\n+\n+public abstract class ArgTransformerEventDescriptionBuilder extends\n+    DelegatingEventDescriptionBuilder {\n+\n \n     @Override\n     public final void setArguments(Object... arguments) {\n-        Object[] transformedArguments = transformArguments(arguments);\n+        Object [] transformedArguments = transformArguments(arguments);\n         getDelegate().setArguments(transformedArguments);\n     }\n \n+\n     @Override\n     public final void setReturnValue(Object returnValue) {\n         Object transformedReturnValue = transformReturnValue(returnValue);\n@@ -51,7 +56,11 @@ public abstract class ArgTransformerEventDescriptionBuilder extends DelegatingEv\n      * @param arguments input arguments that <code>setArguments</code> will be called with\n      * @return arguments expected by the delegate\n      */\n-    public abstract Object[] transformArguments(Object[] arguments);\n+\n+\n+    public abstract Object\n+                        [ ] transformArguments(Object\n+                                                   [ ] arguments);\n \n     /**\n      * Go from the input return value to the delegate's return value.\n@@ -59,5 +68,7 @@ public abstract class ArgTransformerEventDescriptionBuilder extends DelegatingEv\n      * @param returnValue value <code>setReturnValue</code> will be called with\n      * @return value expected by the delegate\n      */\n+\n+\n     public abstract Object transformReturnValue(Object returnValue);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}