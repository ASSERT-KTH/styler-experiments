{
    "project_name": "neo4j-neo4j",
    "violation_id": "683",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/683/GeneratingInputIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/683/GeneratingInputIterator.java\nindex 42f62b2720c..b78be52473e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/683/GeneratingInputIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/683/GeneratingInputIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import java.io.IOException;\n@@ -46,8 +47,8 @@ public class GeneratingInputIterator<CHUNKSTATE> implements InputIterator\n     private long nextBatch;\n     private long numberOfBatches;\n \n-    public GeneratingInputIterator( long totalCount, int batchSize, LongFunction<CHUNKSTATE> states,\n-            Generator<CHUNKSTATE> generator, long startId )\n+    public GeneratingInputIterator(long totalCount, int batchSize, LongFunction<CHUNKSTATE> states,\n+                                   Generator<CHUNKSTATE> generator, long startId)\n     {\n         this.totalCount = totalCount;\n         this.batchSize = batchSize;\n@@ -69,22 +70,21 @@ public class GeneratingInputIterator<CHUNKSTATE> implements InputIterator\n     }\n \n     @Override\n-    public synchronized boolean next( InputChunk chunk )\n+    public synchronized boolean next(InputChunk chunk)\n     {\n-        if ( numberOfBatches > 1 )\n+        if (numberOfBatches > 1)\n         {\n             numberOfBatches--;\n             long batch = nextBatch++;\n-            ((Chunk) chunk).initialize( states.apply( batch ), batch, batchSize );\n+            ((Chunk) chunk).initialize(states.apply(batch), batch, batchSize);\n             return true;\n-        }\n-        else if ( numberOfBatches == 1 )\n+        } else if (numberOfBatches == 1)\n         {\n             numberOfBatches--;\n-            int rest = toIntExact( totalCount % batchSize );\n+            int rest = toIntExact(totalCount % batchSize);\n             int size = rest != 0 ? rest : batchSize;\n             long batch = nextBatch++;\n-            ((Chunk) chunk).initialize( states.apply( batch ), batch, size );\n+            ((Chunk) chunk).initialize(states.apply(batch), batch, size);\n             return true;\n         }\n         return false;\n@@ -106,7 +106,7 @@ public class GeneratingInputIterator<CHUNKSTATE> implements InputIterator\n          * @param state CHUNKSTATE which is the source of data generation for this chunk.\n          * @param batch zero-based id (order) of this batch.\n          */\n-        private void initialize( CHUNKSTATE state, long batch, int count )\n+        private void initialize(CHUNKSTATE state, long batch, int count)\n         {\n             this.state = state;\n             this.count = count;\n@@ -115,11 +115,11 @@ public class GeneratingInputIterator<CHUNKSTATE> implements InputIterator\n         }\n \n         @Override\n-        public boolean next( InputEntityVisitor visitor ) throws IOException\n+        public boolean next(InputEntityVisitor visitor) throws IOException\n         {\n-            if ( itemInBatch < count )\n+            if (itemInBatch < count)\n             {\n-                generator.accept( state, visitor, baseId + itemInBatch );\n+                generator.accept(state, visitor, baseId + itemInBatch);\n                 visitor.endOfEntity();\n                 itemInBatch++;\n                 return true;\n@@ -128,7 +128,7 @@ public class GeneratingInputIterator<CHUNKSTATE> implements InputIterator\n         }\n     }\n \n-    public static final InputIterator EMPTY = new GeneratingInputIterator<Void>( 0, 1, batch -> null, null, 0 )\n+    public static final InputIterator EMPTY = new GeneratingInputIterator<Void>(0, 1, batch -> null, null, 0)\n     {   // here's nothing\n     };\n \n@@ -136,6 +136,6 @@ public class GeneratingInputIterator<CHUNKSTATE> implements InputIterator\n \n     public interface Generator<CHUNKSTATE>\n     {\n-        void accept( CHUNKSTATE state, InputEntityVisitor visitor, long id );\n+        void accept(CHUNKSTATE state, InputEntityVisitor visitor, long id);\n     }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}