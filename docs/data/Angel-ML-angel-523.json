{
    "project_name": "Angel-ML-angel",
    "violation_id": "523",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "344",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/523/PSAgent.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/523/PSAgent.java\nindex 68f65c365cc..08bdbaaa585 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/523/PSAgent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/523/PSAgent.java\n@@ -67,759 +67,760 @@ import java.util.concurrent.atomic.AtomicBoolean;\n  * network requests in matrix partition.\r\n  */\r\n public class PSAgent {\r\n-  private static final Log LOG = LogFactory.getLog(PSAgent.class);\r\n-  /**\r\n-   * application configuration\r\n-   */\r\n-  private final Configuration conf;\r\n-\r\n-  /**\r\n-   * application id\r\n-   */\r\n-  private final ApplicationId appId;\r\n-\r\n-  /**\r\n-   * the user that submit the application\r\n-   */\r\n-  private final String user;\r\n-\r\n-  /**\r\n-   * ps agent attempt id\r\n-   */\r\n-  private volatile int id;\r\n-\r\n-  /**\r\n-   * the connection manager for rpc to master\r\n-   */\r\n-  private final TConnection connection;\r\n-\r\n-  /**\r\n-   * the rpc client to master\r\n-   */\r\n-  private volatile MasterClient masterClient;\r\n-\r\n-  private volatile PSControlClientManager psControlClientManager;\r\n-\r\n-  /**\r\n-   * psagent location(ip and listening port)\r\n-   */\r\n-  private volatile Location location;\r\n-\r\n-  /**\r\n-   * psagent location(ip and listening port)\r\n-   */\r\n-  private final Location masterLocation;\r\n-\r\n-  /**\r\n-   * master location(ip and listening port)\r\n-   */\r\n-  private volatile PSAgentLocationManager locationManager;\r\n-\r\n-  /**\r\n-   * matrix meta manager\r\n-   */\r\n-  private volatile PSAgentMatrixMetaManager matrixMetaManager;\r\n-\r\n-  /**\r\n-   * matrix updates cache\r\n-   */\r\n-  //private volatile MatrixOpLogCache opLogCache;\r\n-\r\n-  /**\r\n-   * the rpc client to parameter servers\r\n-   */\r\n-  private volatile MatrixTransportClient matrixTransClient;\r\n-\r\n-  /**\r\n-   * psagent initialization completion flag\r\n-   */\r\n-  private final AtomicBoolean psAgentInitFinishedFlag;\r\n-\r\n-  /**\r\n-   * psagent heartbeat thread\r\n-   */\r\n-  private volatile Thread heartbeatThread;\r\n-\r\n-  /**\r\n-   * psagent stop flag\r\n-   */\r\n-  private final AtomicBoolean stopped;\r\n-\r\n-  /**\r\n-   * psagent heartbeat interval in milliseconds\r\n-   */\r\n-  private final int heartbeatIntervalMs;\r\n-\r\n-  /**\r\n-   * psagent metrics\r\n-   */\r\n-  private final Map<String, String> metrics;\r\n-\r\n-  /**\r\n-   * matrix storage manager\r\n-   */\r\n-  private volatile MatrixStorageManager matrixStorageManager;\r\n-\r\n-  /**\r\n-   * application layer request adapter\r\n-   */\r\n-  private volatile UserRequestAdapter userRequestAdapter;\r\n-\r\n-  /**\r\n-   * if we need startup heartbeat thread\r\n-   */\r\n-  private final boolean needHeartBeat;\r\n-\r\n-  /**\r\n-   * application running mode(LOCAL,YARN)\r\n-   */\r\n-  private final RunningMode runningMode;\r\n-\r\n-  /**\r\n-   * the machine learning executor reference\r\n-   */\r\n-  private final Executor executor;\r\n-\r\n-  /**\r\n-   * psagent exited flag\r\n-   */\r\n-  private final AtomicBoolean exitedFlag;\r\n-\r\n-  /**\r\n-   * Control connection manager\r\n-   */\r\n-  private volatile TConnection controlConnectManager;\r\n-\r\n-  /**\r\n-   * Create a new PSAgent instance.\r\n-   *\r\n-   * @param masterIp    master ip\r\n-   * @param masterPort  master listening port\r\n-   * @param clientIndex psagent index\r\n-   */\r\n-  public PSAgent(String masterIp, int masterPort, int clientIndex) {\r\n-    this(new Configuration(), masterIp, masterPort, clientIndex, true, null);\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a new PSAgent instance.\r\n-   *\r\n-   * @param conf        application configuration\r\n-   * @param masterIp    master listening port\r\n-   * @param masterPort  master listening port\r\n-   * @param clientIndex psagent index\r\n-   */\r\n-  public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex) {\r\n-    this(conf, masterIp, masterPort, clientIndex, true, null);\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a new PSAgent instance.\r\n-   *\r\n-   * @param conf          application configuration\r\n-   * @param appId         application id\r\n-   * @param user          the user that submit this application\r\n-   * @param masterIp      master ip\r\n-   * @param masterPort    master port\r\n-   * @param needHeartBeat true means need startup heartbeat thread\r\n-   * @param executor      the machine learning executor reference\r\n-   */\r\n-  public PSAgent(Configuration conf, ApplicationId appId, String user, String masterIp,\r\n-                 int masterPort, boolean needHeartBeat, Executor executor) {\r\n-    this.needHeartBeat = needHeartBeat;\r\n-    this.conf = conf;\r\n-    this.executor = executor;\r\n-\r\n-    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n-        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n-    this.runningMode = initRunningMode(conf);\r\n-    this.appId = appId;\r\n-    this.user = user;\r\n-    this.masterLocation = new Location(masterIp, masterPort);\r\n-    this.connection = TConnectionManager.getConnection(conf);\r\n-    this.psAgentInitFinishedFlag = new AtomicBoolean(false);\r\n-    this.stopped = new AtomicBoolean(false);\r\n-    this.exitedFlag = new AtomicBoolean(false);\r\n-    this.metrics = new HashMap<>();\r\n-    PSAgentContext.get().setPsAgent(this);\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a new PSAgent instance.\r\n-   *\r\n-   * @param conf          application configuration\r\n-   * @param masterIp      master ip\r\n-   * @param masterPort    master port\r\n-   * @param clientIndex   ps agent index\r\n-   * @param needHeartBeat true means need startup heartbeat thread\r\n-   * @param executor      the machine learning executor reference\r\n-   */\r\n-  public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex,\r\n-                 boolean needHeartBeat, Executor executor) {\r\n-    this.needHeartBeat = needHeartBeat;\r\n-    this.conf = conf;\r\n-    this.executor = executor;\r\n-    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n-        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n-    this.runningMode = initRunningMode(conf);\r\n-\r\n-    this.masterLocation = new Location(masterIp, masterPort);\r\n-    this.appId = null;\r\n-    this.user = null;\r\n-\r\n-    this.connection = TConnectionManager.getConnection(conf);\r\n-    this.psAgentInitFinishedFlag = new AtomicBoolean(false);\r\n-    this.stopped = new AtomicBoolean(false);\r\n-    this.exitedFlag = new AtomicBoolean(false);\r\n-    this.metrics = new HashMap<>();\r\n-    PSAgentContext.get().setPsAgent(this);\r\n-  }\r\n-\r\n-  private RunningMode initRunningMode(Configuration conf) {\r\n-    String mode = conf.get(AngelConf.ANGEL_RUNNING_MODE, AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\r\n-\r\n-    if (mode.equals(RunningMode.ANGEL_PS.toString())) {\r\n-      return RunningMode.ANGEL_PS;\r\n-    } else {\r\n-      return RunningMode.ANGEL_PS_WORKER;\r\n-    }\r\n-  }\r\n-\r\n-  public void initAndStart() throws Exception {\r\n-    // Init control connection manager\r\n-    controlConnectManager = TConnectionManager.getConnection(conf);\r\n-\r\n-    // Get ps locations from master and put them to the location cache.\r\n-    locationManager = new PSAgentLocationManager(PSAgentContext.get());\r\n-    locationManager.setMasterLocation(masterLocation);\r\n-\r\n-    // Build and initialize rpc client to master\r\n-    masterClient = new MasterClient();\r\n-    masterClient.init();\r\n-\r\n-    // Get psagent id\r\n-    id = masterClient.getPSAgentId();\r\n-\r\n-    // Build PS control rpc client manager\r\n-    psControlClientManager = new PSControlClientManager();\r\n-\r\n-    // Build local location\r\n-    String localIp = NetUtils.getRealLocalIP();\r\n-    int port = NetUtils.chooseAListenPort(conf);\r\n-    location = new Location(localIp, port);\r\n-    register();\r\n-\r\n-    // Initialize matrix meta information\r\n-    //clockCache = new ClockCache();\r\n-    List<MatrixMeta> matrixMetas = masterClient.getMatrices();\r\n-    LOG.info(\"PSAgent get matrices from master,\" + matrixMetas.size());\r\n-    this.matrixMetaManager = new PSAgentMatrixMetaManager();\r\n-    matrixMetaManager.addMatrices(matrixMetas);\r\n-\r\n-    Map<ParameterServerId, Location> psIdToLocMap = masterClient.getPSLocations();\r\n-    List<ParameterServerId> psIds = new ArrayList<>(psIdToLocMap.keySet());\r\n-    Collections.sort(psIds, new Comparator<ParameterServerId>() {\r\n-      @Override public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n-        return s1.getIndex() - s2.getIndex();\r\n-      }\r\n-    });\r\n-    int size = psIds.size();\r\n-    locationManager.setPsIds(psIds.toArray(new ParameterServerId[0]));\r\n-    for (int i = 0; i < size; i++) {\r\n-      if (psIdToLocMap.containsKey(psIds.get(i))) {\r\n-        locationManager.setPsLocation(psIds.get(i), psIdToLocMap.get(psIds.get(i)));\r\n-      }\r\n-    }\r\n-\r\n-    matrixTransClient = new MatrixTransportClient();\r\n-    userRequestAdapter = new UserRequestAdapter();\r\n-\r\n-    if (runningMode == RunningMode.ANGEL_PS_WORKER) {\r\n-\r\n-      //opLogCache = new MatrixOpLogCache();\r\n-\r\n-      matrixStorageManager = new MatrixStorageManager();\r\n-\r\n-      //int staleness = conf.getInt(AngelConf.ANGEL_STALENESS, AngelConf.DEFAULT_ANGEL_STALENESS);\r\n-      //consistencyController = new ConsistencyController(staleness);\r\n-      //consistencyController.init();\r\n-    }\r\n-\r\n-    psAgentInitFinishedFlag.set(true);\r\n-\r\n-    // Start all services\r\n-    matrixTransClient.start();\r\n-    userRequestAdapter.start();\r\n-\r\n-    if (runningMode == RunningMode.ANGEL_PS_WORKER) {\r\n-      //clockCache.start();\r\n-      //opLogCache.start();\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix meta from master and refresh the local cache.\r\n-   *\r\n-   * @throws ServiceException     rpc failed\r\n-   * @throws InterruptedException interrupted while wait for rpc results\r\n-   */\r\n-  public void refreshMatrixInfo()\r\n-      throws InterruptedException, ServiceException, ClassNotFoundException {\r\n-    matrixMetaManager.addMatrices(masterClient.getMatrices());\r\n-  }\r\n-\r\n-  /**\r\n-   * Stop ps agent\r\n-   */\r\n-  public void stop() {\r\n-    if (!stopped.getAndSet(true)) {\r\n-      LOG.info(\"stop heartbeat thread!\");\r\n-      if (heartbeatThread != null) {\r\n-        heartbeatThread.interrupt();\r\n+    private static final Log LOG = LogFactory.getLog(PSAgent.class);\r\n+    /**\r\n+     * application configuration\r\n+     */\r\n+    private final Configuration conf;\r\n+\r\n+    /**\r\n+     * application id\r\n+     */\r\n+    private final ApplicationId appId;\r\n+\r\n+    /**\r\n+     * the user that submit the application\r\n+     */\r\n+    private final String user;\r\n+\r\n+    /**\r\n+     * ps agent attempt id\r\n+     */\r\n+    private volatile int id;\r\n+\r\n+    /**\r\n+     * the connection manager for rpc to master\r\n+     */\r\n+    private final TConnection connection;\r\n+\r\n+    /**\r\n+     * the rpc client to master\r\n+     */\r\n+    private volatile MasterClient masterClient;\r\n+\r\n+    private volatile PSControlClientManager psControlClientManager;\r\n+\r\n+    /**\r\n+     * psagent location(ip and listening port)\r\n+     */\r\n+    private volatile Location location;\r\n+\r\n+    /**\r\n+     * psagent location(ip and listening port)\r\n+     */\r\n+    private final Location masterLocation;\r\n+\r\n+    /**\r\n+     * master location(ip and listening port)\r\n+     */\r\n+    private volatile PSAgentLocationManager locationManager;\r\n+\r\n+    /**\r\n+     * matrix meta manager\r\n+     */\r\n+    private volatile PSAgentMatrixMetaManager matrixMetaManager;\r\n+\r\n+    /**\r\n+     * matrix updates cache\r\n+     */\r\n+    //private volatile MatrixOpLogCache opLogCache;\r\n+\r\n+    /**\r\n+     * the rpc client to parameter servers\r\n+     */\r\n+    private volatile MatrixTransportClient matrixTransClient;\r\n+\r\n+    /**\r\n+     * psagent initialization completion flag\r\n+     */\r\n+    private final AtomicBoolean psAgentInitFinishedFlag;\r\n+\r\n+    /**\r\n+     * psagent heartbeat thread\r\n+     */\r\n+    private volatile Thread heartbeatThread;\r\n+\r\n+    /**\r\n+     * psagent stop flag\r\n+     */\r\n+    private final AtomicBoolean stopped;\r\n+\r\n+    /**\r\n+     * psagent heartbeat interval in milliseconds\r\n+     */\r\n+    private final int heartbeatIntervalMs;\r\n+\r\n+    /**\r\n+     * psagent metrics\r\n+     */\r\n+    private final Map<String, String> metrics;\r\n+\r\n+    /**\r\n+     * matrix storage manager\r\n+     */\r\n+    private volatile MatrixStorageManager matrixStorageManager;\r\n+\r\n+    /**\r\n+     * application layer request adapter\r\n+     */\r\n+    private volatile UserRequestAdapter userRequestAdapter;\r\n+\r\n+    /**\r\n+     * if we need startup heartbeat thread\r\n+     */\r\n+    private final boolean needHeartBeat;\r\n+\r\n+    /**\r\n+     * application running mode(LOCAL,YARN)\r\n+     */\r\n+    private final RunningMode runningMode;\r\n+\r\n+    /**\r\n+     * the machine learning executor reference\r\n+     */\r\n+    private final Executor executor;\r\n+\r\n+    /**\r\n+     * psagent exited flag\r\n+     */\r\n+    private final AtomicBoolean exitedFlag;\r\n+\r\n+    /**\r\n+     * Control connection manager\r\n+     */\r\n+    private volatile TConnection controlConnectManager;\r\n+\r\n+    /**\r\n+     * Create a new PSAgent instance.\r\n+     *\r\n+     * @param masterIp    master ip\r\n+     * @param masterPort  master listening port\r\n+     * @param clientIndex psagent index\r\n+     */\r\n+    public PSAgent(String masterIp, int masterPort, int clientIndex) {\r\n+        this(new Configuration(), masterIp, masterPort, clientIndex, true, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new PSAgent instance.\r\n+     *\r\n+     * @param conf        application configuration\r\n+     * @param masterIp    master listening port\r\n+     * @param masterPort  master listening port\r\n+     * @param clientIndex psagent index\r\n+     */\r\n+    public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex) {\r\n+        this(conf, masterIp, masterPort, clientIndex, true, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new PSAgent instance.\r\n+     *\r\n+     * @param conf          application configuration\r\n+     * @param appId         application id\r\n+     * @param user          the user that submit this application\r\n+     * @param masterIp      master ip\r\n+     * @param masterPort    master port\r\n+     * @param needHeartBeat true means need startup heartbeat thread\r\n+     * @param executor      the machine learning executor reference\r\n+     */\r\n+    public PSAgent(Configuration conf, ApplicationId appId, String user, String masterIp,\r\n+                   int masterPort, boolean needHeartBeat, Executor executor) {\r\n+        this.needHeartBeat = needHeartBeat;\r\n+        this.conf = conf;\r\n+        this.executor = executor;\r\n+\r\n+        this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n+                AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n+        this.runningMode = initRunningMode(conf);\r\n+        this.appId = appId;\r\n+        this.user = user;\r\n+        this.masterLocation = new Location(masterIp, masterPort);\r\n+        this.connection = TConnectionManager.getConnection(conf);\r\n+        this.psAgentInitFinishedFlag = new AtomicBoolean(false);\r\n+        this.stopped = new AtomicBoolean(false);\r\n+        this.exitedFlag = new AtomicBoolean(false);\r\n+        this.metrics = new HashMap<>();\r\n+        PSAgentContext.get().setPsAgent(this);\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a new PSAgent instance.\r\n+     *\r\n+     * @param conf          application configuration\r\n+     * @param masterIp      master ip\r\n+     * @param masterPort    master port\r\n+     * @param clientIndex   ps agent index\r\n+     * @param needHeartBeat true means need startup heartbeat thread\r\n+     * @param executor      the machine learning executor reference\r\n+     */\r\n+    public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex,\r\n+                   boolean needHeartBeat, Executor executor) {\r\n+        this.needHeartBeat = needHeartBeat;\r\n+        this.conf = conf;\r\n+        this.executor = executor;\r\n+        this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n+                AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n+        this.runningMode = initRunningMode(conf);\r\n+\r\n+        this.masterLocation = new Location(masterIp, masterPort);\r\n+        this.appId = null;\r\n+        this.user = null;\r\n+\r\n+        this.connection = TConnectionManager.getConnection(conf);\r\n+        this.psAgentInitFinishedFlag = new AtomicBoolean(false);\r\n+        this.stopped = new AtomicBoolean(false);\r\n+        this.exitedFlag = new AtomicBoolean(false);\r\n+        this.metrics = new HashMap<>();\r\n+        PSAgentContext.get().setPsAgent(this);\r\n+    }\r\n+\r\n+    private RunningMode initRunningMode(Configuration conf) {\r\n+        String mode = conf.get(AngelConf.ANGEL_RUNNING_MODE, AngelConf.DEFAULT_ANGEL_RUNNING_MODE);\r\n+\r\n+        if (mode.equals(RunningMode.ANGEL_PS.toString())) {\r\n+            return RunningMode.ANGEL_PS;\r\n+        } else {\r\n+            return RunningMode.ANGEL_PS_WORKER;\r\n+        }\r\n+    }\r\n+\r\n+    public void initAndStart() throws Exception {\r\n+        // Init control connection manager\r\n+        controlConnectManager = TConnectionManager.getConnection(conf);\r\n+\r\n+        // Get ps locations from master and put them to the location cache.\r\n+        locationManager = new PSAgentLocationManager(PSAgentContext.get());\r\n+        locationManager.setMasterLocation(masterLocation);\r\n+\r\n+        // Build and initialize rpc client to master\r\n+        masterClient = new MasterClient();\r\n+        masterClient.init();\r\n+\r\n+        // Get psagent id\r\n+        id = masterClient.getPSAgentId();\r\n+\r\n+        // Build PS control rpc client manager\r\n+        psControlClientManager = new PSControlClientManager();\r\n+\r\n+        // Build local location\r\n+        String localIp = NetUtils.getRealLocalIP();\r\n+        int port = NetUtils.chooseAListenPort(conf);\r\n+        location = new Location(localIp, port);\r\n+        register();\r\n+\r\n+        // Initialize matrix meta information\r\n+        //clockCache = new ClockCache();\r\n+        List<MatrixMeta> matrixMetas = masterClient.getMatrices();\r\n+        LOG.info(\"PSAgent get matrices from master,\" + matrixMetas.size());\r\n+        this.matrixMetaManager = new PSAgentMatrixMetaManager();\r\n+        matrixMetaManager.addMatrices(matrixMetas);\r\n+\r\n+        Map<ParameterServerId, Location> psIdToLocMap = masterClient.getPSLocations();\r\n+        List<ParameterServerId> psIds = new ArrayList<>(psIdToLocMap.keySet());\r\n+        Collections.sort(psIds, new Comparator<ParameterServerId>() {\r\n+            @Override\r\n+            public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n+                return s1.getIndex() - s2.getIndex();\r\n+            }\r\n+        });\r\n+        int size = psIds.size();\r\n+        locationManager.setPsIds(psIds.toArray(new ParameterServerId[0]));\r\n+        for (int i = 0; i < size; i++) {\r\n+            if (psIdToLocMap.containsKey(psIds.get(i))) {\r\n+                locationManager.setPsLocation(psIds.get(i), psIdToLocMap.get(psIds.get(i)));\r\n+            }\r\n+        }\r\n+\r\n+        matrixTransClient = new MatrixTransportClient();\r\n+        userRequestAdapter = new UserRequestAdapter();\r\n+\r\n+        if (runningMode == RunningMode.ANGEL_PS_WORKER) {\r\n+\r\n+            //opLogCache = new MatrixOpLogCache();\r\n+\r\n+            matrixStorageManager = new MatrixStorageManager();\r\n+\r\n+            //int staleness = conf.getInt(AngelConf.ANGEL_STALENESS, AngelConf.DEFAULT_ANGEL_STALENESS);\r\n+            //consistencyController = new ConsistencyController(staleness);\r\n+            //consistencyController.init();\r\n+        }\r\n+\r\n+        psAgentInitFinishedFlag.set(true);\r\n+\r\n+        // Start all services\r\n+        matrixTransClient.start();\r\n+        userRequestAdapter.start();\r\n+\r\n+        if (runningMode == RunningMode.ANGEL_PS_WORKER) {\r\n+            //clockCache.start();\r\n+            //opLogCache.start();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix meta from master and refresh the local cache.\r\n+     *\r\n+     * @throws ServiceException     rpc failed\r\n+     * @throws InterruptedException interrupted while wait for rpc results\r\n+     */\r\n+    public void refreshMatrixInfo()\r\n+            throws InterruptedException, ServiceException, ClassNotFoundException {\r\n+        matrixMetaManager.addMatrices(masterClient.getMatrices());\r\n+    }\r\n+\r\n+    /**\r\n+     * Stop ps agent\r\n+     */\r\n+    public void stop() {\r\n+        if (!stopped.getAndSet(true)) {\r\n+            LOG.info(\"stop heartbeat thread!\");\r\n+            if (heartbeatThread != null) {\r\n+                heartbeatThread.interrupt();\r\n+                try {\r\n+                    heartbeatThread.join();\r\n+                } catch (InterruptedException ie) {\r\n+                    LOG.warn(\"InterruptedException while stopping heartbeatThread:\", ie);\r\n+                }\r\n+                heartbeatThread = null;\r\n+            }\r\n+\r\n+            LOG.info(\"stop user request adapater\");\r\n+            if (userRequestAdapter != null) {\r\n+                userRequestAdapter.stop();\r\n+                userRequestAdapter = null;\r\n+            }\r\n+\r\n+            LOG.info(\"stop rpc dispacher\");\r\n+            if (matrixTransClient != null) {\r\n+                matrixTransClient.stop();\r\n+                matrixTransClient = null;\r\n+            }\r\n+\r\n+            if (PSAgentContext.get() != null) {\r\n+                PSAgentContext.get().clear();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    protected void heartbeat() throws ServiceException {\r\n+        PSAgentReportResponse response = masterClient.psAgentReport();\r\n+        switch (response.getCommand()) {\r\n+            case PSAGENT_NEED_REGISTER:\r\n+                try {\r\n+                    register();\r\n+                } catch (Exception x) {\r\n+                    LOG.error(\"register failed: \", x);\r\n+                    stop();\r\n+                }\r\n+                break;\r\n+\r\n+            case PSAGENT_SHUTDOWN:\r\n+                LOG.error(\"shutdown command come from appmaster, exit now!!\");\r\n+                stop();\r\n+                break;\r\n+            default:\r\n+                break;\r\n+        }\r\n+    }\r\n+\r\n+    private void register() throws ServiceException {\r\n+        PSAgentRegisterResponse response = masterClient.psAgentRegister();\r\n+        if (response.getCommand() == PSAgentCommandProto.PSAGENT_SHUTDOWN) {\r\n+            LOG.fatal(\"register to master, receive shutdown command\");\r\n+            stop();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get application configuration\r\n+     *\r\n+     * @return Configuration application configuration\r\n+     */\r\n+    public Configuration getConf() {\r\n+        return conf;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get master location\r\n+     *\r\n+     * @return Location master location\r\n+     */\r\n+    public Location getMasterLocation() {\r\n+        return locationManager.getMasterLocation();\r\n+    }\r\n+\r\n+    /**\r\n+     * Get application id\r\n+     *\r\n+     * @return ApplicationId application id\r\n+     */\r\n+    public ApplicationId getAppId() {\r\n+        return appId;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the user that submits the application\r\n+     *\r\n+     * @return String the user that submits the application\r\n+     */\r\n+    public String getUser() {\r\n+        return user;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the connection manager for rpc to master\r\n+     *\r\n+     * @return TConnection the connection manager for rpc to master\r\n+     */\r\n+    public TConnection getConnection() {\r\n+        return connection;\r\n+    }\r\n+\r\n+    /**\r\n+     * get the rpc client to master\r\n+     *\r\n+     * @return MasterClient the rpc client to master\r\n+     */\r\n+    public MasterClient getMasterClient() {\r\n+        return masterClient;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get ps agent location ip\r\n+     *\r\n+     * @return String ps agent location ip\r\n+     */\r\n+    public String getIp() {\r\n+        return location.getIp();\r\n+    }\r\n+\r\n+    /**\r\n+     * Notify run success message to master\r\n+     */\r\n+    public void done() {\r\n+        if (!exitedFlag.getAndSet(true)) {\r\n+            LOG.info(\"psagent success done\");\r\n+            RunningMode mode = PSAgentContext.get().getRunningMode();\r\n+\r\n+            // Stop all modules\r\n+            if (executor != null) {\r\n+                executor.done();\r\n+            } else {\r\n+                stop();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Notify run failed message to master\r\n+     *\r\n+     * @param errorMsg detail failed message\r\n+     */\r\n+    public void error(String errorMsg) {\r\n+        if (!exitedFlag.getAndSet(true)) {\r\n+            LOG.info(\"psagent falied\");\r\n+            // Stop all modules\r\n+            if (executor != null) {\r\n+                executor.error(errorMsg);\r\n+            } else {\r\n+                stop();\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get ps agent location\r\n+     *\r\n+     * @return Location ps agent location\r\n+     */\r\n+    public Location getLocation() {\r\n+        return location;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get ps location cache\r\n+     *\r\n+     * @return LocationCache ps location cache\r\n+     */\r\n+    public PSAgentLocationManager getLocationManager() {\r\n+        return locationManager;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix meta manager\r\n+     *\r\n+     * @return MatrixMetaManager matrix meta manager\r\n+     */\r\n+    public PSAgentMatrixMetaManager getMatrixMetaManager() {\r\n+        return matrixMetaManager;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix update cache\r\n+     *\r\n+     * @return MatrixOpLogCache matrix update cache\r\n+     */\r\n+    //public MatrixOpLogCache getOpLogCache() {\r\n+    //  return opLogCache;\r\n+    //}\r\n+\r\n+    /**\r\n+     * Get rpc client to ps\r\n+     *\r\n+     * @return MatrixTransportClient rpc client to ps\r\n+     */\r\n+    public MatrixTransportClient getMatrixTransportClient() {\r\n+        return matrixTransClient;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix client for rpc\r\n+     *\r\n+     * @param matrixId matrix id\r\n+     * @return matrix client\r\n+     */\r\n+    public MatrixClient getMatrixClient(int matrixId) throws AngelException {\r\n+        return getMatrixClient(matrixId, -1);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix client for rpc\r\n+     *\r\n+     * @param matrixId  matrix id\r\n+     * @param taskIndex task id\r\n+     * @return matrix client\r\n+     */\r\n+    public MatrixClient getMatrixClient(int matrixId, int taskIndex) throws AngelException {\r\n         try {\r\n-          heartbeatThread.join();\r\n-        } catch (InterruptedException ie) {\r\n-          LOG.warn(\"InterruptedException while stopping heartbeatThread:\", ie);\r\n+            return MatrixClientFactory.get(matrixId, taskIndex);\r\n+        } catch (Throwable e) {\r\n+            throw new AngelException(e);\r\n         }\r\n-        heartbeatThread = null;\r\n-      }\r\n-\r\n-      LOG.info(\"stop user request adapater\");\r\n-      if (userRequestAdapter != null) {\r\n-        userRequestAdapter.stop();\r\n-        userRequestAdapter = null;\r\n-      }\r\n-\r\n-      LOG.info(\"stop rpc dispacher\");\r\n-      if (matrixTransClient != null) {\r\n-        matrixTransClient.stop();\r\n-        matrixTransClient = null;\r\n-      }\r\n-\r\n-      if (PSAgentContext.get() != null) {\r\n-        PSAgentContext.get().clear();\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  protected void heartbeat() throws ServiceException {\r\n-    PSAgentReportResponse response = masterClient.psAgentReport();\r\n-    switch (response.getCommand()) {\r\n-      case PSAGENT_NEED_REGISTER:\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Get matrix client for rpc\r\n+     *\r\n+     * @param matrixName matrix name\r\n+     * @return matrix client\r\n+     */\r\n+    public MatrixClient getMatrixClient(String matrixName) throws AngelException {\r\n+        return getMatrixClient(matrixName, -1);\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix client for rpc\r\n+     *\r\n+     * @param matrixName matrix name\r\n+     * @param taskIndex  task id\r\n+     * @return matrix client\r\n+     */\r\n+    public MatrixClient getMatrixClient(String matrixName, int taskIndex) throws AngelException {\r\n         try {\r\n-          register();\r\n-        } catch (Exception x) {\r\n-          LOG.error(\"register failed: \", x);\r\n-          stop();\r\n+            return MatrixClientFactory.get(matrixName, taskIndex);\r\n+        } catch (Throwable e) {\r\n+            throw new AngelException(e);\r\n         }\r\n-        break;\r\n-\r\n-      case PSAGENT_SHUTDOWN:\r\n-        LOG.error(\"shutdown command come from appmaster, exit now!!\");\r\n-        stop();\r\n-        break;\r\n-      default:\r\n-        break;\r\n-    }\r\n-  }\r\n-\r\n-  private void register() throws ServiceException {\r\n-    PSAgentRegisterResponse response = masterClient.psAgentRegister();\r\n-    if (response.getCommand() == PSAgentCommandProto.PSAGENT_SHUTDOWN) {\r\n-      LOG.fatal(\"register to master, receive shutdown command\");\r\n-      stop();\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Get application configuration\r\n-   *\r\n-   * @return Configuration application configuration\r\n-   */\r\n-  public Configuration getConf() {\r\n-    return conf;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get master location\r\n-   *\r\n-   * @return Location master location\r\n-   */\r\n-  public Location getMasterLocation() {\r\n-    return locationManager.getMasterLocation();\r\n-  }\r\n-\r\n-  /**\r\n-   * Get application id\r\n-   *\r\n-   * @return ApplicationId application id\r\n-   */\r\n-  public ApplicationId getAppId() {\r\n-    return appId;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the user that submits the application\r\n-   *\r\n-   * @return String the user that submits the application\r\n-   */\r\n-  public String getUser() {\r\n-    return user;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the connection manager for rpc to master\r\n-   *\r\n-   * @return TConnection the connection manager for rpc to master\r\n-   */\r\n-  public TConnection getConnection() {\r\n-    return connection;\r\n-  }\r\n-\r\n-  /**\r\n-   * get the rpc client to master\r\n-   *\r\n-   * @return MasterClient the rpc client to master\r\n-   */\r\n-  public MasterClient getMasterClient() {\r\n-    return masterClient;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get ps agent location ip\r\n-   *\r\n-   * @return String ps agent location ip\r\n-   */\r\n-  public String getIp() {\r\n-    return location.getIp();\r\n-  }\r\n-\r\n-  /**\r\n-   * Notify run success message to master\r\n-   */\r\n-  public void done() {\r\n-    if (!exitedFlag.getAndSet(true)) {\r\n-      LOG.info(\"psagent success done\");\r\n-      RunningMode mode = PSAgentContext.get().getRunningMode();\r\n-\r\n-      // Stop all modules\r\n-      if (executor != null) {\r\n-        executor.done();\r\n-      } else {\r\n-        stop();\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Notify run failed message to master\r\n-   *\r\n-   * @param errorMsg detail failed message\r\n-   */\r\n-  public void error(String errorMsg) {\r\n-    if (!exitedFlag.getAndSet(true)) {\r\n-      LOG.info(\"psagent falied\");\r\n-      // Stop all modules\r\n-      if (executor != null) {\r\n-        executor.error(errorMsg);\r\n-      } else {\r\n-        stop();\r\n-      }\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Get ps agent location\r\n-   *\r\n-   * @return Location ps agent location\r\n-   */\r\n-  public Location getLocation() {\r\n-    return location;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get ps location cache\r\n-   *\r\n-   * @return LocationCache ps location cache\r\n-   */\r\n-  public PSAgentLocationManager getLocationManager() {\r\n-    return locationManager;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix meta manager\r\n-   *\r\n-   * @return MatrixMetaManager matrix meta manager\r\n-   */\r\n-  public PSAgentMatrixMetaManager getMatrixMetaManager() {\r\n-    return matrixMetaManager;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix update cache\r\n-   *\r\n-   * @return MatrixOpLogCache matrix update cache\r\n-   */\r\n-  //public MatrixOpLogCache getOpLogCache() {\r\n-  //  return opLogCache;\r\n-  //}\r\n-\r\n-  /**\r\n-   * Get rpc client to ps\r\n-   *\r\n-   * @return MatrixTransportClient rpc client to ps\r\n-   */\r\n-  public MatrixTransportClient getMatrixTransportClient() {\r\n-    return matrixTransClient;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix client for rpc\r\n-   *\r\n-   * @param matrixId matrix id\r\n-   * @return matrix client\r\n-   */\r\n-  public MatrixClient getMatrixClient(int matrixId) throws AngelException {\r\n-    return getMatrixClient(matrixId, -1);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix client for rpc\r\n-   *\r\n-   * @param matrixId  matrix id\r\n-   * @param taskIndex task id\r\n-   * @return matrix client\r\n-   */\r\n-  public MatrixClient getMatrixClient(int matrixId, int taskIndex) throws AngelException {\r\n-    try {\r\n-      return MatrixClientFactory.get(matrixId, taskIndex);\r\n-    } catch (Throwable e) {\r\n-      throw new AngelException(e);\r\n-    }\r\n-  }\r\n-\r\n-\r\n-  /**\r\n-   * Get matrix client for rpc\r\n-   *\r\n-   * @param matrixName matrix name\r\n-   * @return matrix client\r\n-   */\r\n-  public MatrixClient getMatrixClient(String matrixName) throws AngelException {\r\n-    return getMatrixClient(matrixName, -1);\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix client for rpc\r\n-   *\r\n-   * @param matrixName matrix name\r\n-   * @param taskIndex  task id\r\n-   * @return matrix client\r\n-   */\r\n-  public MatrixClient getMatrixClient(String matrixName, int taskIndex) throws AngelException {\r\n-    try {\r\n-      return MatrixClientFactory.get(matrixName, taskIndex);\r\n-    } catch (Throwable e) {\r\n-      throw new AngelException(e);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Get heartbeat interval in milliseconds\r\n-   *\r\n-   * @return int heartbeat interval in milliseconds\r\n-   */\r\n-  public int getHeartbeatIntervalMs() {\r\n-    return heartbeatIntervalMs;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get ps agent metrics\r\n-   *\r\n-   * @return Map<String, String> ps agent metrics\r\n-   */\r\n-  public Map<String, String> getMetrics() {\r\n-    return metrics;\r\n-  }\r\n-\r\n-\r\n-  /**\r\n-   * Create a new matrix\r\n-   *\r\n-   * @param matrixContext matrix configuration\r\n-   * @param timeOutMs     maximun wait time in milliseconds\r\n-   * @return MatrixMeta matrix meta\r\n-   * @throws AngelException exception come from master\r\n-   */\r\n-  public void createMatrix(MatrixContext matrixContext, long timeOutMs) throws AngelException {\r\n-    try {\r\n-      PSAgentContext.get().getMasterClient().createMatrix(matrixContext, timeOutMs);\r\n-    } catch (Throwable x) {\r\n-      throw new AngelException(x);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Get Matrix meta\r\n-   *\r\n-   * @param matrixName matrix name\r\n-   * @return\r\n-   */\r\n-  public MatrixMeta getMatrix(String matrixName) {\r\n-    try {\r\n-      return masterClient.getMatrix(matrixName);\r\n-    } catch (Throwable e) {\r\n-      throw new AngelException(e);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Release a batch of matrices\r\n-   *\r\n-   * @param matrixNames matrix names\r\n-   * @throws AngelException exception come from master\r\n-   */\r\n-  public void releaseMatricesUseName(List<String> matrixNames) throws AngelException {\r\n-    try {\r\n-      masterClient.releaseMatrices(matrixNames);\r\n-    } catch (Throwable x) {\r\n-      throw new AngelException(x);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Release a matrix\r\n-   *\r\n-   * @param matrixName matrix name\r\n-   * @throws AngelException exception come from master\r\n-   */\r\n-  public void releaseMatrix(String matrixName) throws AngelException {\r\n-    try {\r\n-      masterClient.releaseMatrix(matrixName);\r\n-    } catch (Throwable x) {\r\n-      throw new AngelException(x);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Release a batch of matrices\r\n-   *\r\n-   * @param matrixIds matrix ids\r\n-   * @throws AngelException exception come from master\r\n-   */\r\n-  public void releaseMatrices(List<Integer> matrixIds) throws AngelException {\r\n-    int size = matrixIds.size();\r\n-    List<String> matrixNames = new ArrayList<>(size);\r\n-    for (int i = 0; i < size; i++) {\r\n-      MatrixMeta meta = matrixMetaManager.getMatrixMeta(matrixIds.get(i));\r\n-      if (meta == null) {\r\n-        continue;\r\n-      }\r\n-      matrixNames.add(meta.getName());\r\n-    }\r\n-\r\n-    releaseMatricesUseName(matrixNames);\r\n-  }\r\n-\r\n-  /**\r\n-   * Release a matrix\r\n-   *\r\n-   * @param matrixId matrix id\r\n-   * @throws AngelException exception come from master\r\n-   */\r\n-  public void releaseMatrix(int matrixId) throws AngelException {\r\n-    MatrixMeta meta = matrixMetaManager.getMatrixMeta(matrixId);\r\n-    if (meta == null) {\r\n-      return;\r\n-    }\r\n-\r\n-    releaseMatrix(meta.getName());\r\n-  }\r\n-\r\n-  /**\r\n-   * Create a batch of matrices\r\n-   *\r\n-   * @param matrixContexts matrices configuration\r\n-   * @param timeOutMs      maximun wait time in milliseconds\r\n-   * @throws AngelException exception come from master\r\n-   */\r\n-  public void createMatrices(List<MatrixContext> matrixContexts, long timeOutMs)\r\n-      throws AngelException {\r\n-    try {\r\n-      masterClient.createMatrices(matrixContexts, timeOutMs);\r\n-    } catch (Throwable x) {\r\n-      throw new AngelException(x);\r\n-    }\r\n-  }\r\n-\r\n-  public List<MatrixMeta> getMatrices(List<String> matrixNames) {\r\n-    try {\r\n-      return masterClient.getMatrices(matrixNames);\r\n-    } catch (Throwable x) {\r\n-      throw new AngelException(x);\r\n-    }\r\n-  }\r\n-\r\n-  /**\r\n-   * Get matrix storage manager\r\n-   *\r\n-   * @return MatrixStorageManager matrix storage manager\r\n-   */\r\n-  public MatrixStorageManager getMatrixStorageManager() {\r\n-    return matrixStorageManager;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get application layer request adapter\r\n-   *\r\n-   * @return UserRequestAdapter application layer request adapter\r\n-   */\r\n-  public UserRequestAdapter getUserRequestAdapter() {\r\n-    return userRequestAdapter;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get application running mode\r\n-   *\r\n-   * @return RunningMode application running mode\r\n-   */\r\n-  public RunningMode getRunningMode() {\r\n-    return runningMode;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get the machine learning executor reference\r\n-   *\r\n-   * @return Executor the machine learning executor reference\r\n-   */\r\n-  public Executor getExecutor() {\r\n-    return executor;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get PSAgent ID\r\n-   *\r\n-   * @return PSAgent ID\r\n-   */\r\n-  public int getId() {\r\n-    return id;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get control connection manager\r\n-   *\r\n-   * @return control connection manager\r\n-   */\r\n-  public TConnection getControlConnectManager() {\r\n-    return controlConnectManager;\r\n-  }\r\n-\r\n-  /**\r\n-   * Get PS control rpc client manager\r\n-   *\r\n-   * @return PS control rpc client manager\r\n-   */\r\n-  public PSControlClientManager getPsControlClientManager() {\r\n-    return psControlClientManager;\r\n-  }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get heartbeat interval in milliseconds\r\n+     *\r\n+     * @return int heartbeat interval in milliseconds\r\n+     */\r\n+    public int getHeartbeatIntervalMs() {\r\n+        return heartbeatIntervalMs;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get ps agent metrics\r\n+     *\r\n+     * @return Map<String, String> ps agent metrics\r\n+     */\r\n+    public Map<String, String> getMetrics() {\r\n+        return metrics;\r\n+    }\r\n+\r\n+\r\n+    /**\r\n+     * Create a new matrix\r\n+     *\r\n+     * @param matrixContext matrix configuration\r\n+     * @param timeOutMs     maximun wait time in milliseconds\r\n+     * @return MatrixMeta matrix meta\r\n+     * @throws AngelException exception come from master\r\n+     */\r\n+    public void createMatrix(MatrixContext matrixContext, long timeOutMs) throws AngelException {\r\n+        try {\r\n+            PSAgentContext.get().getMasterClient().createMatrix(matrixContext, timeOutMs);\r\n+        } catch (Throwable x) {\r\n+            throw new AngelException(x);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get Matrix meta\r\n+     *\r\n+     * @param matrixName matrix name\r\n+     * @return\r\n+     */\r\n+    public MatrixMeta getMatrix(String matrixName) {\r\n+        try {\r\n+            return masterClient.getMatrix(matrixName);\r\n+        } catch (Throwable e) {\r\n+            throw new AngelException(e);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Release a batch of matrices\r\n+     *\r\n+     * @param matrixNames matrix names\r\n+     * @throws AngelException exception come from master\r\n+     */\r\n+    public void releaseMatricesUseName(List<String> matrixNames) throws AngelException {\r\n+        try {\r\n+            masterClient.releaseMatrices(matrixNames);\r\n+        } catch (Throwable x) {\r\n+            throw new AngelException(x);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Release a matrix\r\n+     *\r\n+     * @param matrixName matrix name\r\n+     * @throws AngelException exception come from master\r\n+     */\r\n+    public void releaseMatrix(String matrixName) throws AngelException {\r\n+        try {\r\n+            masterClient.releaseMatrix(matrixName);\r\n+        } catch (Throwable x) {\r\n+            throw new AngelException(x);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Release a batch of matrices\r\n+     *\r\n+     * @param matrixIds matrix ids\r\n+     * @throws AngelException exception come from master\r\n+     */\r\n+    public void releaseMatrices(List<Integer> matrixIds) throws AngelException {\r\n+        int size = matrixIds.size();\r\n+        List<String> matrixNames = new ArrayList<>(size);\r\n+        for (int i = 0; i < size; i++) {\r\n+            MatrixMeta meta = matrixMetaManager.getMatrixMeta(matrixIds.get(i));\r\n+            if (meta == null) {\r\n+                continue;\r\n+            }\r\n+            matrixNames.add(meta.getName());\r\n+        }\r\n+\r\n+        releaseMatricesUseName(matrixNames);\r\n+    }\r\n+\r\n+    /**\r\n+     * Release a matrix\r\n+     *\r\n+     * @param matrixId matrix id\r\n+     * @throws AngelException exception come from master\r\n+     */\r\n+    public void releaseMatrix(int matrixId) throws AngelException {\r\n+        MatrixMeta meta = matrixMetaManager.getMatrixMeta(matrixId);\r\n+        if (meta == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        releaseMatrix(meta.getName());\r\n+    }\r\n+\r\n+    /**\r\n+     * Create a batch of matrices\r\n+     *\r\n+     * @param matrixContexts matrices configuration\r\n+     * @param timeOutMs      maximun wait time in milliseconds\r\n+     * @throws AngelException exception come from master\r\n+     */\r\n+    public void createMatrices(List<MatrixContext> matrixContexts, long timeOutMs)\r\n+            throws AngelException {\r\n+        try {\r\n+            masterClient.createMatrices(matrixContexts, timeOutMs);\r\n+        } catch (Throwable x) {\r\n+            throw new AngelException(x);\r\n+        }\r\n+    }\r\n+\r\n+    public List<MatrixMeta> getMatrices(List<String> matrixNames) {\r\n+        try {\r\n+            return masterClient.getMatrices(matrixNames);\r\n+        } catch (Throwable x) {\r\n+            throw new AngelException(x);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Get matrix storage manager\r\n+     *\r\n+     * @return MatrixStorageManager matrix storage manager\r\n+     */\r\n+    public MatrixStorageManager getMatrixStorageManager() {\r\n+        return matrixStorageManager;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get application layer request adapter\r\n+     *\r\n+     * @return UserRequestAdapter application layer request adapter\r\n+     */\r\n+    public UserRequestAdapter getUserRequestAdapter() {\r\n+        return userRequestAdapter;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get application running mode\r\n+     *\r\n+     * @return RunningMode application running mode\r\n+     */\r\n+    public RunningMode getRunningMode() {\r\n+        return runningMode;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get the machine learning executor reference\r\n+     *\r\n+     * @return Executor the machine learning executor reference\r\n+     */\r\n+    public Executor getExecutor() {\r\n+        return executor;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get PSAgent ID\r\n+     *\r\n+     * @return PSAgent ID\r\n+     */\r\n+    public int getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get control connection manager\r\n+     *\r\n+     * @return control connection manager\r\n+     */\r\n+    public TConnection getControlConnectManager() {\r\n+        return controlConnectManager;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get PS control rpc client manager\r\n+     *\r\n+     * @return PS control rpc client manager\r\n+     */\r\n+    public PSControlClientManager getPsControlClientManager() {\r\n+        return psControlClientManager;\r\n+    }\r\n }\r\n",
            "diff_size": 967
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/523/PSAgent.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/523/PSAgent.java\nindex 68f65c365cc..5f4adbc1542 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/523/PSAgent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/523/PSAgent.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.psagent;\r\n \r\n import com.google.protobuf.ServiceException;\r\n@@ -228,11 +227,10 @@ public class PSAgent {\n                  int masterPort, boolean needHeartBeat, Executor executor) {\r\n     this.needHeartBeat = needHeartBeat;\r\n     this.conf = conf;\r\n-    this.executor = executor;\r\n-\r\n-    this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n-        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n-    this.runningMode = initRunningMode(conf);\r\n+    this.executor = executor;\n+this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n+        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\n+this.runningMode = initRunningMode(conf);\r\n     this.appId = appId;\r\n     this.user = user;\r\n     this.masterLocation = new Location(masterIp, masterPort);\r\n@@ -254,20 +252,17 @@ public class PSAgent {\n    * @param needHeartBeat true means need startup heartbeat thread\r\n    * @param executor      the machine learning executor reference\r\n    */\r\n-  public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex,\r\n-                 boolean needHeartBeat, Executor executor) {\r\n+  public PSAgent(Configuration conf, String masterIp, int masterPort, int clientIndex, boolean needHeartBeat, Executor executor) {\r\n     this.needHeartBeat = needHeartBeat;\r\n     this.conf = conf;\r\n     this.executor = executor;\r\n     this.heartbeatIntervalMs = conf.getInt(AngelConf.ANGEL_WORKER_HEARTBEAT_INTERVAL_MS,\r\n-        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\r\n-    this.runningMode = initRunningMode(conf);\r\n-\r\n-    this.masterLocation = new Location(masterIp, masterPort);\r\n+        AngelConf.DEFAULT_ANGEL_WORKER_HEARTBEAT_INTERVAL);\n+this.runningMode = initRunningMode(conf);\n+this.masterLocation = new Location(masterIp, masterPort);\r\n     this.appId = null;\r\n-    this.user = null;\r\n-\r\n-    this.connection = TConnectionManager.getConnection(conf);\r\n+    this.user = null;\n+this.connection = TConnectionManager.getConnection(conf);\r\n     this.psAgentInitFinishedFlag = new AtomicBoolean(false);\r\n     this.stopped = new AtomicBoolean(false);\r\n     this.exitedFlag = new AtomicBoolean(false);\r\n@@ -319,7 +314,8 @@ public class PSAgent {\n     Map<ParameterServerId, Location> psIdToLocMap = masterClient.getPSLocations();\r\n     List<ParameterServerId> psIds = new ArrayList<>(psIdToLocMap.keySet());\r\n     Collections.sort(psIds, new Comparator<ParameterServerId>() {\r\n-      @Override public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n+      @Override\n+public int compare(ParameterServerId s1, ParameterServerId s2) {\r\n         return s1.getIndex() - s2.getIndex();\r\n       }\r\n     });\r\n@@ -364,8 +360,8 @@ public class PSAgent {\n    * @throws InterruptedException interrupted while wait for rpc results\r\n    */\r\n   public void refreshMatrixInfo()\r\n-      throws InterruptedException, ServiceException, ClassNotFoundException {\r\n-    matrixMetaManager.addMatrices(masterClient.getMatrices());\r\n+      throws InterruptedException, ServiceException, ClassNotFoundException {\n+  matrixMetaManager.addMatrices(masterClient.getMatrices());\r\n   }\r\n \r\n   /**\r\n@@ -412,9 +408,8 @@ public class PSAgent {\n           LOG.error(\"register failed: \", x);\r\n           stop();\r\n         }\r\n-        break;\r\n-\r\n-      case PSAGENT_SHUTDOWN:\r\n+        break;\n+  case PSAGENT_SHUTDOWN:\r\n         LOG.error(\"shutdown command come from appmaster, exit now!!\");\r\n         stop();\r\n         break;\r\n@@ -744,8 +739,8 @@ public class PSAgent {\n    * @throws AngelException exception come from master\r\n    */\r\n   public void createMatrices(List<MatrixContext> matrixContexts, long timeOutMs)\r\n-      throws AngelException {\r\n-    try {\r\n+      throws AngelException {\n+  try {\r\n       masterClient.createMatrices(matrixContexts, timeOutMs);\r\n     } catch (Throwable x) {\r\n       throw new AngelException(x);\r\n@@ -822,4 +817,4 @@ public class PSAgent {\n   public PSControlClientManager getPsControlClientManager() {\r\n     return psControlClientManager;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}