{
    "project_name": "IQSS-dataverse",
    "violation_id": "75",
    "information": {
        "violations": [
            {
                "line": "16",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public interface Command<R> {\n\n\t/**\n\t * Override this method to execute the actual command.\n\t * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n\t * @return A result. May be {@code null}",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "17",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/IQSS-dataverse/styler/05_predictions/final/files-repaired/75/Command.java\nindex 9b8403d5fc6..6ddf6828b35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/IQSS-dataverse/styler/05_predictions/final/files-repaired/75/Command.java\n@@ -13,13 +13,13 @@ import java.util.*;\n  */\n public interface Command<R> {\n \n-\t/**\n+    /**\n \t * Override this method to execute the actual command.\n \t * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n \t * @return A result. May be {@code null}\n \t * @throws CommandException If anything goes wrong.\n-\t */\n-\tpublic R execute( CommandContext ctxt ) throws CommandException;\n+\t */ public R execute( CommandContext ctxt ) throws CommandException;\n+public R execute( CommandContext ctxt ) throws CommandException;\n \t\n \t\n \t/**\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/75/Command.java\nindex 9b8403d5fc6..46459222394 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/75/Command.java\n@@ -8,52 +8,53 @@ import java.util.*;\n \n /**\n  * Base interface for all commands running on Dataverse.\n- * @author michael\n+ *\n  * @param <R> The type of result this command returns.\n+ * @author michael\n  */\n public interface Command<R> {\n \n-\t/**\n-\t * Override this method to execute the actual command.\n-\t * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n-\t * @return A result. May be {@code null}\n-\t * @throws CommandException If anything goes wrong.\n-\t */\n-\tpublic R execute( CommandContext ctxt ) throws CommandException;\n-\t\n-\t\n-\t/**\n-\t * Retrieves the {@link DvObject}s this command works on. Used by the {@link DataverseEngine} \n-\t * to validate that the user\n-\t * has the permissions required to execute {@code this} command.\n-\t * \n-\t * @return The DvObjects on which the command will work\n-\t */\n-\tpublic Map<String,DvObject> getAffectedDvObjects();\n-\t\n-\t\n-\t/**\n-\t * @return The request under which this command is being executed.\n-\t */\n-\tpublic DataverseRequest getRequest();\n-        \n-\t/**\n-\t * @return A map of the permissions required for this command\n-\t */        \n-    Map<String,Set<Permission>> getRequiredPermissions();\n-\n-    public String describe();\n-    \n-    /**\n-     * \n-     * @param ctxt \n-     * @param r - return value of the command\n-     * @return - boolean indicating if the onSuccess processes where themselves successful\n-     * \n-     * The purpose of the onSuccess method of a command is to \n-     * run those processes (such as indexing) that are ancillary to the command and\n-     * whose failure should not rollback the transaction at the heart of the command\n-     * For Indexing we have implemented a process for logging each failed index\n-     */\n-    public boolean onSuccess(CommandContext ctxt, Object r);\n+  /**\n+   * Override this method to execute the actual command.\n+   *\n+   * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n+   * @return A result. May be {@code null}\n+   * @throws CommandException If anything goes wrong.\n+   */\n+  public R execute(CommandContext ctxt) throws CommandException;\n+\n+\n+  /**\n+   * Retrieves the {@link DvObject}s this command works on. Used by the {@link DataverseEngine}\n+   * to validate that the user\n+   * has the permissions required to execute {@code this} command.\n+   *\n+   * @return The DvObjects on which the command will work\n+   */\n+  public Map<String, DvObject> getAffectedDvObjects();\n+\n+\n+  /**\n+   * @return The request under which this command is being executed.\n+   */\n+  public DataverseRequest getRequest();\n+\n+  /**\n+   * @return A map of the permissions required for this command\n+   */\n+  Map<String, Set<Permission>> getRequiredPermissions();\n+\n+  public String describe();\n+\n+  /**\n+   * @param ctxt\n+   * @param r    - return value of the command\n+   * @return - boolean indicating if the onSuccess processes where themselves successful\n+   * <p>\n+   * The purpose of the onSuccess method of a command is to\n+   * run those processes (such as indexing) that are ancillary to the command and\n+   * whose failure should not rollback the transaction at the heart of the command\n+   * For Indexing we have implemented a process for logging each failed index\n+   */\n+  public boolean onSuccess(CommandContext ctxt, Object r);\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "17",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/naturalize/75/Command.java\nindex 9b8403d5fc6..c88769e27a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/naturalize/75/Command.java\n@@ -13,34 +13,31 @@ import java.util.*;\n  */\n public interface Command<R> {\n \n-\t/**\n+    /**\n \t * Override this method to execute the actual command.\n \t * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n \t * @return A result. May be {@code null}\n \t * @throws CommandException If anything goes wrong.\n \t */\n \tpublic R execute( CommandContext ctxt ) throws CommandException;\n-\t\n-\t\n-\t/**\n+\n+/**\n \t * Retrieves the {@link DvObject}s this command works on. Used by the {@link DataverseEngine} \n \t * to validate that the user\n \t * has the permissions required to execute {@code this} command.\n \t * \n \t * @return The DvObjects on which the command will work\n \t */\n-\tpublic Map<String,DvObject> getAffectedDvObjects();\n-\t\n-\t\n-\t/**\n+public Map<String,DvObject> getAffectedDvObjects();\n+/**\n \t * @return The request under which this command is being executed.\n \t */\n-\tpublic DataverseRequest getRequest();\n+public DataverseRequest getRequest();\n         \n \t/**\n \t * @return A map of the permissions required for this command\n-\t */        \n-    Map<String,Set<Permission>> getRequiredPermissions();\n+\t */\n+        Map<String,Set<Permission>> getRequiredPermissions();\n \n     public String describe();\n     \n@@ -56,4 +53,4 @@ public interface Command<R> {\n      * For Indexing we have implemented a process for logging each failed index\n      */\n     public boolean onSuccess(CommandContext ctxt, Object r);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/codebuff/75/Command.java\nindex 9b8403d5fc6..48728506d41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/codebuff/75/Command.java\n@@ -11,36 +11,43 @@ import java.util.*;\n  * @author michael\n  * @param <R> The type of result this command returns.\n  */\n+\n+\n public interface Command<R> {\n \n-\t/**\n-\t * Override this method to execute the actual command.\n-\t * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n-\t * @return A result. May be {@code null}\n-\t * @throws CommandException If anything goes wrong.\n-\t */\n-\tpublic R execute( CommandContext ctxt ) throws CommandException;\n-\t\n-\t\n-\t/**\n-\t * Retrieves the {@link DvObject}s this command works on. Used by the {@link DataverseEngine} \n-\t * to validate that the user\n-\t * has the permissions required to execute {@code this} command.\n-\t * \n-\t * @return The DvObjects on which the command will work\n-\t */\n-\tpublic Map<String,DvObject> getAffectedDvObjects();\n-\t\n-\t\n-\t/**\n-\t * @return The request under which this command is being executed.\n-\t */\n-\tpublic DataverseRequest getRequest();\n+    /**\n+     * Override this method to execute the actual command.\n+     * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n+     * @return A result. May be {@code null}\n+     * @throws CommandException If anything goes wrong.\n+     */\n+\n+\n+    public R execute(CommandContext ctxt) throws CommandException;\n+    \n+    \n+    /**\n+     * Retrieves the {@link DvObject}s this command works on. Used by the {@link DataverseEngine} \n+     * to validate that the user\n+     * has the permissions required to execute {@code this} command.\n+     * \n+     * @return The DvObjects on which the command will work\n+     */\n+\n+    public Map<String, DvObject> getAffectedDvObjects();\n+    \n+    \n+    /**\n+     * @return The request under which this command is being executed.\n+     */\n+\n+    public DataverseRequest getRequest();\n         \n-\t/**\n-\t * @return A map of the permissions required for this command\n-\t */        \n-    Map<String,Set<Permission>> getRequiredPermissions();\n+    /**\n+     * @return A map of the permissions required for this command\n+     */\n+\n+    Map<String, Set<Permission>> getRequiredPermissions();\n \n     public String describe();\n     \n@@ -55,5 +62,6 @@ public interface Command<R> {\n      * whose failure should not rollback the transaction at the heart of the command\n      * For Indexing we have implemented a process for logging each failed index\n      */\n+\n     public boolean onSuccess(CommandContext ctxt, Object r);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "17",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/random/files-repaired/75/Command.java\nindex 9b8403d5fc6..6ddf6828b35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/random/files-repaired/75/Command.java\n@@ -13,13 +13,13 @@ import java.util.*;\n  */\n public interface Command<R> {\n \n-\t/**\n+    /**\n \t * Override this method to execute the actual command.\n \t * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n \t * @return A result. May be {@code null}\n \t * @throws CommandException If anything goes wrong.\n-\t */\n-\tpublic R execute( CommandContext ctxt ) throws CommandException;\n+\t */ public R execute( CommandContext ctxt ) throws CommandException;\n+public R execute( CommandContext ctxt ) throws CommandException;\n \t\n \t\n \t/**\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "17",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/three_grams/files-repaired/75/Command.java\nindex 9b8403d5fc6..445e96df195 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/75/Command.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/three_grams/files-repaired/75/Command.java\n@@ -13,13 +13,13 @@ import java.util.*;\n  */\n public interface Command<R> {\n \n-\t/**\n+    /**\n \t * Override this method to execute the actual command.\n \t * @param ctxt the context on which the command work. All dependency injections, if any, should be done using this.\n \t * @return A result. May be {@code null}\n \t * @throws CommandException If anything goes wrong.\n-\t */\n-\tpublic R execute( CommandContext ctxt ) throws CommandException;\n+\t */public R execute( CommandContext ctxt ) throws CommandException;\n+public R execute( CommandContext ctxt ) throws CommandException;\n \t\n \t\n \t/**\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}