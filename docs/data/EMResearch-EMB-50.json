{
    "project_name": "EMResearch-EMB",
    "violation_id": "50",
    "information": {
        "violations": [
            {
                "line": "95",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            builder.withPassword(login, password);\n        } else {\n            logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n        }\n\n        GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "warning",
                    "message": "'{' at column 16 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/50/SnapshotProvider.java\nindex 312cc9718e4..697133dc73d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/50/SnapshotProvider.java\n@@ -91,11 +91,10 @@ public class SnapshotProvider {\n             builder.withOAuthToken(token);\n         } else if (StringUtils.isNotEmpty(login) && StringUtils.isNotEmpty(password)) {\n             builder.withPassword(login, password);\n-        } else {\n-            logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n-        }\n+        } else {logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n+    }\n \n-        GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n+    GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n \n         return pool.submit(new TakeSnapshotTask(gitHub, organizationName, scorer, snapshotDate));\n     }\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/50/SnapshotProvider.java\nindex 312cc9718e4..23fcf07073f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/50/SnapshotProvider.java\n@@ -92,14 +92,15 @@ public class SnapshotProvider {\n         } else if (StringUtils.isNotEmpty(login) && StringUtils.isNotEmpty(password)) {\n             builder.withPassword(login, password);\n         } else {\n-            logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n+            logger.error(\n+                \"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n         }\n \n         GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n \n         return pool.submit(new TakeSnapshotTask(gitHub, organizationName, scorer, snapshotDate));\n     }\n-    \n+\n     private Optional<File> getCacheDirectory() {\n         Path path = Paths.get(cachePath);\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/50/SnapshotProvider.java\nindex 312cc9718e4..23101bd4510 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/50/SnapshotProvider.java\n@@ -99,8 +99,8 @@ public class SnapshotProvider {\n \n         return pool.submit(new TakeSnapshotTask(gitHub, organizationName, scorer, snapshotDate));\n     }\n-    \n-    private Optional<File> getCacheDirectory() {\n+\n+private Optional<File> getCacheDirectory() {\n         Path path = Paths.get(cachePath);\n \n         if (Files.isDirectory(path)) {\n@@ -126,4 +126,4 @@ public class SnapshotProvider {\n         }\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/50/SnapshotProvider.java\nindex 312cc9718e4..2c522a2f32b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/50/SnapshotProvider.java\n@@ -13,7 +13,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Component;\n import org.zalando.catwatch.backend.model.util.Scorer;\n-\n import javax.annotation.PostConstruct;\n import java.io.File;\n import java.io.IOException;\n@@ -31,13 +30,13 @@ import java.util.concurrent.Future;\n  * Initializes http cache directory and http client. Submits TakeSnapshotTasks\n  * and returns futures of Snapshots with organization data.\n  */\n+\n+\n @Component\n public class SnapshotProvider {\n \n     private static final Logger logger = LoggerFactory.getLogger(SnapshotProvider.class);\n-\n     private static final int MEGABYTE = 1024 * 1024;\n-\n     private final Scorer scorer;\n     private final String cachePath;\n     private final Integer cacheSize;\n@@ -54,12 +53,13 @@ public class SnapshotProvider {\n     private OkHttpClient httpClient;\n \n     @Autowired\n-    public SnapshotProvider(Scorer scorer,\n-                            @Value(\"${cache.path}\") String cachePath,\n-                            @Value(\"${cache.size}\") Integer cacheSize,\n-                            @Value(\"${github.login:#{null}}\") String login,\n-                            @Value(\"${github.password:#{null}}\") String password,\n-                            @Value(\"${github.oauth.token:#{null}}\") String token) {\n+    public SnapshotProvider(Scorer scorer, @Value(\"${cache.path}\")\n+        String cachePath, @Value(\"${cache.size}\")\n+            Integer cacheSize, @Value(\"${github.login:#{null}}\")\n+                String login, @Value(\"${github.password:#{null}}\")\n+                    String password,\n+                            @Value(\"${github.oauth.token:#{null}}\")\n+                                String token) {\n         this.scorer = scorer;\n         this.cachePath = cachePath;\n         this.cacheSize = cacheSize;\n@@ -71,6 +71,7 @@ public class SnapshotProvider {\n     /**\n      * Initializes cache after the bean is created\n      */\n+\n     @PostConstruct\n     public void init() {\n         Optional<File> cacheDirectoryOptional = getCacheDirectory();\n@@ -86,32 +87,27 @@ public class SnapshotProvider {\n \n     public Future<Snapshot> takeSnapshot(String organizationName, Date snapshotDate) throws IOException {\n         GitHubBuilder builder = new GitHubBuilder();\n-\n         if (StringUtils.isNotEmpty(token)) {\n             builder.withOAuthToken(token);\n         } else if (StringUtils.isNotEmpty(login) && StringUtils.isNotEmpty(password)) {\n-            builder.withPassword(login, password);\n+          builder.withPassword(login, password);\n         } else {\n             logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n         }\n-\n         GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n-\n         return pool.submit(new TakeSnapshotTask(gitHub, organizationName, scorer, snapshotDate));\n     }\n-    \n+\n     private Optional<File> getCacheDirectory() {\n         Path path = Paths.get(cachePath);\n-\n         if (Files.isDirectory(path)) {\n-            if (Files.isWritable(path)) {\n-                logger.info(\"Cache directory found: {}\", path.toAbsolutePath().toString());\n-                return Optional.of(path.toFile());\n-            }\n-            logger.warn(\"Unable to write to cache directory '{}'.\", cachePath);\n-            return Optional.empty();\n+        if (Files.isWritable(path)) {\n+            logger.info(\"Cache directory found: {}\", path.toAbsolutePath().toString());\n+            return Optional.of(path.toFile());\n+        }\n+        logger.warn(\"Unable to write to cache directory '{}'.\", cachePath);\n+        return Optional.empty();\n         }\n-\n         logger.info(\"Cache directory '{}' is not found. Creating new directory.\", cachePath);\n         try {\n             path = Files.createDirectories(path);\n@@ -126,4 +122,4 @@ public class SnapshotProvider {\n         }\n         return Optional.empty();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "column": "132",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "95",
                    "column": "133",
                    "severity": "warning",
                    "message": "'}' at column 133 should have line break before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "133",
                    "severity": "warning",
                    "message": "'}' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "95",
                    "column": "133",
                    "severity": "warning",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/50/SnapshotProvider.java\nindex 312cc9718e4..cc95b89a139 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/50/SnapshotProvider.java\n@@ -92,10 +92,7 @@ public class SnapshotProvider {\n         } else if (StringUtils.isNotEmpty(login) && StringUtils.isNotEmpty(password)) {\n             builder.withPassword(login, password);\n         } else {\n-            logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n-        }\n-\n-        GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n+            logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");}GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n \n         return pool.submit(new TakeSnapshotTask(gitHub, organizationName, scorer, snapshotDate));\n     }\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "warning",
                    "message": "'{' at column 16 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "16",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/three_grams/files-repaired/50/SnapshotProvider.java\nindex 312cc9718e4..697133dc73d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/50/SnapshotProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/three_grams/files-repaired/50/SnapshotProvider.java\n@@ -91,11 +91,10 @@ public class SnapshotProvider {\n             builder.withOAuthToken(token);\n         } else if (StringUtils.isNotEmpty(login) && StringUtils.isNotEmpty(password)) {\n             builder.withPassword(login, password);\n-        } else {\n-            logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n-        }\n+        } else {logger.error(\"GitHub credentials not found, proceeding unauthenticated. That will enforce 60 requests per hour limit.\");\n+    }\n \n-        GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n+    GitHub gitHub = builder.withConnector(new OkHttpConnector(new OkUrlFactory(httpClient))).build();\n \n         return pool.submit(new TakeSnapshotTask(gitHub, organizationName, scorer, snapshotDate));\n     }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}