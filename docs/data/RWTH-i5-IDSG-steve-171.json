{
    "project_name": "RWTH-i5-IDSG-steve",
    "violation_id": "171",
    "information": {
        "violations": [
            {
                "line": "29",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    /**\n     * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n     * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n     * {@link NoOpPasswordEncoder} is deprecated because it is not secure since it is not a one way hash function and\n     * uses plain text matching, but is good enough for our simple user management and login authorization case.\n     *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/checkstyle_idea/171/SecurityConfiguration.java\nindex 3250f4fd906..95be797de97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/checkstyle_idea/171/SecurityConfiguration.java\n@@ -24,49 +24,49 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n @Conditional(SteveProdCondition.class)\n public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n \n-    /**\n-     * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n-     * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n-     * {@link NoOpPasswordEncoder} is deprecated because it is not secure since it is not a one way hash function and\n-     * uses plain text matching, but is good enough for our simple user management and login authorization case.\n-     *\n-     * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n-     * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n-     */\n-    @Autowired\n-    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n-        auth.inMemoryAuthentication()\n-            .passwordEncoder(NoOpPasswordEncoder.getInstance())\n-            .withUser(CONFIG.getAuth().getUserName())\n-            .password(CONFIG.getAuth().getPassword())\n-            .roles(\"ADMIN\");\n-    }\n+  /**\n+   * Password encoding changed with spring-security 5.0.0. We either have to use a prefix before the password to\n+   * indicate which actual encoder {@link DelegatingPasswordEncoder} should use [1, 2] or specify the encoder as we do.\n+   * {@link NoOpPasswordEncoder} is deprecated because it is not secure since it is not a one way hash function and\n+   * uses plain text matching, but is good enough for our simple user management and login authorization case.\n+   * <p>\n+   * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n+   * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n+   */\n+  @Autowired\n+  public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n+    auth.inMemoryAuthentication()\n+      .passwordEncoder(NoOpPasswordEncoder.getInstance())\n+      .withUser(CONFIG.getAuth().getUserName())\n+      .password(CONFIG.getAuth().getPassword())\n+      .roles(\"ADMIN\");\n+  }\n \n-    @Override\n-    public void configure(WebSecurity web) throws Exception {\n-        web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n-    }\n+  @Override\n+  public void configure(WebSecurity web) throws Exception {\n+    web.ignoring()\n+      .antMatchers(\"/static/**\")\n+      .antMatchers(\"/views/**\");\n+  }\n \n-    @Override\n-    protected void configure(HttpSecurity http) throws Exception {\n-        final String prefix = \"/manager/\";\n-        http\n-            .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n-            .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n-            .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n-            .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n-            .httpBasic();\n-    }\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    final String prefix = \"/manager/\";\n+    http\n+      .authorizeRequests()\n+      .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n+      .and()\n+      .sessionManagement()\n+      .invalidSessionUrl(prefix + \"signin\")\n+      .and()\n+      .formLogin()\n+      .loginPage(prefix + \"signin\")\n+      .permitAll()\n+      .and()\n+      .logout()\n+      .logoutUrl(prefix + \"signout\")\n+      .and()\n+      .httpBasic();\n+  }\n \n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/naturalize/171/SecurityConfiguration.java\nindex 3250f4fd906..d906c63eaa8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/naturalize/171/SecurityConfiguration.java\n@@ -69,4 +69,4 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n             .httpBasic();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/codebuff/171/SecurityConfiguration.java\nindex 3250f4fd906..7800da43638 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/codebuff/171/SecurityConfiguration.java\n@@ -19,6 +19,8 @@ import static de.rwth.idsg.steve.SteveConfiguration.CONFIG;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 07.01.2015\n  */\n+\n+\n @Configuration\n @EnableWebSecurity\n @Conditional(SteveProdCondition.class)\n@@ -33,40 +35,39 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n      */\n+\n     @Autowired\n     public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n         auth.inMemoryAuthentication()\n-            .passwordEncoder(NoOpPasswordEncoder.getInstance())\n-            .withUser(CONFIG.getAuth().getUserName())\n-            .password(CONFIG.getAuth().getPassword())\n-            .roles(\"ADMIN\");\n+           .passwordEncoder(NoOpPasswordEncoder.getInstance())\n+           .withUser(CONFIG.getAuth()\n+               .getUserName())\n+           .password(CONFIG.getAuth()\n+               .getPassword()).roles(\"ADMIN\");\n     }\n \n     @Override\n     public void configure(WebSecurity web) throws Exception {\n         web.ignoring()\n-           .antMatchers(\"/static/**\")\n-           .antMatchers(\"/views/**\");\n+           .antMatchers(\"/static/**\").antMatchers(\"/views/**\");\n     }\n \n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n         final String prefix = \"/manager/\";\n-        http\n-            .authorizeRequests()\n-                .antMatchers(prefix + \"**\").hasRole(\"ADMIN\")\n-                .and()\n-            .sessionManagement()\n-                .invalidSessionUrl(prefix + \"signin\")\n-                .and()\n-            .formLogin()\n-                .loginPage(prefix + \"signin\")\n-                .permitAll()\n-                .and()\n-            .logout()\n-                .logoutUrl(prefix + \"signout\")\n-                .and()\n-            .httpBasic();\n+        http.authorizeRequests()\n+              .antMatchers(prefix + \"**\")\n+              .hasRole(\"ADMIN\")\n+              .and()\n+              .sessionManagement()\n+              .invalidSessionUrl(prefix + \"signin\")\n+              .and()\n+              .formLogin()\n+              .loginPage(prefix + \"signin\")\n+              .permitAll()\n+              .and()\n+              .logout()\n+              .logoutUrl(prefix + \"signout\")\n+              .and().httpBasic();\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/styler/05_predictions/three_grams/files-repaired/171/SecurityConfiguration.java\nindex 3250f4fd906..122e9f4cf2f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/171/SecurityConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/styler/05_predictions/three_grams/files-repaired/171/SecurityConfiguration.java\n@@ -32,8 +32,8 @@ public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n      *\n      * [1] https://spring.io/blog/2017/11/01/spring-security-5-0-0-rc1-released#password-storage-format\n      * [2] {@link PasswordEncoderFactories#createDelegatingPasswordEncoder()}\n-     */\n-    @Autowired\n+     */ @Autowired\n+@Autowired\n     public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {\n         auth.inMemoryAuthentication()\n             .passwordEncoder(NoOpPasswordEncoder.getInstance())\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}