{
    "project_name": "Angel-ML-angel",
    "violation_id": "834",
    "information": {
        "violations": [
            {
                "line": "25",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Base class of double matrix with long key row vector.\n */\npublic abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n  /**\n   * Create a LongKeyDoubleMatrix\n   * @param row row number",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/834/DoubleLongKeyMatrix.java\nindex bc2b0117c30..0fb5ac37a28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/834/DoubleLongKeyMatrix.java\n@@ -22,13 +22,14 @@ import com.tencent.angel.ml.math.vector.TLongDoubleVector;\n /**\n  * Base class of double matrix with long key row vector.\n  */\n-public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n-  /**\n+public\n+abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n+   /**\n    * Create a LongKeyDoubleMatrix\n    * @param row row number\n    * @param col row vector dimension\n    */\n-  public DoubleLongKeyMatrix(int row, long col,ROW[] vectors) {\n+   public DoubleLongKeyMatrix(int row, long col,ROW[] vectors) {\n     super(row, col, vectors);\n   }\n \n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/834/DoubleLongKeyMatrix.java\nindex bc2b0117c30..bd082a79ee8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/834/DoubleLongKeyMatrix.java\n@@ -22,84 +22,85 @@ import com.tencent.angel.ml.math.vector.TLongDoubleVector;\n /**\n  * Base class of double matrix with long key row vector.\n  */\n-public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n-  /**\n-   * Create a LongKeyDoubleMatrix\n-   * @param row row number\n-   * @param col row vector dimension\n-   */\n-  public DoubleLongKeyMatrix(int row, long col,ROW[] vectors) {\n-    super(row, col, vectors);\n-  }\n-\n+public abstract class DoubleLongKeyMatrix<ROW extends TLongDoubleVector>\n+        extends RowbaseMatrix<ROW> {\n+    /**\n+     * Create a LongKeyDoubleMatrix\n+     *\n+     * @param row row number\n+     * @param col row vector dimension\n+     */\n+    public DoubleLongKeyMatrix(int row, long col, ROW[] vectors) {\n+        super(row, col, vectors);\n+    }\n \n \n-  /**\n-   * Plus specified element of matrix by a update value.\n-   *\n-   * @param rowIndex the row index\n-   * @param colIndex the column index\n-   * @param value the value update value\n-   * @return this\n-   */\n-  public DoubleLongKeyMatrix plusBy(int rowIndex, long colIndex, double value){\n-    if (vectors[rowIndex] == null) {\n-      vectors[rowIndex] = initVector(rowIndex);\n+    /**\n+     * Plus specified element of matrix by a update value.\n+     *\n+     * @param rowIndex the row index\n+     * @param colIndex the column index\n+     * @param value    the value update value\n+     * @return this\n+     */\n+    public DoubleLongKeyMatrix plusBy(int rowIndex, long colIndex, double value) {\n+        if (vectors[rowIndex] == null) {\n+            vectors[rowIndex] = initVector(rowIndex);\n+        }\n+        vectors[rowIndex].plusBy(colIndex, value);\n+        return this;\n     }\n-    vectors[rowIndex].plusBy(colIndex, value);\n-    return this;\n-  }\n \n-  /**\n-   * Increases specified elements by values.\n-   *\n-   * @param rowIndexes the row ids\n-   * @param colIndexes the col ids\n-   * @param values the values\n-   * @return this\n-   */\n-  public DoubleLongKeyMatrix plusBy(int[] rowIndexes, long[] colIndexes, double[] values) {\n-    assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n-      if(vectors[rowIndexes[i]] == null) {\n-        vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n-      }\n-      vectors[rowIndexes[i]].plusBy(colIndexes[i], values[i]);\n+    /**\n+     * Increases specified elements by values.\n+     *\n+     * @param rowIndexes the row ids\n+     * @param colIndexes the col ids\n+     * @param values     the values\n+     * @return this\n+     */\n+    public DoubleLongKeyMatrix plusBy(int[] rowIndexes, long[] colIndexes, double[] values) {\n+        assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n+        for (int i = 0; i < rowIndexes.length; i++) {\n+            if (vectors[rowIndexes[i]] == null) {\n+                vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n+            }\n+            vectors[rowIndexes[i]].plusBy(colIndexes[i], values[i]);\n+        }\n+        return this;\n     }\n-    return this;\n-  }\n \n-  /**\n-   * Increases specified row by values.\n-   *\n-   * @param rowIndex the row id\n-   * @param colIndexes the col ids\n-   * @param values the values\n-   * @return this\n-   */\n-  public DoubleLongKeyMatrix plusBy(int rowIndex, long[] colIndexes, double[] values) {\n-    assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n-      vectors[rowIndex] = initVector(rowIndex);\n-    }\n+    /**\n+     * Increases specified row by values.\n+     *\n+     * @param rowIndex   the row id\n+     * @param colIndexes the col ids\n+     * @param values     the values\n+     * @return this\n+     */\n+    public DoubleLongKeyMatrix plusBy(int rowIndex, long[] colIndexes, double[] values) {\n+        assert (colIndexes.length == values.length);\n+        if (vectors[rowIndex] == null) {\n+            vectors[rowIndex] = initVector(rowIndex);\n+        }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n-      vectors[rowIndex].plusBy(colIndexes[i], values[i]);\n+        for (int i = 0; i < colIndexes.length; i++) {\n+            vectors[rowIndex].plusBy(colIndexes[i], values[i]);\n+        }\n+        return this;\n     }\n-    return this;\n-  }\n \n-  /**\n-   * Get specified value.\n-   *\n-   * @param rowIndex the row index\n-   * @param colIndex the column index\n-   * @return the value\n-   */\n-  public double get(int rowIndex, long colIndex) {\n-    if(vectors[rowIndex] == null) {\n-      return 0.0;\n+    /**\n+     * Get specified value.\n+     *\n+     * @param rowIndex the row index\n+     * @param colIndex the column index\n+     * @return the value\n+     */\n+    public double get(int rowIndex, long colIndex) {\n+        if (vectors[rowIndex] == null) {\n+            return 0.0;\n+        }\n+        return vectors[rowIndex].get(colIndex);\n     }\n-    return vectors[rowIndex].get(colIndex);\n-  }\n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 0, expected is 2, indentation should be the same level as line 43.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/834/DoubleLongKeyMatrix.java\nindex bc2b0117c30..9058c96d495 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/834/DoubleLongKeyMatrix.java\n@@ -22,19 +22,17 @@ import com.tencent.angel.ml.math.vector.TLongDoubleVector;\n /**\n  * Base class of double matrix with long key row vector.\n  */\n-public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n+public abstract class DoubleLongKeyMatrix<ROW extends TLongDoubleVector> extends RowbaseMatrix<ROW> {\n   /**\n    * Create a LongKeyDoubleMatrix\n    * @param row row number\n    * @param col row vector dimension\n    */\n-  public DoubleLongKeyMatrix(int row, long col,ROW[] vectors) {\n+  public DoubleLongKeyMatrix(int row, long col, ROW[] vectors) {\n     super(row, col, vectors);\n   }\n \n-\n-\n-  /**\n+/**\n    * Plus specified element of matrix by a update value.\n    *\n    * @param rowIndex the row index\n@@ -42,7 +40,7 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n    * @param value the value update value\n    * @return this\n    */\n-  public DoubleLongKeyMatrix plusBy(int rowIndex, long colIndex, double value){\n+  public DoubleLongKeyMatrix plusBy(int rowIndex, long colIndex, double value) {\n     if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n@@ -59,8 +57,8 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n    * @return this\n    */\n   public DoubleLongKeyMatrix plusBy(int[] rowIndexes, long[] colIndexes, double[] values) {\n-    assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n+    assert((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n+    for (int i = 0; i < rowIndexes.length; i++) {\n       if(vectors[rowIndexes[i]] == null) {\n         vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n       }\n@@ -78,12 +76,12 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n    * @return this\n    */\n   public DoubleLongKeyMatrix plusBy(int rowIndex, long[] colIndexes, double[] values) {\n-    assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n+    assert(colIndexes.length == values.length);\n+    if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n+    for (int i = 0; i < colIndexes.length; i++) {\n       vectors[rowIndex].plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n@@ -102,4 +100,4 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n     }\n     return vectors[rowIndex].get(colIndex);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/834/DoubleLongKeyMatrix.java\nindex bc2b0117c30..c15f57bb8ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/834/DoubleLongKeyMatrix.java\n@@ -22,13 +22,15 @@ import com.tencent.angel.ml.math.vector.TLongDoubleVector;\n /**\n  * Base class of double matrix with long key row vector.\n  */\n-public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n+\n+public abstract class DoubleLongKeyMatrix<ROW extends TLongDoubleVector> extends RowbaseMatrix<ROW> {\n   /**\n    * Create a LongKeyDoubleMatrix\n    * @param row row number\n    * @param col row vector dimension\n    */\n-  public DoubleLongKeyMatrix(int row, long col,ROW[] vectors) {\n+\n+  public DoubleLongKeyMatrix(int row, long col, ROW[] vectors) {\n     super(row, col, vectors);\n   }\n \n@@ -42,7 +44,8 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n    * @param value the value update value\n    * @return this\n    */\n-  public DoubleLongKeyMatrix plusBy(int rowIndex, long colIndex, double value){\n+\n+  public DoubleLongKeyMatrix plusBy(int rowIndex, long colIndex, double value) {\n     if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n@@ -58,10 +61,11 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n    * @param values the values\n    * @return this\n    */\n+\n   public DoubleLongKeyMatrix plusBy(int[] rowIndexes, long[] colIndexes, double[] values) {\n     assert ((rowIndexes.length == colIndexes.length) && (rowIndexes.length == values.length));\n-    for(int i = 0; i < rowIndexes.length; i++) {\n-      if(vectors[rowIndexes[i]] == null) {\n+    for (int i = 0; i < rowIndexes.length; i++) {\n+      if (vectors[rowIndexes[i]] == null) {\n         vectors[rowIndexes[i]] = initVector(rowIndexes[i]);\n       }\n       vectors[rowIndexes[i]].plusBy(colIndexes[i], values[i]);\n@@ -77,13 +81,14 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n    * @param values the values\n    * @return this\n    */\n+\n   public DoubleLongKeyMatrix plusBy(int rowIndex, long[] colIndexes, double[] values) {\n     assert (colIndexes.length == values.length);\n-    if(vectors[rowIndex] == null) {\n+    if (vectors[rowIndex] == null) {\n       vectors[rowIndex] = initVector(rowIndex);\n     }\n \n-    for(int i = 0; i < colIndexes.length; i++) {\n+    for (int i = 0; i < colIndexes.length; i++) {\n       vectors[rowIndex].plusBy(colIndexes[i], values[i]);\n     }\n     return this;\n@@ -96,10 +101,12 @@ public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extend\n    * @param colIndex the column index\n    * @return the value\n    */\n+\n   public double get(int rowIndex, long colIndex) {\n-    if(vectors[rowIndex] == null) {\n+    if (vectors[rowIndex] == null) {\n       return 0.0;\n     }\n     return vectors[rowIndex].get(colIndex);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/834/DoubleLongKeyMatrix.java\nindex bc2b0117c30..0fb5ac37a28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/834/DoubleLongKeyMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/834/DoubleLongKeyMatrix.java\n@@ -22,13 +22,14 @@ import com.tencent.angel.ml.math.vector.TLongDoubleVector;\n /**\n  * Base class of double matrix with long key row vector.\n  */\n-public abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n-  /**\n+public\n+abstract class DoubleLongKeyMatrix<ROW extends  TLongDoubleVector> extends RowbaseMatrix<ROW> {\n+   /**\n    * Create a LongKeyDoubleMatrix\n    * @param row row number\n    * @param col row vector dimension\n    */\n-  public DoubleLongKeyMatrix(int row, long col,ROW[] vectors) {\n+   public DoubleLongKeyMatrix(int row, long col,ROW[] vectors) {\n     super(row, col, vectors);\n   }\n \n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}