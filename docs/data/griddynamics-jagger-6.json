{
    "project_name": "griddynamics-jagger",
    "violation_id": "6",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 177).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    Logger log = LoggerFactory.getLogger(PeriodWorkloadProcess.class);\n\n    public PeriodWorkloadProcess(String sessionId, StartWorkloadProcess command, NodeContext context, ThreadPoolExecutor executor, TimeoutsConfiguration timeoutsConfiguration) {\n        super(executor, sessionId, command, context, timeoutsConfiguration);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/6/PeriodWorkloadProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/6/PeriodWorkloadProcess.java\nindex 2b378ab0df9..aedbeb772e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/6/PeriodWorkloadProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/6/PeriodWorkloadProcess.java\n@@ -24,7 +24,8 @@ public class PeriodWorkloadProcess extends AbstractWorkloadProcess {\n \n     Logger log = LoggerFactory.getLogger(PeriodWorkloadProcess.class);\n \n-    public PeriodWorkloadProcess(String sessionId, StartWorkloadProcess command, NodeContext context, ThreadPoolExecutor executor, TimeoutsConfiguration timeoutsConfiguration) {\n+    public PeriodWorkloadProcess(String sessionId, StartWorkloadProcess command, NodeContext context, ThreadPoolExecutor executor,\n+                                 TimeoutsConfiguration timeoutsConfiguration) {\n         super(executor, sessionId, command, context, timeoutsConfiguration);\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/6/PeriodWorkloadProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/6/PeriodWorkloadProcess.java\nindex 2b378ab0df9..22a3b8eb87c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/6/PeriodWorkloadProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/6/PeriodWorkloadProcess.java\n@@ -85,4 +85,4 @@ public class PeriodWorkloadProcess extends AbstractWorkloadProcess {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/6/PeriodWorkloadProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/6/PeriodWorkloadProcess.java\nindex 2b378ab0df9..0f261b3bad7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/6/PeriodWorkloadProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/6/PeriodWorkloadProcess.java\n@@ -7,7 +7,6 @@ import com.griddynamics.jagger.util.Futures;\n import com.griddynamics.jagger.util.TimeoutsConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.Collection;\n import java.util.concurrent.Future;\n import java.util.concurrent.LinkedBlockingQueue;\n@@ -17,11 +16,12 @@ import java.util.concurrent.TimeUnit;\n /**\n  * Workload process that perform invocation with given period.\n  */\n+\n+\n public class PeriodWorkloadProcess extends AbstractWorkloadProcess {\n \n     private PeriodSingleTaskScheduler loopExecutor = new PeriodSingleTaskScheduler();\n \n-\n     Logger log = LoggerFactory.getLogger(PeriodWorkloadProcess.class);\n \n     public PeriodWorkloadProcess(String sessionId, StartWorkloadProcess command, NodeContext context, ThreadPoolExecutor executor, TimeoutsConfiguration timeoutsConfiguration) {\n@@ -35,8 +35,10 @@ public class PeriodWorkloadProcess extends AbstractWorkloadProcess {\n \n     @Override\n     protected void doStart() {\n-        long period = command.getScenarioContext().getWorkloadConfiguration().getPeriod();\n-        long delay = command.getScenarioContext().getWorkloadConfiguration().getDelay();\n+        long period = command.getScenarioContext().getWorkloadConfiguration()\n+                                                  .getPeriod();\n+        long delay = command.getScenarioContext().getWorkloadConfiguration()\n+                                                 .getDelay();\n \n         // start scheduling task with given period.\n         loopExecutor.scheduleAtFixedRate(() -> startNewThread(0), delay, period, TimeUnit.MILLISECONDS);\n@@ -44,21 +46,20 @@ public class PeriodWorkloadProcess extends AbstractWorkloadProcess {\n \n     @Override\n     protected void startNewThread(int delay) {\n-\n         for (WorkloadService thread : threads) {\n             Future<Service.State> future = thread.start();\n             if (future != null) {\n                 Service.State state = Futures.get(future, timeoutsConfiguration.getWorkloadStartTimeout());\n-                log.debug(\"Workload thread is started with state {}. Total threads number - {}\", state, executor.getActiveCount());\n+                log.debug(\"Workload thread is started with state {}. Total threads number - {}\",\n+                          state,\n+                          executor.getActiveCount());\n                 return;\n             }\n         }\n-\n         if (executor.getActiveCount() >= executor.getMaximumPoolSize()) {\n             log.warn(\"Thread pool(size={}) is full. Skip adding new thread.\", executor.getPoolSize());\n             return;\n         }\n-\n         super.startNewThread(delay);\n     }\n \n@@ -68,21 +69,16 @@ public class PeriodWorkloadProcess extends AbstractWorkloadProcess {\n         return serviceBuilder.buildInvokeOnDemandWorkloadService();\n     }\n \n-\n     @Override\n     public void stop() {\n         // do not stat new workload service\n         loopExecutor.clear();\n         loopExecutor.shutdown();\n-\n         super.stop();\n     }\n \n-\n     @Override\n     public void changeConfiguration(WorkloadConfiguration configuration) {\n         loopExecutor.scheduleAtFixedRate(() -> startNewThread(0), configuration.getDelay(), configuration.getPeriod(), TimeUnit.MILLISECONDS);\n     }\n-\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}