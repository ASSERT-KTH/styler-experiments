{
    "project_name": "zanata-zanata-platform",
    "violation_id": "16",
    "information": {
        "violations": [
            {
                "line": "202",
                "column": "42",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        Period period = new Period(durationInMillis);\n        if (period.toStandardMinutes().getMinutes() <= 0) {\n            return \"less than a minute\"; // TODO Localize\n        } else {\n            return PERIOD_FORMATTER.print(period.normalizedStandard());\n        }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/zanata-zanata-platform/styler/05_predictions/final/files-repaired/16/ReindexAction.java\nindex e8254cc4527..bf7f91a1486 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/zanata-zanata-platform/styler/05_predictions/final/files-repaired/16/ReindexAction.java\n@@ -199,8 +199,9 @@ public class ReindexAction implements Serializable {\n     private String formatTimePeriod(long durationInMillis) {\n         Period period = new Period(durationInMillis);\n         if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return \"less than a minute\"; // TODO Localize\n-        } else {\n+            return \"less than a minute\";\n+            // TODO Localize } else {\n+                 } else {\n             return PERIOD_FORMATTER.print(period.normalizedStandard());\n         }\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "202",
                    "column": "36",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/checkstyle_idea/16/ReindexAction.java\nindex e8254cc4527..f8895115a4c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/checkstyle_idea/16/ReindexAction.java\n@@ -22,209 +22,209 @@ import com.google.common.base.Optional;\n @Model\n @CheckRole(\"admin\")\n public class ReindexAction implements Serializable {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ReindexAction.class);\n-\n-    private static final long serialVersionUID = 1L;\n-    private final DecimalFormat PERCENT_FORMAT = new DecimalFormat(\"###.##\");\n-    @Inject\n-    private SearchIndexManager searchIndexManager;\n-\n-    public List<ReindexClassOptions> getClasses() {\n-        return searchIndexManager.getReindexOptions();\n+  private static final org.slf4j.Logger log =\n+    org.slf4j.LoggerFactory.getLogger(ReindexAction.class);\n+\n+  private static final long serialVersionUID = 1L;\n+  private final DecimalFormat PERCENT_FORMAT = new DecimalFormat(\"###.##\");\n+  @Inject\n+  private SearchIndexManager searchIndexManager;\n+\n+  public List<ReindexClassOptions> getClasses() {\n+    return searchIndexManager.getReindexOptions();\n+  }\n+\n+  public boolean isAnyOptionSelected() {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      if (opts.isOptimize() || opts.isPurge() || opts.isReindex()) {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n \n-    public boolean isAnyOptionSelected() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            if (opts.isOptimize() || opts.isPurge() || opts.isReindex()) {\n-                return true;\n-            }\n-        }\n+  public boolean isSelectAll() {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      if (!opts.isOptimize() || !opts.isPurge() || !opts.isReindex()) {\n         return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    public boolean isSelectAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            if (!opts.isOptimize() || !opts.isPurge() || !opts.isReindex()) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-    public void setSelectAll(boolean selectAll) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            opts.setPurge(selectAll);\n-            opts.setReindex(selectAll);\n-            opts.setOptimize(selectAll);\n-        }\n+  public void setSelectAll(boolean selectAll) {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      opts.setPurge(selectAll);\n+      opts.setReindex(selectAll);\n+      opts.setOptimize(selectAll);\n     }\n+  }\n \n-    public boolean isPurgeAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            if (!opts.isPurge()) {\n-                return false;\n-            }\n-        }\n-        return true;\n+  public boolean isPurgeAll() {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      if (!opts.isPurge()) {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    public void setPurgeAll(boolean selected) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            opts.setPurge(selected);\n-        }\n+  public void setPurgeAll(boolean selected) {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      opts.setPurge(selected);\n     }\n+  }\n \n-    public boolean isReindexAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            if (!opts.isReindex()) {\n-                return false;\n-            }\n-        }\n-        return true;\n+  public boolean isReindexAll() {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      if (!opts.isReindex()) {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    public void setReindexAll(boolean selected) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            opts.setReindex(selected);\n-        }\n+  public void setReindexAll(boolean selected) {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      opts.setReindex(selected);\n     }\n+  }\n \n-    public boolean isOptimizeAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            if (!opts.isOptimize()) {\n-                return false;\n-            }\n-        }\n+  public boolean isOptimizeAll() {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      if (!opts.isOptimize()) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  public void setOptimizeAll(boolean selected) {\n+    for (ReindexClassOptions opts : searchIndexManager\n+      .getReindexOptions()) {\n+      opts.setOptimize(selected);\n+    }\n+  }\n+\n+  public boolean isReindexedSinceServerRestart() {\n+    return searchIndexManager.getProcessHandle() != null;\n+  }\n+\n+  public boolean isInProgress() {\n+    return searchIndexManager.getProcessHandle() != null\n+      && !searchIndexManager.getProcessHandle().isDone();\n+  }\n+\n+  public String getCurrentClass() {\n+    return searchIndexManager.getCurrentClassName();\n+  }\n+\n+  public boolean isError() {\n+    AsyncTaskHandle<Void> taskHandle =\n+      searchIndexManager.getProcessHandle();\n+    if (taskHandle == null) {\n+      return false;\n+    } else if (taskHandle.isDone()) {\n+      try {\n+        taskHandle.getResult();\n+      } catch (InterruptedException e) {\n         return true;\n-    }\n-\n-    public void setOptimizeAll(boolean selected) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            opts.setOptimize(selected);\n-        }\n-    }\n-\n-    public boolean isReindexedSinceServerRestart() {\n-        return searchIndexManager.getProcessHandle() != null;\n-    }\n-\n-    public boolean isInProgress() {\n-        return searchIndexManager.getProcessHandle() != null\n-                && !searchIndexManager.getProcessHandle().isDone();\n-    }\n-\n-    public String getCurrentClass() {\n-        return searchIndexManager.getCurrentClassName();\n-    }\n-\n-    public boolean isError() {\n-        AsyncTaskHandle<Void> taskHandle =\n-                searchIndexManager.getProcessHandle();\n-        if (taskHandle == null) {\n-            return false;\n-        } else if (taskHandle.isDone()) {\n-            try {\n-                taskHandle.getResult();\n-            } catch (InterruptedException e) {\n-                return true;\n-            } catch (ExecutionException e) {\n-                return true;\n-            } catch (CancellationException e) {\n-                return false;\n-            }\n-        }\n+      } catch (ExecutionException e) {\n+        return true;\n+      } catch (CancellationException e) {\n         return false;\n-    }\n-\n-    public long getReindexCount() {\n-        if (searchIndexManager.getProcessHandle() == null) {\n-            return 0;\n-        } else {\n-            return searchIndexManager.getProcessHandle().getMaxProgress();\n-        }\n-    }\n-\n-    public long getReindexProgress() {\n-        if (searchIndexManager.getProcessHandle() == null) {\n-            return 0;\n-        } else {\n-            return searchIndexManager.getProcessHandle().getCurrentProgress();\n-        }\n-    }\n-\n-    public String getProgressPercentage() {\n-        if (searchIndexManager.getProcessHandle() == null) {\n-            return \"0\";\n-        } else {\n-            double completedPercent = (double) getReindexProgress()\n-                    / (double) getReindexCount() * 100;\n-            return PERCENT_FORMAT.format(completedPercent);\n-        }\n-    }\n-\n-    public void reindexDatabase() {\n-        if (searchIndexManager.getProcessHandle() == null\n-                || searchIndexManager.getProcessHandle().isDone()) {\n-            searchIndexManager.startProcess();\n-        }\n-    }\n-\n-    public void cancel() {\n-        searchIndexManager.getProcessHandle().cancel(true);\n-    }\n-\n-    public boolean isCanceled() {\n-        return searchIndexManager.getProcessHandle() != null\n-                && searchIndexManager.getProcessHandle().isCancelled();\n-    }\n-\n-    // TODO move to common location with ViewAllStatusAction\n-    private static final PeriodFormatter PERIOD_FORMATTER =\n-            new PeriodFormatterBuilder().appendDays()\n-                    .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n-                    .appendHours().appendSuffix(\" hour\", \" hours\")\n-                    .appendSeparator(\", \").appendMinutes()\n-                    .appendSuffix(\" min\", \" mins\").toFormatter();\n-\n-    private String formatTimePeriod(long durationInMillis) {\n-        Period period = new Period(durationInMillis);\n-        if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return \"less than a minute\"; // TODO Localize\n-        } else {\n-            return PERIOD_FORMATTER.print(period.normalizedStandard());\n-        }\n-    }\n-\n-    public String getElapsedTime() {\n-        AsyncTaskHandle<Void> processHandle =\n-                searchIndexManager.getProcessHandle();\n-        if (processHandle == null) {\n-            log.error(\"processHandle is null when looking up elapsed time\");\n-            return \"\";\n-        } else {\n-            long elapsedTime = processHandle.getExecutingTime();\n-            return formatTimePeriod(elapsedTime);\n-        }\n-    }\n-\n-    public String getEstimatedTimeRemaining() {\n-        Optional<Long> estimate = searchIndexManager.getProcessHandle()\n-                .getEstimatedTimeRemaining();\n-        if (estimate.isPresent()) {\n-            return formatTimePeriod(estimate.get());\n-        }\n-        // TODO localize (not expecting to display estimate when it is\n-        // unavailable anyway).\n-        return \"unknown\";\n-    }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  public long getReindexCount() {\n+    if (searchIndexManager.getProcessHandle() == null) {\n+      return 0;\n+    } else {\n+      return searchIndexManager.getProcessHandle().getMaxProgress();\n+    }\n+  }\n+\n+  public long getReindexProgress() {\n+    if (searchIndexManager.getProcessHandle() == null) {\n+      return 0;\n+    } else {\n+      return searchIndexManager.getProcessHandle().getCurrentProgress();\n+    }\n+  }\n+\n+  public String getProgressPercentage() {\n+    if (searchIndexManager.getProcessHandle() == null) {\n+      return \"0\";\n+    } else {\n+      double completedPercent = (double) getReindexProgress()\n+        / (double) getReindexCount() * 100;\n+      return PERCENT_FORMAT.format(completedPercent);\n+    }\n+  }\n+\n+  public void reindexDatabase() {\n+    if (searchIndexManager.getProcessHandle() == null\n+      || searchIndexManager.getProcessHandle().isDone()) {\n+      searchIndexManager.startProcess();\n+    }\n+  }\n+\n+  public void cancel() {\n+    searchIndexManager.getProcessHandle().cancel(true);\n+  }\n+\n+  public boolean isCanceled() {\n+    return searchIndexManager.getProcessHandle() != null\n+      && searchIndexManager.getProcessHandle().isCancelled();\n+  }\n+\n+  // TODO move to common location with ViewAllStatusAction\n+  private static final PeriodFormatter PERIOD_FORMATTER =\n+    new PeriodFormatterBuilder().appendDays()\n+      .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n+      .appendHours().appendSuffix(\" hour\", \" hours\")\n+      .appendSeparator(\", \").appendMinutes()\n+      .appendSuffix(\" min\", \" mins\").toFormatter();\n+\n+  private String formatTimePeriod(long durationInMillis) {\n+    Period period = new Period(durationInMillis);\n+    if (period.toStandardMinutes().getMinutes() <= 0) {\n+      return \"less than a minute\"; // TODO Localize\n+    } else {\n+      return PERIOD_FORMATTER.print(period.normalizedStandard());\n+    }\n+  }\n+\n+  public String getElapsedTime() {\n+    AsyncTaskHandle<Void> processHandle =\n+      searchIndexManager.getProcessHandle();\n+    if (processHandle == null) {\n+      log.error(\"processHandle is null when looking up elapsed time\");\n+      return \"\";\n+    } else {\n+      long elapsedTime = processHandle.getExecutingTime();\n+      return formatTimePeriod(elapsedTime);\n+    }\n+  }\n+\n+  public String getEstimatedTimeRemaining() {\n+    Optional<Long> estimate = searchIndexManager.getProcessHandle()\n+      .getEstimatedTimeRemaining();\n+    if (estimate.isPresent()) {\n+      return formatTimePeriod(estimate.get());\n+    }\n+    // TODO localize (not expecting to display estimate when it is\n+    // unavailable anyway).\n+    return \"unknown\";\n+  }\n }\n",
            "diff_size": 243
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "185",
                    "column": "42",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/codebuff/16/ReindexAction.java\nindex e8254cc4527..b454ee8317c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/codebuff/16/ReindexAction.java\n@@ -17,27 +17,26 @@ import org.zanata.async.AsyncTaskHandle;\n import org.zanata.service.SearchIndexManager;\n import com.google.common.base.Optional;\n \n+\n @Named(\"reindexAction\")\n @Dependent\n @Model\n @CheckRole(\"admin\")\n public class ReindexAction implements Serializable {\n-    private static final org.slf4j.Logger log =\n-            org.slf4j.LoggerFactory.getLogger(ReindexAction.class);\n-\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(ReindexAction.class);\n     private static final long serialVersionUID = 1L;\n     private final DecimalFormat PERCENT_FORMAT = new DecimalFormat(\"###.##\");\n     @Inject\n     private SearchIndexManager searchIndexManager;\n-\n     public List<ReindexClassOptions> getClasses() {\n         return searchIndexManager.getReindexOptions();\n     }\n \n     public boolean isAnyOptionSelected() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            if (opts.isOptimize() || opts.isPurge() || opts.isReindex()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n+            if (opts.isOptimize()\n+                    || opts.isPurge()\n+                    || opts.isReindex()) {\n                 return true;\n             }\n         }\n@@ -45,9 +44,10 @@ public class ReindexAction implements Serializable {\n     }\n \n     public boolean isSelectAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n-            if (!opts.isOptimize() || !opts.isPurge() || !opts.isReindex()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n+            if (!opts.isOptimize()\n+                    || !opts.isPurge()\n+                    || !opts.isReindex()) {\n                 return false;\n             }\n         }\n@@ -55,8 +55,7 @@ public class ReindexAction implements Serializable {\n     }\n \n     public void setSelectAll(boolean selectAll) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n             opts.setPurge(selectAll);\n             opts.setReindex(selectAll);\n             opts.setOptimize(selectAll);\n@@ -64,8 +63,7 @@ public class ReindexAction implements Serializable {\n     }\n \n     public boolean isPurgeAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n             if (!opts.isPurge()) {\n                 return false;\n             }\n@@ -74,15 +72,13 @@ public class ReindexAction implements Serializable {\n     }\n \n     public void setPurgeAll(boolean selected) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n             opts.setPurge(selected);\n         }\n     }\n \n     public boolean isReindexAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n             if (!opts.isReindex()) {\n                 return false;\n             }\n@@ -91,15 +87,13 @@ public class ReindexAction implements Serializable {\n     }\n \n     public void setReindexAll(boolean selected) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n             opts.setReindex(selected);\n         }\n     }\n \n     public boolean isOptimizeAll() {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n             if (!opts.isOptimize()) {\n                 return false;\n             }\n@@ -108,8 +102,7 @@ public class ReindexAction implements Serializable {\n     }\n \n     public void setOptimizeAll(boolean selected) {\n-        for (ReindexClassOptions opts : searchIndexManager\n-                .getReindexOptions()) {\n+        for (ReindexClassOptions opts : searchIndexManager.getReindexOptions()) {\n             opts.setOptimize(selected);\n         }\n     }\n@@ -119,8 +112,7 @@ public class ReindexAction implements Serializable {\n     }\n \n     public boolean isInProgress() {\n-        return searchIndexManager.getProcessHandle() != null\n-                && !searchIndexManager.getProcessHandle().isDone();\n+        return searchIndexManager.getProcessHandle() != null && !searchIndexManager.getProcessHandle().isDone();\n     }\n \n     public String getCurrentClass() {\n@@ -128,8 +120,7 @@ public class ReindexAction implements Serializable {\n     }\n \n     public boolean isError() {\n-        AsyncTaskHandle<Void> taskHandle =\n-                searchIndexManager.getProcessHandle();\n+        AsyncTaskHandle<Void> taskHandle = searchIndexManager.getProcessHandle();\n         if (taskHandle == null) {\n             return false;\n         } else if (taskHandle.isDone()) {\n@@ -166,15 +157,13 @@ public class ReindexAction implements Serializable {\n         if (searchIndexManager.getProcessHandle() == null) {\n             return \"0\";\n         } else {\n-            double completedPercent = (double) getReindexProgress()\n-                    / (double) getReindexCount() * 100;\n+            double completedPercent = (double) getReindexProgress() / (double) getReindexCount() * 100;\n             return PERCENT_FORMAT.format(completedPercent);\n         }\n     }\n \n     public void reindexDatabase() {\n-        if (searchIndexManager.getProcessHandle() == null\n-                || searchIndexManager.getProcessHandle().isDone()) {\n+        if (searchIndexManager.getProcessHandle() == null || searchIndexManager.getProcessHandle().isDone()) {\n             searchIndexManager.startProcess();\n         }\n     }\n@@ -184,18 +173,12 @@ public class ReindexAction implements Serializable {\n     }\n \n     public boolean isCanceled() {\n-        return searchIndexManager.getProcessHandle() != null\n-                && searchIndexManager.getProcessHandle().isCancelled();\n+        return searchIndexManager.getProcessHandle() != null && searchIndexManager.getProcessHandle().isCancelled();\n     }\n \n     // TODO move to common location with ViewAllStatusAction\n-    private static final PeriodFormatter PERIOD_FORMATTER =\n-            new PeriodFormatterBuilder().appendDays()\n-                    .appendSuffix(\" day\", \" days\").appendSeparator(\", \")\n-                    .appendHours().appendSuffix(\" hour\", \" hours\")\n-                    .appendSeparator(\", \").appendMinutes()\n-                    .appendSuffix(\" min\", \" mins\").toFormatter();\n \n+    private static final PeriodFormatter PERIOD_FORMATTER = new PeriodFormatterBuilder().appendDays().appendSuffix(\" day\", \" days\").appendSeparator(\", \").appendHours().appendSuffix(\" hour\", \" hours\").appendSeparator(\", \").appendMinutes().appendSuffix(\" min\", \" mins\").toFormatter();\n     private String formatTimePeriod(long durationInMillis) {\n         Period period = new Period(durationInMillis);\n         if (period.toStandardMinutes().getMinutes() <= 0) {\n@@ -206,8 +189,7 @@ public class ReindexAction implements Serializable {\n     }\n \n     public String getElapsedTime() {\n-        AsyncTaskHandle<Void> processHandle =\n-                searchIndexManager.getProcessHandle();\n+        AsyncTaskHandle<Void> processHandle = searchIndexManager.getProcessHandle();\n         if (processHandle == null) {\n             log.error(\"processHandle is null when looking up elapsed time\");\n             return \"\";\n@@ -218,8 +200,7 @@ public class ReindexAction implements Serializable {\n     }\n \n     public String getEstimatedTimeRemaining() {\n-        Optional<Long> estimate = searchIndexManager.getProcessHandle()\n-                .getEstimatedTimeRemaining();\n+        Optional<Long> estimate = searchIndexManager.getProcessHandle().getEstimatedTimeRemaining();\n         if (estimate.isPresent()) {\n             return formatTimePeriod(estimate.get());\n         }\n@@ -227,4 +208,4 @@ public class ReindexAction implements Serializable {\n         // unavailable anyway).\n         return \"unknown\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/styler/05_predictions/random/files-repaired/16/ReindexAction.java\nindex e8254cc4527..bf7f91a1486 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/styler/05_predictions/random/files-repaired/16/ReindexAction.java\n@@ -199,8 +199,9 @@ public class ReindexAction implements Serializable {\n     private String formatTimePeriod(long durationInMillis) {\n         Period period = new Period(durationInMillis);\n         if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return \"less than a minute\"; // TODO Localize\n-        } else {\n+            return \"less than a minute\";\n+            // TODO Localize } else {\n+                 } else {\n             return PERIOD_FORMATTER.print(period.normalizedStandard());\n         }\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/styler/05_predictions/three_grams/files-repaired/16/ReindexAction.java\nindex e8254cc4527..e137c61ffac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/violations/16/ReindexAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/zanata-zanata-platform/styler/05_predictions/three_grams/files-repaired/16/ReindexAction.java\n@@ -199,8 +199,9 @@ public class ReindexAction implements Serializable {\n     private String formatTimePeriod(long durationInMillis) {\n         Period period = new Period(durationInMillis);\n         if (period.toStandardMinutes().getMinutes() <= 0) {\n-            return \"less than a minute\"; // TODO Localize\n-        } else {\n+            return \"less than a minute\";\n+        // TODO Localize\n+         } else {\n             return PERIOD_FORMATTER.print(period.normalizedStandard());\n         }\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}