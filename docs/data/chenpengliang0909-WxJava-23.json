{
    "project_name": "chenpengliang0909-WxJava",
    "violation_id": "23",
    "information": {
        "violations": [
            {
                "line": "24",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Created by ecoolper on 2017/5/5.\n */\npublic class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n\n  public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/chenpengliang0909-WxJava/styler/05_predictions/final/files-repaired/23/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdfd..2eea249228a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/chenpengliang0909-WxJava/styler/05_predictions/final/files-repaired/23/OkHttpMediaDownloadRequestExecutor.java\n@@ -20,9 +20,9 @@ import java.io.IOException;\n \n /**\n  * Created by ecoolper on 2017/5/5.\n- */\n-public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n-  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+ */ public\n+class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n+   private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n   public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n     super(requestHttp, tmpDirFile);\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/checkstyle_idea/23/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdfd..83fe66381f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/checkstyle_idea/23/OkHttpMediaDownloadRequestExecutor.java\n@@ -21,7 +21,8 @@ import java.io.IOException;\n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n-public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n+public class OkHttpMediaDownloadRequestExecutor\n+    extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n   private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n   public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n@@ -57,7 +58,7 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n     }\n \n     File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n+        FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n     );\n \n     try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/naturalize/23/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdfd..b72dec9f6da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/naturalize/23/OkHttpMediaDownloadRequestExecutor.java\n@@ -57,8 +57,7 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n     }\n \n     File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n-    );\n+      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile);\n \n     try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n       sink.writeAll(response.body().source());\n@@ -68,4 +67,4 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n     return file;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/codebuff/23/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdfd..9d03fc39ecb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/codebuff/23/OkHttpMediaDownloadRequestExecutor.java\n@@ -14,13 +14,14 @@ import org.apache.commons.io.FilenameUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.File;\n import java.io.IOException;\n \n /**\n  * Created by ecoolper on 2017/5/5.\n  */\n+\n+\n public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n   private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n@@ -39,12 +40,10 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n     }\n \n     //\u5f97\u5230httpClient\n-    OkHttpClient client = requestHttp.getRequestHttpClient();\n \n+    OkHttpClient client = requestHttp.getRequestHttpClient();\n     Request request = new Request.Builder().url(uri).get().build();\n-\n     Response response = client.newCall(request).execute();\n-\n     String contentType = response.header(\"Content-Type\");\n     if (contentType != null && contentType.startsWith(\"application/json\")) {\n       // application/json; encoding=utf-8 \u4e0b\u8f7d\u5a92\u4f53\u6587\u4ef6\u51fa\u9519\n@@ -56,16 +55,13 @@ public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequest\n       return null;\n     }\n \n-    File file = File.createTempFile(\n-      FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName), super.tmpDirFile\n-    );\n-\n+    File file = File.createTempFile(FilenameUtils.getBaseName(fileName), \".\" + FilenameUtils.getExtension(fileName),\n+      super.tmpDirFile);\n     try (BufferedSink sink = Okio.buffer(Okio.sink(file))) {\n       sink.writeAll(response.body().source());\n     }\n-\n     file.deleteOnExit();\n     return file;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/styler/05_predictions/random/files-repaired/23/OkHttpMediaDownloadRequestExecutor.java\nindex 6f0a535fdfd..2eea249228a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/violations/23/OkHttpMediaDownloadRequestExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/chenpengliang0909-WxJava/styler/05_predictions/random/files-repaired/23/OkHttpMediaDownloadRequestExecutor.java\n@@ -20,9 +20,9 @@ import java.io.IOException;\n \n /**\n  * Created by ecoolper on 2017/5/5.\n- */\n-public class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n-  private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+ */ public\n+class OkHttpMediaDownloadRequestExecutor extends BaseMediaDownloadRequestExecutor<OkHttpClient, OkHttpProxyInfo> {\n+   private final Logger logger = LoggerFactory.getLogger(this.getClass());\n \n   public OkHttpMediaDownloadRequestExecutor(RequestHttp requestHttp, File tmpDirFile) {\n     super(requestHttp, tmpDirFile);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}