{
    "project_name": "neo4j-neo4j",
    "violation_id": "2194",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2194/ReusableRecordsCompositeAllocator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2194/ReusableRecordsCompositeAllocator.java\nindex d2c27f3bc8a..baf31c67b8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2194/ReusableRecordsCompositeAllocator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2194/ReusableRecordsCompositeAllocator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.allocator;\n \n \n@@ -36,16 +37,16 @@ public class ReusableRecordsCompositeAllocator implements DynamicRecordAllocator\n     private final ReusableRecordsAllocator reusableRecordsAllocator;\n     private final DynamicRecordAllocator recordAllocator;\n \n-    public ReusableRecordsCompositeAllocator( Collection<DynamicRecord> records,\n-            DynamicRecordAllocator recordAllocator )\n+    public ReusableRecordsCompositeAllocator(Collection<DynamicRecord> records,\n+                                             DynamicRecordAllocator recordAllocator)\n     {\n-        this( records.iterator(), recordAllocator );\n+        this(records.iterator(), recordAllocator);\n     }\n \n-    public ReusableRecordsCompositeAllocator( Iterator<DynamicRecord> recordsIterator,\n-            DynamicRecordAllocator recordAllocator )\n+    public ReusableRecordsCompositeAllocator(Iterator<DynamicRecord> recordsIterator,\n+                                             DynamicRecordAllocator recordAllocator)\n     {\n-        this.reusableRecordsAllocator = new ReusableRecordsAllocator( recordAllocator.getRecordDataSize(), recordsIterator );\n+        this.reusableRecordsAllocator = new ReusableRecordsAllocator(recordAllocator.getRecordDataSize(), recordsIterator);\n         this.recordAllocator = recordAllocator;\n     }\n \n@@ -56,8 +57,8 @@ public class ReusableRecordsCompositeAllocator implements DynamicRecordAllocator\n     }\n \n     @Override\n-    public DynamicRecord nextRecord( PageCursorTracer cursorTracer )\n+    public DynamicRecord nextRecord(PageCursorTracer cursorTracer)\n     {\n-        return reusableRecordsAllocator.hasNext() ? reusableRecordsAllocator.nextRecord( cursorTracer ) : recordAllocator.nextRecord( cursorTracer );\n+        return reusableRecordsAllocator.hasNext() ? reusableRecordsAllocator.nextRecord(cursorTracer) : recordAllocator.nextRecord(cursorTracer);\n     }\n }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}