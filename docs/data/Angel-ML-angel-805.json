{
    "project_name": "Angel-ML-angel",
    "violation_id": "805",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/805/PartGetTriangleCountResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/805/PartGetTriangleCountResult.java\nindex 11d7956ca8b..99659ea758f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/805/PartGetTriangleCountResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/805/PartGetTriangleCountResult.java\n@@ -25,75 +25,75 @@ import io.netty.buffer.ByteBuf;\n  */\n public class PartGetTriangleCountResult extends PartitionGetResult {\n \n-  private int partId;\n-  /**\n-   * Node id to triangle counts\n-   */\n-  private int[][] nodeIdToTriangleCounts;\n+    private int partId;\n+    /**\n+     * Node id to triangle counts\n+     */\n+    private int[][] nodeIdToTriangleCounts;\n \n-  public PartGetTriangleCountResult(int partId, int[][] nodeIdToTriangleCounts) {\n-    this.partId = partId;\n-    this.nodeIdToTriangleCounts = nodeIdToTriangleCounts;\n-  }\n+    public PartGetTriangleCountResult(int partId, int[][] nodeIdToTriangleCounts) {\n+        this.partId = partId;\n+        this.nodeIdToTriangleCounts = nodeIdToTriangleCounts;\n+    }\n \n-  public PartGetTriangleCountResult() {\n-    this(-1, null);\n-  }\n+    public PartGetTriangleCountResult() {\n+        this(-1, null);\n+    }\n \n-  public int[][] getNodeIdToTriangleCounts() {\n-    return nodeIdToTriangleCounts;\n-  }\n+    public int[][] getNodeIdToTriangleCounts() {\n+        return nodeIdToTriangleCounts;\n+    }\n \n-  public void setNodeIdToTriangleCounts(\n-      int[][] nodeIdToTriangleCounts) {\n-    this.nodeIdToTriangleCounts = nodeIdToTriangleCounts;\n-  }\n+    public void setNodeIdToTriangleCounts(\n+            int[][] nodeIdToTriangleCounts) {\n+        this.nodeIdToTriangleCounts = nodeIdToTriangleCounts;\n+    }\n \n-  public int getPartId() {\n-    return partId;\n-  }\n+    public int getPartId() {\n+        return partId;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf output) {\n-    output.writeInt(partId);\n-    output.writeInt(nodeIdToTriangleCounts.length);\n-    for (int i = 0; i < nodeIdToTriangleCounts.length; i++) {\n-      if (nodeIdToTriangleCounts[i] == null) {\n-        output.writeInt(0);\n-      } else {\n-        output.writeInt(nodeIdToTriangleCounts[i].length);\n-        for (int value : nodeIdToTriangleCounts[i]) {\n-          output.writeInt(value);\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        output.writeInt(partId);\n+        output.writeInt(nodeIdToTriangleCounts.length);\n+        for (int i = 0; i < nodeIdToTriangleCounts.length; i++) {\n+            if (nodeIdToTriangleCounts[i] == null) {\n+                output.writeInt(0);\n+            } else {\n+                output.writeInt(nodeIdToTriangleCounts[i].length);\n+                for (int value : nodeIdToTriangleCounts[i]) {\n+                    output.writeInt(value);\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    partId = input.readInt();\n-    int size = input.readInt();\n-    nodeIdToTriangleCounts = new int[size][];\n-    for (int i = 0; i < size; i++) {\n-      int[] neighbors = new int[input.readInt()];\n-      for (int j = 0; j < neighbors.length; j++) {\n-        neighbors[j] = input.readInt();\n-      }\n-      nodeIdToTriangleCounts[i] = neighbors;\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        partId = input.readInt();\n+        int size = input.readInt();\n+        nodeIdToTriangleCounts = new int[size][];\n+        for (int i = 0; i < size; i++) {\n+            int[] neighbors = new int[input.readInt()];\n+            for (int j = 0; j < neighbors.length; j++) {\n+                neighbors[j] = input.readInt();\n+            }\n+            nodeIdToTriangleCounts[i] = neighbors;\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = 8;\n-    for (int i = 0; i < nodeIdToTriangleCounts.length; i++) {\n-      if (nodeIdToTriangleCounts[i] == null) {\n-        len += 4;\n-      } else {\n-        len += 4;\n-        len += 4 * nodeIdToTriangleCounts[i].length;\n-      }\n+    @Override\n+    public int bufferLen() {\n+        int len = 8;\n+        for (int i = 0; i < nodeIdToTriangleCounts.length; i++) {\n+            if (nodeIdToTriangleCounts[i] == null) {\n+                len += 4;\n+            } else {\n+                len += 4;\n+                len += 4 * nodeIdToTriangleCounts[i].length;\n+            }\n+        }\n+        return len;\n     }\n-    return len;\n-  }\n }\n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/805/PartGetTriangleCountResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/805/PartGetTriangleCountResult.java\nindex 11d7956ca8b..57ffaf4943b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/805/PartGetTriangleCountResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/805/PartGetTriangleCountResult.java\n@@ -44,8 +44,7 @@ public class PartGetTriangleCountResult extends PartitionGetResult {\n     return nodeIdToTriangleCounts;\n   }\n \n-  public void setNodeIdToTriangleCounts(\n-      int[][] nodeIdToTriangleCounts) {\n+  public void setNodeIdToTriangleCounts(int[][] nodeIdToTriangleCounts) {\n     this.nodeIdToTriangleCounts = nodeIdToTriangleCounts;\n   }\n \n@@ -96,4 +95,4 @@ public class PartGetTriangleCountResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/805/PartGetTriangleCountResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/805/PartGetTriangleCountResult.java\nindex 11d7956ca8b..1ffbc4876a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/805/PartGetTriangleCountResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/805/PartGetTriangleCountResult.java\n@@ -23,6 +23,7 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Result of GetTriangleCount\n  */\n+\n public class PartGetTriangleCountResult extends PartitionGetResult {\n \n   private int partId;\n@@ -44,8 +45,7 @@ public class PartGetTriangleCountResult extends PartitionGetResult {\n     return nodeIdToTriangleCounts;\n   }\n \n-  public void setNodeIdToTriangleCounts(\n-      int[][] nodeIdToTriangleCounts) {\n+  public void setNodeIdToTriangleCounts(int[][] nodeIdToTriangleCounts) {\n     this.nodeIdToTriangleCounts = nodeIdToTriangleCounts;\n   }\n \n@@ -72,6 +72,7 @@ public class PartGetTriangleCountResult extends PartitionGetResult {\n   @Override\n   public void deserialize(ByteBuf input) {\n     partId = input.readInt();\n+\n     int size = input.readInt();\n     nodeIdToTriangleCounts = new int[size][];\n     for (int i = 0; i < size; i++) {\n@@ -96,4 +97,4 @@ public class PartGetTriangleCountResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}