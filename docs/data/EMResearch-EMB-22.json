{
    "project_name": "EMResearch-EMB",
    "violation_id": "22",
    "information": {
        "violations": [
            {
                "line": "53",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public static final Categories REGIONALISMS = make(\"REGIONALISMS\", \"category_regionalisms\");\n\n  /** False friends: words easily confused by language learners because a similar word exists in their native language. */\n  public static final Categories FALSE_FRIENDS = make(\"FALSE_FRIENDS\", \"category_false_friend\");\n\n  /** Rules that only make sense when editing Wikipedia (typically turned off by default in LanguageTool). */",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/22/Categories.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/22/Categories.java\nindex 83cb66a4f33..258e0fd5699 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/22/Categories.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/22/Categories.java\n@@ -5,77 +5,104 @@ import java.util.ResourceBundle;\n \n /**\n  * Pre-defined rule categories.\n+ *\n  * @since 3.3\n  */\n public final class Categories {\n \n-  /** Rules about detecting uppercase words where lowercase is required and vice versa. */\n-  public static final Categories CASING = make(\"CASING\", \"category_case\");\n+    /**\n+     * Rules about detecting uppercase words where lowercase is required and vice versa.\n+     */\n+    public static final Categories CASING = make(\"CASING\", \"category_case\");\n \n-  /** Rules about spelling terms as one word or as as separate words. */\n-  public static final Categories COMPOUNDING = make(\"COMPOUNDING\", \"category_compounding\");\n+    /**\n+     * Rules about spelling terms as one word or as as separate words.\n+     */\n+    public static final Categories COMPOUNDING = make(\"COMPOUNDING\", \"category_compounding\");\n \n-  public static final Categories GRAMMAR = make(\"GRAMMAR\", \"category_grammar\");\n+    public static final Categories GRAMMAR = make(\"GRAMMAR\", \"category_grammar\");\n \n-  /** Spelling issues. */\n-  public static final Categories TYPOS = make(\"TYPOS\", \"category_typo\");\n+    /**\n+     * Spelling issues.\n+     */\n+    public static final Categories TYPOS = make(\"TYPOS\", \"category_typo\");\n \n-  public static final Categories PUNCTUATION = make(\"PUNCTUATION\", \"category_punctuation\");\n+    public static final Categories PUNCTUATION = make(\"PUNCTUATION\", \"category_punctuation\");\n \n-  /** Problems like incorrectly used dash or quote characters. */\n-  public static final Categories TYPOGRAPHY = make(\"TYPOGRAPHY\", \"category_typography\");\n+    /**\n+     * Problems like incorrectly used dash or quote characters.\n+     */\n+    public static final Categories TYPOGRAPHY = make(\"TYPOGRAPHY\", \"category_typography\");\n \n-  /** Words that are easily confused, like 'there' and 'their' in English. */\n-  public static final Categories CONFUSED_WORDS = make(\"CONFUSED_WORDS\", \"category_confused_words\");\n+    /**\n+     * Words that are easily confused, like 'there' and 'their' in English.\n+     */\n+    public static final Categories CONFUSED_WORDS = make(\"CONFUSED_WORDS\", \"category_confused_words\");\n \n-  public static final Categories REPETITIONS = make(\"REPETITIONS\", \"category_repetitions\");\n+    public static final Categories REPETITIONS = make(\"REPETITIONS\", \"category_repetitions\");\n \n-  public static final Categories REDUNDANCY = make(\"REDUNDANCY\", \"category_redundancy\");\n+    public static final Categories REDUNDANCY = make(\"REDUNDANCY\", \"category_redundancy\");\n \n-  /** General style issues not covered by other categories, like overly verbose wording. */\n-  public static final Categories STYLE = make(\"STYLE\", \"category_style\");\n+    /**\n+     * General style issues not covered by other categories, like overly verbose wording.\n+     */\n+    public static final Categories STYLE = make(\"STYLE\", \"category_style\");\n \n \n-  /** Created to match PLAIN_ENGLISH XML category. */\n-  public static final Categories PLAIN_ENGLISH = make(\"PLAIN_ENGLISH\", \"category_plain_english\");\n+    /**\n+     * Created to match PLAIN_ENGLISH XML category.\n+     */\n+    public static final Categories PLAIN_ENGLISH = make(\"PLAIN_ENGLISH\", \"category_plain_english\");\n \n-  public static final Categories GENDER_NEUTRALITY = make(\"GENDER_NEUTRALITY\", \"category_gender_neutrality\");\n+    public static final Categories GENDER_NEUTRALITY = make(\"GENDER_NEUTRALITY\", \"category_gender_neutrality\");\n \n-  /** Logic, content, and consistency problems. */\n-  public static final Categories SEMANTICS = make(\"SEMANTICS\", \"category_semantics\");\n+    /**\n+     * Logic, content, and consistency problems.\n+     */\n+    public static final Categories SEMANTICS = make(\"SEMANTICS\", \"category_semantics\");\n \n-  /** Colloquial style. */\n-  public static final Categories COLLOQUIALISMS = make(\"COLLOQUIALISMS\", \"category_colloquialism\");\n+    /**\n+     * Colloquial style.\n+     */\n+    public static final Categories COLLOQUIALISMS = make(\"COLLOQUIALISMS\", \"category_colloquialism\");\n \n-  /** Regionalisms: words used only in another language variant or used with different meanings. */\n-  public static final Categories REGIONALISMS = make(\"REGIONALISMS\", \"category_regionalisms\");\n+    /**\n+     * Regionalisms: words used only in another language variant or used with different meanings.\n+     */\n+    public static final Categories REGIONALISMS = make(\"REGIONALISMS\", \"category_regionalisms\");\n \n-  /** False friends: words easily confused by language learners because a similar word exists in their native language. */\n-  public static final Categories FALSE_FRIENDS = make(\"FALSE_FRIENDS\", \"category_false_friend\");\n+    /**\n+     * False friends: words easily confused by language learners because a similar word exists in their native language.\n+     */\n+    public static final Categories FALSE_FRIENDS = make(\"FALSE_FRIENDS\", \"category_false_friend\");\n \n-  /** Rules that only make sense when editing Wikipedia (typically turned off by default in LanguageTool). */\n-  public static final Categories WIKIPEDIA = make(\"WIKIPEDIA\", \"category_wikipedia\");\n+    /**\n+     * Rules that only make sense when editing Wikipedia (typically turned off by default in LanguageTool).\n+     */\n+    public static final Categories WIKIPEDIA = make(\"WIKIPEDIA\", \"category_wikipedia\");\n \n-  /** Miscellaneous rules that don't fit elsewhere. */\n-  public static final Categories MISC = make(\"MISC\", \"category_misc\");\n+    /**\n+     * Miscellaneous rules that don't fit elsewhere.\n+     */\n+    public static final Categories MISC = make(\"MISC\", \"category_misc\");\n \n-  private static Categories make(String id, String message) {\n-    return new Categories(id, message);\n-  }\n+    private static Categories make(String id, String message) {\n+        return new Categories(id, message);\n+    }\n \n-  private final String id;\n-  private final String messageKey;\n-  \n-  private Categories(String id, String messageKey) {\n-    this.id = Objects.requireNonNull(id);\n-    this.messageKey = Objects.requireNonNull(messageKey);\n-  }\n+    private final String id;\n+    private final String messageKey;\n \n-  public CategoryId getId() {\n-    return new CategoryId(id);\n-  }\n+    private Categories(String id, String messageKey) {\n+        this.id = Objects.requireNonNull(id);\n+        this.messageKey = Objects.requireNonNull(messageKey);\n+    }\n \n-  public Category getCategory(ResourceBundle messages) {\n-    return new Category(new CategoryId(id), messages.getString(messageKey));\n-  }\n+    public CategoryId getId() {\n+        return new CategoryId(id);\n+    }\n+\n+    public Category getCategory(ResourceBundle messages) {\n+        return new Category(new CategoryId(id), messages.getString(messageKey));\n+    }\n }\n",
            "diff_size": 79
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/22/Categories.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/22/Categories.java\nindex 83cb66a4f33..f6f27bb302e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/22/Categories.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/22/Categories.java\n@@ -78,4 +78,4 @@ public final class Categories {\n   public Category getCategory(ResourceBundle messages) {\n     return new Category(new CategoryId(id), messages.getString(messageKey));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/22/Categories.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/22/Categories.java\nindex 83cb66a4f33..b227cd9dabd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/22/Categories.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/22/Categories.java\n@@ -7,75 +7,73 @@ import java.util.ResourceBundle;\n  * Pre-defined rule categories.\n  * @since 3.3\n  */\n+\n+\n public final class Categories {\n \n   /** Rules about detecting uppercase words where lowercase is required and vice versa. */\n-  public static final Categories CASING = make(\"CASING\", \"category_case\");\n \n-  /** Rules about spelling terms as one word or as as separate words. */\n-  public static final Categories COMPOUNDING = make(\"COMPOUNDING\", \"category_compounding\");\n+    public static final Categories CASING = make(\"CASING\", \"category_case\");\n \n-  public static final Categories GRAMMAR = make(\"GRAMMAR\", \"category_grammar\");\n+  /** Rules about spelling terms as one word or as as separate words. */\n+    public static final Categories COMPOUNDING = make(\"COMPOUNDING\", \"category_compounding\");\n+    public static final Categories GRAMMAR = make(\"GRAMMAR\", \"category_grammar\");\n \n   /** Spelling issues. */\n-  public static final Categories TYPOS = make(\"TYPOS\", \"category_typo\");\n-\n-  public static final Categories PUNCTUATION = make(\"PUNCTUATION\", \"category_punctuation\");\n+    public static final Categories TYPOS = make(\"TYPOS\", \"category_typo\");\n+    public static final Categories PUNCTUATION = make(\"PUNCTUATION\", \"category_punctuation\");\n \n   /** Problems like incorrectly used dash or quote characters. */\n-  public static final Categories TYPOGRAPHY = make(\"TYPOGRAPHY\", \"category_typography\");\n+    public static final Categories TYPOGRAPHY = make(\"TYPOGRAPHY\", \"category_typography\");\n \n   /** Words that are easily confused, like 'there' and 'their' in English. */\n-  public static final Categories CONFUSED_WORDS = make(\"CONFUSED_WORDS\", \"category_confused_words\");\n-\n-  public static final Categories REPETITIONS = make(\"REPETITIONS\", \"category_repetitions\");\n-\n-  public static final Categories REDUNDANCY = make(\"REDUNDANCY\", \"category_redundancy\");\n+    public static final Categories CONFUSED_WORDS = make(\"CONFUSED_WORDS\", \"category_confused_words\");\n+    public static final Categories REPETITIONS = make(\"REPETITIONS\", \"category_repetitions\");\n+    public static final Categories REDUNDANCY = make(\"REDUNDANCY\", \"category_redundancy\");\n \n   /** General style issues not covered by other categories, like overly verbose wording. */\n-  public static final Categories STYLE = make(\"STYLE\", \"category_style\");\n+    public static final Categories STYLE = make(\"STYLE\", \"category_style\");\n \n \n   /** Created to match PLAIN_ENGLISH XML category. */\n-  public static final Categories PLAIN_ENGLISH = make(\"PLAIN_ENGLISH\", \"category_plain_english\");\n-\n-  public static final Categories GENDER_NEUTRALITY = make(\"GENDER_NEUTRALITY\", \"category_gender_neutrality\");\n+    public static final Categories PLAIN_ENGLISH = make(\"PLAIN_ENGLISH\", \"category_plain_english\");\n+    public static final Categories GENDER_NEUTRALITY = make(\"GENDER_NEUTRALITY\", \"category_gender_neutrality\");\n \n   /** Logic, content, and consistency problems. */\n-  public static final Categories SEMANTICS = make(\"SEMANTICS\", \"category_semantics\");\n+    public static final Categories SEMANTICS = make(\"SEMANTICS\", \"category_semantics\");\n \n   /** Colloquial style. */\n-  public static final Categories COLLOQUIALISMS = make(\"COLLOQUIALISMS\", \"category_colloquialism\");\n+    public static final Categories COLLOQUIALISMS = make(\"COLLOQUIALISMS\", \"category_colloquialism\");\n \n   /** Regionalisms: words used only in another language variant or used with different meanings. */\n-  public static final Categories REGIONALISMS = make(\"REGIONALISMS\", \"category_regionalisms\");\n+    public static final Categories REGIONALISMS = make(\"REGIONALISMS\", \"category_regionalisms\");\n \n   /** False friends: words easily confused by language learners because a similar word exists in their native language. */\n-  public static final Categories FALSE_FRIENDS = make(\"FALSE_FRIENDS\", \"category_false_friend\");\n+    public static final Categories FALSE_FRIENDS = make(\"FALSE_FRIENDS\", \"category_false_friend\");\n \n   /** Rules that only make sense when editing Wikipedia (typically turned off by default in LanguageTool). */\n-  public static final Categories WIKIPEDIA = make(\"WIKIPEDIA\", \"category_wikipedia\");\n+    public static final Categories WIKIPEDIA = make(\"WIKIPEDIA\", \"category_wikipedia\");\n \n   /** Miscellaneous rules that don't fit elsewhere. */\n-  public static final Categories MISC = make(\"MISC\", \"category_misc\");\n-\n-  private static Categories make(String id, String message) {\n-    return new Categories(id, message);\n-  }\n-\n-  private final String id;\n-  private final String messageKey;\n-  \n-  private Categories(String id, String messageKey) {\n-    this.id = Objects.requireNonNull(id);\n-    this.messageKey = Objects.requireNonNull(messageKey);\n-  }\n-\n-  public CategoryId getId() {\n-    return new CategoryId(id);\n-  }\n-\n-  public Category getCategory(ResourceBundle messages) {\n-    return new Category(new CategoryId(id), messages.getString(messageKey));\n-  }\n-}\n+    public static final Categories MISC = make(\"MISC\", \"category_misc\");\n+    private static Categories make(String id, String message) {\n+        return new Categories(id, message);\n+    }\n+\n+    private final String id;\n+    private final String messageKey;\n+\n+    private Categories(String id, String messageKey) {\n+        this.id = Objects.requireNonNull(id);\n+        this.messageKey = Objects.requireNonNull(messageKey);\n+    }\n+\n+    public CategoryId getId() {\n+        return new CategoryId(id);\n+    }\n+\n+    public Category getCategory(ResourceBundle messages) {\n+        return new Category(new CategoryId(id), messages.getString(messageKey));\n+    }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}