{
    "project_name": "intuit-Tank",
    "violation_id": "197",
    "information": {
        "violations": [
            {
                "line": "63",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 148).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        if (fileStorage.exists(fd)) {\n            try {\n                for (LineIterator iterator = IOUtils.lineIterator(fileStorage.readFileData(fd), \"utf-8\"); iterator.hasNext(); iterator.nextLine()) {\n                    ret++;\n                }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/intuit-Tank/styler/05_predictions/final/files-repaired/197/DataFileUtil.java\nindex 15ec7e128f6..1e92f133608 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/intuit-Tank/styler/05_predictions/final/files-repaired/197/DataFileUtil.java\n@@ -60,8 +60,7 @@ public final class DataFileUtil {\n         int ret = 0;\n         if (fileStorage.exists(fd)) {\n             try {\n-                for (LineIterator iterator = IOUtils.lineIterator(fileStorage.readFileData(fd), \"utf-8\"); iterator.hasNext(); iterator.nextLine()) {\n-                    ret++;\n+                for(LineIteratoriterator=IOUtils.lineIterator(fileStorage .readFileData ( fd) , \"utf-8\") ; iterator.hasNext () ; iterator.nextLine () ) {ret++++;\n                 }\n \n             } catch (IOException e) {\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/checkstyle_idea/197/DataFileUtil.java\nindex 15ec7e128f6..7da356d9ef0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/checkstyle_idea/197/DataFileUtil.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank.util;\n \n import java.io.IOException;\n@@ -18,61 +19,60 @@ import com.intuit.tank.vm.settings.TankConfig;\n \n /**\n  * DataFileUtil\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public final class DataFileUtil {\n \n-    private static final Logger LOG = LogManager.getLogger(DataFileUtil.class);\n-\n-    protected static final long MAX_AGE = 1000 * 60 * 60 * 24; // one day\n+  private static final Logger LOG = LogManager.getLogger(DataFileUtil.class);\n \n-    /**\n-     * \n-     */\n-    private DataFileUtil() {\n-    }\n+  protected static final long MAX_AGE = 1000 * 60 * 60 * 24; // one day\n \n-    /**\n-     * @param id\n-     * @param version\n-     * @param numLines\n-     * @param offSet\n-     * @return\n-     */\n-    public static String getDataFileServiceUrl(int id, int version, int offSet, int numLines) {\n-        String baseUrl = new TankConfig().getControllerBase();\n-        return baseUrl + \"/rest/v1/datafile-service/datafile/\" + Integer.toString(id)\n-                + \"/version/\" + Integer.toString(version) + \"?offset=\" + offSet + \"&num-lines=\" + numLines;\n-    }\n+  /**\n+   *\n+   */\n+  private DataFileUtil() {\n+  }\n \n-    /**\n-     * finds out how many lines are in the specified file.\n-     * \n-     * @param dataFile\n-     *            the file to read\n-     * @return the number of lines.\n-     */\n-    public static int getNumLines(DataFile dataFile) {\n-        FileStorage fileStorage = FileStorageFactory.getFileStorage(new TankConfig().getDataFileStorageDir(), false);\n-        FileData fd = DataFileUtil.getFileData(dataFile);\n-        int ret = 0;\n-        if (fileStorage.exists(fd)) {\n-            try {\n-                for (LineIterator iterator = IOUtils.lineIterator(fileStorage.readFileData(fd), \"utf-8\"); iterator.hasNext(); iterator.nextLine()) {\n-                    ret++;\n-                }\n+  /**\n+   * @param id\n+   * @param version\n+   * @param numLines\n+   * @param offSet\n+   * @return\n+   */\n+  public static String getDataFileServiceUrl(int id, int version, int offSet, int numLines) {\n+    String baseUrl = new TankConfig().getControllerBase();\n+    return baseUrl + \"/rest/v1/datafile-service/datafile/\" + Integer.toString(id)\n+      + \"/version/\" + Integer.toString(version) + \"?offset=\" + offSet + \"&num-lines=\" + numLines;\n+  }\n \n-            } catch (IOException e) {\n-                LOG.error(\"Error reading file: \" + e, e);\n-            }\n+  /**\n+   * finds out how many lines are in the specified file.\n+   *\n+   * @param dataFile the file to read\n+   * @return the number of lines.\n+   */\n+  public static int getNumLines(DataFile dataFile) {\n+    FileStorage fileStorage = FileStorageFactory.getFileStorage(new TankConfig().getDataFileStorageDir(), false);\n+    FileData fd = DataFileUtil.getFileData(dataFile);\n+    int ret = 0;\n+    if (fileStorage.exists(fd)) {\n+      try {\n+        for (LineIterator iterator = IOUtils.lineIterator(fileStorage.readFileData(fd), \"utf-8\"); iterator.hasNext();\n+             iterator.nextLine()) {\n+          ret++;\n         }\n-        return ret;\n-    }\n \n-    public static FileData getFileData(DataFile df) {\n-        return new FileData(Integer.toString(df.getId()), df.getFileName());\n+      } catch (IOException e) {\n+        LOG.error(\"Error reading file: \" + e, e);\n+      }\n     }\n+    return ret;\n+  }\n+\n+  public static FileData getFileData(DataFile df) {\n+    return new FileData(Integer.toString(df.getId()), df.getFileName());\n+  }\n \n }\n",
            "diff_size": 65
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/naturalize/197/DataFileUtil.java\nindex 15ec7e128f6..3d3ec6342df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/naturalize/197/DataFileUtil.java\n@@ -75,4 +75,4 @@ public final class DataFileUtil {\n         return new FileData(Integer.toString(df.getId()), df.getFileName());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/codebuff/197/DataFileUtil.java\nindex 15ec7e128f6..37f3d96be71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/codebuff/197/DataFileUtil.java\n@@ -3,13 +3,13 @@\n  */\n package com.intuit.tank.util;\n \n-import java.io.IOException;\n \n+\n+import java.io.IOException;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.io.LineIterator;\n import org.apache.log4j.LogManager;\n import org.apache.log4j.Logger;\n-\n import com.intuit.tank.project.DataFile;\n import com.intuit.tank.storage.FileData;\n import com.intuit.tank.storage.FileStorage;\n@@ -22,15 +22,17 @@ import com.intuit.tank.vm.settings.TankConfig;\n  * @author dangleton\n  * \n  */\n+\n+\n public final class DataFileUtil {\n \n     private static final Logger LOG = LogManager.getLogger(DataFileUtil.class);\n-\n     protected static final long MAX_AGE = 1000 * 60 * 60 * 24; // one day\n \n     /**\n      * \n      */\n+\n     private DataFileUtil() {\n     }\n \n@@ -41,10 +43,11 @@ public final class DataFileUtil {\n      * @param offSet\n      * @return\n      */\n+\n+\n     public static String getDataFileServiceUrl(int id, int version, int offSet, int numLines) {\n         String baseUrl = new TankConfig().getControllerBase();\n-        return baseUrl + \"/rest/v1/datafile-service/datafile/\" + Integer.toString(id)\n-                + \"/version/\" + Integer.toString(version) + \"?offset=\" + offSet + \"&num-lines=\" + numLines;\n+        return baseUrl + \"/rest/v1/datafile-service/datafile/\" + Integer.toString(id) + \"/version/\" + Integer.toString(version) + \"?offset=\" + offSet + \"&num-lines=\" + numLines;\n     }\n \n     /**\n@@ -54,6 +57,8 @@ public final class DataFileUtil {\n      *            the file to read\n      * @return the number of lines.\n      */\n+\n+\n     public static int getNumLines(DataFile dataFile) {\n         FileStorage fileStorage = FileStorageFactory.getFileStorage(new TankConfig().getDataFileStorageDir(), false);\n         FileData fd = DataFileUtil.getFileData(dataFile);\n@@ -63,7 +68,6 @@ public final class DataFileUtil {\n                 for (LineIterator iterator = IOUtils.lineIterator(fileStorage.readFileData(fd), \"utf-8\"); iterator.hasNext(); iterator.nextLine()) {\n                     ret++;\n                 }\n-\n             } catch (IOException e) {\n                 LOG.error(\"Error reading file: \" + e, e);\n             }\n@@ -71,8 +75,9 @@ public final class DataFileUtil {\n         return ret;\n     }\n \n+\n     public static FileData getFileData(DataFile df) {\n         return new FileData(Integer.toString(df.getId()), df.getFileName());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "63",
                    "column": "21",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "45",
                    "severity": "warning",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "65",
                    "column": "29",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/random/files-repaired/197/DataFileUtil.java\nindex 15ec7e128f6..8bf36728e9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/random/files-repaired/197/DataFileUtil.java\n@@ -60,8 +60,10 @@ public final class DataFileUtil {\n         int ret = 0;\n         if (fileStorage.exists(fd)) {\n             try {\n-                for (LineIterator iterator = IOUtils.lineIterator(fileStorage.readFileData(fd), \"utf-8\"); iterator.hasNext(); iterator.nextLine()) {\n-                    ret++;\n+                for ( LineIterator iterator =IOUtils.lineIterator(fileStorage.readFileData(fd),\n+                \"utf-8\");iterator .\n+                    hasNext (); iterator.nextLine()) {\n+                     ret++;\n                 }\n \n             } catch (IOException e) {\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/three_grams/files-repaired/197/DataFileUtil.java\nindex 15ec7e128f6..1e92f133608 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/197/DataFileUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/three_grams/files-repaired/197/DataFileUtil.java\n@@ -60,8 +60,7 @@ public final class DataFileUtil {\n         int ret = 0;\n         if (fileStorage.exists(fd)) {\n             try {\n-                for (LineIterator iterator = IOUtils.lineIterator(fileStorage.readFileData(fd), \"utf-8\"); iterator.hasNext(); iterator.nextLine()) {\n-                    ret++;\n+                for(LineIteratoriterator=IOUtils.lineIterator(fileStorage .readFileData ( fd) , \"utf-8\") ; iterator.hasNext () ; iterator.nextLine () ) {ret++++;\n                 }\n \n             } catch (IOException e) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}