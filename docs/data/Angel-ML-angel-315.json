{
    "project_name": "Angel-ML-angel",
    "violation_id": "315",
    "information": {
        "violations": [
            {
                "line": "25",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\n  public RangeViewIntKeysDoubleValuesPart(int rowId, int[] keys, double[] values, int startPos, int endPos) {\n    super(rowId, startPos, endPos);\n    this.keys = keys;\n    this.values = values;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/315/RangeViewIntKeysDoubleValuesPart.java\nindex f4204bb87d9..02ff16d5a8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/315/RangeViewIntKeysDoubleValuesPart.java\n@@ -21,9 +21,10 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n    */\n   private double[] values;\n \n-\n-  public RangeViewIntKeysDoubleValuesPart(int rowId, int[] keys, double[] values, int startPos, int endPos) {\n-    super(rowId, startPos, endPos);\n+    public RangeViewIntKeysDoubleValuesPart(\n+      int rowId, int [] keys ,double [ ]values ,\n+int startPos, int endPos) {\n+     super(rowId, startPos, endPos);\n     this.keys = keys;\n     this.values = values;\n   }\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/315/RangeViewIntKeysDoubleValuesPart.java\nindex f4204bb87d9..a8edf53d7c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/315/RangeViewIntKeysDoubleValuesPart.java\n@@ -9,110 +9,111 @@ import io.netty.buffer.ByteBuf;\n  * Int keys and double values data partition view, it is only be used in Range partition\n  */\n public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implements\n-    IIntKeyDoubleValuePartOp {\n-\n-  /**\n-   * Whole key array before serialization, sorted by asc\n-   */\n-  private int[] keys;\n-\n-  /**\n-   * Whole value array before serialization\n-   */\n-  private double[] values;\n-\n-\n-  public RangeViewIntKeysDoubleValuesPart(int rowId, int[] keys, double[] values, int startPos, int endPos) {\n-    super(rowId, startPos, endPos);\n-    this.keys = keys;\n-    this.values = values;\n-  }\n-\n-  public RangeViewIntKeysDoubleValuesPart(int[] keys, double[] values, int startPos, int endPos) {\n-    this(-1, keys, values, startPos, endPos);\n-  }\n-\n-  public RangeViewIntKeysDoubleValuesPart() {\n-    this(-1, null, null, -1, -1);\n-  }\n-\n-  @Override\n-  public int[] getKeys() {\n-    return keys;\n-  }\n-\n-  @Override\n-  public double[] getValues() {\n-    return values;\n-  }\n-\n-  @Override\n-  public void add(int key, double value) {\n-    throw new UnsupportedOperationException(\"Unsupport dynamic add for range view part now\");\n-  }\n-\n-  @Override\n-  public void add(int[] keys, double[] values) {\n-    throw new UnsupportedOperationException(\"Unsupport dynamic add for range view part now\");\n-  }\n-\n-  @Override\n-  public int size() {\n-    if(endPos != -1) {\n-      return endPos - startPos;\n-    } else {\n-      return keys.length;\n-    }\n-  }\n-\n-  @Override\n-  public RowType getKeyValueType() {\n-    return RowType.T_DOUBLE_SPARSE;\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf output) {\n-    super.serialize(output);\n-    ByteBufSerdeUtils.serializeInt(output, endPos - startPos);\n-    for(int i = startPos; i < endPos; i++) {\n-      ByteBufSerdeUtils.serializeInt(output, keys[i]);\n-      ByteBufSerdeUtils.serializeDouble(output, values[i]);\n-    }\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    super.deserialize(input);\n-    int len = ByteBufSerdeUtils.deserializeInt(input);\n-    keys = new int[len];\n-    values = new double[len];\n-    for(int i = 0; i < len; i++) {\n-      keys[i] = ByteBufSerdeUtils.deserializeInt(input);\n-      values[i] = ByteBufSerdeUtils.deserializeDouble(input);\n-    }\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen()\n-        + ByteBufSerdeUtils.INT_LENGTH\n-        + ByteBufSerdeUtils.INT_LENGTH * (endPos - startPos)\n-        + ByteBufSerdeUtils.DOUBLE_LENGTH * (endPos - startPos);\n-  }\n-\n-  public void setKeys(int[] keys) {\n-    this.keys = keys;\n-  }\n-\n-  public void setValues(double[] values) {\n-    this.values = values;\n-  }\n-\n-  public int getStartPos() {\n-    return startPos;\n-  }\n-\n-  public int getEndPos() {\n-    return endPos;\n-  }\n+        IIntKeyDoubleValuePartOp {\n+\n+    /**\n+     * Whole key array before serialization, sorted by asc\n+     */\n+    private int[] keys;\n+\n+    /**\n+     * Whole value array before serialization\n+     */\n+    private double[] values;\n+\n+\n+    public RangeViewIntKeysDoubleValuesPart(int rowId, int[] keys, double[] values, int startPos,\n+                                            int endPos) {\n+        super(rowId, startPos, endPos);\n+        this.keys = keys;\n+        this.values = values;\n+    }\n+\n+    public RangeViewIntKeysDoubleValuesPart(int[] keys, double[] values, int startPos, int endPos) {\n+        this(-1, keys, values, startPos, endPos);\n+    }\n+\n+    public RangeViewIntKeysDoubleValuesPart() {\n+        this(-1, null, null, -1, -1);\n+    }\n+\n+    @Override\n+    public int[] getKeys() {\n+        return keys;\n+    }\n+\n+    @Override\n+    public double[] getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public void add(int key, double value) {\n+        throw new UnsupportedOperationException(\"Unsupport dynamic add for range view part now\");\n+    }\n+\n+    @Override\n+    public void add(int[] keys, double[] values) {\n+        throw new UnsupportedOperationException(\"Unsupport dynamic add for range view part now\");\n+    }\n+\n+    @Override\n+    public int size() {\n+        if (endPos != -1) {\n+            return endPos - startPos;\n+        } else {\n+            return keys.length;\n+        }\n+    }\n+\n+    @Override\n+    public RowType getKeyValueType() {\n+        return RowType.T_DOUBLE_SPARSE;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        super.serialize(output);\n+        ByteBufSerdeUtils.serializeInt(output, endPos - startPos);\n+        for (int i = startPos; i < endPos; i++) {\n+            ByteBufSerdeUtils.serializeInt(output, keys[i]);\n+            ByteBufSerdeUtils.serializeDouble(output, values[i]);\n+        }\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        super.deserialize(input);\n+        int len = ByteBufSerdeUtils.deserializeInt(input);\n+        keys = new int[len];\n+        values = new double[len];\n+        for (int i = 0; i < len; i++) {\n+            keys[i] = ByteBufSerdeUtils.deserializeInt(input);\n+            values[i] = ByteBufSerdeUtils.deserializeDouble(input);\n+        }\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+        return super.bufferLen()\n+                + ByteBufSerdeUtils.INT_LENGTH\n+                + ByteBufSerdeUtils.INT_LENGTH * (endPos - startPos)\n+                + ByteBufSerdeUtils.DOUBLE_LENGTH * (endPos - startPos);\n+    }\n+\n+    public void setKeys(int[] keys) {\n+        this.keys = keys;\n+    }\n+\n+    public void setValues(double[] values) {\n+        this.values = values;\n+    }\n+\n+    public int getStartPos() {\n+        return startPos;\n+    }\n+\n+    public int getEndPos() {\n+        return endPos;\n+    }\n }\n",
            "diff_size": 107
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "23",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/315/RangeViewIntKeysDoubleValuesPart.java\nindex f4204bb87d9..7b5a85bc5a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/315/RangeViewIntKeysDoubleValuesPart.java\n@@ -8,9 +8,7 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Int keys and double values data partition view, it is only be used in Range partition\n  */\n-public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implements\n-    IIntKeyDoubleValuePartOp {\n-\n+public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implements IIntKeyDoubleValuePartOp {\n   /**\n    * Whole key array before serialization, sorted by asc\n    */\n@@ -74,7 +72,7 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n   public void serialize(ByteBuf output) {\n     super.serialize(output);\n     ByteBufSerdeUtils.serializeInt(output, endPos - startPos);\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       ByteBufSerdeUtils.serializeInt(output, keys[i]);\n       ByteBufSerdeUtils.serializeDouble(output, values[i]);\n     }\n@@ -86,7 +84,7 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n     int len = ByteBufSerdeUtils.deserializeInt(input);\n     keys = new int[len];\n     values = new double[len];\n-    for(int i = 0; i < len; i++) {\n+    for (int i = 0; i < len; i++) {\n       keys[i] = ByteBufSerdeUtils.deserializeInt(input);\n       values[i] = ByteBufSerdeUtils.deserializeDouble(input);\n     }\n@@ -115,4 +113,4 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n   public int getEndPos() {\n     return endPos;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/315/RangeViewIntKeysDoubleValuesPart.java\nindex f4204bb87d9..ea36b8c93d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/315/RangeViewIntKeysDoubleValuesPart.java\n@@ -8,12 +8,13 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Int keys and double values data partition view, it is only be used in Range partition\n  */\n-public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implements\n-    IIntKeyDoubleValuePartOp {\n+\n+public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implements IIntKeyDoubleValuePartOp {\n \n   /**\n    * Whole key array before serialization, sorted by asc\n    */\n+\n   private int[] keys;\n \n   /**\n@@ -21,7 +22,6 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n    */\n   private double[] values;\n \n-\n   public RangeViewIntKeysDoubleValuesPart(int rowId, int[] keys, double[] values, int startPos, int endPos) {\n     super(rowId, startPos, endPos);\n     this.keys = keys;\n@@ -58,7 +58,7 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n \n   @Override\n   public int size() {\n-    if(endPos != -1) {\n+    if (endPos != -1) {\n       return endPos - startPos;\n     } else {\n       return keys.length;\n@@ -74,7 +74,7 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n   public void serialize(ByteBuf output) {\n     super.serialize(output);\n     ByteBufSerdeUtils.serializeInt(output, endPos - startPos);\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       ByteBufSerdeUtils.serializeInt(output, keys[i]);\n       ByteBufSerdeUtils.serializeDouble(output, values[i]);\n     }\n@@ -83,10 +83,11 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n   @Override\n   public void deserialize(ByteBuf input) {\n     super.deserialize(input);\n+\n     int len = ByteBufSerdeUtils.deserializeInt(input);\n     keys = new int[len];\n     values = new double[len];\n-    for(int i = 0; i < len; i++) {\n+    for (int i = 0; i < len; i++) {\n       keys[i] = ByteBufSerdeUtils.deserializeInt(input);\n       values[i] = ByteBufSerdeUtils.deserializeDouble(input);\n     }\n@@ -94,10 +95,7 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n \n   @Override\n   public int bufferLen() {\n-    return super.bufferLen()\n-        + ByteBufSerdeUtils.INT_LENGTH\n-        + ByteBufSerdeUtils.INT_LENGTH * (endPos - startPos)\n-        + ByteBufSerdeUtils.DOUBLE_LENGTH * (endPos - startPos);\n+    return super.bufferLen() + ByteBufSerdeUtils.INT_LENGTH + ByteBufSerdeUtils.INT_LENGTH * (endPos - startPos) + ByteBufSerdeUtils.DOUBLE_LENGTH * (endPos - startPos);\n   }\n \n   public void setKeys(int[] keys) {\n@@ -115,4 +113,4 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n   public int getEndPos() {\n     return endPos;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/315/RangeViewIntKeysDoubleValuesPart.java\nindex f4204bb87d9..02ff16d5a8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/315/RangeViewIntKeysDoubleValuesPart.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/315/RangeViewIntKeysDoubleValuesPart.java\n@@ -21,9 +21,10 @@ public class RangeViewIntKeysDoubleValuesPart extends RangeKeyValuePart implemen\n    */\n   private double[] values;\n \n-\n-  public RangeViewIntKeysDoubleValuesPart(int rowId, int[] keys, double[] values, int startPos, int endPos) {\n-    super(rowId, startPos, endPos);\n+    public RangeViewIntKeysDoubleValuesPart(\n+      int rowId, int [] keys ,double [ ]values ,\n+int startPos, int endPos) {\n+     super(rowId, startPos, endPos);\n     this.keys = keys;\n     this.values = values;\n   }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}