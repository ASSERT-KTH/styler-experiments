{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "229",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.connectmgr.persistance.dao;\n\nimport java.io.File;\nimport javax.xml.bind.JAXBContext;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/229/ConnectionManagerDAOBase.java\nindex ef6b65c7653..67b07756d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/229/ConnectionManagerDAOBase.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.connectmgr.persistance.dao;\n \n import java.io.File;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/229/ConnectionManagerDAOBase.java\nindex ef6b65c7653..6f243ad7611 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/229/ConnectionManagerDAOBase.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.connectmgr.persistance.dao;\n \n import java.io.File;\n@@ -36,27 +37,26 @@ import org.uddi.api_v3.BusinessDetail;\n import org.uddi.api_v3.ObjectFactory;\n \n /**\n- *\n  * @author mweaver\n  */\n public class ConnectionManagerDAOBase extends AbstractConnectionManagerDAO<BusinessDetail> {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnectionManagerDAOBase.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(ConnectionManagerDAOBase.class);\n \n-    @Override\n-    public void saveExchangeInfo(final BusinessDetail businessDetail, final File file) {\n-        try {\n-            synchronized (file) {\n-                final JAXBContext context = JAXBContext.newInstance(BusinessDetail.class);\n-                final ObjectFactory factory = new ObjectFactory();\n-                final Marshaller marshaller = context.createMarshaller();\n-                marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n-                marshaller.marshal(factory.createBusinessDetail(businessDetail), file);\n-            }\n-        } catch (final JAXBException ex) {\n-            throw new RuntimeException(\"Unable to save to Connection Information File \" + file.getName(), ex);\n-        }\n-\n-        LOG.info(\"Connection info saved to \" + file.getName());\n+  @Override\n+  public void saveExchangeInfo(final BusinessDetail businessDetail, final File file) {\n+    try {\n+      synchronized (file) {\n+        final JAXBContext context = JAXBContext.newInstance(BusinessDetail.class);\n+        final ObjectFactory factory = new ObjectFactory();\n+        final Marshaller marshaller = context.createMarshaller();\n+        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n+        marshaller.marshal(factory.createBusinessDetail(businessDetail), file);\n+      }\n+    } catch (final JAXBException ex) {\n+      throw new RuntimeException(\"Unable to save to Connection Information File \" + file.getName(), ex);\n     }\n+\n+    LOG.info(\"Connection info saved to \" + file.getName());\n+  }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/229/ConnectionManagerDAOBase.java\nindex ef6b65c7653..1de463748c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/229/ConnectionManagerDAOBase.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.connectmgr.persistance.dao;\n \n import java.io.File;\n@@ -59,4 +60,4 @@ public class ConnectionManagerDAOBase extends AbstractConnectionManagerDAO<Busin\n \n         LOG.info(\"Connection info saved to \" + file.getName());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "53",
                    "column": "25",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/229/ConnectionManagerDAOBase.java\nindex ef6b65c7653..18e2f301a53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/229/ConnectionManagerDAOBase.java\n@@ -39,16 +39,22 @@ import org.uddi.api_v3.ObjectFactory;\n  *\n  * @author mweaver\n  */\n-public class ConnectionManagerDAOBase extends AbstractConnectionManagerDAO<BusinessDetail> {\n+\n+\n+public class ConnectionManagerDAOBase extends\n+    AbstractConnectionManagerDAO<BusinessDetail> {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ConnectionManagerDAOBase.class);\n \n+\n     @Override\n     public void saveExchangeInfo(final BusinessDetail businessDetail, final File file) {\n         try {\n-            synchronized (file) {\n+            synchronized(file) {\n                 final JAXBContext context = JAXBContext.newInstance(BusinessDetail.class);\n+\n                 final ObjectFactory factory = new ObjectFactory();\n+\n                 final Marshaller marshaller = context.createMarshaller();\n                 marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n                 marshaller.marshal(factory.createBusinessDetail(businessDetail), file);\n@@ -56,7 +62,7 @@ public class ConnectionManagerDAOBase extends AbstractConnectionManagerDAO<Busin\n         } catch (final JAXBException ex) {\n             throw new RuntimeException(\"Unable to save to Connection Information File \" + file.getName(), ex);\n         }\n-\n         LOG.info(\"Connection info saved to \" + file.getName());\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/229/ConnectionManagerDAOBase.java\nindex ef6b65c7653..67b07756d66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/229/ConnectionManagerDAOBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/229/ConnectionManagerDAOBase.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.connectmgr.persistance.dao;\n \n import java.io.File;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}