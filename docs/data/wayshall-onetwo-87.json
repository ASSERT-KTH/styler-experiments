{
    "project_name": "wayshall-onetwo",
    "violation_id": "87",
    "information": {
        "violations": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line matches the illegal pattern 'System\\.out\\.println'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\tpublic AbstractContextConcurrencyStrategy(HystrixConcurrencyStrategy existingConcurrencyStrategy) {\n\t\tif (getClass().isInstance(existingConcurrencyStrategy)) {\n\t\t\tSystem.out.println(\"Welcome to singleton hell...\");\n\t\t\treturn;\n\t\t}\n\t\t",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wayshall-onetwo/styler/05_predictions/final/files-repaired/87/AbstractContextConcurrencyStrategy.java\nindex 09482039ee3..0501febbd54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wayshall-onetwo/styler/05_predictions/final/files-repaired/87/AbstractContextConcurrencyStrategy.java\n@@ -32,7 +32,7 @@ abstract public class AbstractContextConcurrencyStrategy extends HystrixConcurre\n \t\n \tpublic AbstractContextConcurrencyStrategy(HystrixConcurrencyStrategy existingConcurrencyStrategy) {\n \t\tif (getClass().isInstance(existingConcurrencyStrategy)) {\n-\t\t\tSystem.out.println(\"Welcome to singleton hell...\");\n+\t\t\tSystem .out.println(\"Welcome to singleton hell...\");\n \t\t\treturn;\n \t\t}\n \t\t\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'System\\.out\\.println'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/checkstyle_idea/87/AbstractContextConcurrencyStrategy.java\nindex 09482039ee3..a7fe2476f16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/checkstyle_idea/87/AbstractContextConcurrencyStrategy.java\n@@ -19,86 +19,87 @@ import com.netflix.hystrix.strategy.properties.HystrixProperty;\n \n /**\n  * example: RequestContextConcurrencyStrategy\n+ *\n  * @author wayshall\n  * <br/>\n  */\n abstract public class AbstractContextConcurrencyStrategy extends HystrixConcurrencyStrategy {\n \n-\tprivate HystrixConcurrencyStrategy existingConcurrencyStrategy;\n-\n-\tpublic AbstractContextConcurrencyStrategy() {\n-\t\tthis(HystrixPlugins.getInstance().getConcurrencyStrategy());\n-\t}\n-\t\n-\tpublic AbstractContextConcurrencyStrategy(HystrixConcurrencyStrategy existingConcurrencyStrategy) {\n-\t\tif (getClass().isInstance(existingConcurrencyStrategy)) {\n-\t\t\tSystem.out.println(\"Welcome to singleton hell...\");\n-\t\t\treturn;\n-\t\t}\n-\t\t\n-\t\tthis.existingConcurrencyStrategy = existingConcurrencyStrategy;\n-\t\t\n-\t\tHystrixEventNotifier eventNotifier = HystrixPlugins.getInstance()\n-\t\t\t\t.getEventNotifier();\n-\t\tHystrixMetricsPublisher metricsPublisher = HystrixPlugins.getInstance()\n-\t\t\t\t.getMetricsPublisher();\n-\t\tHystrixPropertiesStrategy propertiesStrategy = HystrixPlugins.getInstance()\n-\t\t\t\t.getPropertiesStrategy();\n-\t\tHystrixCommandExecutionHook commandExecutionHook = HystrixPlugins.getInstance()\n-\t\t\t\t.getCommandExecutionHook();\n-\n-\t\tHystrixPlugins.reset();\n-\n-\t\t// Registers existing plugins excepts the Concurrent Strategy plugin.\n-\t\tHystrixPlugins.getInstance().registerConcurrencyStrategy(this);\n-\t\tHystrixPlugins.getInstance().registerEventNotifier(eventNotifier);\n-\t\tHystrixPlugins.getInstance().registerMetricsPublisher(metricsPublisher);\n-\t\tHystrixPlugins.getInstance().registerPropertiesStrategy(propertiesStrategy);\n-\t\tHystrixPlugins.getInstance().registerCommandExecutionHook(commandExecutionHook);\n-\t}\n-\t\n-\t@Override\n-\tpublic BlockingQueue<Runnable> getBlockingQueue(int maxQueueSize) {\n-\t\treturn existingConcurrencyStrategy != null\n-\t\t\t\t? existingConcurrencyStrategy.getBlockingQueue(maxQueueSize)\n-\t\t\t\t: super.getBlockingQueue(maxQueueSize);\n-\t}\n-\n-\t@Override\n-\tpublic <T> HystrixRequestVariable<T> getRequestVariable(\n-\t\t\tHystrixRequestVariableLifecycle<T> rv) {\n-\t\treturn existingConcurrencyStrategy != null\n-\t\t\t\t? existingConcurrencyStrategy.getRequestVariable(rv)\n-\t\t\t\t: super.getRequestVariable(rv);\n-\t}\n-\n-\t@Override\n-\tpublic ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey,\n-\t\t\tHystrixProperty<Integer> corePoolSize,\n-\t\t\tHystrixProperty<Integer> maximumPoolSize,\n-\t\t\tHystrixProperty<Integer> keepAliveTime, TimeUnit unit,\n-\t\t\tBlockingQueue<Runnable> workQueue) {\n-\t\treturn existingConcurrencyStrategy != null\n-\t\t\t\t? existingConcurrencyStrategy.getThreadPool(threadPoolKey, corePoolSize,\n-\t\t\t\t\t\tmaximumPoolSize, keepAliveTime, unit, workQueue)\n-\t\t\t\t: super.getThreadPool(threadPoolKey, corePoolSize, maximumPoolSize,\n-\t\t\t\t\t\tkeepAliveTime, unit, workQueue);\n-\t}\n-\n-\t@Override\n-\tpublic ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties) {\n-\t\treturn existingConcurrencyStrategy != null\n-\t\t\t\t? existingConcurrencyStrategy.getThreadPool(threadPoolKey, threadPoolProperties)\n-\t\t\t\t: super.getThreadPool(threadPoolKey, threadPoolProperties);\n-\t}\n-\n-\t@Override\n-\tpublic <T> Callable<T> wrapCallable(Callable<T> callable) {\n-\t\treturn existingConcurrencyStrategy != null\n-\t\t\t\t? existingConcurrencyStrategy\n-\t\t\t\t\t\t.wrapCallable(createDelegatingContextCallable(callable))\n-\t\t\t\t: super.wrapCallable(createDelegatingContextCallable(callable));\n-\t}\n-\t\n-\tabstract protected <V> Callable<V> createDelegatingContextCallable(Callable<V> callable);\n+  private HystrixConcurrencyStrategy existingConcurrencyStrategy;\n+\n+  public AbstractContextConcurrencyStrategy() {\n+    this(HystrixPlugins.getInstance().getConcurrencyStrategy());\n+  }\n+\n+  public AbstractContextConcurrencyStrategy(HystrixConcurrencyStrategy existingConcurrencyStrategy) {\n+    if (getClass().isInstance(existingConcurrencyStrategy)) {\n+      System.out.println(\"Welcome to singleton hell...\");\n+      return;\n+    }\n+\n+    this.existingConcurrencyStrategy = existingConcurrencyStrategy;\n+\n+    HystrixEventNotifier eventNotifier = HystrixPlugins.getInstance()\n+      .getEventNotifier();\n+    HystrixMetricsPublisher metricsPublisher = HystrixPlugins.getInstance()\n+      .getMetricsPublisher();\n+    HystrixPropertiesStrategy propertiesStrategy = HystrixPlugins.getInstance()\n+      .getPropertiesStrategy();\n+    HystrixCommandExecutionHook commandExecutionHook = HystrixPlugins.getInstance()\n+      .getCommandExecutionHook();\n+\n+    HystrixPlugins.reset();\n+\n+    // Registers existing plugins excepts the Concurrent Strategy plugin.\n+    HystrixPlugins.getInstance().registerConcurrencyStrategy(this);\n+    HystrixPlugins.getInstance().registerEventNotifier(eventNotifier);\n+    HystrixPlugins.getInstance().registerMetricsPublisher(metricsPublisher);\n+    HystrixPlugins.getInstance().registerPropertiesStrategy(propertiesStrategy);\n+    HystrixPlugins.getInstance().registerCommandExecutionHook(commandExecutionHook);\n+  }\n+\n+  @Override\n+  public BlockingQueue<Runnable> getBlockingQueue(int maxQueueSize) {\n+    return existingConcurrencyStrategy != null\n+      ? existingConcurrencyStrategy.getBlockingQueue(maxQueueSize)\n+      : super.getBlockingQueue(maxQueueSize);\n+  }\n+\n+  @Override\n+  public <T> HystrixRequestVariable<T> getRequestVariable(\n+    HystrixRequestVariableLifecycle<T> rv) {\n+    return existingConcurrencyStrategy != null\n+      ? existingConcurrencyStrategy.getRequestVariable(rv)\n+      : super.getRequestVariable(rv);\n+  }\n+\n+  @Override\n+  public ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey,\n+                                          HystrixProperty<Integer> corePoolSize,\n+                                          HystrixProperty<Integer> maximumPoolSize,\n+                                          HystrixProperty<Integer> keepAliveTime, TimeUnit unit,\n+                                          BlockingQueue<Runnable> workQueue) {\n+    return existingConcurrencyStrategy != null\n+      ? existingConcurrencyStrategy.getThreadPool(threadPoolKey, corePoolSize,\n+      maximumPoolSize, keepAliveTime, unit, workQueue)\n+      : super.getThreadPool(threadPoolKey, corePoolSize, maximumPoolSize,\n+      keepAliveTime, unit, workQueue);\n+  }\n+\n+  @Override\n+  public ThreadPoolExecutor getThreadPool(HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties) {\n+    return existingConcurrencyStrategy != null\n+      ? existingConcurrencyStrategy.getThreadPool(threadPoolKey, threadPoolProperties)\n+      : super.getThreadPool(threadPoolKey, threadPoolProperties);\n+  }\n+\n+  @Override\n+  public <T> Callable<T> wrapCallable(Callable<T> callable) {\n+    return existingConcurrencyStrategy != null\n+      ? existingConcurrencyStrategy\n+      .wrapCallable(createDelegatingContextCallable(callable))\n+      : super.wrapCallable(createDelegatingContextCallable(callable));\n+  }\n+\n+  abstract protected <V> Callable<V> createDelegatingContextCallable(Callable<V> callable);\n }\n",
            "diff_size": 78
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/styler/05_predictions/random/files-repaired/87/AbstractContextConcurrencyStrategy.java\nindex 09482039ee3..0501febbd54 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/styler/05_predictions/random/files-repaired/87/AbstractContextConcurrencyStrategy.java\n@@ -32,7 +32,7 @@ abstract public class AbstractContextConcurrencyStrategy extends HystrixConcurre\n \t\n \tpublic AbstractContextConcurrencyStrategy(HystrixConcurrencyStrategy existingConcurrencyStrategy) {\n \t\tif (getClass().isInstance(existingConcurrencyStrategy)) {\n-\t\t\tSystem.out.println(\"Welcome to singleton hell...\");\n+\t\t\tSystem .out.println(\"Welcome to singleton hell...\");\n \t\t\treturn;\n \t\t}\n \t\t\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/styler/05_predictions/three_grams/files-repaired/87/AbstractContextConcurrencyStrategy.java\nindex 09482039ee3..5c162ebc9d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/87/AbstractContextConcurrencyStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/styler/05_predictions/three_grams/files-repaired/87/AbstractContextConcurrencyStrategy.java\n@@ -32,7 +32,8 @@ abstract public class AbstractContextConcurrencyStrategy extends HystrixConcurre\n \t\n \tpublic AbstractContextConcurrencyStrategy(HystrixConcurrencyStrategy existingConcurrencyStrategy) {\n \t\tif (getClass().isInstance(existingConcurrencyStrategy)) {\n-\t\t\tSystem.out.println(\"Welcome to singleton hell...\");\n+\tSystem\n+\t.out.println(\"Welcome to singleton hell...\");\n \t\t\treturn;\n \t\t}\n \t\t\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}