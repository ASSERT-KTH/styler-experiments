{
    "project_name": "Activiti-Activiti",
    "violation_id": "539",
    "information": {
        "violations": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.engine.impl.variable;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.JsonNode;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/539/JsonType.java\nindex a0a1437bb11..aa0a0ef091d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/539/JsonType.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.variable;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/539/JsonType.java\nindex a0a1437bb11..c7dbde4d920 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/539/JsonType.java\n@@ -29,65 +29,65 @@ public class JsonType implements VariableType {\n     public static final String JSON = \"json\";\n \n     private final int maxLength;\n-  private ObjectMapper objectMapper;\n-  private boolean serializePOJOsInVariablesToJson;\n+    private ObjectMapper objectMapper;\n+    private boolean serializePOJOsInVariablesToJson;\n     private JsonTypeConverter jsonTypeConverter;\n \n-  public JsonType(int maxLength, ObjectMapper objectMapper, boolean serializePOJOsInVariablesToJson,\n-      JsonTypeConverter jsonTypeConverter) {\n-    this.maxLength = maxLength;\n-    this.objectMapper = objectMapper;\n-    this.serializePOJOsInVariablesToJson = serializePOJOsInVariablesToJson;\n-      this.jsonTypeConverter = jsonTypeConverter;\n-  }\n-\n-  public String getTypeName() {\n-    return JSON;\n-  }\n-\n-  public boolean isCachable() {\n-    return true;\n-  }\n-\n-  public Object getValue(ValueFields valueFields) {\n-    Object loadedValue = null;\n-    if (valueFields.getTextValue() != null && valueFields.getTextValue().length() > 0) {\n-        try {\n-            loadedValue = jsonTypeConverter.convertToValue(\n-                objectMapper.readTree(valueFields.getTextValue()), valueFields);\n+    public JsonType(int maxLength, ObjectMapper objectMapper, boolean serializePOJOsInVariablesToJson,\n+                    JsonTypeConverter jsonTypeConverter) {\n+        this.maxLength = maxLength;\n+        this.objectMapper = objectMapper;\n+        this.serializePOJOsInVariablesToJson = serializePOJOsInVariablesToJson;\n+        this.jsonTypeConverter = jsonTypeConverter;\n+    }\n \n-        } catch (Exception e) {\n-          logger.error(\"Error reading json variable \" + valueFields.getName(), e);\n-        }\n-      }\n-    return loadedValue;\n-  }\n-\n-  public void setValue(Object value, ValueFields valueFields) {\n-    try {\n-      valueFields.setTextValue(objectMapper.writeValueAsString(value));\n-      if (value != null) {\n-          valueFields.setTextValue2(value.getClass().getName());\n-      }\n-    } catch (JsonProcessingException e) {\n-    logger.error(\"Error writing json variable \" + valueFields.getName(), e);\n+    public String getTypeName() {\n+        return JSON;\n     }\n-  }\n \n-  public boolean isAbleToStore(Object value) {\n-    if (value == null) {\n-      return true;\n+    public boolean isCachable() {\n+        return true;\n+    }\n+\n+    public Object getValue(ValueFields valueFields) {\n+        Object loadedValue = null;\n+        if (valueFields.getTextValue() != null && valueFields.getTextValue().length() > 0) {\n+            try {\n+                loadedValue = jsonTypeConverter.convertToValue(\n+                        objectMapper.readTree(valueFields.getTextValue()), valueFields);\n+\n+            } catch (Exception e) {\n+                logger.error(\"Error reading json variable \" + valueFields.getName(), e);\n+            }\n+        }\n+        return loadedValue;\n     }\n \n-    if (JsonNode.class.isAssignableFrom(value.getClass()) || (objectMapper.canSerialize(value.getClass()) && serializePOJOsInVariablesToJson)) {\n-      try {\n-        return objectMapper.writeValueAsString(value).length() <= maxLength;\n-      } catch (JsonProcessingException e) {\n-        logger.error(\"Error writing json variable of type \" + value.getClass(), e);\n-      }\n+    public void setValue(Object value, ValueFields valueFields) {\n+        try {\n+            valueFields.setTextValue(objectMapper.writeValueAsString(value));\n+            if (value != null) {\n+                valueFields.setTextValue2(value.getClass().getName());\n+            }\n+        } catch (JsonProcessingException e) {\n+            logger.error(\"Error writing json variable \" + valueFields.getName(), e);\n+        }\n     }\n \n-    return false;\n-  }\n+    public boolean isAbleToStore(Object value) {\n+        if (value == null) {\n+            return true;\n+        }\n+\n+        if (JsonNode.class.isAssignableFrom(value.getClass()) || (objectMapper.canSerialize(value.getClass()) && serializePOJOsInVariablesToJson)) {\n+            try {\n+                return objectMapper.writeValueAsString(value).length() <= maxLength;\n+            } catch (JsonProcessingException e) {\n+                logger.error(\"Error writing json variable of type \" + value.getClass(), e);\n+            }\n+        }\n+\n+        return false;\n+    }\n \n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/539/JsonType.java\nindex a0a1437bb11..3db51d624e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/539/JsonType.java\n@@ -23,22 +23,27 @@ import com.fasterxml.jackson.databind.ObjectMapper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public class JsonType implements VariableType {\n \n-    private static final Logger logger = LoggerFactory.getLogger(JsonType.class);\n-    public static final String JSON = \"json\";\n+  private static final Logger logger = LoggerFactory.getLogger(JsonType.class);\n+  public static final String JSON = \"json\";\n+\n+  private final int maxLength;\n \n-    private final int maxLength;\n   private ObjectMapper objectMapper;\n+\n   private boolean serializePOJOsInVariablesToJson;\n-    private JsonTypeConverter jsonTypeConverter;\n \n-  public JsonType(int maxLength, ObjectMapper objectMapper, boolean serializePOJOsInVariablesToJson,\n-      JsonTypeConverter jsonTypeConverter) {\n+  private JsonTypeConverter jsonTypeConverter;\n+\n+  public JsonType(int maxLength,\n+                  ObjectMapper objectMapper,\n+                  boolean serializePOJOsInVariablesToJson, JsonTypeConverter jsonTypeConverter) {\n     this.maxLength = maxLength;\n     this.objectMapper = objectMapper;\n     this.serializePOJOsInVariablesToJson = serializePOJOsInVariablesToJson;\n-      this.jsonTypeConverter = jsonTypeConverter;\n+    this.jsonTypeConverter = jsonTypeConverter;\n   }\n \n   public String getTypeName() {\n@@ -52,14 +57,14 @@ public class JsonType implements VariableType {\n   public Object getValue(ValueFields valueFields) {\n     Object loadedValue = null;\n     if (valueFields.getTextValue() != null && valueFields.getTextValue().length() > 0) {\n-        try {\n-            loadedValue = jsonTypeConverter.convertToValue(\n-                objectMapper.readTree(valueFields.getTextValue()), valueFields);\n-\n-        } catch (Exception e) {\n-          logger.error(\"Error reading json variable \" + valueFields.getName(), e);\n-        }\n+      try {\n+        loadedValue = jsonTypeConverter.convertToValue(objectMapper.readTree(valueFields.getTextValue()),\n+                                                       valueFields);\n+      } catch (Exception e) {\n+        logger.error(\"Error reading json variable \" + valueFields.getName(),\n+                     e);\n       }\n+    }\n     return loadedValue;\n   }\n \n@@ -67,10 +72,11 @@ public class JsonType implements VariableType {\n     try {\n       valueFields.setTextValue(objectMapper.writeValueAsString(value));\n       if (value != null) {\n-          valueFields.setTextValue2(value.getClass().getName());\n+        valueFields.setTextValue2(value.getClass().getName());\n       }\n     } catch (JsonProcessingException e) {\n-    logger.error(\"Error writing json variable \" + valueFields.getName(), e);\n+      logger.error(\"Error writing json variable \" + valueFields.getName(),\n+                   e);\n     }\n   }\n \n@@ -78,16 +84,15 @@ public class JsonType implements VariableType {\n     if (value == null) {\n       return true;\n     }\n-\n     if (JsonNode.class.isAssignableFrom(value.getClass()) || (objectMapper.canSerialize(value.getClass()) && serializePOJOsInVariablesToJson)) {\n       try {\n         return objectMapper.writeValueAsString(value).length() <= maxLength;\n       } catch (JsonProcessingException e) {\n-        logger.error(\"Error writing json variable of type \" + value.getClass(), e);\n+        logger.error(\"Error writing json variable of type \" + value.getClass(),\n+                     e);\n       }\n     }\n-\n     return false;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/539/JsonType.java\nindex a0a1437bb11..aa0a0ef091d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/539/JsonType.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.variable;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/539/JsonType.java\nindex a0a1437bb11..aa0a0ef091d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/539/JsonType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/539/JsonType.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.engine.impl.variable;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}