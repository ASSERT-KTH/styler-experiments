{
    "project_name": "Angel-ML-angel",
    "violation_id": "655",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/655/PartSampleNeighborResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/655/PartSampleNeighborResult.java\nindex 30da373e4df..c2ddc48ae97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/655/PartSampleNeighborResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/655/PartSampleNeighborResult.java\n@@ -25,75 +25,75 @@ import io.netty.buffer.ByteBuf;\n  */\n public class PartSampleNeighborResult extends PartitionGetResult {\n \n-  private int partId;\n-  /**\n-   * Node id to neighbors map\n-   */\n-  private long[][] nodeIdToNeighbors;\n+    private int partId;\n+    /**\n+     * Node id to neighbors map\n+     */\n+    private long[][] nodeIdToNeighbors;\n \n-  public PartSampleNeighborResult(int partId, long[][] nodeIdToNeighbors) {\n-    this.partId = partId;\n-    this.nodeIdToNeighbors = nodeIdToNeighbors;\n-  }\n+    public PartSampleNeighborResult(int partId, long[][] nodeIdToNeighbors) {\n+        this.partId = partId;\n+        this.nodeIdToNeighbors = nodeIdToNeighbors;\n+    }\n \n-  public PartSampleNeighborResult() {\n-    this(-1, null);\n-  }\n+    public PartSampleNeighborResult() {\n+        this(-1, null);\n+    }\n \n-  public long[][] getNodeIdToNeighbors() {\n-    return nodeIdToNeighbors;\n-  }\n+    public long[][] getNodeIdToNeighbors() {\n+        return nodeIdToNeighbors;\n+    }\n \n-  public void setNodeIdToNeighbors(\n-      long[][] nodeIdToNeighbors) {\n-    this.nodeIdToNeighbors = nodeIdToNeighbors;\n-  }\n+    public void setNodeIdToNeighbors(\n+            long[][] nodeIdToNeighbors) {\n+        this.nodeIdToNeighbors = nodeIdToNeighbors;\n+    }\n \n-  public int getPartId() {\n-    return partId;\n-  }\n+    public int getPartId() {\n+        return partId;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf output) {\n-    output.writeInt(partId);\n-    output.writeInt(nodeIdToNeighbors.length);\n-    for (int i = 0; i < nodeIdToNeighbors.length; i++) {\n-      if (nodeIdToNeighbors[i] == null) {\n-        output.writeInt(0);\n-      } else {\n-        output.writeInt(nodeIdToNeighbors[i].length);\n-        for (long value : nodeIdToNeighbors[i]) {\n-          output.writeLong(value);\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        output.writeInt(partId);\n+        output.writeInt(nodeIdToNeighbors.length);\n+        for (int i = 0; i < nodeIdToNeighbors.length; i++) {\n+            if (nodeIdToNeighbors[i] == null) {\n+                output.writeInt(0);\n+            } else {\n+                output.writeInt(nodeIdToNeighbors[i].length);\n+                for (long value : nodeIdToNeighbors[i]) {\n+                    output.writeLong(value);\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    partId = input.readInt();\n-    int size = input.readInt();\n-    nodeIdToNeighbors = new long[size][];\n-    for (int i = 0; i < size; i++) {\n-      long[] neighbors = new long[input.readInt()];\n-      for (int j = 0; j < neighbors.length; j++) {\n-        neighbors[j] = input.readLong();\n-      }\n-      nodeIdToNeighbors[i] = neighbors;\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        partId = input.readInt();\n+        int size = input.readInt();\n+        nodeIdToNeighbors = new long[size][];\n+        for (int i = 0; i < size; i++) {\n+            long[] neighbors = new long[input.readInt()];\n+            for (int j = 0; j < neighbors.length; j++) {\n+                neighbors[j] = input.readLong();\n+            }\n+            nodeIdToNeighbors[i] = neighbors;\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = 8;\n-    for (int i = 0; i < nodeIdToNeighbors.length; i++) {\n-      if (nodeIdToNeighbors[i] == null) {\n-        len += 4;\n-      } else {\n-        len += 4;\n-        len += 8 * nodeIdToNeighbors[i].length;\n-      }\n+    @Override\n+    public int bufferLen() {\n+        int len = 8;\n+        for (int i = 0; i < nodeIdToNeighbors.length; i++) {\n+            if (nodeIdToNeighbors[i] == null) {\n+                len += 4;\n+            } else {\n+                len += 4;\n+                len += 8 * nodeIdToNeighbors[i].length;\n+            }\n+        }\n+        return len;\n     }\n-    return len;\n-  }\n }\n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/655/PartSampleNeighborResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/655/PartSampleNeighborResult.java\nindex 30da373e4df..b6470fb542b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/655/PartSampleNeighborResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/655/PartSampleNeighborResult.java\n@@ -44,8 +44,7 @@ public class PartSampleNeighborResult extends PartitionGetResult {\n     return nodeIdToNeighbors;\n   }\n \n-  public void setNodeIdToNeighbors(\n-      long[][] nodeIdToNeighbors) {\n+  public void setNodeIdToNeighbors(long[][] nodeIdToNeighbors) {\n     this.nodeIdToNeighbors = nodeIdToNeighbors;\n   }\n \n@@ -96,4 +95,4 @@ public class PartSampleNeighborResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/655/PartSampleNeighborResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/655/PartSampleNeighborResult.java\nindex 30da373e4df..aed6fca470f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/655/PartSampleNeighborResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/655/PartSampleNeighborResult.java\n@@ -23,6 +23,7 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Result of GetNeighbor\n  */\n+\n public class PartSampleNeighborResult extends PartitionGetResult {\n \n   private int partId;\n@@ -44,8 +45,7 @@ public class PartSampleNeighborResult extends PartitionGetResult {\n     return nodeIdToNeighbors;\n   }\n \n-  public void setNodeIdToNeighbors(\n-      long[][] nodeIdToNeighbors) {\n+  public void setNodeIdToNeighbors(long[][] nodeIdToNeighbors) {\n     this.nodeIdToNeighbors = nodeIdToNeighbors;\n   }\n \n@@ -72,6 +72,7 @@ public class PartSampleNeighborResult extends PartitionGetResult {\n   @Override\n   public void deserialize(ByteBuf input) {\n     partId = input.readInt();\n+\n     int size = input.readInt();\n     nodeIdToNeighbors = new long[size][];\n     for (int i = 0; i < size; i++) {\n@@ -96,4 +97,4 @@ public class PartSampleNeighborResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}