{
    "project_name": "wso2-attic-commons",
    "violation_id": "200",
    "information": {
        "violations": [
            {
                "line": "74",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                     }\n         }\n         System.out.println(\"Average time to access resource comment: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\n     }\n\n    public void testAddProperties() throws RegistryException {",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/200/CommentPerfTest.java\nindex 904f36d2e60..2dea607ab3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/200/CommentPerfTest.java\n@@ -71,10 +71,11 @@ public class CommentPerfTest extends PerfTestingSetup {\n                         e.printStackTrace();\r\n                      }\r\n          }\r\n-         System.out.println(\"Average time to access resource comment: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-     }\r\n+         System.out.println(\"Average time to access resource comment: \"+\r\n+                 ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n+      }\r\n \r\n-    public void testAddProperties() throws RegistryException {\r\n+     public void testAddProperties() throws RegistryException {\r\n \r\n         long totalTime = 0;\r\n         try{\r\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/200/CommentPerfTest.java\nindex 904f36d2e60..ba71fe20cbf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/200/CommentPerfTest.java\n@@ -22,135 +22,138 @@ import junit.framework.TestCase;\n \r\n public class CommentPerfTest extends PerfTestingSetup {\r\n \r\n-    public CommentPerfTest (String text) {\r\n-      super(text);\r\n+  public CommentPerfTest(String text) {\r\n+    super(text);\r\n+  }\r\n+\r\n+  public void testAddCommentTime() throws RegistryException {\r\n+    long totalTime = 0;\r\n+    for (int i = 1; i <= maxFileToputResource; i++) {\r\n+      String path_1 = \"/c\" + i;\r\n+      String path_2 = path_1 + \"/b\" + i;\r\n+      String path = path_2 + \"/r1.txt\";\r\n+\r\n+      try {\r\n+        Comment c1 = new Comment();\r\n+        c1.setResourcePath(path);\r\n+        c1.setText(\"This is a test comment1\");\r\n+\r\n+        long startTime = System.nanoTime();\r\n+        adminRegistry.addComment(path, c1);\r\n+        long runTime = System.nanoTime() - startTime;\r\n+        totalTime += runTime;\r\n+\r\n+      } catch (Exception e) {\r\n+        fail(\"Failed to add comments.\");\r\n+        e.printStackTrace();\r\n+      }\r\n     }\r\n+    System.out.println(\r\n+      \"Average time to add resource comment: \" + ((totalTime / 1000000) / maxFileToputResource) + \" ms\");\r\n+  }\r\n \r\n-    public void testAddCommentTime() throws RegistryException {\r\n-         long totalTime = 0;\r\n-         for (int i=1;i<=maxFileToputResource;i++){\r\n-                     String path_1= \"/c\"+i;\r\n-                     String path_2= path_1 + \"/b\" +i;\r\n-                     String path= path_2+\"/r1.txt\";\r\n-\r\n-                     try {\r\n-                         Comment c1 = new Comment();\r\n-                         c1.setResourcePath(path);\r\n-                         c1.setText(\"This is a test comment1\");\r\n-\r\n-                         long startTime = System.nanoTime();\r\n-                         adminRegistry.addComment(path,c1);\r\n-                         long runTime = System.nanoTime() - startTime;\r\n-                         totalTime += runTime;\r\n-\r\n-                     }catch (Exception e) {\r\n-                        fail(\"Failed to add comments.\");\r\n-                        e.printStackTrace();\r\n-                     }\r\n-         }\r\n-         System.out.println(\"Average time to add resource comment: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-     }\r\n-\r\n-    public void testAccessComment() throws RegistryException {\r\n-\r\n-         long totalTime = 0;\r\n-\r\n-         for (int i=1;i<=maxFileToputResource;i++){\r\n-                     String path_1= \"/c\"+i;\r\n-                     String path_2= path_1 + \"/b\" +i;\r\n-                     String path= path_2+\"/r1.txt\";\r\n-\r\n-                     try {\r\n-                         long startTime = System.nanoTime();\r\n-                         Comment[] comments1 = adminRegistry.getComments(path);\r\n-                         long runTime = System.nanoTime() - startTime;\r\n-                         totalTime += runTime;\r\n-\r\n-                     }catch (Exception e) {\r\n-                        fail(\"Failed to read comments.\");\r\n-                        e.printStackTrace();\r\n-                     }\r\n-         }\r\n-         System.out.println(\"Average time to access resource comment: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-     }\r\n-\r\n-    public void testAddProperties() throws RegistryException {\r\n-\r\n-        long totalTime = 0;\r\n-        try{\r\n-            for (int i=1;i<maxFileToputResource;i++){\r\n-\r\n-                String path_1= \"/c\"+i;\r\n-                String path_2= path_1 + \"/b\" +i;\r\n-                String path= path_2+\"/r1.txt\";\r\n-                String key = \"Registykey\"+i;\r\n-                Resource r1 = adminRegistry.get(path);\r\n-\r\n-                long startTime = System.nanoTime();\r\n-                r1.setProperty(key,\"keyvalue2\");\r\n-                adminRegistry.put(path,r1);\r\n-                long runTime = System.nanoTime() - startTime;\r\n-                totalTime += runTime;\r\n-            }\r\n-        }catch (Exception e) {\r\n-            fail(\"Failed to initialize the registry.\");\r\n-            e.printStackTrace();\r\n-        }\r\n-        System.out.println(\"Average time to add property: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-    }\r\n+  public void testAccessComment() throws RegistryException {\r\n \r\n-    public void testReadProperties() throws RegistryException {\r\n-        long totalTime = 0;\r\n-        try{\r\n-            for (int i=1;i<maxFileToputResource;i++){\r\n-                Resource r1 = adminRegistry.newResource();\r\n-                String path_1= \"/c\"+i;\r\n-                String path_2= path_1 + \"/b\" +i;\r\n-                String path= path_2+\"/r1.txt\";\r\n-\r\n-                long startTime = System.nanoTime();\r\n-                r1 = adminRegistry.get(path);\r\n-                r1.getProperties();\r\n-                long runTime = System.nanoTime() - startTime;\r\n-                totalTime += runTime;\r\n-            }\r\n-\r\n-        }catch (Exception e) {\r\n-            fail(\"Failed to initialize the registry.\");\r\n-            e.printStackTrace();\r\n-        }\r\n-        System.out.println(\"Average time to access Properties: \"+((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-    }\r\n+    long totalTime = 0;\r\n+\r\n+    for (int i = 1; i <= maxFileToputResource; i++) {\r\n+      String path_1 = \"/c\" + i;\r\n+      String path_2 = path_1 + \"/b\" + i;\r\n+      String path = path_2 + \"/r1.txt\";\r\n+\r\n+      try {\r\n+        long startTime = System.nanoTime();\r\n+        Comment[] comments1 = adminRegistry.getComments(path);\r\n+        long runTime = System.nanoTime() - startTime;\r\n+        totalTime += runTime;\r\n \r\n-    public void testPropertySearch() throws RegistryException {\r\n-\r\n-        long totalTime = 0;\r\n-        try{\r\n-            for (int i=1;i<maxFileToputResource;i++){\r\n-                String path_1= \"/c\"+i;\r\n-                String path_2= path_1 + \"/b\" +i;\r\n-                String path= path_2+\"/r1.txt\";\r\n-\r\n-                String sql1 = \"SELECT R.PATH FROM RESOURCE R, PROPERTY P WHERE P.NAME LIKE ? AND R.RID=P.RID\";\r\n-\r\n-                Resource q1 = adminRegistry.newResource();\r\n-                q1.setContent(sql1);\r\n-                q1.setMediaType(RegistryConstants.SQL_QUERY_MEDIA_TYPE);\r\n-                adminRegistry.put(path, q1);\r\n-\r\n-                Map<String, String> params = new HashMap <String, String> ();\r\n-                params.put(\"1\", \"%Registykey%\");\r\n-\r\n-                long startTime = System.nanoTime();\r\n-                Collection result = adminRegistry.executeQuery(path, params);\r\n-                String[] qPaths = (String[]) result.getContent();\r\n-                long runTime = System.nanoTime() - startTime;\r\n-                totalTime += runTime;\r\n-            }\r\n-        }catch (Exception e) {\r\n-            fail(\"Failed to execute query for resource name.\");\r\n-            e.printStackTrace();\r\n-        }\r\n-        System.out.println(\"Average time to search Property Names: \"+((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n+      } catch (Exception e) {\r\n+        fail(\"Failed to read comments.\");\r\n+        e.printStackTrace();\r\n+      }\r\n+    }\r\n+    System.out.println(\r\n+      \"Average time to access resource comment: \" + ((totalTime / 1000000) / maxFileToputResource) + \" ms\");\r\n+  }\r\n+\r\n+  public void testAddProperties() throws RegistryException {\r\n+\r\n+    long totalTime = 0;\r\n+    try {\r\n+      for (int i = 1; i < maxFileToputResource; i++) {\r\n+\r\n+        String path_1 = \"/c\" + i;\r\n+        String path_2 = path_1 + \"/b\" + i;\r\n+        String path = path_2 + \"/r1.txt\";\r\n+        String key = \"Registykey\" + i;\r\n+        Resource r1 = adminRegistry.get(path);\r\n+\r\n+        long startTime = System.nanoTime();\r\n+        r1.setProperty(key, \"keyvalue2\");\r\n+        adminRegistry.put(path, r1);\r\n+        long runTime = System.nanoTime() - startTime;\r\n+        totalTime += runTime;\r\n+      }\r\n+    } catch (Exception e) {\r\n+      fail(\"Failed to initialize the registry.\");\r\n+      e.printStackTrace();\r\n+    }\r\n+    System.out.println(\"Average time to add property: \" + ((totalTime / 1000000) / maxFileToputResource) + \" ms\");\r\n+  }\r\n+\r\n+  public void testReadProperties() throws RegistryException {\r\n+    long totalTime = 0;\r\n+    try {\r\n+      for (int i = 1; i < maxFileToputResource; i++) {\r\n+        Resource r1 = adminRegistry.newResource();\r\n+        String path_1 = \"/c\" + i;\r\n+        String path_2 = path_1 + \"/b\" + i;\r\n+        String path = path_2 + \"/r1.txt\";\r\n+\r\n+        long startTime = System.nanoTime();\r\n+        r1 = adminRegistry.get(path);\r\n+        r1.getProperties();\r\n+        long runTime = System.nanoTime() - startTime;\r\n+        totalTime += runTime;\r\n+      }\r\n+\r\n+    } catch (Exception e) {\r\n+      fail(\"Failed to initialize the registry.\");\r\n+      e.printStackTrace();\r\n+    }\r\n+    System.out.println(\"Average time to access Properties: \" + ((totalTime / 1000000) / maxFileToputResource) + \" ms\");\r\n+  }\r\n+\r\n+  public void testPropertySearch() throws RegistryException {\r\n+\r\n+    long totalTime = 0;\r\n+    try {\r\n+      for (int i = 1; i < maxFileToputResource; i++) {\r\n+        String path_1 = \"/c\" + i;\r\n+        String path_2 = path_1 + \"/b\" + i;\r\n+        String path = path_2 + \"/r1.txt\";\r\n+\r\n+        String sql1 = \"SELECT R.PATH FROM RESOURCE R, PROPERTY P WHERE P.NAME LIKE ? AND R.RID=P.RID\";\r\n+\r\n+        Resource q1 = adminRegistry.newResource();\r\n+        q1.setContent(sql1);\r\n+        q1.setMediaType(RegistryConstants.SQL_QUERY_MEDIA_TYPE);\r\n+        adminRegistry.put(path, q1);\r\n+\r\n+        Map<String, String> params = new HashMap<String, String>();\r\n+        params.put(\"1\", \"%Registykey%\");\r\n+\r\n+        long startTime = System.nanoTime();\r\n+        Collection result = adminRegistry.executeQuery(path, params);\r\n+        String[] qPaths = (String[]) result.getContent();\r\n+        long runTime = System.nanoTime() - startTime;\r\n+        totalTime += runTime;\r\n+      }\r\n+    } catch (Exception e) {\r\n+      fail(\"Failed to execute query for resource name.\");\r\n+      e.printStackTrace();\r\n     }\r\n+    System.out.println(\r\n+      \"Average time to search Property Names: \" + ((totalTime / 1000000) / maxFileToputResource) + \" ms\");\r\n+  }\r\n }\r\n",
            "diff_size": 210
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/200/CommentPerfTest.java\nindex 904f36d2e60..a25b4a54cb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/200/CommentPerfTest.java\n@@ -26,12 +26,12 @@ public class CommentPerfTest extends PerfTestingSetup {\n       super(text);\r\n     }\r\n \r\n-    public void testAddCommentTime() throws RegistryException {\r\n-         long totalTime = 0;\r\n-         for (int i=1;i<=maxFileToputResource;i++){\r\n-                     String path_1= \"/c\"+i;\r\n+    public void testAddCommentTime() throws RegistryException {\n+    long totalTime = 0;\r\n+         for (int i=1;i<=maxFileToputResource;i++) {\n+    String path_1 = \"/c\"+i;\r\n                      String path_2= path_1 + \"/b\" +i;\r\n-                     String path= path_2+\"/r1.txt\";\r\n+                     String path = path_2+\"/r1.txt\";\r\n \r\n                      try {\r\n                          Comment c1 = new Comment();\r\n@@ -45,20 +45,20 @@ public class CommentPerfTest extends PerfTestingSetup {\n \r\n                      }catch (Exception e) {\r\n                         fail(\"Failed to add comments.\");\r\n-                        e.printStackTrace();\r\n-                     }\r\n-         }\r\n+                        e.printStackTrace();\n+\n+    }\n+    }\r\n          System.out.println(\"Average time to add resource comment: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-     }\r\n-\r\n-    public void testAccessComment() throws RegistryException {\r\n+     }\n+\n+public void testAccessComment() throws RegistryException {\n+    long totalTime = 0;\r\n \r\n-         long totalTime = 0;\r\n-\r\n-         for (int i=1;i<=maxFileToputResource;i++){\r\n-                     String path_1= \"/c\"+i;\r\n+         for (int i=1;i<=maxFileToputResource;i++) {\n+    String path_1 = \"/c\"+i;\r\n                      String path_2= path_1 + \"/b\" +i;\r\n-                     String path= path_2+\"/r1.txt\";\r\n+                     String path = path_2+\"/r1.txt\";\r\n \r\n                      try {\r\n                          long startTime = System.nanoTime();\r\n@@ -68,21 +68,22 @@ public class CommentPerfTest extends PerfTestingSetup {\n \r\n                      }catch (Exception e) {\r\n                         fail(\"Failed to read comments.\");\r\n-                        e.printStackTrace();\r\n-                     }\r\n-         }\r\n+                        e.printStackTrace();\n+\n+    }\n+    }\r\n          System.out.println(\"Average time to access resource comment: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-     }\r\n-\r\n-    public void testAddProperties() throws RegistryException {\r\n+     }\n+\n+public void testAddProperties() throws RegistryException {\r\n \r\n         long totalTime = 0;\r\n-        try{\r\n+        try {\r\n             for (int i=1;i<maxFileToputResource;i++){\r\n \r\n                 String path_1= \"/c\"+i;\r\n                 String path_2= path_1 + \"/b\" +i;\r\n-                String path= path_2+\"/r1.txt\";\r\n+                String path = path_2+\"/r1.txt\";\r\n                 String key = \"Registykey\"+i;\r\n                 Resource r1 = adminRegistry.get(path);\r\n \r\n@@ -101,12 +102,12 @@ public class CommentPerfTest extends PerfTestingSetup {\n \r\n     public void testReadProperties() throws RegistryException {\r\n         long totalTime = 0;\r\n-        try{\r\n+        try {\r\n             for (int i=1;i<maxFileToputResource;i++){\r\n                 Resource r1 = adminRegistry.newResource();\r\n-                String path_1= \"/c\"+i;\r\n+                String path_1 = \"/c\"+i;\r\n                 String path_2= path_1 + \"/b\" +i;\r\n-                String path= path_2+\"/r1.txt\";\r\n+                String path = path_2+\"/r1.txt\";\r\n \r\n                 long startTime = System.nanoTime();\r\n                 r1 = adminRegistry.get(path);\r\n@@ -125,11 +126,11 @@ public class CommentPerfTest extends PerfTestingSetup {\n     public void testPropertySearch() throws RegistryException {\r\n \r\n         long totalTime = 0;\r\n-        try{\r\n+        try {\r\n             for (int i=1;i<maxFileToputResource;i++){\r\n-                String path_1= \"/c\"+i;\r\n+                String path_1 = \"/c\"+i;\r\n                 String path_2= path_1 + \"/b\" +i;\r\n-                String path= path_2+\"/r1.txt\";\r\n+                String path = path_2+\"/r1.txt\";\r\n \r\n                 String sql1 = \"SELECT R.PATH FROM RESOURCE R, PROPERTY P WHERE P.NAME LIKE ? AND R.RID=P.RID\";\r\n \r\n@@ -138,7 +139,7 @@ public class CommentPerfTest extends PerfTestingSetup {\n                 q1.setMediaType(RegistryConstants.SQL_QUERY_MEDIA_TYPE);\r\n                 adminRegistry.put(path, q1);\r\n \r\n-                Map<String, String> params = new HashMap <String, String> ();\r\n+                Map<String, String> params = new HashMap<String, String> ();\r\n                 params.put(\"1\", \"%Registykey%\");\r\n \r\n                 long startTime = System.nanoTime();\r\n@@ -153,4 +154,4 @@ public class CommentPerfTest extends PerfTestingSetup {\n         }\r\n         System.out.println(\"Average time to search Property Names: \"+((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/200/CommentPerfTest.java\nindex 904f36d2e60..2dea607ab3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/200/CommentPerfTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/200/CommentPerfTest.java\n@@ -71,10 +71,11 @@ public class CommentPerfTest extends PerfTestingSetup {\n                         e.printStackTrace();\r\n                      }\r\n          }\r\n-         System.out.println(\"Average time to access resource comment: \"+ ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n-     }\r\n+         System.out.println(\"Average time to access resource comment: \"+\r\n+                 ((totalTime/1000000)/maxFileToputResource)+\" ms\");\r\n+      }\r\n \r\n-    public void testAddProperties() throws RegistryException {\r\n+     public void testAddProperties() throws RegistryException {\r\n \r\n         long totalTime = 0;\r\n         try{\r\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}