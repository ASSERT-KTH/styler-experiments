{
    "project_name": "vostok-hercules",
    "violation_id": "35",
    "information": {
        "violations": [
            {
                "line": "48",
                "severity": "warning",
                "message": "Line is longer than 160 characters (found 161).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        }\n\n        metrics.forEach(record -> printWriter.printf(Locale.ENGLISH, \"%s %f %d\\n\", record.getMetricName(), record.getMetricValue(), record.getMetricUnixTime()));\n\n        printWriter.flush();\n        outputWriter.flush();",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/vostok-hercules/styler/05_predictions/final/files-repaired/35/GraphiteConnection.java\nindex 0ba64c714c4..3fe757ac27b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/vostok-hercules/styler/05_predictions/final/files-repaired/35/GraphiteConnection.java\n@@ -45,7 +45,9 @@ public class GraphiteConnection implements AutoCloseable {\n             printWriter = new PrintWriter(outputWriter, false);\n         }\n \n-        metrics.forEach(record -> printWriter.printf(Locale.ENGLISH, \"%s %f %d\\n\", record.getMetricName(), record.getMetricValue(), record.getMetricUnixTime()));\n+        metrics.forEach( record -> printWriter.printf(Locale. ENGLISH,\"%s %f %d\\n\"\n+        ,record.getMetricName ( ) ,record.getMetricValue() ,record.\n+        getMetricUnixTime()));\n \n         printWriter.flush();\n         outputWriter.flush();\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/checkstyle_idea/35/GraphiteConnection.java\nindex 0ba64c714c4..6852ad42c67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/checkstyle_idea/35/GraphiteConnection.java\n@@ -17,47 +17,47 @@ import java.util.Locale;\n  * Not thread-safe, expected to be used exclusively by one thread at any given moment.\n  */\n public class GraphiteConnection implements AutoCloseable {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(GraphiteConnection.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(GraphiteConnection.class);\n \n-    private final String server;\n-    private final int port;\n+  private final String server;\n+  private final int port;\n \n-    private volatile Socket socket;\n-    private volatile OutputStream outputStream;\n-    private volatile OutputStreamWriter outputWriter;\n-    private volatile PrintWriter printWriter;\n+  private volatile Socket socket;\n+  private volatile OutputStream outputStream;\n+  private volatile OutputStreamWriter outputWriter;\n+  private volatile PrintWriter printWriter;\n \n-    public GraphiteConnection(String server, int port) {\n-        this.server = server;\n-        this.port = port;\n-    }\n+  public GraphiteConnection(String server, int port) {\n+    this.server = server;\n+    this.port = port;\n+  }\n \n-    public void send(Collection<GraphiteMetricData> metrics) throws IOException {\n-        if (printWriter == null) {\n-            LOGGER.info(\"Opening a connection to Graphite server at {}:{}..\", server, port);\n+  public void send(Collection<GraphiteMetricData> metrics) throws IOException {\n+    if (printWriter == null) {\n+      LOGGER.info(\"Opening a connection to Graphite server at {}:{}..\", server, port);\n \n-            socket = new Socket(server, port);\n-            socket.setKeepAlive(true);\n-            socket.setTcpNoDelay(true);\n+      socket = new Socket(server, port);\n+      socket.setKeepAlive(true);\n+      socket.setTcpNoDelay(true);\n \n-            outputStream = new BufferedOutputStream(socket.getOutputStream(), 64 * 1024);\n-            outputWriter = new OutputStreamWriter(outputStream, StandardCharsets.US_ASCII);\n-            printWriter = new PrintWriter(outputWriter, false);\n-        }\n+      outputStream = new BufferedOutputStream(socket.getOutputStream(), 64 * 1024);\n+      outputWriter = new OutputStreamWriter(outputStream, StandardCharsets.US_ASCII);\n+      printWriter = new PrintWriter(outputWriter, false);\n+    }\n \n-        metrics.forEach(record -> printWriter.printf(Locale.ENGLISH, \"%s %f %d\\n\", record.getMetricName(), record.getMetricValue(), record.getMetricUnixTime()));\n+    metrics.forEach(record -> printWriter.printf(Locale.ENGLISH, \"%s %f %d\\n\", record.getMetricName(), record.getMetricValue(), record.getMetricUnixTime()));\n \n-        printWriter.flush();\n-        outputWriter.flush();\n-        outputStream.flush();\n-    }\n+    printWriter.flush();\n+    outputWriter.flush();\n+    outputStream.flush();\n+  }\n \n-    @Override\n-    public void close() {\n-        try {\n-            socket.close();\n-        } catch (Exception exception) {\n-            LOGGER.warn(\"Failed to close a connection to Graphite.\", exception);\n-        }\n+  @Override\n+  public void close() {\n+    try {\n+      socket.close();\n+    } catch (Exception exception) {\n+      LOGGER.warn(\"Failed to close a connection to Graphite.\", exception);\n     }\n+  }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/naturalize/35/GraphiteConnection.java\nindex 0ba64c714c4..3f52fd41486 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/naturalize/35/GraphiteConnection.java\n@@ -60,4 +60,4 @@ public class GraphiteConnection implements AutoCloseable {\n             LOGGER.warn(\"Failed to close a connection to Graphite.\", exception);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/codebuff/35/GraphiteConnection.java\nindex 0ba64c714c4..3be2b832c97 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/codebuff/35/GraphiteConnection.java\n@@ -2,7 +2,6 @@ package ru.kontur.vostok.hercules.graphite.sink;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.BufferedOutputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n@@ -16,12 +15,13 @@ import java.util.Locale;\n /**\n  * Not thread-safe, expected to be used exclusively by one thread at any given moment.\n  */\n+\n+\n public class GraphiteConnection implements AutoCloseable {\n-    private static final Logger LOGGER = LoggerFactory.getLogger(GraphiteConnection.class);\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(GraphiteConnection.class);\n     private final String server;\n     private final int port;\n-\n     private volatile Socket socket;\n     private volatile OutputStream outputStream;\n     private volatile OutputStreamWriter outputWriter;\n@@ -35,18 +35,21 @@ public class GraphiteConnection implements AutoCloseable {\n     public void send(Collection<GraphiteMetricData> metrics) throws IOException {\n         if (printWriter == null) {\n             LOGGER.info(\"Opening a connection to Graphite server at {}:{}..\", server, port);\n-\n             socket = new Socket(server, port);\n             socket.setKeepAlive(true);\n             socket.setTcpNoDelay(true);\n-\n             outputStream = new BufferedOutputStream(socket.getOutputStream(), 64 * 1024);\n             outputWriter = new OutputStreamWriter(outputStream, StandardCharsets.US_ASCII);\n             printWriter = new PrintWriter(outputWriter, false);\n         }\n \n-        metrics.forEach(record -> printWriter.printf(Locale.ENGLISH, \"%s %f %d\\n\", record.getMetricName(), record.getMetricValue(), record.getMetricUnixTime()));\n-\n+        metrics.forEach(record -> printWriter.printf(\n+            Locale.ENGLISH,\n+            \"%s %f %d\\n\",\n+            record.getMetricName(),\n+            record.getMetricValue(),\n+            record.getMetricUnixTime()\n+));\n         printWriter.flush();\n         outputWriter.flush();\n         outputStream.flush();\n@@ -60,4 +63,4 @@ public class GraphiteConnection implements AutoCloseable {\n             LOGGER.warn(\"Failed to close a connection to Graphite.\", exception);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/styler/05_predictions/random/files-repaired/35/GraphiteConnection.java\nindex 0ba64c714c4..3fe757ac27b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/styler/05_predictions/random/files-repaired/35/GraphiteConnection.java\n@@ -45,7 +45,9 @@ public class GraphiteConnection implements AutoCloseable {\n             printWriter = new PrintWriter(outputWriter, false);\n         }\n \n-        metrics.forEach(record -> printWriter.printf(Locale.ENGLISH, \"%s %f %d\\n\", record.getMetricName(), record.getMetricValue(), record.getMetricUnixTime()));\n+        metrics.forEach( record -> printWriter.printf(Locale. ENGLISH,\"%s %f %d\\n\"\n+        ,record.getMetricName ( ) ,record.getMetricValue() ,record.\n+        getMetricUnixTime()));\n \n         printWriter.flush();\n         outputWriter.flush();\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "column": "33",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/styler/05_predictions/three_grams/files-repaired/35/GraphiteConnection.java\nindex 0ba64c714c4..450e2ffae0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/violations/35/GraphiteConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/vostok-hercules/styler/05_predictions/three_grams/files-repaired/35/GraphiteConnection.java\n@@ -43,11 +43,7 @@ public class GraphiteConnection implements AutoCloseable {\n             outputStream = new BufferedOutputStream(socket.getOutputStream(), 64 * 1024);\n             outputWriter = new OutputStreamWriter(outputStream, StandardCharsets.US_ASCII);\n             printWriter = new PrintWriter(outputWriter, false);\n-        }\n-\n-        metrics.forEach(record -> printWriter.printf(Locale.ENGLISH, \"%s %f %d\\n\", record.getMetricName(), record.getMetricValue(), record.getMetricUnixTime()));\n-\n-        printWriter.flush();\n+        } metrics.forEach(record-> printWriter . printf (Locale.ENGLISH,\"%s %f %d\\n\" , record . getMetricName(),record. getMetricValue ( ) ,record.getMetricUnixTime() ) ) ; printWriter.flush();\n         outputWriter.flush();\n         outputStream.flush();\n     }\n",
            "diff_size": 5
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "styler_three_grams"
    ]
}