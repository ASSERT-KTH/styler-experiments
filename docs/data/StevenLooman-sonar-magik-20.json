{
    "project_name": "StevenLooman-sonar-magik",
    "violation_id": "20",
    "information": {
        "violations": [
            {
                "line": "73",
                "column": "5",
                "severity": "warning",
                "message": "'}' at column 5 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n      childNode = getLastDescendant(child, nodeType);\n    } while (childNode == null);\n\n    return null;\n  }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/StevenLooman-sonar-magik/styler/05_predictions/final/files-repaired/20/SizeZeroEmptyCheck.java\nindex 21400a1abe5..8d4cb7bc43f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/StevenLooman-sonar-magik/styler/05_predictions/final/files-repaired/20/SizeZeroEmptyCheck.java\n@@ -70,7 +70,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n+    while (childNode == null);\n \n     return null;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "73",
                    "column": "5",
                    "severity": "warning",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/checkstyle_idea/20/SizeZeroEmptyCheck.java\nindex 21400a1abe5..9be7ac1f1cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/checkstyle_idea/20/SizeZeroEmptyCheck.java\n@@ -23,7 +23,7 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     AstNode rightHandSide = node.getLastChild();\n     if (hasEqOperator(node)\n         && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n-            || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n+        || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n       addIssue(MESSAGE, node);\n     }\n   }\n@@ -31,8 +31,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n     return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n-           || operatorNode.getTokenValue().equals(\"_is\");\n+        || operatorNode.getTokenValue().equals(\">=\")\n+        || operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n   private boolean isMethodInvocationSize(AstNode node) {\n@@ -49,7 +49,7 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n     return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+        && numberNode.getTokenValue().equals(\"0\");\n   }\n \n   @Nullable\n@@ -64,7 +64,7 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n         return null;\n       }\n \n-      AstNode child = (AstNode)childrenIter.next();\n+      AstNode child = (AstNode) childrenIter.next();\n       if (child.is(nodeType)) {\n         return child;\n       }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 2, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "72",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/naturalize/20/SizeZeroEmptyCheck.java\nindex 21400a1abe5..5580dc96b93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/naturalize/20/SizeZeroEmptyCheck.java\n@@ -24,14 +24,14 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     if (hasEqOperator(node)\n         && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n             || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n-      addIssue(MESSAGE, node);\n+  addIssue(MESSAGE, node);\n     }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n     return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n+    || operatorNode.getTokenValue().equals(\">=\")\n            || operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n@@ -42,14 +42,12 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     }\n \n     AstNode identifierNode = methodInvocationNode.getFirstDescendant(MagikGrammar.IDENTIFIER);\n-    return identifierNode != null\n-        && identifierNode.getTokenValue().equals(\"size\");\n+    return identifierNode != null && identifierNode.getTokenValue().equals(\"size\");\n   }\n \n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n-    return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+    return numberNode != null && numberNode.getTokenValue().equals(\"0\");\n   }\n \n   @Nullable\n@@ -70,8 +68,9 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n+while (childNode == null);\n \n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "column": "52",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "32",
                    "column": "96",
                    "severity": "warning",
                    "message": "WhitespaceAround: '||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'do..while while' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "column": "6",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'while' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/codebuff/20/SizeZeroEmptyCheck.java\nindex 21400a1abe5..80bc102ef15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/codebuff/20/SizeZeroEmptyCheck.java\n@@ -5,7 +5,6 @@ import com.sonar.sslr.api.AstNodeType;\n import org.sonar.check.Rule;\n import org.stevenlooman.sw.magik.MagikCheck;\n import org.stevenlooman.sw.magik.api.MagikGrammar;\n-\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n@@ -21,18 +20,16 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n   protected void walkPreEqualityExpression(AstNode node) {\n     AstNode leftHandSide = node.getFirstChild();\n     AstNode rightHandSide = node.getLastChild();\n-    if (hasEqOperator(node)\n-        && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n-            || isMethodInvocationSize(rightHandSide) && isNumberZero(leftHandSide))) {\n+    if (hasEqOperator(node) && (isMethodInvocationSize(leftHandSide) && isNumberZero(rightHandSide)\n+                                || isMethodInvocationSize(rightHandSide)\n+&& isNumberZero(leftHandSide))) {\n       addIssue(MESSAGE, node);\n     }\n   }\n \n   private boolean hasEqOperator(AstNode node) {\n     AstNode operatorNode = node.getChildren().get(1);\n-    return operatorNode.getTokenValue().equals(\"=\")\n-           || operatorNode.getTokenValue().equals(\">=\")\n-           || operatorNode.getTokenValue().equals(\"_is\");\n+    return operatorNode.getTokenValue().equals(\"=\")|| operatorNode.getTokenValue().equals(\">=\")|| operatorNode.getTokenValue().equals(\"_is\");\n   }\n \n   private boolean isMethodInvocationSize(AstNode node) {\n@@ -42,36 +39,35 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n     }\n \n     AstNode identifierNode = methodInvocationNode.getFirstDescendant(MagikGrammar.IDENTIFIER);\n-    return identifierNode != null\n-        && identifierNode.getTokenValue().equals(\"size\");\n+    return identifierNode != null && identifierNode.getTokenValue().equals(\"size\");\n   }\n \n   private boolean isNumberZero(AstNode node) {\n     AstNode numberNode = node.getFirstDescendant(MagikGrammar.NUMBER);\n-    return numberNode != null\n-           && numberNode.getTokenValue().equals(\"0\");\n+    return numberNode != null && numberNode.getTokenValue().equals(\"0\");\n   }\n \n   @Nullable\n   private AstNode getLastDescendant(AstNode node, AstNodeType nodeType) {\n     List<AstNode> children = node.getChildren();\n     Collections.reverse(children);\n-    Iterator<AstNode> childrenIter = children.iterator();\n \n+    Iterator<AstNode> childrenIter = children.iterator();\n     AstNode childNode;\n     do {\n       if (!childrenIter.hasNext()) {\n         return null;\n       }\n \n-      AstNode child = (AstNode)childrenIter.next();\n+      AstNode child = (AstNode) childrenIter.next();\n       if (child.is(nodeType)) {\n         return child;\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n \n+while(childNode == null);\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/styler/05_predictions/random/files-repaired/20/SizeZeroEmptyCheck.java\nindex 21400a1abe5..8d4cb7bc43f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/styler/05_predictions/random/files-repaired/20/SizeZeroEmptyCheck.java\n@@ -70,7 +70,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n       }\n \n       childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+    }\n+    while (childNode == null);\n \n     return null;\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "72",
                    "column": "54",
                    "severity": "warning",
                    "message": "'}' at column 54 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "72",
                    "column": "54",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/styler/05_predictions/three_grams/files-repaired/20/SizeZeroEmptyCheck.java\nindex 21400a1abe5..a01bf5101f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/violations/20/SizeZeroEmptyCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StevenLooman-sonar-magik/styler/05_predictions/three_grams/files-repaired/20/SizeZeroEmptyCheck.java\n@@ -69,8 +69,8 @@ public class SizeZeroEmptyCheck extends MagikCheck {\n         return child;\n       }\n \n-      childNode = getLastDescendant(child, nodeType);\n-    } while (childNode == null);\n+      childNode = getLastDescendant(child, nodeType);}\n+    while (childNode == null);\n \n     return null;\n   }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}