{
    "project_name": "neuhalje-bouncy-gpg",
    "violation_id": "17",
    "information": {
        "violations": [
            {
                "line": "14",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 116).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "/**\n * Load keyrings from files. These files are created and managed via gpg.\n * @deprecated : The keyring configs are highly dependent on GnuPG. Using secret keys no longer works with GnuPG 2.1\n */\n@Deprecated\nfinal class FileBasedKeyringConfig extends AbstractDefaultKeyringConfig {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "15",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/violations/17/FileBasedKeyringConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/checkstyle_idea/17/FileBasedKeyringConfig.java\nindex ef54464c299..68003d8992b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/violations/17/FileBasedKeyringConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/checkstyle_idea/17/FileBasedKeyringConfig.java\n@@ -11,6 +11,7 @@ import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.Keyrin\n \n /**\n  * Load keyrings from files. These files are created and managed via gpg.\n+ *\n  * @deprecated : The keyring configs are highly dependent on GnuPG. Using secret keys no longer works with GnuPG 2.1\n  */\n @Deprecated\n@@ -22,7 +23,7 @@ final class FileBasedKeyringConfig extends AbstractDefaultKeyringConfig {\n   private final File secretKeyring;\n \n   public FileBasedKeyringConfig(@Nonnull KeyringConfigCallback callback,\n-      @Nonnull File publicKeyring, @Nonnull File secretKeyring) {\n+                                @Nonnull File publicKeyring, @Nonnull File secretKeyring) {\n     super(callback);\n     requireNonNull(publicKeyring, \"publicKeyring must not be null\");\n     requireNonNull(secretKeyring, \"secretKeyring must not be null\");\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/violations/17/FileBasedKeyringConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/naturalize/17/FileBasedKeyringConfig.java\nindex ef54464c299..e2ec3b5d9ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/violations/17/FileBasedKeyringConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/naturalize/17/FileBasedKeyringConfig.java\n@@ -26,8 +26,7 @@ final class FileBasedKeyringConfig extends AbstractDefaultKeyringConfig {\n     super(callback);\n     requireNonNull(publicKeyring, \"publicKeyring must not be null\");\n     requireNonNull(secretKeyring, \"secretKeyring must not be null\");\n-\n-    this.publicKeyring = publicKeyring;\n+this.publicKeyring = publicKeyring;\n     this.secretKeyring = secretKeyring;\n   }\n \n@@ -42,4 +41,4 @@ final class FileBasedKeyringConfig extends AbstractDefaultKeyringConfig {\n   protected InputStream getSecretKeyRingStream() throws IOException {\n     return Files.newInputStream(secretKeyring.toPath());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "13",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/violations/17/FileBasedKeyringConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/codebuff/17/FileBasedKeyringConfig.java\nindex ef54464c299..65ae0d711ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/violations/17/FileBasedKeyringConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neuhalje-bouncy-gpg/codebuff/17/FileBasedKeyringConfig.java\n@@ -1,7 +1,6 @@\n package name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.keyrings;\n \n import static java.util.Objects.requireNonNull;\n-\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n@@ -13,20 +12,22 @@ import name.neuhalfen.projects.crypto.bouncycastle.openpgp.keys.callbacks.Keyrin\n  * Load keyrings from files. These files are created and managed via gpg.\n  * @deprecated : The keyring configs are highly dependent on GnuPG. Using secret keys no longer works with GnuPG 2.1\n  */\n-@Deprecated\n-final class FileBasedKeyringConfig extends AbstractDefaultKeyringConfig {\n+\n+\n+@Deprecated final class FileBasedKeyringConfig extends AbstractDefaultKeyringConfig {\n \n   @Nonnull\n   private final File publicKeyring;\n+\n   @Nonnull\n   private final File secretKeyring;\n \n   public FileBasedKeyringConfig(@Nonnull KeyringConfigCallback callback,\n-      @Nonnull File publicKeyring, @Nonnull File secretKeyring) {\n+            @Nonnull File publicKeyring,\n+            @Nonnull File secretKeyring) {\n     super(callback);\n     requireNonNull(publicKeyring, \"publicKeyring must not be null\");\n     requireNonNull(secretKeyring, \"secretKeyring must not be null\");\n-\n     this.publicKeyring = publicKeyring;\n     this.secretKeyring = secretKeyring;\n   }\n@@ -42,4 +43,4 @@ final class FileBasedKeyringConfig extends AbstractDefaultKeyringConfig {\n   protected InputStream getSecretKeyRingStream() throws IOException {\n     return Files.newInputStream(secretKeyring.toPath());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "14",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}