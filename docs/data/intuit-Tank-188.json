{
    "project_name": "intuit-Tank",
    "violation_id": "188",
    "information": {
        "violations": [
            {
                "line": "42",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     */\n    public synchronized List<UserDetail> getSnapshot() {\n        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n    }\n\n    /**",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/checkstyle_idea/188/UserTracker.java\nindex 625c237a15f..8d463c7ab11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/checkstyle_idea/188/UserTracker.java\n@@ -22,44 +22,40 @@ import java.util.stream.Collectors;\n import com.intuit.tank.api.model.v1.cloud.UserDetail;\n \n /**\n- * \n  * UserTracker\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public class UserTracker implements Serializable {\n \n-    private static final long serialVersionUID = 1L;\n-\n-    private Map<String, Integer> userMap = new HashMap<String, Integer>();\n-\n-    /**\n-     * \n-     * @return\n-     */\n-    public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n-    }\n-\n-    /**\n-     * \n-     * @param script\n-     */\n-    public synchronized void add(String script) {\n-        userMap.merge(script, 1, Integer::sum);\n-    }\n-\n-    /**\n-     * \n-     * @param script\n-     */\n-    public synchronized void remove(String script) {\n-        Integer i = userMap.get(script);\n-        if (i != null) {\n-            if (i > 0) {\n-                userMap.put(script, i - 1);\n-            }\n-        }\n+  private static final long serialVersionUID = 1L;\n+\n+  private Map<String, Integer> userMap = new HashMap<String, Integer>();\n+\n+  /**\n+   * @return\n+   */\n+  public synchronized List<UserDetail> getSnapshot() {\n+    return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue()))\n+      .collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * @param script\n+   */\n+  public synchronized void add(String script) {\n+    userMap.merge(script, 1, Integer::sum);\n+  }\n+\n+  /**\n+   * @param script\n+   */\n+  public synchronized void remove(String script) {\n+    Integer i = userMap.get(script);\n+    if (i != null) {\n+      if (i > 0) {\n+        userMap.put(script, i - 1);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/naturalize/188/UserTracker.java\nindex 625c237a15f..5b9769d5270 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/naturalize/188/UserTracker.java\n@@ -62,4 +62,4 @@ public class UserTracker implements Serializable {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/codebuff/188/UserTracker.java\nindex 625c237a15f..c3e9cafd0b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/codebuff/188/UserTracker.java\n@@ -13,12 +13,13 @@ package com.intuit.tank.harness;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-\n import com.intuit.tank.api.model.v1.cloud.UserDetail;\n \n /**\n@@ -28,24 +29,29 @@ import com.intuit.tank.api.model.v1.cloud.UserDetail;\n  * @author dangleton\n  * \n  */\n+\n+\n public class UserTracker implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n-\n     private Map<String, Integer> userMap = new HashMap<String, Integer>();\n \n     /**\n      * \n      * @return\n      */\n+\n+\n     public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n+        return userMap.entrySet().stream().map(entry-> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n     }\n \n     /**\n      * \n      * @param script\n      */\n+\n+\n     public synchronized void add(String script) {\n         userMap.merge(script, 1, Integer::sum);\n     }\n@@ -54,6 +60,8 @@ public class UserTracker implements Serializable {\n      * \n      * @param script\n      */\n+\n+\n     public synchronized void remove(String script) {\n         Integer i = userMap.get(script);\n         if (i != null) {\n@@ -62,4 +70,5 @@ public class UserTracker implements Serializable {\n             }\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "column": "84",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/three_grams/files-repaired/188/UserTracker.java\nindex 625c237a15f..825eb64bb45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/188/UserTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/three_grams/files-repaired/188/UserTracker.java\n@@ -39,10 +39,11 @@ public class UserTracker implements Serializable {\n      * @return\n      */\n     public synchronized List<UserDetail> getSnapshot() {\n-        return userMap.entrySet().stream().map(entry -> new UserDetail(entry.getKey(), entry.getValue())).collect(Collectors.toList());\n-    }\n-\n-    /**\n+        return userMap .entrySet().stream().map(entry->newUserDetail(entry.getKey(),entry.getValue())).collect(Collectors.toList());}/**\n+     * \n+     * @param script\n+     */\n+        /**\n      * \n      * @param script\n      */\n",
            "diff_size": 5
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}