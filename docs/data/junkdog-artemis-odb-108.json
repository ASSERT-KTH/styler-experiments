{
    "project_name": "junkdog-artemis-odb",
    "violation_id": "108",
    "information": {
        "violations": [
            {
                "line": "71",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 178).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        Set<Method> result = allPublicMethods.get(type);\n        if (result == null) {\n            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n            allPublicMethods.put(type, result);\n        }\n        return result;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/108/ExtendedTypeReflection.java\nindex 1a5543be490..d28fd4afecc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/108/ExtendedTypeReflection.java\n@@ -68,7 +68,9 @@ public abstract class ExtendedTypeReflection {\n     public static Set<Method> getAllPublicMethods(Class type) {\n         Set<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+        result=getAllMethods( type , withModifier (Modifier.PUBLIC),withoutModifier(Modifier.ABSTRACT)\n+        ,withoutModifier(Modifier.STATIC ),withoutModifier(Modifier\n+        .VOLATILE));\n             allPublicMethods.put(type, result);\n         }\n         return result;\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/108/ExtendedTypeReflection.java\nindex 1a5543be490..7613375466e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/108/ExtendedTypeReflection.java\n@@ -17,69 +17,70 @@ import static org.reflections.ReflectionUtils.*;\n  */\n public abstract class ExtendedTypeReflection {\n \n-    private static Map<Type,Set<Field>> allPublicFields = new HashMap<Type,Set<Field>>();\n-    private static Map<Type,Set<Method>> allPublicMethods = new HashMap<Type,Set<Method>>();\n-    private static Map<Type,Set<Annotation>> allAnnotations = new HashMap<Type,Set<Annotation>>();\n+  private static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n+  private static Map<Type, Set<Method>> allPublicMethods = new HashMap<Type, Set<Method>>();\n+  private static Map<Type, Set<Annotation>> allAnnotations = new HashMap<Type, Set<Annotation>>();\n \n-    /**\n-     * Get if component is a flag component.\n-     *\n-     * @return {@code true} is simple flag, {@code false} if it is a data container.\n-     */\n-    public static boolean isFlagComponent(Class type) {\n-        return getAllPublicFields(type).isEmpty() &&\n-                getAllPublicMethods(type).isEmpty();\n-    }\n+  /**\n+   * Get if component is a flag component.\n+   *\n+   * @return {@code true} is simple flag, {@code false} if it is a data container.\n+   */\n+  public static boolean isFlagComponent(Class type) {\n+    return getAllPublicFields(type).isEmpty() &&\n+        getAllPublicMethods(type).isEmpty();\n+  }\n \n-    /**\n-     * Get all public fields of this type, cached.\n-     *\n-     * Excludes static.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Field> getAllPublicFields(Class type) {\n-        Set<Field> result = allPublicFields.get(type);\n-        if (result == null) {\n-            result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n-            allPublicFields.put(type, result);\n-        }\n-        return result;\n+  /**\n+   * Get all public fields of this type, cached.\n+   * <p>\n+   * Excludes static.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static Set<Field> getAllPublicFields(Class type) {\n+    Set<Field> result = allPublicFields.get(type);\n+    if (result == null) {\n+      result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n+      allPublicFields.put(type, result);\n     }\n+    return result;\n+  }\n \n-    /**\n-     * Get all public fields of type, cached.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Annotation> getAllAnnotations(Class type) {\n-        Set<Annotation> result = allAnnotations.get(type);\n-        if (result == null) {\n-            result = ReflectionUtils.getAllAnnotations(type);\n-            allAnnotations.put(type, result);\n-        }\n-        return result;\n+  /**\n+   * Get all public fields of type, cached.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static Set<Annotation> getAllAnnotations(Class type) {\n+    Set<Annotation> result = allAnnotations.get(type);\n+    if (result == null) {\n+      result = ReflectionUtils.getAllAnnotations(type);\n+      allAnnotations.put(type, result);\n     }\n+    return result;\n+  }\n \n-    /**\n-     * Get all public methods of type, cached.\n-     *\n-     * Excludes static, abstract.\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Method> getAllPublicMethods(Class type) {\n-        Set<Method> result = allPublicMethods.get(type);\n-        if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n-            allPublicMethods.put(type, result);\n-        }\n-        return result;\n+  /**\n+   * Get all public methods of type, cached.\n+   * <p>\n+   * Excludes static, abstract.\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  public static Set<Method> getAllPublicMethods(Class type) {\n+    Set<Method> result = allPublicMethods.get(type);\n+    if (result == null) {\n+      result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT),\n+          withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+      allPublicMethods.put(type, result);\n     }\n+    return result;\n+  }\n \n-    public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n-        return new Predicate<T>() {\n-            public boolean apply(@Nullable T input) {\n-                return input != null && (input.getModifiers() & mod) == 0;\n-            }\n-        };\n-    }\n+  public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n+    return new Predicate<T>() {\n+      public boolean apply(@Nullable T input) {\n+        return input != null && (input.getModifiers() & mod) == 0;\n+      }\n+    };\n+  }\n \n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/108/ExtendedTypeReflection.java\nindex 1a5543be490..cb3a90a6d12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/108/ExtendedTypeReflection.java\n@@ -16,8 +16,7 @@ import static org.reflections.ReflectionUtils.*;\n  * @author Daan van Yperen\n  */\n public abstract class ExtendedTypeReflection {\n-\n-    private static Map<Type,Set<Field>> allPublicFields = new HashMap<Type,Set<Field>>();\n+\tprivate static Map<Type,Set<Field>> allPublicFields = new HashMap<Type,Set<Field>>();\n     private static Map<Type,Set<Method>> allPublicMethods = new HashMap<Type,Set<Method>>();\n     private static Map<Type,Set<Annotation>> allAnnotations = new HashMap<Type,Set<Annotation>>();\n \n@@ -27,9 +26,9 @@ public abstract class ExtendedTypeReflection {\n      * @return {@code true} is simple flag, {@code false} if it is a data container.\n      */\n     public static boolean isFlagComponent(Class type) {\n-        return getAllPublicFields(type).isEmpty() &&\n-                getAllPublicMethods(type).isEmpty();\n-    }\n+\treturn getAllPublicFields(type).isEmpty() &&\n+getAllPublicMethods(type).isEmpty();\n+\t}\n \n     /**\n      * Get all public fields of this type, cached.\n@@ -38,26 +37,26 @@ public abstract class ExtendedTypeReflection {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static Set<Field> getAllPublicFields(Class type) {\n-        Set<Field> result = allPublicFields.get(type);\n+\tSet<Field> result = allPublicFields.get(type);\n         if (result == null) {\n             result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n             allPublicFields.put(type, result);\n-        }\n+\t}\n         return result;\n-    }\n+\t}\n \n     /**\n      * Get all public fields of type, cached.\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static Set<Annotation> getAllAnnotations(Class type) {\n-        Set<Annotation> result = allAnnotations.get(type);\n+\tSet<Annotation> result = allAnnotations.get(type);\n         if (result == null) {\n             result = ReflectionUtils.getAllAnnotations(type);\n             allAnnotations.put(type, result);\n-        }\n+\t}\n         return result;\n-    }\n+\t}\n \n     /**\n      * Get all public methods of type, cached.\n@@ -66,20 +65,20 @@ public abstract class ExtendedTypeReflection {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public static Set<Method> getAllPublicMethods(Class type) {\n-        Set<Method> result = allPublicMethods.get(type);\n+\tSet<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n             result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n             allPublicMethods.put(type, result);\n-        }\n+\t}\n         return result;\n-    }\n+\t}\n \n     public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n-        return new Predicate<T>() {\n-            public boolean apply(@Nullable T input) {\n-                return input != null && (input.getModifiers() & mod) == 0;\n+\treturn new Predicate<T>() {\n+\tpublic boolean apply(@Nullable T input) {\n+\treturn input != null && (input.getModifiers() & mod) == 0;\n             }\n         };\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/108/ExtendedTypeReflection.java\nindex 1a5543be490..bf19e67b491 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/108/ExtendedTypeReflection.java\n@@ -2,84 +2,91 @@ package com.artemis.generator.util;\n \n import com.google.common.base.Predicate;\n import org.reflections.ReflectionUtils;\n-\n import javax.annotation.Nullable;\n import java.lang.annotation.Annotation;\n+\n import java.lang.reflect.*;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Set;\n-\n import static org.reflections.ReflectionUtils.*;\n \n /**\n  * @author Daan van Yperen\n  */\n+\n public abstract class ExtendedTypeReflection {\n+ private static Map<Type, Set<Field>> allPublicFields = new HashMap<Type, Set<Field>>();\n+\n+ private static Map<Type, Set<Method>> allPublicMethods = new HashMap<Type, Set<Method>>();\n \n-    private static Map<Type,Set<Field>> allPublicFields = new HashMap<Type,Set<Field>>();\n-    private static Map<Type,Set<Method>> allPublicMethods = new HashMap<Type,Set<Method>>();\n-    private static Map<Type,Set<Annotation>> allAnnotations = new HashMap<Type,Set<Annotation>>();\n+ private static Map<Type, Set<Annotation>> allAnnotations = new HashMap<Type, Set<Annotation>>();\n \n     /**\n      * Get if component is a flag component.\n      *\n      * @return {@code true} is simple flag, {@code false} if it is a data container.\n      */\n-    public static boolean isFlagComponent(Class type) {\n-        return getAllPublicFields(type).isEmpty() &&\n-                getAllPublicMethods(type).isEmpty();\n-    }\n+ public static boolean isFlagComponent(Class type) {\n+  return getAllPublicFields(type).isEmpty() &&\n+  getAllPublicMethods(type).isEmpty();\n+ }\n \n     /**\n      * Get all public fields of this type, cached.\n      *\n      * Excludes static.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Field> getAllPublicFields(Class type) {\n-        Set<Field> result = allPublicFields.get(type);\n-        if (result == null) {\n-            result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n-            allPublicFields.put(type, result);\n-        }\n-        return result;\n-    }\n+\n+ @SuppressWarnings(\"unchecked\")\n+ public static Set<Field> getAllPublicFields(Class type) {\n+  Set<Field> result = allPublicFields.get(type);\n+  if (result == null) {\n+   result = getAllFields(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.STATIC));\n+   allPublicFields.put(type, result);\n+  }\n+\n+  return result;\n+ }\n \n     /**\n      * Get all public fields of type, cached.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Annotation> getAllAnnotations(Class type) {\n-        Set<Annotation> result = allAnnotations.get(type);\n-        if (result == null) {\n-            result = ReflectionUtils.getAllAnnotations(type);\n-            allAnnotations.put(type, result);\n-        }\n-        return result;\n-    }\n+\n+ @SuppressWarnings(\"unchecked\")\n+ public static Set<Annotation> getAllAnnotations(Class type) {\n+  Set<Annotation> result = allAnnotations.get(type);\n+  if (result == null) {\n+   result = ReflectionUtils.getAllAnnotations(type);\n+   allAnnotations.put(type, result);\n+  }\n+\n+  return result;\n+ }\n \n     /**\n      * Get all public methods of type, cached.\n      *\n      * Excludes static, abstract.\n      */\n-    @SuppressWarnings(\"unchecked\")\n-    public static Set<Method> getAllPublicMethods(Class type) {\n-        Set<Method> result = allPublicMethods.get(type);\n-        if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n-            allPublicMethods.put(type, result);\n-        }\n-        return result;\n-    }\n-\n-    public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n-        return new Predicate<T>() {\n-            public boolean apply(@Nullable T input) {\n-                return input != null && (input.getModifiers() & mod) == 0;\n-            }\n-        };\n-    }\n \n+ @SuppressWarnings(\"unchecked\")\n+ public static Set<Method> getAllPublicMethods(Class type) {\n+  Set<Method> result = allPublicMethods.get(type);\n+  if (result == null) {\n+   result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+   allPublicMethods.put(type, result);\n+  }\n+\n+  return result;\n+ }\n+\n+\n+ public static <T extends Member> Predicate<T> withoutModifier(final int mod) {\n+  return new Predicate<T>() {\n+public boolean apply(@Nullable T input) {\n+ return input != null && (input.getModifiers() & mod) == 0;\n }\n+};\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/108/ExtendedTypeReflection.java\nindex 1a5543be490..e403bb59174 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/108/ExtendedTypeReflection.java\n@@ -68,8 +68,9 @@ public abstract class ExtendedTypeReflection {\n     public static Set<Method> getAllPublicMethods(Class type) {\n         Set<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n-            allPublicMethods.put(type, result);\n+\t\t\t\t\t\t\t\t\tresult =getAllMethods ( type,withModifier(Modifier.PUBLIC) , withoutModifier (Modifier.ABSTRACT) ,withoutModifier (\n+\t\t\t\t\t\t\t\t\tModifier.STATIC),withoutModifier(Modifier.VOLATILE));allPublicMethods\n+        .put(type, result);\n         }\n         return result;\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/108/ExtendedTypeReflection.java\nindex 1a5543be490..d28fd4afecc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/108/ExtendedTypeReflection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/108/ExtendedTypeReflection.java\n@@ -68,7 +68,9 @@ public abstract class ExtendedTypeReflection {\n     public static Set<Method> getAllPublicMethods(Class type) {\n         Set<Method> result = allPublicMethods.get(type);\n         if (result == null) {\n-            result = getAllMethods(type, withModifier(Modifier.PUBLIC), withoutModifier(Modifier.ABSTRACT), withoutModifier(Modifier.STATIC), withoutModifier(Modifier.VOLATILE));\n+        result=getAllMethods( type , withModifier (Modifier.PUBLIC),withoutModifier(Modifier.ABSTRACT)\n+        ,withoutModifier(Modifier.STATIC ),withoutModifier(Modifier\n+        .VOLATILE));\n             allPublicMethods.put(type, result);\n         }\n         return result;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}