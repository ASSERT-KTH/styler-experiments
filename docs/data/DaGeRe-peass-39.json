{
    "project_name": "DaGeRe-peass",
    "violation_id": "39",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "Line is longer than 200 characters (found 205).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   private final MeasurementConfiguration measurementConfiguration;\n   \n   public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n      this.folders = folders;\n      this.causeSearcherConfig = causeSearcherConfig;\n      this.testgenerator = testgenerator;",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 270).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/DaGeRe-peass/styler/05_predictions/final/files-repaired/39/LevelMeasurer.java\nindex 1212daaed54..78c4fb62a0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/DaGeRe-peass/styler/05_predictions/final/files-repaired/39/LevelMeasurer.java\n@@ -22,9 +22,7 @@ public class LevelMeasurer {\n    private int adaptiveId = 0;\n    private final CauseSearcherConfig causeSearcherConfig;\n    private final JUnitTestTransformer testgenerator;\n-   private final MeasurementConfiguration measurementConfiguration;\n-   \n-   public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n+   private final MeasurementConfiguration measurementConfiguration; public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n       this.folders = folders;\n       this.causeSearcherConfig = causeSearcherConfig;\n       this.testgenerator = testgenerator;\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/checkstyle_idea/39/LevelMeasurer.java\nindex 1212daaed54..14dc9190719 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/checkstyle_idea/39/LevelMeasurer.java\n@@ -17,35 +17,36 @@ import de.peass.testtransformation.JUnitTestTransformer;\n import kieker.analysis.exception.AnalysisConfigurationException;\n \n public class LevelMeasurer {\n-   \n-   private final CauseSearchFolders folders;\n-   private int adaptiveId = 0;\n-   private final CauseSearcherConfig causeSearcherConfig;\n-   private final JUnitTestTransformer testgenerator;\n-   private final MeasurementConfiguration measurementConfiguration;\n-   \n-   public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n-      this.folders = folders;\n-      this.causeSearcherConfig = causeSearcherConfig;\n-      this.testgenerator = testgenerator;\n-      this.measurementConfiguration = measurementConfiguration;\n-   }\n-\n-   public void measureVersion(final List<CallTreeNode> nodes)\n-         throws IOException, XmlPullParserException, InterruptedException, ViewNotFoundException, AnalysisConfigurationException, JAXBException {\n-      final CauseTester executor = new CauseTester(folders, testgenerator, measurementConfiguration, causeSearcherConfig);\n-      final Set<CallTreeNode> includedNodes = prepareNodes(nodes);\n-      executor.setIncludedMethods(includedNodes);\n-      executor.evaluate(causeSearcherConfig.getTestCase());\n-      executor.getDurations(adaptiveId);\n-      executor.cleanup(adaptiveId);\n-      adaptiveId++;\n-   }\n-\n-   private Set<CallTreeNode> prepareNodes(final List<CallTreeNode> nodes) {\n-      final Set<CallTreeNode> includedNodes = new HashSet<CallTreeNode>();\n-      includedNodes.addAll(nodes);\n-      nodes.forEach(node -> node.setVersions(measurementConfiguration.getVersion(), measurementConfiguration.getVersionOld()));\n-      return includedNodes;\n-   }\n+\n+  private final CauseSearchFolders folders;\n+  private int adaptiveId = 0;\n+  private final CauseSearcherConfig causeSearcherConfig;\n+  private final JUnitTestTransformer testgenerator;\n+  private final MeasurementConfiguration measurementConfiguration;\n+\n+  public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator,\n+                       final MeasurementConfiguration measurementConfiguration) {\n+    this.folders = folders;\n+    this.causeSearcherConfig = causeSearcherConfig;\n+    this.testgenerator = testgenerator;\n+    this.measurementConfiguration = measurementConfiguration;\n+  }\n+\n+  public void measureVersion(final List<CallTreeNode> nodes)\n+      throws IOException, XmlPullParserException, InterruptedException, ViewNotFoundException, AnalysisConfigurationException, JAXBException {\n+    final CauseTester executor = new CauseTester(folders, testgenerator, measurementConfiguration, causeSearcherConfig);\n+    final Set<CallTreeNode> includedNodes = prepareNodes(nodes);\n+    executor.setIncludedMethods(includedNodes);\n+    executor.evaluate(causeSearcherConfig.getTestCase());\n+    executor.getDurations(adaptiveId);\n+    executor.cleanup(adaptiveId);\n+    adaptiveId++;\n+  }\n+\n+  private Set<CallTreeNode> prepareNodes(final List<CallTreeNode> nodes) {\n+    final Set<CallTreeNode> includedNodes = new HashSet<CallTreeNode>();\n+    includedNodes.addAll(nodes);\n+    nodes.forEach(node -> node.setVersions(measurementConfiguration.getVersion(), measurementConfiguration.getVersionOld()));\n+    return includedNodes;\n+  }\n }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "26",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/naturalize/39/LevelMeasurer.java\nindex 1212daaed54..da2c7765ca1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/naturalize/39/LevelMeasurer.java\n@@ -17,35 +17,33 @@ import de.peass.testtransformation.JUnitTestTransformer;\n import kieker.analysis.exception.AnalysisConfigurationException;\n \n public class LevelMeasurer {\n-   \n-   private final CauseSearchFolders folders;\n-   private int adaptiveId = 0;\n+\tprivate final CauseSearchFolders folders;\n+private int adaptiveId = 0;\n    private final CauseSearcherConfig causeSearcherConfig;\n    private final JUnitTestTransformer testgenerator;\n    private final MeasurementConfiguration measurementConfiguration;\n-   \n-   public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n-      this.folders = folders;\n+\n+public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n+\tthis.folders = folders;\n       this.causeSearcherConfig = causeSearcherConfig;\n       this.testgenerator = testgenerator;\n       this.measurementConfiguration = measurementConfiguration;\n-   }\n+\t}\n \n-   public void measureVersion(final List<CallTreeNode> nodes)\n-         throws IOException, XmlPullParserException, InterruptedException, ViewNotFoundException, AnalysisConfigurationException, JAXBException {\n-      final CauseTester executor = new CauseTester(folders, testgenerator, measurementConfiguration, causeSearcherConfig);\n+   public void measureVersion(final List<CallTreeNode> nodes) throws IOException, XmlPullParserException, InterruptedException, ViewNotFoundException, AnalysisConfigurationException, JAXBException {\n+\tfinal CauseTester executor = new CauseTester(folders, testgenerator, measurementConfiguration, causeSearcherConfig);\n       final Set<CallTreeNode> includedNodes = prepareNodes(nodes);\n       executor.setIncludedMethods(includedNodes);\n       executor.evaluate(causeSearcherConfig.getTestCase());\n       executor.getDurations(adaptiveId);\n       executor.cleanup(adaptiveId);\n       adaptiveId++;\n-   }\n+\t}\n \n    private Set<CallTreeNode> prepareNodes(final List<CallTreeNode> nodes) {\n-      final Set<CallTreeNode> includedNodes = new HashSet<CallTreeNode>();\n+\tfinal Set<CallTreeNode> includedNodes = new HashSet<CallTreeNode>();\n       includedNodes.addAll(nodes);\n       nodes.forEach(node -> node.setVersions(measurementConfiguration.getVersion(), measurementConfiguration.getVersionOld()));\n       return includedNodes;\n-   }\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/codebuff/39/LevelMeasurer.java\nindex 1212daaed54..6be6ce553b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/codebuff/39/LevelMeasurer.java\n@@ -4,11 +4,8 @@ import java.io.IOException;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import javax.xml.bind.JAXBException;\n-\n import org.codehaus.plexus.util.xml.pull.XmlPullParserException;\n-\n import de.peass.dependency.CauseSearchFolders;\n import de.peass.dependencyprocessors.ViewNotFoundException;\n import de.peass.measurement.MeasurementConfiguration;\n@@ -16,36 +13,36 @@ import de.peass.measurement.searchcause.data.CallTreeNode;\n import de.peass.testtransformation.JUnitTestTransformer;\n import kieker.analysis.exception.AnalysisConfigurationException;\n \n+\n public class LevelMeasurer {\n-   \n-   private final CauseSearchFolders folders;\n-   private int adaptiveId = 0;\n-   private final CauseSearcherConfig causeSearcherConfig;\n-   private final JUnitTestTransformer testgenerator;\n-   private final MeasurementConfiguration measurementConfiguration;\n-   \n-   public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n-      this.folders = folders;\n-      this.causeSearcherConfig = causeSearcherConfig;\n-      this.testgenerator = testgenerator;\n-      this.measurementConfiguration = measurementConfiguration;\n-   }\n+ private final CauseSearchFolders folders;\n+ private int adaptiveId = 0;\n+ private final CauseSearcherConfig causeSearcherConfig;\n+ private final JUnitTestTransformer testgenerator;\n+ private final MeasurementConfiguration measurementConfiguration;\n+\n+ public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n+  this.folders = folders;\n+  this.causeSearcherConfig = causeSearcherConfig;\n+  this.testgenerator = testgenerator;\n+  this.measurementConfiguration = measurementConfiguration;\n+ }\n+\n \n-   public void measureVersion(final List<CallTreeNode> nodes)\n-         throws IOException, XmlPullParserException, InterruptedException, ViewNotFoundException, AnalysisConfigurationException, JAXBException {\n-      final CauseTester executor = new CauseTester(folders, testgenerator, measurementConfiguration, causeSearcherConfig);\n-      final Set<CallTreeNode> includedNodes = prepareNodes(nodes);\n-      executor.setIncludedMethods(includedNodes);\n-      executor.evaluate(causeSearcherConfig.getTestCase());\n-      executor.getDurations(adaptiveId);\n-      executor.cleanup(adaptiveId);\n-      adaptiveId++;\n-   }\n+ public void measureVersion(final List<CallTreeNode> nodes) throws IOException, XmlPullParserException, InterruptedException, ViewNotFoundException, AnalysisConfigurationException, JAXBException {\n+  final CauseTester executor = new CauseTester(folders, testgenerator, measurementConfiguration, causeSearcherConfig);\n+  final Set<CallTreeNode> includedNodes = prepareNodes(nodes);\n+  executor.setIncludedMethods(includedNodes);\n+  executor.evaluate(causeSearcherConfig.getTestCase());\n+  executor.getDurations(adaptiveId);\n+  executor.cleanup(adaptiveId);\n+  adaptiveId++;\n+ }\n \n-   private Set<CallTreeNode> prepareNodes(final List<CallTreeNode> nodes) {\n-      final Set<CallTreeNode> includedNodes = new HashSet<CallTreeNode>();\n-      includedNodes.addAll(nodes);\n-      nodes.forEach(node -> node.setVersions(measurementConfiguration.getVersion(), measurementConfiguration.getVersionOld()));\n-      return includedNodes;\n-   }\n-}\n+ private Set<CallTreeNode> prepareNodes(final List<CallTreeNode> nodes) {\n+  final Set<CallTreeNode> includedNodes = new HashSet<CallTreeNode>();\n+  includedNodes.addAll(nodes);\n+  nodes.forEach(node -> node.setVersions(measurementConfiguration.getVersion(), measurementConfiguration.getVersionOld()));\n+  return includedNodes;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 200 characters (found 270).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/styler/05_predictions/three_grams/files-repaired/39/LevelMeasurer.java\nindex 1212daaed54..78c4fb62a0a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/violations/39/LevelMeasurer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/DaGeRe-peass/styler/05_predictions/three_grams/files-repaired/39/LevelMeasurer.java\n@@ -22,9 +22,7 @@ public class LevelMeasurer {\n    private int adaptiveId = 0;\n    private final CauseSearcherConfig causeSearcherConfig;\n    private final JUnitTestTransformer testgenerator;\n-   private final MeasurementConfiguration measurementConfiguration;\n-   \n-   public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n+   private final MeasurementConfiguration measurementConfiguration; public LevelMeasurer(final CauseSearchFolders folders, final CauseSearcherConfig causeSearcherConfig, final JUnitTestTransformer testgenerator, final MeasurementConfiguration measurementConfiguration) {\n       this.folders = folders;\n       this.causeSearcherConfig = causeSearcherConfig;\n       this.testgenerator = testgenerator;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}