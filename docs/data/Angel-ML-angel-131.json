{
    "project_name": "Angel-ML-angel",
    "violation_id": "131",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/131/DotParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/131/DotParam.java\nindex 1e02eb095ba..e35cc98cbb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/131/DotParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/131/DotParam.java\n@@ -28,34 +28,35 @@ import java.util.List;\n \n public class DotParam extends GetParam {\n \n-  private byte[] dataBuf;\n-  private int bufLength;\n+    private byte[] dataBuf;\n+    private int bufLength;\n \n-  public DotParam(int matrixId,\n-                  int seed,\n-                  int partitionId,\n-                  int[] src,\n-                  int[] dst) {\n-    super(matrixId);\n-    this.bufLength = 12 + src.length * 8;\n-    this.dataBuf = new byte[bufLength];\n-    ByteBuffer wrapper = ByteBuffer.wrap(this.dataBuf);\n-    wrapper.putInt(seed);\n-    wrapper.putInt(partitionId);\n-    wrapper.putInt(src.length);\n-    for (int a = 0; a < src.length; a++) {\n-      wrapper.putInt(src[a]);\n-      wrapper.putInt(dst[a]);\n+    public DotParam(int matrixId,\n+                    int seed,\n+                    int partitionId,\n+                    int[] src,\n+                    int[] dst) {\n+        super(matrixId);\n+        this.bufLength = 12 + src.length * 8;\n+        this.dataBuf = new byte[bufLength];\n+        ByteBuffer wrapper = ByteBuffer.wrap(this.dataBuf);\n+        wrapper.putInt(seed);\n+        wrapper.putInt(partitionId);\n+        wrapper.putInt(src.length);\n+        for (int a = 0; a < src.length; a++) {\n+            wrapper.putInt(src[a]);\n+            wrapper.putInt(dst[a]);\n+        }\n     }\n-  }\n \n-  @Override\n-  public List<PartitionGetParam> split() {\n-    List<PartitionKey> pkeys = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-    List<PartitionGetParam> params = new ArrayList<>();\n-    for (PartitionKey pkey: pkeys) {\n-      params.add(new DotPartitionParam(matrixId, pkey, dataBuf, bufLength));\n+    @Override\n+    public List<PartitionGetParam> split() {\n+        List<PartitionKey> pkeys =\n+                PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n+        List<PartitionGetParam> params = new ArrayList<>();\n+        for (PartitionKey pkey : pkeys) {\n+            params.add(new DotPartitionParam(matrixId, pkey, dataBuf, bufLength));\n+        }\n+        return params;\n     }\n-    return params;\n-  }\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/131/DotParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/131/DotParam.java\nindex 1e02eb095ba..93475c3c164 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/131/DotParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/131/DotParam.java\n@@ -31,12 +31,11 @@ public class DotParam extends GetParam {\n   private byte[] dataBuf;\n   private int bufLength;\n \n-  public DotParam(int matrixId,\n-                  int seed,\n+  public DotParam(int matrixId, int seed,\n                   int partitionId,\n                   int[] src,\n                   int[] dst) {\n-    super(matrixId);\n+  super(matrixId);\n     this.bufLength = 12 + src.length * 8;\n     this.dataBuf = new byte[bufLength];\n     ByteBuffer wrapper = ByteBuffer.wrap(this.dataBuf);\n@@ -58,4 +57,4 @@ public class DotParam extends GetParam {\n     }\n     return params;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/131/DotParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/131/DotParam.java\nindex 1e02eb095ba..94fcfbc14ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/131/DotParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/131/DotParam.java\n@@ -21,7 +21,6 @@ import com.tencent.angel.PartitionKey;\n import com.tencent.angel.ml.matrix.psf.get.base.GetParam;\n import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetParam;\n import com.tencent.angel.psagent.PSAgentContext;\n-\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.List;\n@@ -31,11 +30,7 @@ public class DotParam extends GetParam {\n   private byte[] dataBuf;\n   private int bufLength;\n \n-  public DotParam(int matrixId,\n-                  int seed,\n-                  int partitionId,\n-                  int[] src,\n-                  int[] dst) {\n+  public DotParam(int matrixId, int seed, int partitionId, int[] src, int[] dst) {\n     super(matrixId);\n     this.bufLength = 12 + src.length * 8;\n     this.dataBuf = new byte[bufLength];\n@@ -53,9 +48,10 @@ public class DotParam extends GetParam {\n   public List<PartitionGetParam> split() {\n     List<PartitionKey> pkeys = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n     List<PartitionGetParam> params = new ArrayList<>();\n-    for (PartitionKey pkey: pkeys) {\n+    for (PartitionKey pkey : pkeys) {\n       params.add(new DotPartitionParam(matrixId, pkey, dataBuf, bufLength));\n     }\n     return params;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}