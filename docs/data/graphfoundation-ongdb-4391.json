{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "4391",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "76",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "204",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "353",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4391/CommandApplicationProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/4391/CommandApplicationProcess.java\nindex 5be13071cb4..9097c4d642d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4391/CommandApplicationProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/4391/CommandApplicationProcess.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state;\n \n import java.io.IOException;\n@@ -44,317 +45,314 @@ import static java.lang.String.format;\n \n public class CommandApplicationProcess\n {\n-    private static final long NOTHING = -1;\n-    private final RaftLog raftLog;\n-    private final int flushEvery;\n-    private final ProgressTracker progressTracker;\n-    private final SessionTracker sessionTracker;\n-    private final Supplier<DatabaseHealth> dbHealth;\n-    private final InFlightCache inFlightCache;\n-    private final Log log;\n-    private final CoreState coreState;\n-    private final RaftLogCommitIndexMonitor commitIndexMonitor;\n-    private final CommandBatcher batcher;\n-    private final StatUtil.StatContext batchStat;\n-\n-    private long lastFlushed = NOTHING;\n-    private int pauseCount = 1; // we are created in the paused state\n-    private Thread applierThread;\n-    private final ApplierState applierState = new ApplierState();\n-\n-    public CommandApplicationProcess(\n-            RaftLog raftLog,\n-            int maxBatchSize,\n-            int flushEvery,\n-            Supplier<DatabaseHealth> dbHealth,\n-            LogProvider logProvider,\n-            ProgressTracker progressTracker,\n-            SessionTracker sessionTracker,\n-            CoreState coreState,\n-            InFlightCache inFlightCache,\n-            Monitors monitors )\n-    {\n-        this.raftLog = raftLog;\n-        this.flushEvery = flushEvery;\n-        this.progressTracker = progressTracker;\n-        this.sessionTracker = sessionTracker;\n-        this.log = logProvider.getLog( getClass() );\n-        this.dbHealth = dbHealth;\n-        this.coreState = coreState;\n-        this.inFlightCache = inFlightCache;\n-        this.commitIndexMonitor = monitors.newMonitor( RaftLogCommitIndexMonitor.class, getClass() );\n-        this.batcher = new CommandBatcher( maxBatchSize, this::applyBatch );\n-        this.batchStat = StatUtil.create( \"BatchSize\", log, 4096, true );\n-    }\n-\n-    void notifyCommitted( long commitIndex )\n+  private static final long NOTHING = -1;\n+  private final RaftLog raftLog;\n+  private final int flushEvery;\n+  private final ProgressTracker progressTracker;\n+  private final SessionTracker sessionTracker;\n+  private final Supplier<DatabaseHealth> dbHealth;\n+  private final InFlightCache inFlightCache;\n+  private final Log log;\n+  private final CoreState coreState;\n+  private final RaftLogCommitIndexMonitor commitIndexMonitor;\n+  private final CommandBatcher batcher;\n+  private final StatUtil.StatContext batchStat;\n+\n+  private long lastFlushed = NOTHING;\n+  private int pauseCount = 1; // we are created in the paused state\n+  private Thread applierThread;\n+  private final ApplierState applierState = new ApplierState();\n+\n+  public CommandApplicationProcess(\n+      RaftLog raftLog,\n+      int maxBatchSize,\n+      int flushEvery,\n+      Supplier<DatabaseHealth> dbHealth,\n+      LogProvider logProvider,\n+      ProgressTracker progressTracker,\n+      SessionTracker sessionTracker,\n+      CoreState coreState,\n+      InFlightCache inFlightCache,\n+      Monitors monitors)\n+  {\n+    this.raftLog = raftLog;\n+    this.flushEvery = flushEvery;\n+    this.progressTracker = progressTracker;\n+    this.sessionTracker = sessionTracker;\n+    this.log = logProvider.getLog(getClass());\n+    this.dbHealth = dbHealth;\n+    this.coreState = coreState;\n+    this.inFlightCache = inFlightCache;\n+    this.commitIndexMonitor = monitors.newMonitor(RaftLogCommitIndexMonitor.class, getClass());\n+    this.batcher = new CommandBatcher(maxBatchSize, this::applyBatch);\n+    this.batchStat = StatUtil.create(\"BatchSize\", log, 4096, true);\n+  }\n+\n+  void notifyCommitted(long commitIndex)\n+  {\n+    applierState.notifyCommitted(commitIndex);\n+  }\n+\n+  private class ApplierState\n+  {\n+    // core applier state, synchronized by ApplierState monitor\n+    private long lastSeenCommitIndex = NOTHING;\n+\n+    // owned by applier\n+    private volatile long lastApplied = NOTHING;\n+    private volatile boolean panic;\n+\n+    private volatile boolean keepRunning = true; // clear to shutdown the apply job\n+\n+    private synchronized long getLastSeenCommitIndex()\n     {\n-        applierState.notifyCommitted( commitIndex );\n+      return lastSeenCommitIndex;\n     }\n \n-    private class ApplierState\n+    void panic()\n     {\n-        // core applier state, synchronized by ApplierState monitor\n-        private long lastSeenCommitIndex = NOTHING;\n-\n-        // owned by applier\n-        private volatile long lastApplied = NOTHING;\n-        private volatile boolean panic;\n-\n-        private volatile boolean keepRunning = true; // clear to shutdown the apply job\n-\n-        private synchronized long getLastSeenCommitIndex()\n-        {\n-            return lastSeenCommitIndex;\n-        }\n-\n-        void panic()\n-        {\n-            panic = true;\n-            keepRunning = false;\n-        }\n-\n-        synchronized void setKeepRunning( boolean keepRunning )\n-        {\n-            if ( panic )\n-            {\n-                throw new IllegalStateException( \"The applier has panicked\" );\n-            }\n-\n-            this.keepRunning = keepRunning;\n-            notifyAll();\n-        }\n-\n-        synchronized long awaitJob()\n-        {\n-            while ( lastApplied >= lastSeenCommitIndex && keepRunning )\n-            {\n-                ignoringInterrupts( this::wait );\n-            }\n-            return lastSeenCommitIndex;\n-        }\n-\n-        synchronized void notifyCommitted( long commitIndex )\n-        {\n-            if ( lastSeenCommitIndex < commitIndex )\n-            {\n-                lastSeenCommitIndex = commitIndex;\n-                commitIndexMonitor.commitIndex( commitIndex );\n-                notifyAll();\n-            }\n-        }\n+      panic = true;\n+      keepRunning = false;\n     }\n \n-    private void applyJob()\n+    synchronized void setKeepRunning(boolean keepRunning)\n     {\n-        while ( applierState.keepRunning )\n-        {\n-            try\n-            {\n-                applyUpTo( applierState.awaitJob() );\n-            }\n-            catch ( Throwable e )\n-            {\n-                applierState.panic();\n-                log.error( \"Failed to apply\", e );\n-                dbHealth.get().panic( e );\n-                return; // LET THREAD DIE\n-            }\n-        }\n-    }\n+      if (panic)\n+      {\n+        throw new IllegalStateException(\"The applier has panicked\");\n+      }\n \n-    private void applyUpTo( long applyUpToIndex ) throws Exception\n-    {\n-        try ( InFlightLogEntryReader logEntrySupplier = new InFlightLogEntryReader( raftLog, inFlightCache, true ) )\n-        {\n-            for ( long logIndex = applierState.lastApplied + 1; applierState.keepRunning && logIndex <= applyUpToIndex; logIndex++ )\n-            {\n-                RaftLogEntry entry = logEntrySupplier.get( logIndex );\n-                if ( entry == null )\n-                {\n-                    throw new IllegalStateException( format( \"Committed log entry at index %d must exist.\", logIndex ) );\n-                }\n-\n-                if ( entry.content() instanceof DistributedOperation )\n-                {\n-                    DistributedOperation distributedOperation = (DistributedOperation) entry.content();\n-                    progressTracker.trackReplication( distributedOperation );\n-                    batcher.add( logIndex, distributedOperation );\n-                }\n-                else\n-                {\n-                    batcher.flush();\n-                    // since this last entry didn't get in the batcher we need to update the lastApplied:\n-                    applierState.lastApplied = logIndex;\n-                }\n-            }\n-            batcher.flush();\n-        }\n+      this.keepRunning = keepRunning;\n+      notifyAll();\n     }\n \n-    public long lastApplied()\n+    synchronized long awaitJob()\n     {\n-        return applierState.lastApplied;\n+      while (lastApplied >= lastSeenCommitIndex && keepRunning)\n+      {\n+        ignoringInterrupts(this::wait);\n+      }\n+      return lastSeenCommitIndex;\n     }\n \n-    /**\n-     * The applier must be paused when installing a snapshot.\n-     *\n-     * @param coreSnapshot The snapshot to install.\n-     */\n-    void installSnapshot( CoreSnapshot coreSnapshot )\n+    synchronized void notifyCommitted(long commitIndex)\n     {\n-        assert pauseCount > 0;\n-        applierState.lastApplied = lastFlushed = coreSnapshot.prevIndex();\n+      if (lastSeenCommitIndex < commitIndex)\n+      {\n+        lastSeenCommitIndex = commitIndex;\n+        commitIndexMonitor.commitIndex(commitIndex);\n+        notifyAll();\n+      }\n     }\n+  }\n \n-    synchronized long lastFlushed()\n+  private void applyJob()\n+  {\n+    while (applierState.keepRunning)\n     {\n-        return lastFlushed;\n+      try\n+      {\n+        applyUpTo(applierState.awaitJob());\n+      } catch (Throwable e)\n+      {\n+        applierState.panic();\n+        log.error(\"Failed to apply\", e);\n+        dbHealth.get().panic(e);\n+        return; // LET THREAD DIE\n+      }\n     }\n+  }\n \n-    private void applyBatch( long lastIndex, List<DistributedOperation> batch ) throws Exception\n+  private void applyUpTo(long applyUpToIndex) throws Exception\n+  {\n+    try (InFlightLogEntryReader logEntrySupplier = new InFlightLogEntryReader(raftLog, inFlightCache, true))\n     {\n-        if ( batch.size() == 0 )\n+      for (long logIndex = applierState.lastApplied + 1; applierState.keepRunning && logIndex <= applyUpToIndex; logIndex++)\n+      {\n+        RaftLogEntry entry = logEntrySupplier.get(logIndex);\n+        if (entry == null)\n         {\n-            return;\n+          throw new IllegalStateException(format(\"Committed log entry at index %d must exist.\", logIndex));\n         }\n \n-        batchStat.collect( batch.size() );\n-\n-        long startIndex = lastIndex - batch.size() + 1;\n-        long lastHandledIndex = handleOperations( startIndex, batch );\n-        assert lastHandledIndex == lastIndex;\n-        applierState.lastApplied = lastIndex;\n-\n-        maybeFlushToDisk();\n-    }\n-\n-    private long handleOperations( long commandIndex, List<DistributedOperation> operations )\n-    {\n-        try ( CommandDispatcher dispatcher = coreState.commandDispatcher() )\n+        if (entry.content() instanceof DistributedOperation)\n         {\n-            for ( DistributedOperation operation : operations )\n-            {\n-                if ( !sessionTracker.validateOperation( operation.globalSession(), operation.operationId() ) )\n-                {\n-                    sessionTracker.validateOperation( operation.globalSession(), operation.operationId() );\n-                    commandIndex++;\n-                    continue;\n-                }\n-\n-                CoreReplicatedContent command = (CoreReplicatedContent) operation.content();\n-                command.dispatch( dispatcher, commandIndex,\n-                        result -> progressTracker.trackResult( operation, result ) );\n-\n-                sessionTracker.update( operation.globalSession(), operation.operationId(), commandIndex );\n-                commandIndex++;\n-            }\n-        }\n-        return commandIndex - 1;\n-    }\n-\n-    private void maybeFlushToDisk() throws IOException\n-    {\n-        if ( (applierState.lastApplied - lastFlushed) > flushEvery )\n+          DistributedOperation distributedOperation = (DistributedOperation) entry.content();\n+          progressTracker.trackReplication(distributedOperation);\n+          batcher.add(logIndex, distributedOperation);\n+        } else\n         {\n-            coreState.flush( applierState.lastApplied );\n-            lastFlushed = applierState.lastApplied;\n+          batcher.flush();\n+          // since this last entry didn't get in the batcher we need to update the lastApplied:\n+          applierState.lastApplied = logIndex;\n         }\n+      }\n+      batcher.flush();\n     }\n-\n-    public synchronized void start() throws Exception\n+  }\n+\n+  public long lastApplied()\n+  {\n+    return applierState.lastApplied;\n+  }\n+\n+  /**\n+   * The applier must be paused when installing a snapshot.\n+   *\n+   * @param coreSnapshot The snapshot to install.\n+   */\n+  void installSnapshot(CoreSnapshot coreSnapshot)\n+  {\n+    assert pauseCount > 0;\n+    applierState.lastApplied = lastFlushed = coreSnapshot.prevIndex();\n+  }\n+\n+  synchronized long lastFlushed()\n+  {\n+    return lastFlushed;\n+  }\n+\n+  private void applyBatch(long lastIndex, List<DistributedOperation> batch) throws Exception\n+  {\n+    if (batch.size() == 0)\n     {\n-        // TODO: check None/Partial/Full here, because this is the first level which can\n-        // TODO: bootstrapping RAFT can also be performed from here.\n+      return;\n+    }\n \n-        if ( lastFlushed == NOTHING )\n-        {\n-            lastFlushed = coreState.getLastFlushed();\n-        }\n-        applierState.lastApplied = lastFlushed;\n+    batchStat.collect(batch.size());\n \n-        log.info( format( \"Restoring last applied index to %d\", lastFlushed ) );\n-        sessionTracker.start();\n+    long startIndex = lastIndex - batch.size() + 1;\n+    long lastHandledIndex = handleOperations(startIndex, batch);\n+    assert lastHandledIndex == lastIndex;\n+    applierState.lastApplied = lastIndex;\n \n-        /* Considering the order in which state is flushed, the state machines will\n-         * always be furthest ahead and indicate the furthest possible state to\n-         * which we must replay to reach a consistent state. */\n-        long lastPossiblyApplying = max( coreState.getLastAppliedIndex(), applierState.getLastSeenCommitIndex() );\n+    maybeFlushToDisk();\n+  }\n \n-        if ( lastPossiblyApplying > applierState.lastApplied )\n+  private long handleOperations(long commandIndex, List<DistributedOperation> operations)\n+  {\n+    try (CommandDispatcher dispatcher = coreState.commandDispatcher())\n+    {\n+      for (DistributedOperation operation : operations)\n+      {\n+        if (!sessionTracker.validateOperation(operation.globalSession(), operation.operationId()))\n         {\n-            log.info( \"Applying up to: \" + lastPossiblyApplying );\n-            applyUpTo( lastPossiblyApplying );\n+          sessionTracker.validateOperation(operation.globalSession(), operation.operationId());\n+          commandIndex++;\n+          continue;\n         }\n \n-        resumeApplier( \"startup\" );\n+        CoreReplicatedContent command = (CoreReplicatedContent) operation.content();\n+        command.dispatch(dispatcher, commandIndex,\n+            result -> progressTracker.trackResult(operation, result));\n+\n+        sessionTracker.update(operation.globalSession(), operation.operationId(), commandIndex);\n+        commandIndex++;\n+      }\n     }\n+    return commandIndex - 1;\n+  }\n \n-    public synchronized void stop() throws IOException\n+  private void maybeFlushToDisk() throws IOException\n+  {\n+    if ((applierState.lastApplied - lastFlushed) > flushEvery)\n     {\n-        pauseApplier( \"shutdown\" );\n-        coreState.flush( applierState.lastApplied );\n+      coreState.flush(applierState.lastApplied);\n+      lastFlushed = applierState.lastApplied;\n     }\n+  }\n+\n+  public synchronized void start() throws Exception\n+  {\n+    // TODO: check None/Partial/Full here, because this is the first level which can\n+    // TODO: bootstrapping RAFT can also be performed from here.\n \n-    private void spawnApplierThread()\n+    if (lastFlushed == NOTHING)\n     {\n-        applierState.setKeepRunning( true );\n-        applierThread = new Thread( this::applyJob, \"core-state-applier\" );\n-        applierThread.start();\n+      lastFlushed = coreState.getLastFlushed();\n     }\n+    applierState.lastApplied = lastFlushed;\n \n-    private void stopApplierThread()\n+    log.info(format(\"Restoring last applied index to %d\", lastFlushed));\n+    sessionTracker.start();\n+\n+    /* Considering the order in which state is flushed, the state machines will\n+     * always be furthest ahead and indicate the furthest possible state to\n+     * which we must replay to reach a consistent state. */\n+    long lastPossiblyApplying = max(coreState.getLastAppliedIndex(), applierState.getLastSeenCommitIndex());\n+\n+    if (lastPossiblyApplying > applierState.lastApplied)\n     {\n-        applierState.setKeepRunning( false );\n-        ignoringInterrupts( () -> applierThread.join() );\n+      log.info(\"Applying up to: \" + lastPossiblyApplying);\n+      applyUpTo(lastPossiblyApplying);\n     }\n \n-    public synchronized void pauseApplier( String reason )\n+    resumeApplier(\"startup\");\n+  }\n+\n+  public synchronized void stop() throws IOException\n+  {\n+    pauseApplier(\"shutdown\");\n+    coreState.flush(applierState.lastApplied);\n+  }\n+\n+  private void spawnApplierThread()\n+  {\n+    applierState.setKeepRunning(true);\n+    applierThread = new Thread(this::applyJob, \"core-state-applier\");\n+    applierThread.start();\n+  }\n+\n+  private void stopApplierThread()\n+  {\n+    applierState.setKeepRunning(false);\n+    ignoringInterrupts(() -> applierThread.join());\n+  }\n+\n+  public synchronized void pauseApplier(String reason)\n+  {\n+    if (pauseCount < 0)\n     {\n-        if ( pauseCount < 0 )\n-        {\n-            throw new IllegalStateException( \"Unmatched pause/resume\" );\n-        }\n+      throw new IllegalStateException(\"Unmatched pause/resume\");\n+    }\n \n-        pauseCount++;\n-        log.info( format( \"Pausing due to %s (count = %d)\", reason, pauseCount ) );\n+    pauseCount++;\n+    log.info(format(\"Pausing due to %s (count = %d)\", reason, pauseCount));\n \n-        if ( pauseCount == 1 )\n-        {\n-            stopApplierThread();\n-        }\n+    if (pauseCount == 1)\n+    {\n+      stopApplierThread();\n     }\n+  }\n \n-    public synchronized void resumeApplier( String reason )\n+  public synchronized void resumeApplier(String reason)\n+  {\n+    if (pauseCount <= 0)\n     {\n-        if ( pauseCount <= 0 )\n-        {\n-            throw new IllegalStateException( \"Unmatched pause/resume\" );\n-        }\n+      throw new IllegalStateException(\"Unmatched pause/resume\");\n+    }\n \n-        pauseCount--;\n-        log.info( format( \"Resuming after %s (count = %d)\", reason, pauseCount ) );\n+    pauseCount--;\n+    log.info(format(\"Resuming after %s (count = %d)\", reason, pauseCount));\n \n-        if ( pauseCount == 0 )\n-        {\n-            spawnApplierThread();\n-        }\n+    if (pauseCount == 0)\n+    {\n+      spawnApplierThread();\n     }\n-\n-    /**\n-     * We do not expect the interrupt system to be used here,\n-     * so we ignore them and log a warning.\n-     */\n-    private void ignoringInterrupts( ThrowingAction<InterruptedException> action )\n+  }\n+\n+  /**\n+   * We do not expect the interrupt system to be used here,\n+   * so we ignore them and log a warning.\n+   */\n+  private void ignoringInterrupts(ThrowingAction<InterruptedException> action)\n+  {\n+    try\n     {\n-        try\n-        {\n-            action.apply();\n-        }\n-        catch ( InterruptedException e )\n-        {\n-            log.warn( \"Unexpected interrupt\", e );\n-        }\n+      action.apply();\n+    } catch (InterruptedException e)\n+    {\n+      log.warn(\"Unexpected interrupt\", e);\n     }\n+  }\n }\n",
            "diff_size": 391
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "280",
                    "column": "26",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4391/CommandApplicationProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/4391/CommandApplicationProcess.java\nindex 5be13071cb4..363f030adab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4391/CommandApplicationProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/4391/CommandApplicationProcess.java\n@@ -62,11 +62,7 @@ public class CommandApplicationProcess\n     private Thread applierThread;\n     private final ApplierState applierState = new ApplierState();\n \n-    public CommandApplicationProcess(\n-            RaftLog raftLog,\n-            int maxBatchSize,\n-            int flushEvery,\n-            Supplier<DatabaseHealth> dbHealth,\n+    public CommandApplicationProcess( RaftLog raftLog, int maxBatchSize, int flushEvery, Supplier<DatabaseHealth> dbHealth,\n             LogProvider logProvider,\n             ProgressTracker progressTracker,\n             SessionTracker sessionTracker,\n@@ -131,7 +127,8 @@ public class CommandApplicationProcess\n             {\n                 ignoringInterrupts( this::wait );\n             }\n-            return lastSeenCommitIndex;\n+\n+return lastSeenCommitIndex;\n         }\n \n         synchronized void notifyCommitted( long commitIndex )\n@@ -246,8 +243,7 @@ public class CommandApplicationProcess\n                 CoreReplicatedContent command = (CoreReplicatedContent) operation.content();\n                 command.dispatch( dispatcher, commandIndex,\n                         result -> progressTracker.trackResult( operation, result ) );\n-\n-                sessionTracker.update( operation.globalSession(), operation.operationId(), commandIndex );\n+sessionTracker.update( operation.globalSession(), operation.operationId(), commandIndex );\n                 commandIndex++;\n             }\n         }\n@@ -281,8 +277,7 @@ public class CommandApplicationProcess\n          * always be furthest ahead and indicate the furthest possible state to\n          * which we must replay to reach a consistent state. */\n         long lastPossiblyApplying = max( coreState.getLastAppliedIndex(), applierState.getLastSeenCommitIndex() );\n-\n-        if ( lastPossiblyApplying > applierState.lastApplied )\n+if ( lastPossiblyApplying> applierState.lastApplied )\n         {\n             log.info( \"Applying up to: \" + lastPossiblyApplying );\n             applyUpTo( lastPossiblyApplying );\n@@ -319,8 +314,7 @@ public class CommandApplicationProcess\n \n         pauseCount++;\n         log.info( format( \"Pausing due to %s (count = %d)\", reason, pauseCount ) );\n-\n-        if ( pauseCount == 1 )\n+if ( pauseCount == 1 )\n         {\n             stopApplierThread();\n         }\n@@ -335,8 +329,7 @@ public class CommandApplicationProcess\n \n         pauseCount--;\n         log.info( format( \"Resuming after %s (count = %d)\", reason, pauseCount ) );\n-\n-        if ( pauseCount == 0 )\n+if ( pauseCount == 0 )\n         {\n             spawnApplierThread();\n         }\n@@ -357,4 +350,4 @@ public class CommandApplicationProcess\n             log.warn( \"Unexpected interrupt\", e );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}