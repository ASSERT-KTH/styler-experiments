{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "3956",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3956/WeightedPathIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3956/WeightedPathIterator.java\nindex 7fad8b26d77..c6fbf0ebc65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3956/WeightedPathIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3956/WeightedPathIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import org.neo4j.graphalgo.CostEvaluator;\n@@ -28,59 +29,59 @@ import org.neo4j.kernel.impl.util.NoneStrictMath;\n \n public class WeightedPathIterator extends PrefetchingResourceIterator<WeightedPath>\n {\n-    private final ResourceIterator<Path> paths;\n-    private final CostEvaluator<Double> costEvaluator;\n-    private Double foundWeight;\n-    private int foundTotal;\n-    private final double epsilon;\n-    private final PathInterest interest;\n+  private final ResourceIterator<Path> paths;\n+  private final CostEvaluator<Double> costEvaluator;\n+  private Double foundWeight;\n+  private int foundTotal;\n+  private final double epsilon;\n+  private final PathInterest interest;\n \n-    public WeightedPathIterator( ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n-            boolean stopAfterLowestWeight )\n-    {\n-        this( paths, costEvaluator, NoneStrictMath.EPSILON, stopAfterLowestWeight );\n-    }\n+  public WeightedPathIterator(ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n+                              boolean stopAfterLowestWeight)\n+  {\n+    this(paths, costEvaluator, NoneStrictMath.EPSILON, stopAfterLowestWeight);\n+  }\n \n-    public WeightedPathIterator( ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n-            double epsilon, boolean stopAfterLowestWeight )\n-    {\n-        this( paths, costEvaluator, epsilon, stopAfterLowestWeight ? PathInterestFactory.allShortest( epsilon ) :\n-                                                                     PathInterestFactory.all( epsilon ) );\n-    }\n+  public WeightedPathIterator(ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n+                              double epsilon, boolean stopAfterLowestWeight)\n+  {\n+    this(paths, costEvaluator, epsilon, stopAfterLowestWeight ? PathInterestFactory.allShortest(epsilon) :\n+        PathInterestFactory.all(epsilon));\n+  }\n \n-    public WeightedPathIterator( ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n-            double epsilon, PathInterest interest )\n+  public WeightedPathIterator(ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n+                              double epsilon, PathInterest interest)\n+  {\n+    this.paths = paths;\n+    this.costEvaluator = costEvaluator;\n+    this.epsilon = epsilon;\n+    this.interest = interest;\n+  }\n+\n+  @Override\n+  protected WeightedPath fetchNextOrNull()\n+  {\n+    if (!interest.stillInteresting(++foundTotal))\n     {\n-        this.paths = paths;\n-        this.costEvaluator = costEvaluator;\n-        this.epsilon = epsilon;\n-        this.interest = interest;\n+      return null;\n     }\n-\n-    @Override\n-    protected WeightedPath fetchNextOrNull()\n+    if (!paths.hasNext())\n     {\n-        if ( !interest.stillInteresting( ++foundTotal ) )\n-        {\n-            return null;\n-        }\n-        if ( !paths.hasNext() )\n-        {\n-            return null;\n-        }\n-        WeightedPath path = new WeightedPathImpl( costEvaluator, paths.next() );\n-        if ( interest.stopAfterLowestCost() && foundWeight != null &&\n-             NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) > 0 )\n-        {\n-            return null;\n-        }\n-        foundWeight = path.weight();\n-        return path;\n+      return null;\n     }\n-\n-    @Override\n-    public void close()\n+    WeightedPath path = new WeightedPathImpl(costEvaluator, paths.next());\n+    if (interest.stopAfterLowestCost() && foundWeight != null &&\n+        NoneStrictMath.compare(path.weight(), foundWeight, epsilon) > 0)\n     {\n-        paths.close();\n+      return null;\n     }\n+    foundWeight = path.weight();\n+    return path;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    paths.close();\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "73",
                    "column": "68",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3956/WeightedPathIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3956/WeightedPathIterator.java\nindex 7fad8b26d77..3dba0a01e7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3956/WeightedPathIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3956/WeightedPathIterator.java\n@@ -44,8 +44,7 @@ public class WeightedPathIterator extends PrefetchingResourceIterator<WeightedPa\n     public WeightedPathIterator( ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n             double epsilon, boolean stopAfterLowestWeight )\n     {\n-        this( paths, costEvaluator, epsilon, stopAfterLowestWeight ? PathInterestFactory.allShortest( epsilon ) :\n-                                                                     PathInterestFactory.all( epsilon ) );\n+        this( paths, costEvaluator, epsilon, stopAfterLowestWeight ? PathInterestFactory.allShortest( epsilon ) : PathInterestFactory.all( epsilon ) );\n     }\n \n     public WeightedPathIterator( ResourceIterator<Path> paths, CostEvaluator<Double> costEvaluator,\n@@ -64,17 +63,19 @@ public class WeightedPathIterator extends PrefetchingResourceIterator<WeightedPa\n         {\n             return null;\n         }\n-        if ( !paths.hasNext() )\n+\n+if ( !paths.hasNext() )\n         {\n             return null;\n         }\n-        WeightedPath path = new WeightedPathImpl( costEvaluator, paths.next() );\n-        if ( interest.stopAfterLowestCost() && foundWeight != null &&\n-             NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) > 0 )\n-        {\n+\n+WeightedPath path = new WeightedPathImpl( costEvaluator, paths.next() );\n+        if ( interest.stopAfterLowestCost() && foundWeight != null &&NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) > 0 )\n+{\n             return null;\n         }\n-        foundWeight = path.weight();\n+\n+foundWeight = path.weight();\n         return path;\n     }\n \n@@ -83,4 +84,4 @@ public class WeightedPathIterator extends PrefetchingResourceIterator<WeightedPa\n     {\n         paths.close();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}