{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "226",
    "information": {
        "violations": [
            {
                "line": "192",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  /**\n   * after this method, connection will be recycled to connection pool\n   * @param responseBuf response body buffer, when download, responseBuf is null, because download data by ReadStreamPart\n   */\n  protected void processResponseBody(Buffer responseBuf) {\n    DefaultHttpSocketMetric httpSocketMetric = (DefaultHttpSocketMetric) ((ConnectionBase) clientRequest.connection())",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/226/RestClientInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/226/RestClientInvocation.java\nindex 970e0696fe0..1abfb775f31 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/226/RestClientInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/226/RestClientInvocation.java\n@@ -189,6 +189,7 @@ public class RestClientInvocation {\n \n   /**\n    * after this method, connection will be recycled to connection pool\n+   *\n    * @param responseBuf response body buffer, when download, responseBuf is null, because download data by ReadStreamPart\n    */\n   protected void processResponseBody(Buffer responseBuf) {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/226/RestClientInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/226/RestClientInvocation.java\nindex 970e0696fe0..cf15695b982 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/226/RestClientInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/226/RestClientInvocation.java\n@@ -108,14 +108,10 @@ public class RestClientInvocation {\n     clientRequest.connectionHandler(connection -> {\n       LOGGER.debug(\"http connection connected, local:{}, remote:{}.\",\n           connection.localAddress(), connection.remoteAddress());\n-      connection.closeHandler(v ->\n-          LOGGER.debug(\"http connection closed, local:{}, remote:{}.\",\n-              connection.localAddress(), connection.remoteAddress())\n-      );\n-      connection.exceptionHandler(e ->\n-          LOGGER.info(\"http connection exception, local:{}, remote:{}.\",\n-              connection.localAddress(), connection.remoteAddress(), e)\n-      );\n+      connection.closeHandler(v -> LOGGER.debug(\"http connection closed, local:{}, remote:{}.\",\n+              connection.localAddress(), connection.remoteAddress()));\n+      connection.exceptionHandler(e -> LOGGER.info(\"http connection exception, local:{}, remote:{}.\",\n+              connection.localAddress(), connection.remoteAddress(), e));\n     });\n \n     // \u4ece\u4e1a\u52a1\u7ebf\u7a0b\u8f6c\u79fb\u5230\u7f51\u7edc\u7ebf\u7a0b\u4e2d\u53bb\u53d1\u9001\n@@ -276,4 +272,4 @@ public class RestClientInvocation {\n \n     return urlPrefix + path;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/226/RestClientInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/226/RestClientInvocation.java\nindex 970e0696fe0..14d7914d5ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/226/RestClientInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/226/RestClientInvocation.java\n@@ -18,9 +18,7 @@\n package org.apache.servicecomb.transport.rest.client.http;\n \n import java.util.List;\n-\n import javax.servlet.http.Part;\n-\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.codec.param.RestClientRequestImpl;\n import org.apache.servicecomb.common.rest.definition.RestOperationMeta;\n@@ -45,7 +43,6 @@ import org.apache.servicecomb.swagger.invocation.Response;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import io.vertx.core.buffer.Buffer;\n import io.vertx.core.http.HttpClientRequest;\n import io.vertx.core.http.HttpClientResponse;\n@@ -81,14 +78,13 @@ public class RestClientInvocation {\n \n     OperationMeta operationMeta = invocation.getOperationMeta();\n     RestOperationMeta swaggerRestOperation = operationMeta.getExtData(RestConst.SWAGGER_REST_OPERATION);\n-\n     String path = this.createRequestPath(swaggerRestOperation);\n     IpPort ipPort = (IpPort) invocation.getEndpoint().getAddress();\n-\n     createRequest(ipPort, path);\n-    clientRequest.putHeader(org.apache.servicecomb.core.Const.TARGET_MICROSERVICE, invocation.getMicroserviceName());\n-    RestClientRequestImpl restClientRequest =\n-        new RestClientRequestImpl(clientRequest, httpClientWithContext.context(), asyncResp);\n+    clientRequest.putHeader(org.apache.servicecomb.core.Const.TARGET_MICROSERVICE,\n+invocation.getMicroserviceName());\n+\n+    RestClientRequestImpl restClientRequest = new RestClientRequestImpl(clientRequest, httpClientWithContext.context(), asyncResp);\n     invocation.getHandlerContext().put(RestConst.INVOCATION_HANDLER_REQUESTCLIENT, restClientRequest);\n \n     Buffer requestBodyBuffer = restClientRequest.getBodyBuffer();\n@@ -101,21 +97,24 @@ public class RestClientInvocation {\n     }\n \n     clientRequest.exceptionHandler(e -> {\n-      LOGGER.error(invocation.getMarker(), \"Failed to send request, local:{}, remote:{}.\",\n-          getLocalAddress(), ipPort.getSocketAddress(), e);\n+      LOGGER.error(invocation.getMarker(),\n+\"Failed to send request, local:{}, remote:{}.\",\n+getLocalAddress(),\n+ipPort.getSocketAddress(),\n+e);\n       fail((ConnectionBase) clientRequest.connection(), e);\n     });\n     clientRequest.connectionHandler(connection -> {\n       LOGGER.debug(\"http connection connected, local:{}, remote:{}.\",\n-          connection.localAddress(), connection.remoteAddress());\n-      connection.closeHandler(v ->\n-          LOGGER.debug(\"http connection closed, local:{}, remote:{}.\",\n-              connection.localAddress(), connection.remoteAddress())\n-      );\n-      connection.exceptionHandler(e ->\n-          LOGGER.info(\"http connection exception, local:{}, remote:{}.\",\n-              connection.localAddress(), connection.remoteAddress(), e)\n-      );\n+connection.localAddress(),\n+connection.remoteAddress());\n+      connection.closeHandler(v -> LOGGER.debug(\"http connection closed, local:{}, remote:{}.\",\n+connection.localAddress(),\n+connection.remoteAddress()));\n+      connection.exceptionHandler(e -> LOGGER.info(\"http connection exception, local:{}, remote:{}.\",\n+connection.localAddress(),\n+connection.remoteAddress(),\n+e));\n     });\n \n     // \u4ece\u4e1a\u52a1\u7ebf\u7a0b\u8f6c\u79fb\u5230\u7f51\u7edc\u7ebf\u7a0b\u4e2d\u53bb\u53d1\u9001\n@@ -127,7 +126,10 @@ public class RestClientInvocation {\n         restClientRequest.end();\n       } catch (Throwable e) {\n         LOGGER.error(invocation.getMarker(),\n-            \"send http request failed, local:{}, remote: {}.\", getLocalAddress(), ipPort, e);\n+\"send http request failed, local:{}, remote: {}.\",\n+getLocalAddress(),\n+ipPort,\n+e);\n         fail((ConnectionBase) clientRequest.connection(), e);\n       }\n     });\n@@ -138,6 +140,7 @@ public class RestClientInvocation {\n     if (connection == null) {\n       return \"not connected\";\n     }\n+\n     SocketAddress socketAddress = connection.localAddress();\n     return socketAddress != null ? socketAddress.toString() : \"not connected\";\n   }\n@@ -153,25 +156,18 @@ public class RestClientInvocation {\n   void createRequest(IpPort ipPort, String path) {\n     URIEndpointObject endpoint = (URIEndpointObject) invocation.getEndpoint().getAddress();\n     RequestOptions requestOptions = new RequestOptions();\n-    requestOptions.setHost(ipPort.getHostOrIp())\n-        .setPort(ipPort.getPort())\n-        .setSsl(endpoint.isSslEnabled())\n-        .setURI(path);\n+    requestOptions.setHost(ipPort.getHostOrIp()).setPort(ipPort.getPort())\n+                                                .setSsl(endpoint.isSslEnabled()).setURI(path);\n \n     HttpMethod method = getMethod();\n-    LOGGER.debug(invocation.getMarker(), \"Sending request by rest, method={}, qualifiedName={}, path={}, endpoint={}.\",\n-        method,\n-        invocation.getMicroserviceQualifiedName(),\n-        path,\n-        invocation.getEndpoint().getEndpoint());\n+    LOGGER.debug(invocation.getMarker(), \"Sending request by rest, method={}, qualifiedName={}, path={}, endpoint={}.\", method, invocation.getMicroserviceQualifiedName(), path, invocation.getEndpoint().getEndpoint());\n     clientRequest = httpClientWithContext.getHttpClient().request(method, requestOptions, this::handleResponse);\n   }\n \n   protected void handleResponse(HttpClientResponse httpClientResponse) {\n     this.clientResponse = httpClientResponse;\n-\n-    if (HttpStatus.isSuccess(clientResponse.statusCode())\n-        && Part.class.equals(invocation.getOperationMeta().getMethod().getReturnType())) {\n+    if (HttpStatus.isSuccess(clientResponse.statusCode()) && Part.class.equals(invocation.getOperationMeta().getMethod()\n+                                                                                                            .getReturnType())) {\n       ReadStreamPart part = new ReadStreamPart(httpClientWithContext.context(), httpClientResponse);\n       invocation.getHandlerContext().put(RestConst.READ_STREAM_PART, part);\n       processResponseBody(null);\n@@ -179,11 +175,13 @@ public class RestClientInvocation {\n     }\n \n     httpClientResponse.exceptionHandler(e -> {\n-      LOGGER.error(invocation.getMarker(), \"Failed to receive response, local:{}, remote:{}.\",\n-          getLocalAddress(), httpClientResponse.netSocket().remoteAddress(), e);\n+      LOGGER.error(invocation.getMarker(),\n+\"Failed to receive response, local:{}, remote:{}.\",\n+getLocalAddress(),\n+httpClientResponse.netSocket().remoteAddress(),\n+e);\n       fail((ConnectionBase) clientRequest.connection(), e);\n     });\n-\n     clientResponse.bodyHandler(this::processResponseBody);\n   }\n \n@@ -191,18 +189,17 @@ public class RestClientInvocation {\n    * after this method, connection will be recycled to connection pool\n    * @param responseBuf response body buffer, when download, responseBuf is null, because download data by ReadStreamPart\n    */\n+\n   protected void processResponseBody(Buffer responseBuf) {\n-    DefaultHttpSocketMetric httpSocketMetric = (DefaultHttpSocketMetric) ((ConnectionBase) clientRequest.connection())\n-        .metric();\n+    DefaultHttpSocketMetric httpSocketMetric = (DefaultHttpSocketMetric) ((ConnectionBase) clientRequest.connection()).metric();\n     invocation.getInvocationStageTrace().finishGetConnection(httpSocketMetric.getRequestBeginTime());\n     invocation.getInvocationStageTrace().finishWriteToBuffer(httpSocketMetric.getRequestEndTime());\n     invocation.getInvocationStageTrace().finishReceiveResponse();\n-\n     invocation.getResponseExecutor().execute(() -> {\n       try {\n         invocation.getInvocationStageTrace().startClientFiltersResponse();\n-        HttpServletResponseEx responseEx =\n-            new VertxClientResponseToHttpServletResponse(clientResponse, responseBuf);\n+\n+        HttpServletResponseEx responseEx = new VertxClientResponseToHttpServletResponse(clientResponse, responseBuf);\n         for (HttpClientFilter filter : httpClientFilters) {\n           if (filter.enabled()) {\n             Response response = filter.afterReceiveResponse(invocation, responseEx);\n@@ -241,9 +238,11 @@ public class RestClientInvocation {\n \n     // even failed and did not received response, still set time for it\n     // that will help to know the real timeout time\n+\n     if (stageTrace.getFinishReceiveResponse() == 0) {\n       stageTrace.finishReceiveResponse();\n     }\n+\n     if (stageTrace.getStartClientFiltersResponse() == 0) {\n       stageTrace.startClientFiltersResponse();\n     }\n@@ -264,7 +263,6 @@ public class RestClientInvocation {\n   protected String createRequestPath(RestOperationMeta swaggerRestOperation) throws Exception {\n     URIEndpointObject address = (URIEndpointObject) invocation.getEndpoint().getAddress();\n     String urlPrefix = address.getFirst(Const.URL_PREFIX);\n-\n     String path = (String) invocation.getHandlerContext().get(RestConst.REST_CLIENT_REQUEST_PATH);\n     if (path == null) {\n       path = swaggerRestOperation.getPathBuilder().createRequestPath(invocation.getArgs());\n@@ -273,7 +271,6 @@ public class RestClientInvocation {\n     if (StringUtils.isEmpty(urlPrefix) || path.startsWith(urlPrefix)) {\n       return path;\n     }\n-\n     return urlPrefix + path;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 57
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}