{
    "project_name": "CESNET-perun",
    "violation_id": "1",
    "information": {
        "violations": [
            {
                "line": "85",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\t}\n\n\t\treturn attribute;\n }\n\n\t@Override",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CESNET-perun/styler/05_predictions/final/files-repaired/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\nindex f85d0591e1a..3c9f317c18b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CESNET-perun/styler/05_predictions/final/files-repaired/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n@@ -82,8 +82,8 @@ public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends U\n \t\t\tthrow new ConsistencyErrorException(ex);\n \t\t}\n \n-\t\treturn attribute;\n- }\n+  return attribute;\n+\t}\n \n \t@Override\n \tpublic List<String> getDependencies() {\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/checkstyle_idea/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\nindex f85d0591e1a..0184d9ca648 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/checkstyle_idea/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n@@ -18,88 +18,110 @@ import java.util.ArrayList;\n import java.util.List;\n \n /**\n- *\n  * @author Jakub Peschel <410368@mail.muni.cz>\n  */\n-public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends UserFacilityAttributesModuleAbstract implements UserFacilityAttributesModuleImplApi {\n+public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends UserFacilityAttributesModuleAbstract\n+    implements UserFacilityAttributesModuleImplApi {\n \n-\t@Override\n-\tpublic void checkAttributeSemantics(PerunSessionImpl sess, User user, Facility facility, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tAttribute namespaceAttribute;\n-\t\t\ttry {\n-\t\t\t\tnamespaceAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\tif (namespaceAttribute.getValue() == null) {\n-\t\t\tthrow new WrongReferenceAttributeValueException(attribute, namespaceAttribute, \"Reference attribute is null\");\n-\t\t}\n-\t\tString namespaceName = namespaceAttribute.valueAsString();\n+    @Override\n+    public void checkAttributeSemantics(PerunSessionImpl sess, User user, Facility facility, Attribute attribute)\n+        throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+        Attribute namespaceAttribute;\n+        try {\n+            namespaceAttribute = sess.getPerunBl().getAttributesManagerBl()\n+                .getAttribute(sess, facility, AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n+        } catch (AttributeNotExistsException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n+        if (namespaceAttribute.getValue() == null) {\n+            throw new WrongReferenceAttributeValueException(attribute, namespaceAttribute,\n+                \"Reference attribute is null\");\n+        }\n+        String namespaceName = namespaceAttribute.valueAsString();\n \n-\t\tAttribute resourceGidAttribute;\n-\t\ttry {\n-\t\t\tresourceGidAttribute = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName));\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Namespace from value of \" + namespaceAttribute + \" doesn't exists. (Resource attribute \" + AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName + \" doesn't exists\", ex);\n-\t\t}\n+        Attribute resourceGidAttribute;\n+        try {\n+            resourceGidAttribute = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess,\n+                AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName));\n+        } catch (AttributeNotExistsException ex) {\n+            throw new ConsistencyErrorException(\n+                \"Namespace from value of \" + namespaceAttribute + \" doesn't exists. (Resource attribute \" +\n+                    AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName + \" doesn't exists\",\n+                ex);\n+        }\n \n-\t\tresourceGidAttribute.setValue(attribute.getValue());\n-\t\tList<Resource> allowedResources = sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n-\t\tList<Resource> resourcesWithSameGid = sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, resourceGidAttribute);\n-\t\tif (resourcesWithSameGid.isEmpty() && allowedResources.isEmpty() && resourceGidAttribute.getValue() == null) return;\n-\t\tif (resourcesWithSameGid.isEmpty() && resourceGidAttribute.getValue() != null) throw new WrongReferenceAttributeValueException(attribute, null, user, facility, \"Resource with required unix GID doesn't exist.\");\n-\t\tif (allowedResources.isEmpty()) throw new WrongReferenceAttributeValueException(attribute, null, user, facility, \"User has not access to required resource\");\n+        resourceGidAttribute.setValue(attribute.getValue());\n+        List<Resource> allowedResources =\n+            sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n+        List<Resource> resourcesWithSameGid =\n+            sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, resourceGidAttribute);\n+        if (resourcesWithSameGid.isEmpty() && allowedResources.isEmpty() && resourceGidAttribute.getValue() == null) {\n+            return;\n+        }\n+        if (resourcesWithSameGid.isEmpty() && resourceGidAttribute.getValue() != null) {\n+            throw new WrongReferenceAttributeValueException(attribute, null, user, facility,\n+                \"Resource with required unix GID doesn't exist.\");\n+        }\n+        if (allowedResources.isEmpty()) {\n+            throw new WrongReferenceAttributeValueException(attribute, null, user, facility,\n+                \"User has not access to required resource\");\n+        }\n \n-\t\tresourcesWithSameGid.retainAll(allowedResources);\n+        resourcesWithSameGid.retainAll(allowedResources);\n \n-\t\t//We did not find at least one allowed resource with same gid as the user have => attribute is NOK\n-\t\tif (resourcesWithSameGid.isEmpty()) {\n-\t\t\tthrow new WrongReferenceAttributeValueException(attribute, null, user, facility, \"User has not access to resource with required group id\");\n-\t\t}\n-\t}\n+        //We did not find at least one allowed resource with same gid as the user have => attribute is NOK\n+        if (resourcesWithSameGid.isEmpty()) {\n+            throw new WrongReferenceAttributeValueException(attribute, null, user, facility,\n+                \"User has not access to resource with required group id\");\n+        }\n+    }\n \n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSessionImpl sess, User user, Facility facility, AttributeDefinition attributeDefinition) throws WrongAttributeAssignmentException {\n-\t\tAttribute attribute = new Attribute(attributeDefinition);\n+    @Override\n+    public Attribute fillAttribute(PerunSessionImpl sess, User user, Facility facility,\n+                                   AttributeDefinition attributeDefinition) throws WrongAttributeAssignmentException {\n+        Attribute attribute = new Attribute(attributeDefinition);\n \n-\t\tList<Resource> allowedResources = sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n-\t\ttry {\n-\t\t\tfor (Resource resource : allowedResources) {\n-\t\t\t\tList<AttributeDefinition> resourceRequiredAttributesDefinitions = sess.getPerunBl().getAttributesManagerBl().getResourceRequiredAttributesDefinition(sess, resource);\n+        List<Resource> allowedResources =\n+            sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n+        try {\n+            for (Resource resource : allowedResources) {\n+                List<AttributeDefinition> resourceRequiredAttributesDefinitions =\n+                    sess.getPerunBl().getAttributesManagerBl().getResourceRequiredAttributesDefinition(sess, resource);\n \n-\t\t\t\t//if this attribute is not required by the services on the resource, skip the resource\n-\t\t\t\tif (!resourceRequiredAttributesDefinitions.contains(attributeDefinition)) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n+                //if this attribute is not required by the services on the resource, skip the resource\n+                if (!resourceRequiredAttributesDefinitions.contains(attributeDefinition)) {\n+                    continue;\n+                }\n \n-\t\t\t\tAttribute unixGidAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, AttributesManager.NS_RESOURCE_ATTR_VIRT + \":unixGID\");\n-\t\t\t\tif (unixGidAttribute.getValue() != null) {\n-\t\t\t\t\tattribute.setValue(unixGidAttribute.getValue());\n-\t\t\t\t\treturn attribute;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n+                Attribute unixGidAttribute = sess.getPerunBl().getAttributesManagerBl()\n+                    .getAttribute(sess, resource, AttributesManager.NS_RESOURCE_ATTR_VIRT + \":unixGID\");\n+                if (unixGidAttribute.getValue() != null) {\n+                    attribute.setValue(unixGidAttribute.getValue());\n+                    return attribute;\n+                }\n+            }\n+        } catch (AttributeNotExistsException ex) {\n+            throw new ConsistencyErrorException(ex);\n+        }\n \n-\t\treturn attribute;\n- }\n+        return attribute;\n+    }\n \n-\t@Override\n-\tpublic List<String> getDependencies() {\n-\t\tList<String> dependencies = new ArrayList<>();\n-\t\tdependencies.add(AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n-\t\tdependencies.add(AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\");\n-\t\treturn dependencies;\n-\t}\n+    @Override\n+    public List<String> getDependencies() {\n+        List<String> dependencies = new ArrayList<>();\n+        dependencies.add(AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n+        dependencies.add(AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\");\n+        return dependencies;\n+    }\n \n-\t@Override\n-\tpublic AttributeDefinition getAttributeDefinition() {\n-\t\tAttributeDefinition attr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_FACILITY_ATTR_DEF);\n-\t\tattr.setFriendlyName(\"basicDefaultGID\");\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setDescription(\"Generated primary unix gid which is used if user doesn't have other preferences.\");\n-\t\treturn attr;\n-\t}\n+    @Override\n+    public AttributeDefinition getAttributeDefinition() {\n+        AttributeDefinition attr = new AttributeDefinition();\n+        attr.setNamespace(AttributesManager.NS_USER_FACILITY_ATTR_DEF);\n+        attr.setFriendlyName(\"basicDefaultGID\");\n+        attr.setType(Integer.class.getName());\n+        attr.setDescription(\"Generated primary unix gid which is used if user doesn't have other preferences.\");\n+        return attr;\n+    }\n }\n",
            "diff_size": 93
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/naturalize/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\nindex f85d0591e1a..2766a54b909 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/naturalize/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n@@ -26,12 +26,12 @@ public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends U\n \t@Override\n \tpublic void checkAttributeSemantics(PerunSessionImpl sess, User user, Facility facility, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n \t\tAttribute namespaceAttribute;\n-\t\t\ttry {\n+try {\n \t\t\t\tnamespaceAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n \t\t\t} catch (AttributeNotExistsException ex) {\n \t\t\t\tthrow new ConsistencyErrorException(ex);\n \t\t\t}\n-\t\tif (namespaceAttribute.getValue() == null) {\n+if (namespaceAttribute.getValue() == null) {\n \t\t\tthrow new WrongReferenceAttributeValueException(attribute, namespaceAttribute, \"Reference attribute is null\");\n \t\t}\n \t\tString namespaceName = namespaceAttribute.valueAsString();\n@@ -83,9 +83,9 @@ public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends U\n \t\t}\n \n \t\treturn attribute;\n- }\n+\t}\n \n-\t@Override\n+@Override\n \tpublic List<String> getDependencies() {\n \t\tList<String> dependencies = new ArrayList<>();\n \t\tdependencies.add(AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n@@ -102,4 +102,4 @@ public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends U\n \t\tattr.setDescription(\"Generated primary unix gid which is used if user doesn't have other preferences.\");\n \t\treturn attr;\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/codebuff/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\nindex f85d0591e1a..1fe7390e874 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/codebuff/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n@@ -13,7 +13,6 @@ import cz.metacentrum.perun.core.api.exceptions.WrongReferenceAttributeValueExce\n import cz.metacentrum.perun.core.impl.PerunSessionImpl;\n import cz.metacentrum.perun.core.implApi.modules.attributes.UserFacilityAttributesModuleAbstract;\n import cz.metacentrum.perun.core.implApi.modules.attributes.UserFacilityAttributesModuleImplApi;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -21,85 +20,84 @@ import java.util.List;\n  *\n  * @author Jakub Peschel <410368@mail.muni.cz>\n  */\n-public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends UserFacilityAttributesModuleAbstract implements UserFacilityAttributesModuleImplApi {\n-\n-\t@Override\n-\tpublic void checkAttributeSemantics(PerunSessionImpl sess, User user, Facility facility, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n-\t\tAttribute namespaceAttribute;\n-\t\t\ttry {\n-\t\t\t\tnamespaceAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n-\t\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t\t}\n-\t\tif (namespaceAttribute.getValue() == null) {\n-\t\t\tthrow new WrongReferenceAttributeValueException(attribute, namespaceAttribute, \"Reference attribute is null\");\n-\t\t}\n-\t\tString namespaceName = namespaceAttribute.valueAsString();\n-\n-\t\tAttribute resourceGidAttribute;\n-\t\ttry {\n-\t\t\tresourceGidAttribute = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName));\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(\"Namespace from value of \" + namespaceAttribute + \" doesn't exists. (Resource attribute \" + AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName + \" doesn't exists\", ex);\n-\t\t}\n \n-\t\tresourceGidAttribute.setValue(attribute.getValue());\n-\t\tList<Resource> allowedResources = sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n-\t\tList<Resource> resourcesWithSameGid = sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, resourceGidAttribute);\n-\t\tif (resourcesWithSameGid.isEmpty() && allowedResources.isEmpty() && resourceGidAttribute.getValue() == null) return;\n-\t\tif (resourcesWithSameGid.isEmpty() && resourceGidAttribute.getValue() != null) throw new WrongReferenceAttributeValueException(attribute, null, user, facility, \"Resource with required unix GID doesn't exist.\");\n-\t\tif (allowedResources.isEmpty()) throw new WrongReferenceAttributeValueException(attribute, null, user, facility, \"User has not access to required resource\");\n \n-\t\tresourcesWithSameGid.retainAll(allowedResources);\n+public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends UserFacilityAttributesModuleAbstract implements UserFacilityAttributesModuleImplApi {\n+ @Override\n+ public void checkAttributeSemantics(PerunSessionImpl sess, User user, Facility facility, Attribute attribute) throws WrongReferenceAttributeValueException, WrongAttributeAssignmentException {\n+  Attribute namespaceAttribute;\n+  try {\n+   namespaceAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, facility, AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n+  } catch (AttributeNotExistsException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n+  if (namespaceAttribute.getValue() == null) {\n+   throw new WrongReferenceAttributeValueException(attribute, namespaceAttribute, \"Reference attribute is null\");\n+  }\n+  String namespaceName = namespaceAttribute.valueAsString();\n+  Attribute resourceGidAttribute;\n+  try {\n+   resourceGidAttribute = new Attribute(sess.getPerunBl().getAttributesManagerBl().getAttributeDefinition(sess, AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName));\n+  } catch (AttributeNotExistsException ex) {\n+   throw new ConsistencyErrorException(\"Namespace from value of \" + namespaceAttribute + \" doesn't exists. (Resource attribute \" + AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace:\" + namespaceName + \" doesn't exists\", ex);\n+  }\n+  resourceGidAttribute.setValue(attribute.getValue());\n+  List<Resource> allowedResources = sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n+  List<Resource> resourcesWithSameGid = sess.getPerunBl().getResourcesManagerBl().getResourcesByAttribute(sess, resourceGidAttribute);\n+  if (resourcesWithSameGid.isEmpty() && allowedResources.isEmpty() && resourceGidAttribute.getValue() == null)\n+   return;\n+  if (resourcesWithSameGid.isEmpty() && resourceGidAttribute.getValue() != null) throw new WrongReferenceAttributeValueException(attribute, null, user, facility, \"Resource with required unix GID doesn't exist.\");\n+  if (allowedResources.isEmpty()) throw new WrongReferenceAttributeValueException(attribute, null, user, facility, \"User has not access to required resource\");\n+  resourcesWithSameGid.retainAll(allowedResources);\n \n-\t\t//We did not find at least one allowed resource with same gid as the user have => attribute is NOK\n-\t\tif (resourcesWithSameGid.isEmpty()) {\n-\t\t\tthrow new WrongReferenceAttributeValueException(attribute, null, user, facility, \"User has not access to resource with required group id\");\n-\t\t}\n-\t}\n+  //We did not find at least one allowed resource with same gid as the user have => attribute is NOK\n+  if (resourcesWithSameGid.isEmpty()) {\n+   throw new WrongReferenceAttributeValueException(attribute, null, user, facility, \"User has not access to resource with required group id\");\n+  }\n+ }\n \n-\t@Override\n-\tpublic Attribute fillAttribute(PerunSessionImpl sess, User user, Facility facility, AttributeDefinition attributeDefinition) throws WrongAttributeAssignmentException {\n-\t\tAttribute attribute = new Attribute(attributeDefinition);\n+ @Override\n+ public Attribute fillAttribute(PerunSessionImpl sess, User user, Facility facility, AttributeDefinition attributeDefinition) throws WrongAttributeAssignmentException {\n+  Attribute attribute = new Attribute(attributeDefinition);\n+  List<Resource> allowedResources = sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n+  try {\n \n-\t\tList<Resource> allowedResources = sess.getPerunBl().getUsersManagerBl().getAllowedResources(sess, facility, user);\n-\t\ttry {\n-\t\t\tfor (Resource resource : allowedResources) {\n-\t\t\t\tList<AttributeDefinition> resourceRequiredAttributesDefinitions = sess.getPerunBl().getAttributesManagerBl().getResourceRequiredAttributesDefinition(sess, resource);\n+   for (Resource resource : allowedResources) {\n+    List<AttributeDefinition> resourceRequiredAttributesDefinitions = sess.getPerunBl().getAttributesManagerBl().getResourceRequiredAttributesDefinition(sess, resource);\n \n-\t\t\t\t//if this attribute is not required by the services on the resource, skip the resource\n-\t\t\t\tif (!resourceRequiredAttributesDefinitions.contains(attributeDefinition)) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n+    //if this attribute is not required by the services on the resource, skip the resource\n+    if (!resourceRequiredAttributesDefinitions.contains(attributeDefinition)) {\n+     continue;\n+    }\n+    Attribute unixGidAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, AttributesManager.NS_RESOURCE_ATTR_VIRT + \":unixGID\");\n+    if (unixGidAttribute.getValue() != null) {\n+     attribute.setValue(unixGidAttribute.getValue());\n+     return attribute;\n+    }\n+   }\n+  } catch (AttributeNotExistsException ex) {\n+   throw new ConsistencyErrorException(ex);\n+  }\n \n-\t\t\t\tAttribute unixGidAttribute = sess.getPerunBl().getAttributesManagerBl().getAttribute(sess, resource, AttributesManager.NS_RESOURCE_ATTR_VIRT + \":unixGID\");\n-\t\t\t\tif (unixGidAttribute.getValue() != null) {\n-\t\t\t\t\tattribute.setValue(unixGidAttribute.getValue());\n-\t\t\t\t\treturn attribute;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (AttributeNotExistsException ex) {\n-\t\t\tthrow new ConsistencyErrorException(ex);\n-\t\t}\n+  return attribute;\n+ }\n \n-\t\treturn attribute;\n+ @Override\n+ public List<String> getDependencies() {\n+  List<String> dependencies = new ArrayList<>();\n+  dependencies.add(AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n+  dependencies.add(AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\");\n+  return dependencies;\n  }\n \n-\t@Override\n-\tpublic List<String> getDependencies() {\n-\t\tList<String> dependencies = new ArrayList<>();\n-\t\tdependencies.add(AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n-\t\tdependencies.add(AttributesManager.NS_RESOURCE_ATTR_DEF + \":unixGID-namespace\" + \":*\");\n-\t\treturn dependencies;\n-\t}\n+ @Override\n+ public AttributeDefinition getAttributeDefinition() {\n+  AttributeDefinition attr = new AttributeDefinition();\n+  attr.setNamespace(AttributesManager.NS_USER_FACILITY_ATTR_DEF);\n+  attr.setFriendlyName(\"basicDefaultGID\");\n+  attr.setType(Integer.class.getName());\n+  attr.setDescription(\"Generated primary unix gid which is used if user doesn't have other preferences.\");\n+  return attr;\n+ }\n \n-\t@Override\n-\tpublic AttributeDefinition getAttributeDefinition() {\n-\t\tAttributeDefinition attr = new AttributeDefinition();\n-\t\tattr.setNamespace(AttributesManager.NS_USER_FACILITY_ATTR_DEF);\n-\t\tattr.setFriendlyName(\"basicDefaultGID\");\n-\t\tattr.setType(Integer.class.getName());\n-\t\tattr.setDescription(\"Generated primary unix gid which is used if user doesn't have other preferences.\");\n-\t\treturn attr;\n-\t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 116
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/styler/05_predictions/random/files-repaired/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\nindex f85d0591e1a..297ba24be4c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/styler/05_predictions/random/files-repaired/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n@@ -82,10 +82,10 @@ public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends U\n \t\t\tthrow new ConsistencyErrorException(ex);\n \t\t}\n \n-\t\treturn attribute;\n- }\n+  return attribute;\n+\t}\n \n-\t@Override\n+ @Override\n \tpublic List<String> getDependencies() {\n \t\tList<String> dependencies = new ArrayList<>();\n \t\tdependencies.add(AttributesManager.NS_FACILITY_ATTR_DEF + \":unixGID-namespace\");\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/styler/05_predictions/three_grams/files-repaired/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\nindex f85d0591e1a..3c9f317c18b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/violations/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CESNET-perun/styler/05_predictions/three_grams/files-repaired/1/urn_perun_user_facility_attribute_def_def_basicDefaultGID.java\n@@ -82,8 +82,8 @@ public class urn_perun_user_facility_attribute_def_def_basicDefaultGID extends U\n \t\t\tthrow new ConsistencyErrorException(ex);\n \t\t}\n \n-\t\treturn attribute;\n- }\n+  return attribute;\n+\t}\n \n \t@Override\n \tpublic List<String> getDependencies() {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}