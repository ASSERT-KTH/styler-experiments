{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "1444",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docquery.adapter.proxy;\n\nimport gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1444/AdapterDocQueryProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/1444/AdapterDocQueryProxyJavaImpl.java\nindex d80352cddb7..0dbc13e4fd3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1444/AdapterDocQueryProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/1444/AdapterDocQueryProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.adapter.proxy;\n \n import gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\n@@ -37,24 +38,23 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author jhoppesc\n  */\n public class AdapterDocQueryProxyJavaImpl implements AdapterDocQueryProxy {\n-    private static final Logger LOG = LoggerFactory.getLogger(AdapterDocQueryProxyJavaImpl.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AdapterDocQueryProxyJavaImpl.class);\n \n-    /**\n-     *@param msg The AdhocQueryRequest message.\n-     *@param assertion Assertion received.\n-     *@return The AdhocQueryResponse received.\n-     */\n-    @AdapterDelegationEvent(beforeBuilder = AdhocQueryRequestDescriptionBuilder.class,\n-            afterReturningBuilder = AdhocQueryResponseDescriptionBuilder.class, serviceType = \"Document Query\",\n-            version = \"LEVEL_a0\")\n-    @Override\n-    public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest msg, AssertionType assertion) {\n-        LOG.debug(\"Using Java Implementation for Adapter Doc Query Service\");\n-        return new AdapterDocQueryOrchImpl().respondingGatewayCrossGatewayQuery(msg, assertion);\n-    }\n+  /**\n+   * @param msg       The AdhocQueryRequest message.\n+   * @param assertion Assertion received.\n+   * @return The AdhocQueryResponse received.\n+   */\n+  @AdapterDelegationEvent(beforeBuilder = AdhocQueryRequestDescriptionBuilder.class,\n+      afterReturningBuilder = AdhocQueryResponseDescriptionBuilder.class, serviceType = \"Document Query\",\n+      version = \"LEVEL_a0\")\n+  @Override\n+  public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest msg, AssertionType assertion) {\n+    LOG.debug(\"Using Java Implementation for Adapter Doc Query Service\");\n+    return new AdapterDocQueryOrchImpl().respondingGatewayCrossGatewayQuery(msg, assertion);\n+  }\n \n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1444/AdapterDocQueryProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/1444/AdapterDocQueryProxyJavaImpl.java\nindex d80352cddb7..dd3b43e3390 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1444/AdapterDocQueryProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/1444/AdapterDocQueryProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.adapter.proxy;\n \n import gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\n@@ -48,13 +49,12 @@ public class AdapterDocQueryProxyJavaImpl implements AdapterDocQueryProxy {\n      *@param assertion Assertion received.\n      *@return The AdhocQueryResponse received.\n      */\n-    @AdapterDelegationEvent(beforeBuilder = AdhocQueryRequestDescriptionBuilder.class,\n-            afterReturningBuilder = AdhocQueryResponseDescriptionBuilder.class, serviceType = \"Document Query\",\n-            version = \"LEVEL_a0\")\n-    @Override\n+    @AdapterDelegationEvent(beforeBuilder = AdhocQueryRequestDescriptionBuilder.class, afterReturningBuilder = AdhocQueryResponseDescriptionBuilder.class, serviceType = \"Document Query\", version = \"LEVEL_a0\")\n+@Override\n     public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest msg, AssertionType assertion) {\n         LOG.debug(\"Using Java Implementation for Adapter Doc Query Service\");\n-        return new AdapterDocQueryOrchImpl().respondingGatewayCrossGatewayQuery(msg, assertion);\n+\n+return new AdapterDocQueryOrchImpl().respondingGatewayCrossGatewayQuery(msg, assertion);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1444/AdapterDocQueryProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/1444/AdapterDocQueryProxyJavaImpl.java\nindex d80352cddb7..e9880a6d7ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1444/AdapterDocQueryProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/1444/AdapterDocQueryProxyJavaImpl.java\n@@ -40,7 +40,10 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author jhoppesc\n  */\n+\n+\n public class AdapterDocQueryProxyJavaImpl implements AdapterDocQueryProxy {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(AdapterDocQueryProxyJavaImpl.class);\n \n     /**\n@@ -48,13 +51,13 @@ public class AdapterDocQueryProxyJavaImpl implements AdapterDocQueryProxy {\n      *@param assertion Assertion received.\n      *@return The AdhocQueryResponse received.\n      */\n-    @AdapterDelegationEvent(beforeBuilder = AdhocQueryRequestDescriptionBuilder.class,\n-            afterReturningBuilder = AdhocQueryResponseDescriptionBuilder.class, serviceType = \"Document Query\",\n-            version = \"LEVEL_a0\")\n+\n+\n+    @AdapterDelegationEvent(beforeBuilder = AdhocQueryRequestDescriptionBuilder.class, afterReturningBuilder = AdhocQueryResponseDescriptionBuilder.class, serviceType = \"Document Query\", version = \"LEVEL_a0\")\n     @Override\n     public AdhocQueryResponse respondingGatewayCrossGatewayQuery(AdhocQueryRequest msg, AssertionType assertion) {\n         LOG.debug(\"Using Java Implementation for Adapter Doc Query Service\");\n         return new AdapterDocQueryOrchImpl().respondingGatewayCrossGatewayQuery(msg, assertion);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}