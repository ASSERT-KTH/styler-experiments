{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "3354",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "64",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3354/OnlineIndexUpdates.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3354/OnlineIndexUpdates.java\nindex e5a2cd7faf2..463fc93400b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3354/OnlineIndexUpdates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3354/OnlineIndexUpdates.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import java.util.ArrayList;\n@@ -48,126 +49,125 @@ import static org.neo4j.kernel.impl.store.NodeLabelsField.parseLabelsField;\n  * for example if adding a label to a node which already has properties matching existing and online indexes;\n  * in that case the properties for that node needs to be read from store since the commands in that transaction\n  * cannot itself provide enough information.\n- *\n+ * <p>\n  * One instance can be {@link #feed(PrimitiveLongObjectMap, PrimitiveLongObjectMap) fed} data about\n  * multiple transactions, to be {@link #iterator() accessed} later.\n  */\n public class OnlineIndexUpdates implements IndexUpdates\n {\n-    private final NodeStore nodeStore;\n-    private final IndexingUpdateService updateService;\n-    private final PropertyPhysicalToLogicalConverter converter;\n-    private final Collection<IndexEntryUpdate<SchemaDescriptor>> updates = new ArrayList<>();\n-    private NodeRecord nodeRecord;\n-\n-    public OnlineIndexUpdates( NodeStore nodeStore,\n-                             IndexingUpdateService updateService,\n-                             PropertyPhysicalToLogicalConverter converter )\n-    {\n-        this.nodeStore = nodeStore;\n-        this.updateService = updateService;\n-        this.converter = converter;\n-    }\n+  private final NodeStore nodeStore;\n+  private final IndexingUpdateService updateService;\n+  private final PropertyPhysicalToLogicalConverter converter;\n+  private final Collection<IndexEntryUpdate<SchemaDescriptor>> updates = new ArrayList<>();\n+  private NodeRecord nodeRecord;\n \n-    @Override\n-    public Iterator<IndexEntryUpdate<SchemaDescriptor>> iterator()\n-    {\n-        return updates.iterator();\n-    }\n+  public OnlineIndexUpdates(NodeStore nodeStore,\n+                            IndexingUpdateService updateService,\n+                            PropertyPhysicalToLogicalConverter converter)\n+  {\n+    this.nodeStore = nodeStore;\n+    this.updateService = updateService;\n+    this.converter = converter;\n+  }\n \n-    @Override\n-    public void feed( PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommands,\n-            PrimitiveLongObjectMap<NodeCommand> nodeCommands )\n+  @Override\n+  public Iterator<IndexEntryUpdate<SchemaDescriptor>> iterator()\n+  {\n+    return updates.iterator();\n+  }\n+\n+  @Override\n+  public void feed(PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommands,\n+                   PrimitiveLongObjectMap<NodeCommand> nodeCommands)\n+  {\n+    PrimitiveLongIterator nodeIds = allKeys(nodeCommands, propertyCommands).iterator();\n+    while (nodeIds.hasNext())\n     {\n-        PrimitiveLongIterator nodeIds = allKeys( nodeCommands, propertyCommands ).iterator();\n-        while ( nodeIds.hasNext() )\n-        {\n-            long nodeId = nodeIds.next();\n-            gatherUpdatesFor( nodeId, nodeCommands.get( nodeId ), propertyCommands.get( nodeId ) );\n-        }\n+      long nodeId = nodeIds.next();\n+      gatherUpdatesFor(nodeId, nodeCommands.get(nodeId), propertyCommands.get(nodeId));\n     }\n+  }\n \n-    private PrimitiveLongSet allKeys( PrimitiveLongObjectMap... maps )\n+  private PrimitiveLongSet allKeys(PrimitiveLongObjectMap... maps)\n+  {\n+    PrimitiveLongSet union = Primitive.longSet();\n+    for (PrimitiveLongObjectMap map : maps)\n     {\n-        PrimitiveLongSet union = Primitive.longSet();\n-        for ( PrimitiveLongObjectMap map : maps )\n-        {\n-            union.addAll( map.iterator() );\n-        }\n-        return union;\n+      union.addAll(map.iterator());\n     }\n+    return union;\n+  }\n+\n+  @Override\n+  public boolean hasUpdates()\n+  {\n+    return !updates.isEmpty();\n+  }\n+\n+  private void gatherUpdatesFor(long nodeId, NodeCommand nodeCommand, List<PropertyCommand> propertyCommands)\n+  {\n+    NodeUpdates.Builder nodePropertyUpdate =\n+        gatherUpdatesFromCommandsForNode(nodeId, nodeCommand, propertyCommands);\n \n-    @Override\n-    public boolean hasUpdates()\n+    NodeUpdates nodeUpdates = nodePropertyUpdate.build();\n+    // we need to materialize the IndexEntryUpdates here, because when we\n+    // consume (later in separate thread) the store might have changed.\n+    for (IndexEntryUpdate<SchemaDescriptor> update : updateService.convertToIndexUpdates(nodeUpdates))\n     {\n-        return !updates.isEmpty();\n+      updates.add(update);\n     }\n+  }\n \n-    private void gatherUpdatesFor( long nodeId, NodeCommand nodeCommand, List<PropertyCommand> propertyCommands )\n+  private NodeUpdates.Builder gatherUpdatesFromCommandsForNode(long nodeId,\n+                                                               NodeCommand nodeChanges,\n+                                                               List<PropertyCommand> propertyCommandsForNode)\n+  {\n+    long[] nodeLabelsBefore;\n+    long[] nodeLabelsAfter;\n+    if (nodeChanges != null)\n     {\n-        NodeUpdates.Builder nodePropertyUpdate =\n-                gatherUpdatesFromCommandsForNode( nodeId, nodeCommand, propertyCommands );\n-\n-        NodeUpdates nodeUpdates = nodePropertyUpdate.build();\n-        // we need to materialize the IndexEntryUpdates here, because when we\n-        // consume (later in separate thread) the store might have changed.\n-        for ( IndexEntryUpdate<SchemaDescriptor> update :  updateService.convertToIndexUpdates( nodeUpdates ) )\n-        {\n-            updates.add( update );\n-        }\n+      nodeLabelsBefore = parseLabelsField(nodeChanges.getBefore()).get(nodeStore);\n+      nodeLabelsAfter = parseLabelsField(nodeChanges.getAfter()).get(nodeStore);\n+    } else\n+    {\n+      /* If the node doesn't exist here then we've most likely encountered this scenario:\n+       * - TX1: Node N exists and has property record P\n+       * - rotate log\n+       * - TX2: P gets changed\n+       * - TX3: N gets deleted (also P, but that's irrelevant for this scenario)\n+       * - N is persisted to disk for some reason\n+       * - crash\n+       * - recover\n+       * - TX2: P has changed and updates to indexes are gathered. As part of that it tries to read\n+       *        the labels of N (which does not exist a.t.m.).\n+       *\n+       * We can actually (if we disregard any potential inconsistencies) just assume that\n+       * if this happens and we're in recovery mode that the node in question will be deleted\n+       * in an upcoming transaction, so just skip this update.\n+       */\n+      NodeRecord nodeRecord = loadNode(nodeId);\n+      nodeLabelsBefore = nodeLabelsAfter = parseLabelsField(nodeRecord).get(nodeStore);\n     }\n \n-    private NodeUpdates.Builder gatherUpdatesFromCommandsForNode( long nodeId,\n-            NodeCommand nodeChanges,\n-            List<PropertyCommand> propertyCommandsForNode )\n+    // First get possible Label changes\n+    NodeUpdates.Builder nodePropertyUpdates =\n+        NodeUpdates.forNode(nodeId, nodeLabelsBefore, nodeLabelsAfter);\n+\n+    // Then look for property changes\n+    if (propertyCommandsForNode != null)\n     {\n-        long[] nodeLabelsBefore;\n-        long[] nodeLabelsAfter;\n-        if ( nodeChanges != null )\n-        {\n-            nodeLabelsBefore = parseLabelsField( nodeChanges.getBefore() ).get( nodeStore );\n-            nodeLabelsAfter = parseLabelsField( nodeChanges.getAfter() ).get( nodeStore );\n-        }\n-        else\n-        {\n-            /* If the node doesn't exist here then we've most likely encountered this scenario:\n-             * - TX1: Node N exists and has property record P\n-             * - rotate log\n-             * - TX2: P gets changed\n-             * - TX3: N gets deleted (also P, but that's irrelevant for this scenario)\n-             * - N is persisted to disk for some reason\n-             * - crash\n-             * - recover\n-             * - TX2: P has changed and updates to indexes are gathered. As part of that it tries to read\n-             *        the labels of N (which does not exist a.t.m.).\n-             *\n-             * We can actually (if we disregard any potential inconsistencies) just assume that\n-             * if this happens and we're in recovery mode that the node in question will be deleted\n-             * in an upcoming transaction, so just skip this update.\n-             */\n-            NodeRecord nodeRecord = loadNode( nodeId );\n-            nodeLabelsBefore = nodeLabelsAfter = parseLabelsField( nodeRecord ).get( nodeStore );\n-        }\n-\n-        // First get possible Label changes\n-        NodeUpdates.Builder nodePropertyUpdates =\n-                NodeUpdates.forNode( nodeId, nodeLabelsBefore, nodeLabelsAfter );\n-\n-        // Then look for property changes\n-        if ( propertyCommandsForNode != null )\n-        {\n-            converter.convertPropertyRecord( nodeId, Iterables.cast( propertyCommandsForNode ), nodePropertyUpdates );\n-        }\n-        return nodePropertyUpdates;\n+      converter.convertPropertyRecord(nodeId, Iterables.cast(propertyCommandsForNode), nodePropertyUpdates);\n     }\n+    return nodePropertyUpdates;\n+  }\n \n-    private NodeRecord loadNode( long nodeId )\n+  private NodeRecord loadNode(long nodeId)\n+  {\n+    if (nodeRecord == null)\n     {\n-        if ( nodeRecord == null )\n-        {\n-            nodeRecord = nodeStore.newRecord();\n-        }\n-        nodeStore.getRecord( nodeId, nodeRecord, RecordLoad.NORMAL );\n-        return nodeRecord;\n+      nodeRecord = nodeStore.newRecord();\n     }\n+    nodeStore.getRecord(nodeId, nodeRecord, RecordLoad.NORMAL);\n+    return nodeRecord;\n+  }\n }\n",
            "diff_size": 158
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3354/OnlineIndexUpdates.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3354/OnlineIndexUpdates.java\nindex e5a2cd7faf2..b6708aa50e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3354/OnlineIndexUpdates.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3354/OnlineIndexUpdates.java\n@@ -60,10 +60,9 @@ public class OnlineIndexUpdates implements IndexUpdates\n     private final Collection<IndexEntryUpdate<SchemaDescriptor>> updates = new ArrayList<>();\n     private NodeRecord nodeRecord;\n \n-    public OnlineIndexUpdates( NodeStore nodeStore,\n-                             IndexingUpdateService updateService,\n+    public OnlineIndexUpdates( NodeStore nodeStore, IndexingUpdateService updateService,\n                              PropertyPhysicalToLogicalConverter converter )\n-    {\n+{\n         this.nodeStore = nodeStore;\n         this.updateService = updateService;\n         this.converter = converter;\n@@ -76,8 +75,7 @@ public class OnlineIndexUpdates implements IndexUpdates\n     }\n \n     @Override\n-    public void feed( PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommands,\n-            PrimitiveLongObjectMap<NodeCommand> nodeCommands )\n+    public void feed( PrimitiveLongObjectMap<List<PropertyCommand>> propertyCommands, PrimitiveLongObjectMap<NodeCommand> nodeCommands )\n     {\n         PrimitiveLongIterator nodeIds = allKeys( nodeCommands, propertyCommands ).iterator();\n         while ( nodeIds.hasNext() )\n@@ -94,7 +92,8 @@ public class OnlineIndexUpdates implements IndexUpdates\n         {\n             union.addAll( map.iterator() );\n         }\n-        return union;\n+\n+return union;\n     }\n \n     @Override\n@@ -105,21 +104,18 @@ public class OnlineIndexUpdates implements IndexUpdates\n \n     private void gatherUpdatesFor( long nodeId, NodeCommand nodeCommand, List<PropertyCommand> propertyCommands )\n     {\n-        NodeUpdates.Builder nodePropertyUpdate =\n-                gatherUpdatesFromCommandsForNode( nodeId, nodeCommand, propertyCommands );\n-\n-        NodeUpdates nodeUpdates = nodePropertyUpdate.build();\n+        NodeUpdates.Builder nodePropertyUpdate = gatherUpdatesFromCommandsForNode( nodeId, nodeCommand, propertyCommands );\n+NodeUpdates nodeUpdates = nodePropertyUpdate.build();\n         // we need to materialize the IndexEntryUpdates here, because when we\n         // consume (later in separate thread) the store might have changed.\n-        for ( IndexEntryUpdate<SchemaDescriptor> update :  updateService.convertToIndexUpdates( nodeUpdates ) )\n+        for ( IndexEntryUpdate<SchemaDescriptor> update : updateService.convertToIndexUpdates( nodeUpdates ) )\n         {\n             updates.add( update );\n         }\n     }\n \n     private NodeUpdates.Builder gatherUpdatesFromCommandsForNode( long nodeId,\n-            NodeCommand nodeChanges,\n-            List<PropertyCommand> propertyCommandsForNode )\n+            NodeCommand nodeChanges, List<PropertyCommand> propertyCommandsForNode )\n     {\n         long[] nodeLabelsBefore;\n         long[] nodeLabelsAfter;\n@@ -150,15 +146,14 @@ public class OnlineIndexUpdates implements IndexUpdates\n         }\n \n         // First get possible Label changes\n-        NodeUpdates.Builder nodePropertyUpdates =\n-                NodeUpdates.forNode( nodeId, nodeLabelsBefore, nodeLabelsAfter );\n-\n-        // Then look for property changes\n+        NodeUpdates.Builder nodePropertyUpdates = NodeUpdates.forNode( nodeId, nodeLabelsBefore, nodeLabelsAfter );\n+    // Then look for property changes\n         if ( propertyCommandsForNode != null )\n         {\n             converter.convertPropertyRecord( nodeId, Iterables.cast( propertyCommandsForNode ), nodePropertyUpdates );\n         }\n-        return nodePropertyUpdates;\n+\n+return nodePropertyUpdates;\n     }\n \n     private NodeRecord loadNode( long nodeId )\n@@ -170,4 +165,4 @@ public class OnlineIndexUpdates implements IndexUpdates\n         nodeStore.getRecord( nodeId, nodeRecord, RecordLoad.NORMAL );\n         return nodeRecord;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}