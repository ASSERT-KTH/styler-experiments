{
    "project_name": "griddynamics-jagger",
    "violation_id": "105",
    "information": {
        "violations": [
            {
                "line": "20",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage com.griddynamics.jagger.monitoring;\n\nimport com.griddynamics.jagger.coordinator.Coordinator;\nimport com.griddynamics.jagger.coordinator.NodeContext;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/griddynamics-jagger/styler/05_predictions/final/files-repaired/105/MonitoringTaskDistributor.java\nindex d569dfd9c14..03b2f8a2525 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/griddynamics-jagger/styler/05_predictions/final/files-repaired/105/MonitoringTaskDistributor.java\n@@ -17,6 +17,7 @@\n  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.griddynamics.jagger.monitoring;\n \n import com.griddynamics.jagger.coordinator.Coordinator;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/105/MonitoringTaskDistributor.java\nindex d569dfd9c14..5db83de1129 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/105/MonitoringTaskDistributor.java\n@@ -17,6 +17,7 @@\n  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.griddynamics.jagger.monitoring;\n \n import com.griddynamics.jagger.coordinator.Coordinator;\n@@ -64,7 +65,7 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n         return new AbstractExecutionThreadService() {\n             @Override\n             protected void run() throws Exception {\n-    \n+\n                 MonitoringController monitoringController = null;\n                 try {\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.IN_PROGRESS);\n@@ -83,7 +84,7 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n                         Map<NodeId, MonitoringStatus> status = monitoringController.getStatus();\n \n                         if (terminationStrategy.isTerminationRequired(status)) {\n-                            log.info(\"Going to terminate work {}. According to termination strategy\",task.getTaskName());\n+                            log.info(\"Going to terminate work {}. According to termination strategy\", task.getTaskName());\n                             break;\n                         }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 0, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/105/MonitoringTaskDistributor.java\nindex d569dfd9c14..8a04209fb9f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/105/MonitoringTaskDistributor.java\n@@ -17,6 +17,7 @@\n  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.griddynamics.jagger.monitoring;\n \n import com.griddynamics.jagger.coordinator.Coordinator;\n@@ -58,15 +59,14 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n \n     @Override\n     protected Service performDistribution(final ExecutorService executor, final String sessionId, final String taskId, final MonitoringTask task,\n-                                          final Map<NodeId, RemoteExecutor> remotes, final Multimap<NodeType, NodeId> availableNodes,\n-                                          final Coordinator coordinator, final NodeContext nodeContext) {\n-\n-        return new AbstractExecutionThreadService() {\n+                 final Map<NodeId, RemoteExecutor> remotes, final Multimap<NodeType, NodeId> availableNodes, final Coordinator coordinator, final NodeContext nodeContext) {\n+    return new AbstractExecutionThreadService() {\n             @Override\n             protected void run() throws Exception {\n     \n                 MonitoringController monitoringController = null;\n-                try {\n+\n+try {\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.IN_PROGRESS);\n                     MonitoringTerminationStrategy terminationStrategy = task.getTerminationStrategy().get();\n \n@@ -123,4 +123,4 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n     public long getTtl() {\n         return ttl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "20",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 301).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 16, expected level should be one of the following: 20, 24, 28.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/105/MonitoringTaskDistributor.java\nindex d569dfd9c14..3b892a2533d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/105/MonitoringTaskDistributor.java\n@@ -31,20 +31,19 @@ import com.griddynamics.jagger.master.TaskExecutionStatusProvider;\n import com.griddynamics.jagger.util.TimeUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.google.common.collect.Multimap;\n import com.google.common.collect.Sets;\n import com.google.common.util.concurrent.AbstractExecutionThreadService;\n import com.google.common.util.concurrent.Service;\n-\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ExecutorService;\n \n+\n public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTask> {\n+\n     private static Logger log = LoggerFactory.getLogger(MonitoringTaskDistributor.class);\n     private long ttl;\n-\n     private TaskExecutionStatusProvider taskExecutionStatusProvider;\n \n     @Override\n@@ -57,23 +56,17 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n     }\n \n     @Override\n-    protected Service performDistribution(final ExecutorService executor, final String sessionId, final String taskId, final MonitoringTask task,\n-                                          final Map<NodeId, RemoteExecutor> remotes, final Multimap<NodeType, NodeId> availableNodes,\n-                                          final Coordinator coordinator, final NodeContext nodeContext) {\n-\n+    protected Service performDistribution(final ExecutorService executor, final String sessionId, final String taskId, final MonitoringTask task, final Map<NodeId, RemoteExecutor> remotes, final Multimap<NodeType, NodeId> availableNodes, final Coordinator coordinator, final NodeContext nodeContext) {\n         return new AbstractExecutionThreadService() {\n             @Override\n             protected void run() throws Exception {\n-    \n                 MonitoringController monitoringController = null;\n                 try {\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.IN_PROGRESS);\n-                    MonitoringTerminationStrategy terminationStrategy = task.getTerminationStrategy().get();\n \n-                    monitoringController =\n-                            new MonitoringController(sessionId, task.getParentTaskId(), availableNodes, coordinator, remotes.keySet(), ttl);\n+                    MonitoringTerminationStrategy terminationStrategy = task.getTerminationStrategy().get();\n+                    monitoringController = new MonitoringController(sessionId, task.getParentTaskId(), availableNodes, coordinator, remotes.keySet(), ttl);\n                     monitoringController.startMonitoring();\n-\n                     while (true) {\n                         if (!isRunning()) {\n                             log.info(\"Going to terminate work {}. Requested from outside\", task.getTaskName());\n@@ -81,16 +74,14 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n                         }\n \n                         Map<NodeId, MonitoringStatus> status = monitoringController.getStatus();\n-\n                         if (terminationStrategy.isTerminationRequired(status)) {\n-                            log.info(\"Going to terminate work {}. According to termination strategy\",task.getTaskName());\n+                            log.info(\"Going to terminate work {}. According to termination strategy\", task.getTaskName());\n                             break;\n                         }\n \n                         // todo mairbek: configure\n                         TimeUtils.sleepMillis(500);\n                     }\n-\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.SUCCEEDED);\n                 } catch (Exception e) {\n                     taskExecutionStatusProvider.setStatus(taskId, TaskData.ExecutionStatus.FAILED);\n@@ -106,9 +97,9 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n \n             @Override\n             public String toString() {\n-                return MonitoringTask.class.getName() + \" distributor\";\n+                return MonitoringTask.class.getName() +\n+                \" distributor\";\n             }\n-\n         };\n     }\n \n@@ -123,4 +114,4 @@ public class MonitoringTaskDistributor extends AbstractDistributor<MonitoringTas\n     public long getTtl() {\n         return ttl;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/random/files-repaired/105/MonitoringTaskDistributor.java\nindex d569dfd9c14..03b2f8a2525 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/random/files-repaired/105/MonitoringTaskDistributor.java\n@@ -17,6 +17,7 @@\n  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.griddynamics.jagger.monitoring;\n \n import com.griddynamics.jagger.coordinator.Coordinator;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/105/MonitoringTaskDistributor.java\nindex d569dfd9c14..03b2f8a2525 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/105/MonitoringTaskDistributor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/105/MonitoringTaskDistributor.java\n@@ -17,6 +17,7 @@\n  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.griddynamics.jagger.monitoring;\n \n import com.griddynamics.jagger.coordinator.Coordinator;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}