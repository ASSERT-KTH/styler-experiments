{
    "project_name": "atlanmod-NeoEMF",
    "violation_id": "36",
    "information": {
        "violations": [
            {
                "line": "98",
                "column": "52",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n        BasicNamespace that = BasicNamespace.class.cast(o);\n        return Objects.equals(prefix, that.prefix) &&\n                Objects.equals(uri, that.uri);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/atlanmod-NeoEMF/styler/05_predictions/final/files-repaired/36/BasicNamespace.java\nindex d8ca925d314..c3392ea52a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/atlanmod-NeoEMF/styler/05_predictions/final/files-repaired/36/BasicNamespace.java\n@@ -95,8 +95,7 @@ public class BasicNamespace {\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "98",
                    "column": "52",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/checkstyle_idea/36/BasicNamespace.java\nindex d8ca925d314..d58f2a9f8f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/checkstyle_idea/36/BasicNamespace.java\n@@ -96,7 +96,7 @@ public class BasicNamespace {\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n         return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+            Objects.equals(uri, that.uri);\n     }\n \n     @Override\n@@ -151,14 +151,13 @@ public class BasicNamespace {\n          * namespace is registered with this {@code prefix}.\n          *\n          * @param prefix the prefix of the desired namespace\n-         *\n          * @return a {@code BasicNamespace} identified by the given {@code prefix}, or {@code null} if no namespace is\n          * registered with this {@code prefix}\n          */\n         public BasicNamespace getFromPrefix(@Nullable String prefix) {\n             return Optional.ofNullable(prefix)\n-                    .map(namespacesByPrefix::get)\n-                    .orElse(null);\n+                .map(namespacesByPrefix::get)\n+                .orElse(null);\n         }\n \n         /**\n@@ -166,14 +165,13 @@ public class BasicNamespace {\n          * namespace is registered with this {@code uri}.\n          *\n          * @param uri the URI of the desired namespace\n-         *\n          * @return a {@code BasicNamespace} identified by the given {@code uri}, or {@code null} if no namespace is\n          * registered with this {@code uri}.\n          */\n         public BasicNamespace getFromUri(@Nullable String uri) {\n             return Optional.ofNullable(uri)\n-                    .map(v -> namespacesByUri.get(uri))\n-                    .orElse(null);\n+                .map(v -> namespacesByUri.get(uri))\n+                .orElse(null);\n         }\n \n         /**\n@@ -181,7 +179,6 @@ public class BasicNamespace {\n          *\n          * @param prefix the prefix of the new namespace\n          * @param uri    the URI associated with the prefix\n-         *\n          * @return the new {@link BasicNamespace}\n          */\n         public BasicNamespace register(String prefix, String uri) {\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/naturalize/36/BasicNamespace.java\nindex d8ca925d314..af8c7ffae9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/naturalize/36/BasicNamespace.java\n@@ -95,8 +95,7 @@ public class BasicNamespace {\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n@@ -218,4 +217,4 @@ public class BasicNamespace {\n             private static final Registry INSTANCE = new Registry();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "98",
                    "column": "52",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/random/files-repaired/36/BasicNamespace.java\nindex d8ca925d314..a7710bb52c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/random/files-repaired/36/BasicNamespace.java\n@@ -96,7 +96,7 @@ public class BasicNamespace {\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n         return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+            Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/three_grams/files-repaired/36/BasicNamespace.java\nindex d8ca925d314..c3392ea52a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/three_grams/files-repaired/36/BasicNamespace.java\n@@ -95,8 +95,7 @@ public class BasicNamespace {\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "codebuff",
        "styler_random"
    ]
}