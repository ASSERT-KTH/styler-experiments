{
    "project_name": "wso2-attic-commons",
    "violation_id": "547",
    "information": {
        "violations": [
            {
                "line": "96",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            Map<String, StreamDefinition> streamDefinitionMap,\n            List<QueryEventStream> queryEventStreams) {\n        List<QueryEventStream> queryEventStreamList = leftStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreams);\n        return rightStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreamList);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/547/JoinStream.java\nindex b26f8c316df..2dec7a984fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/547/JoinStream.java\n@@ -93,7 +93,8 @@ public class JoinStream implements Stream {\n     public List<QueryEventStream> constructQueryEventStreamList(\n             Map<String, StreamDefinition> streamDefinitionMap,\n             List<QueryEventStream> queryEventStreams) {\n-        List<QueryEventStream> queryEventStreamList = leftStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreams);\n+        List<QueryEventStream> queryEventStreamList = leftStream.constructQueryEventStreamList\n+                (streamDefinitionMap, queryEventStreams);\n         return rightStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreamList);\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/547/JoinStream.java\nindex b26f8c316df..e633b041c3e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/547/JoinStream.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.query.api.query.input;\n \n import org.wso2.siddhi.query.api.condition.Condition;\n@@ -28,75 +29,77 @@ import java.util.Map;\n \n public class JoinStream implements Stream {\n \n-    private Stream leftStream;\n-    private Type type;\n-    private Stream rightStream;\n-    private Condition onCompare;\n-    private EventTrigger trigger;\n-    private Constant within;\n+  private Stream leftStream;\n+  private Type type;\n+  private Stream rightStream;\n+  private Condition onCompare;\n+  private EventTrigger trigger;\n+  private Constant within;\n \n-    public enum EventTrigger {\n-        LEFT,RIGHT,ALL\n-    }\n-    public JoinStream(Stream leftStream, Type type,\n-                      Stream rightStream, Condition onCompare, Constant within,\n-                      EventTrigger trigger) {\n-        this.leftStream = leftStream;\n-        this.type = type;\n-        this.rightStream = rightStream;\n-        this.onCompare = onCompare;\n-        this.within= within;\n-        this.trigger = trigger;\n-    }\n+  public enum EventTrigger {\n+    LEFT, RIGHT, ALL\n+  }\n \n-    public Stream getLeftStream() {\n-        return leftStream;\n-    }\n+  public JoinStream(Stream leftStream, Type type,\n+                    Stream rightStream, Condition onCompare, Constant within,\n+                    EventTrigger trigger) {\n+    this.leftStream = leftStream;\n+    this.type = type;\n+    this.rightStream = rightStream;\n+    this.onCompare = onCompare;\n+    this.within = within;\n+    this.trigger = trigger;\n+  }\n \n-    public Type getType() {\n-        return type;\n-    }\n+  public Stream getLeftStream() {\n+    return leftStream;\n+  }\n \n-    public Stream getRightStream() {\n-        return rightStream;\n-    }\n+  public Type getType() {\n+    return type;\n+  }\n \n-    public Condition getOnCompare() {\n-        return onCompare;\n-    }\n+  public Stream getRightStream() {\n+    return rightStream;\n+  }\n \n-    public EventTrigger getTrigger() {\n-        return trigger;\n-    }\n+  public Condition getOnCompare() {\n+    return onCompare;\n+  }\n \n-    public Constant getWithin() {\n-        return within;\n-    }\n+  public EventTrigger getTrigger() {\n+    return trigger;\n+  }\n \n-    @Override\n-    public List<String> getStreamIds() {\n-        List<String> list = new ArrayList<String>();\n-        for (String streamId : leftStream.getStreamIds()) {\n-            if (!list.contains(streamId)) {\n-                list.add(streamId);\n-            }\n-        }\n-        for (String streamId : rightStream.getStreamIds()) {\n-            if (!list.contains(streamId)) {\n-                list.add(streamId);\n-            }\n-        }\n-        return list;\n-    }\n+  public Constant getWithin() {\n+    return within;\n+  }\n \n-    @Override\n-    public List<QueryEventStream> constructQueryEventStreamList(\n-            Map<String, StreamDefinition> streamDefinitionMap,\n-            List<QueryEventStream> queryEventStreams) {\n-        List<QueryEventStream> queryEventStreamList = leftStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreams);\n-        return rightStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreamList);\n+  @Override\n+  public List<String> getStreamIds() {\n+    List<String> list = new ArrayList<String>();\n+    for (String streamId : leftStream.getStreamIds()) {\n+      if (!list.contains(streamId)) {\n+        list.add(streamId);\n+      }\n+    }\n+    for (String streamId : rightStream.getStreamIds()) {\n+      if (!list.contains(streamId)) {\n+        list.add(streamId);\n+      }\n     }\n+    return list;\n+  }\n+\n+  @Override\n+  public List<QueryEventStream> constructQueryEventStreamList(\n+    Map<String, StreamDefinition> streamDefinitionMap,\n+    List<QueryEventStream> queryEventStreams) {\n+    List<QueryEventStream> queryEventStreamList =\n+      leftStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreams);\n+    return rightStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreamList);\n+  }\n \n \n-    public enum Type {JOIN, INNER_JOIN, LEFT_OUTER_JOIN, RIGHT_OUTER_JOIN, FULL_OUTER_JOIN}\n+  public enum Type {JOIN, INNER_JOIN, LEFT_OUTER_JOIN, RIGHT_OUTER_JOIN, FULL_OUTER_JOIN}\n }\n",
            "diff_size": 100
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/547/JoinStream.java\nindex b26f8c316df..07fea678204 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/547/JoinStream.java\n@@ -36,16 +36,15 @@ public class JoinStream implements Stream {\n     private Constant within;\n \n     public enum EventTrigger {\n-        LEFT,RIGHT,ALL\n+        LEFT,RIGHT, ALL\n     }\n-    public JoinStream(Stream leftStream, Type type,\n-                      Stream rightStream, Condition onCompare, Constant within,\n+    public JoinStream(Stream leftStream, Type type, Stream rightStream, Condition onCompare, Constant within,\n                       EventTrigger trigger) {\n-        this.leftStream = leftStream;\n+    this.leftStream = leftStream;\n         this.type = type;\n         this.rightStream = rightStream;\n         this.onCompare = onCompare;\n-        this.within= within;\n+        this.within = within;\n         this.trigger = trigger;\n     }\n \n@@ -99,4 +98,4 @@ public class JoinStream implements Stream {\n \n \n     public enum Type {JOIN, INNER_JOIN, LEFT_OUTER_JOIN, RIGHT_OUTER_JOIN, FULL_OUTER_JOIN}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/547/JoinStream.java\nindex b26f8c316df..2dec7a984fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/547/JoinStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/547/JoinStream.java\n@@ -93,7 +93,8 @@ public class JoinStream implements Stream {\n     public List<QueryEventStream> constructQueryEventStreamList(\n             Map<String, StreamDefinition> streamDefinitionMap,\n             List<QueryEventStream> queryEventStreams) {\n-        List<QueryEventStream> queryEventStreamList = leftStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreams);\n+        List<QueryEventStream> queryEventStreamList = leftStream.constructQueryEventStreamList\n+                (streamDefinitionMap, queryEventStreams);\n         return rightStream.constructQueryEventStreamList(streamDefinitionMap, queryEventStreamList);\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}