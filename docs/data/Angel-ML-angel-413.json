{
    "project_name": "Angel-ML-angel",
    "violation_id": "413",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/413/PartGetNodeFeatsResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/413/PartGetNodeFeatsResult.java\nindex e15a70209bd..c811fdddbe5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/413/PartGetNodeFeatsResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/413/PartGetNodeFeatsResult.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.getnodefeats2;\n \n import com.tencent.angel.graph.data.NodeUtils;\n@@ -23,64 +24,64 @@ import io.netty.buffer.ByteBuf;\n \n public class PartGetNodeFeatsResult extends PartitionGetResult {\n \n-  private int partId;\n-  private IntFloatVector[] feats;\n+    private int partId;\n+    private IntFloatVector[] feats;\n \n-  public PartGetNodeFeatsResult(int partId, IntFloatVector[] feats) {\n-    this.partId = partId;\n-    this.feats = feats;\n-  }\n+    public PartGetNodeFeatsResult(int partId, IntFloatVector[] feats) {\n+        this.partId = partId;\n+        this.feats = feats;\n+    }\n \n-  public PartGetNodeFeatsResult() {\n-    this(-1, null);\n-  }\n+    public PartGetNodeFeatsResult() {\n+        this(-1, null);\n+    }\n \n-  public int getPartId() {\n-    return partId;\n-  }\n+    public int getPartId() {\n+        return partId;\n+    }\n \n-  public IntFloatVector[] getFeats() {\n-    return feats;\n-  }\n+    public IntFloatVector[] getFeats() {\n+        return feats;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf output) {\n-    output.writeInt(partId);\n-    output.writeInt(feats.length);\n-    for (int i = 0; i < feats.length; i++) {\n-      if (feats[i] == null) {\n-        output.writeBoolean(true);\n-      } else {\n-        output.writeBoolean(false);\n-        NodeUtils.serialize(feats[i], output);\n-      }\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        output.writeInt(partId);\n+        output.writeInt(feats.length);\n+        for (int i = 0; i < feats.length; i++) {\n+            if (feats[i] == null) {\n+                output.writeBoolean(true);\n+            } else {\n+                output.writeBoolean(false);\n+                NodeUtils.serialize(feats[i], output);\n+            }\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    partId = input.readInt();\n-    int len = input.readInt();\n-    feats = new IntFloatVector[len];\n-    for (int i = 0; i < len; i++) {\n-      boolean isNull = input.readBoolean();\n-      if(!isNull) {\n-        feats[i] = NodeUtils.deserialize(input);\n-      }\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        partId = input.readInt();\n+        int len = input.readInt();\n+        feats = new IntFloatVector[len];\n+        for (int i = 0; i < len; i++) {\n+            boolean isNull = input.readBoolean();\n+            if (!isNull) {\n+                feats[i] = NodeUtils.deserialize(input);\n+            }\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = 8;\n-    for (int i = 0; i < feats.length; i++) {\n-      if (feats[i] == null) {\n-        len += 4;\n-      } else {\n-        len += 4;\n-        len += NodeUtils.dataLen(feats[i]) * 4;\n-      }\n+    @Override\n+    public int bufferLen() {\n+        int len = 8;\n+        for (int i = 0; i < feats.length; i++) {\n+            if (feats[i] == null) {\n+                len += 4;\n+            } else {\n+                len += 4;\n+                len += NodeUtils.dataLen(feats[i]) * 4;\n+            }\n+        }\n+        return len;\n     }\n-    return len;\n-  }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/413/PartGetNodeFeatsResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/413/PartGetNodeFeatsResult.java\nindex e15a70209bd..b3af5f3e561 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/413/PartGetNodeFeatsResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/413/PartGetNodeFeatsResult.java\n@@ -83,4 +83,4 @@ public class PartGetNodeFeatsResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/413/PartGetNodeFeatsResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/413/PartGetNodeFeatsResult.java\nindex e15a70209bd..2f1cf1d87b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/413/PartGetNodeFeatsResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/413/PartGetNodeFeatsResult.java\n@@ -60,11 +60,12 @@ public class PartGetNodeFeatsResult extends PartitionGetResult {\n   @Override\n   public void deserialize(ByteBuf input) {\n     partId = input.readInt();\n+\n     int len = input.readInt();\n     feats = new IntFloatVector[len];\n     for (int i = 0; i < len; i++) {\n       boolean isNull = input.readBoolean();\n-      if(!isNull) {\n+      if (!isNull) {\n         feats[i] = NodeUtils.deserialize(input);\n       }\n     }\n@@ -83,4 +84,4 @@ public class PartGetNodeFeatsResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}