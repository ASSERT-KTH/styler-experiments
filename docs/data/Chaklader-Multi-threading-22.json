{
    "project_name": "Chaklader-Multi-threading",
    "violation_id": "22",
    "information": {
        "violations": [
            {
                "line": "51",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        String result = work.toUpperCase();\n\n        logger.info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "49",
                    "column": "43",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Chaklader-Multi-threading/styler/05_predictions/final/files-repaired/22/CustomRecursiveAction.java\nindex 64adb5ca4d7..66f7c4d099d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Chaklader-Multi-threading/styler/05_predictions/final/files-repaired/22/CustomRecursiveAction.java\n@@ -46,8 +46,7 @@ public class CustomRecursiveAction extends RecursiveAction {\n \n     private void processing(String work) {\n \n-        String result = work.toUpperCase();\n-\n-        logger.info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n+        String result = work.toUpperCase();logger\n+        .info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n     }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "50",
                    "column": "74",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/checkstyle_idea/22/CustomRecursiveAction.java\nindex 64adb5ca4d7..7ad13535c3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/checkstyle_idea/22/CustomRecursiveAction.java\n@@ -8,7 +8,6 @@ import java.util.concurrent.RecursiveAction;\n import java.util.logging.Logger;\n \n \n-\n public class CustomRecursiveAction extends RecursiveAction {\n \n \n@@ -48,6 +47,7 @@ public class CustomRecursiveAction extends RecursiveAction {\n \n         String result = work.toUpperCase();\n \n-        logger.info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n+        logger.info(\"This result - (\" + result + \") - was processed by \" +\n+            Thread.currentThread().getName());\n     }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/naturalize/22/CustomRecursiveAction.java\nindex 64adb5ca4d7..d1a7b727084 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/naturalize/22/CustomRecursiveAction.java\n@@ -7,8 +7,6 @@ import java.util.concurrent.ForkJoinTask;\n import java.util.concurrent.RecursiveAction;\n import java.util.logging.Logger;\n \n-\n-\n public class CustomRecursiveAction extends RecursiveAction {\n \n \n@@ -23,8 +21,7 @@ public class CustomRecursiveAction extends RecursiveAction {\n \n     @Override\n     protected void compute() {\n-\n-        if (workLoad.length() > THRESHOLD) {\n+  if (workLoad.length() > THRESHOLD) {\n             ForkJoinTask.invokeAll(createSubtasks());\n         } else {\n             processing(workLoad);\n@@ -50,4 +47,4 @@ public class CustomRecursiveAction extends RecursiveAction {\n \n         logger.info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/codebuff/22/CustomRecursiveAction.java\nindex 64adb5ca4d7..855592dcb80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/codebuff/22/CustomRecursiveAction.java\n@@ -7,13 +7,9 @@ import java.util.concurrent.ForkJoinTask;\n import java.util.concurrent.RecursiveAction;\n import java.util.logging.Logger;\n \n-\n-\n public class CustomRecursiveAction extends RecursiveAction {\n \n-\n     private static Logger logger = Logger.getAnonymousLogger();\n-\n     private String workLoad = \"\";\n     private static final int THRESHOLD = 4;\n \n@@ -23,31 +19,26 @@ public class CustomRecursiveAction extends RecursiveAction {\n \n     @Override\n     protected void compute() {\n-\n-        if (workLoad.length() > THRESHOLD) {\n-            ForkJoinTask.invokeAll(createSubtasks());\n-        } else {\n-            processing(workLoad);\n-        }\n+    if (workLoad.length() > THRESHOLD) {\n+        ForkJoinTask.invokeAll(createSubtasks());\n+    } else {\n+        processing(workLoad);\n+    }\n     }\n \n     private Collection<CustomRecursiveAction> createSubtasks() {\n-\n         List<CustomRecursiveAction> subtasks = new ArrayList<>();\n-\n         String partOne = workLoad.substring(0, workLoad.length() / 2);\n         String partTwo = workLoad.substring(workLoad.length() / 2, workLoad.length());\n \n         subtasks.add(new CustomRecursiveAction(partOne));\n         subtasks.add(new CustomRecursiveAction(partTwo));\n-\n         return subtasks;\n     }\n \n     private void processing(String work) {\n-\n         String result = work.toUpperCase();\n \n         logger.info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "49",
                    "column": "43",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/styler/05_predictions/random/files-repaired/22/CustomRecursiveAction.java\nindex 64adb5ca4d7..66f7c4d099d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/styler/05_predictions/random/files-repaired/22/CustomRecursiveAction.java\n@@ -46,8 +46,7 @@ public class CustomRecursiveAction extends RecursiveAction {\n \n     private void processing(String work) {\n \n-        String result = work.toUpperCase();\n-\n-        logger.info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n+        String result = work.toUpperCase();logger\n+        .info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n     }\n }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/styler/05_predictions/three_grams/files-repaired/22/CustomRecursiveAction.java\nindex 64adb5ca4d7..ec8560db4dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/violations/22/CustomRecursiveAction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Multi-threading/styler/05_predictions/three_grams/files-repaired/22/CustomRecursiveAction.java\n@@ -48,6 +48,8 @@ public class CustomRecursiveAction extends RecursiveAction {\n \n         String result = work.toUpperCase();\n \n-        logger.info(\"This result - (\" + result + \") - was processed by \" + Thread.currentThread().getName());\n-    }\n-}\n+        logger.info(\"This result - (\"+result\n+    +\n+    \") - was processed by \" + Thread.currentThread().getName());\n+      }\n+  }\n",
            "diff_size": 5
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}