{
    "project_name": "ctripcorp-apollo",
    "violation_id": "85",
    "information": {
        "violations": [
            {
                "line": "60",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 105).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        .getMessage(\"LdapAuthenticationProvider.onlySupports\",\n            \"Only UsernamePasswordAuthenticationToken is supported\"));\n    UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n    String username = userToken.getName();\n    String password = (String) authentication.getCredentials();\n    if (this.logger.isDebugEnabled()) {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/ctripcorp-apollo/styler/05_predictions/final/files-repaired/85/ApolloLdapAuthenticationProvider.java\nindex e3d27a997b3..9040bb0da12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/ctripcorp-apollo/styler/05_predictions/final/files-repaired/85/ApolloLdapAuthenticationProvider.java\n@@ -57,7 +57,7 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n     Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages\n         .getMessage(\"LdapAuthenticationProvider.onlySupports\",\n             \"Only UsernamePasswordAuthenticationToken is supported\"));\n-    UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n+        UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n     String username = userToken.getName();\n     String password = (String) authentication.getCredentials();\n     if (this.logger.isDebugEnabled()) {\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/checkstyle_idea/85/ApolloLdapAuthenticationProvider.java\nindex e3d27a997b3..8ae6a4c9db4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/checkstyle_idea/85/ApolloLdapAuthenticationProvider.java\n@@ -57,7 +57,8 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n     Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages\n         .getMessage(\"LdapAuthenticationProvider.onlySupports\",\n             \"Only UsernamePasswordAuthenticationToken is supported\"));\n-    UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n+    UsernamePasswordAuthenticationToken userToken =\n+        (UsernamePasswordAuthenticationToken) authentication;\n     String username = userToken.getName();\n     String password = (String) authentication.getCredentials();\n     if (this.logger.isDebugEnabled()) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/naturalize/85/ApolloLdapAuthenticationProvider.java\nindex e3d27a997b3..bf89ab186fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/naturalize/85/ApolloLdapAuthenticationProvider.java\n@@ -1,5 +1,3 @@\n-\n-\n package com.ctrip.framework.apollo.portal.spi.ldap;\n \n import com.ctrip.framework.apollo.portal.spi.configuration.LdapExtendProperties;\n@@ -26,27 +24,23 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n \n   private LdapExtendProperties properties;\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator,\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator,\n       LdapAuthoritiesPopulator authoritiesPopulator) {\n     super(authenticator, authoritiesPopulator);\n   }\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator) {\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator) {\n     super(authenticator);\n   }\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator,\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator,\n       LdapAuthoritiesPopulator authoritiesPopulator,\n       LdapExtendProperties properties) {\n     super(authenticator, authoritiesPopulator);\n     this.properties = properties;\n   }\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator,\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator,\n       LdapExtendProperties properties) {\n     super(authenticator);\n     this.properties = properties;\n@@ -54,10 +48,9 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n \n   @Override\n   public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n-    Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages\n-        .getMessage(\"LdapAuthenticationProvider.onlySupports\",\n+    Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages.getMessage(\"LdapAuthenticationProvider.onlySupports\",\n             \"Only UsernamePasswordAuthenticationToken is supported\"));\n-    UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n+UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n     String username = userToken.getName();\n     String password = (String) authentication.getCredentials();\n     if (this.logger.isDebugEnabled()) {\n@@ -65,12 +58,10 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n     }\n \n     if (!StringUtils.hasLength(username)) {\n-      throw new BadCredentialsException(\n-          this.messages.getMessage(\"LdapAuthenticationProvider.emptyUsername\", \"Empty Username\"));\n+      throw new BadCredentialsException(this.messages.getMessage(\"LdapAuthenticationProvider.emptyUsername\", \"Empty Username\"));\n     }\n     if (!StringUtils.hasLength(password)) {\n-      throw new BadCredentialsException(this.messages\n-          .getMessage(\"AbstractLdapAuthenticationProvider.emptyPassword\", \"Empty Password\"));\n+      throw new BadCredentialsException(this.messages.getMessage(\"AbstractLdapAuthenticationProvider.emptyPassword\", \"Empty Password\"));\n     }\n     Assert.notNull(password, \"Null password was supplied in authentication token\");\n     DirContextOperations userData = this.doAuthentication(userToken);\n@@ -79,4 +70,4 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n         this.loadUserAuthorities(userData, loginId, (String) authentication.getCredentials()));\n     return this.createSuccessfulAuthentication(userToken, user);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/codebuff/85/ApolloLdapAuthenticationProvider.java\nindex e3d27a997b3..2546bf28beb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/codebuff/85/ApolloLdapAuthenticationProvider.java\n@@ -22,41 +22,33 @@ import org.springframework.util.StringUtils;\n  *\n  * @author wuzishu\n  */\n-public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider {\n \n+\n+public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider {\n   private LdapExtendProperties properties;\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator,\n-      LdapAuthoritiesPopulator authoritiesPopulator) {\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator, LdapAuthoritiesPopulator authoritiesPopulator) {\n     super(authenticator, authoritiesPopulator);\n   }\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator) {\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator) {\n     super(authenticator);\n   }\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator,\n-      LdapAuthoritiesPopulator authoritiesPopulator,\n-      LdapExtendProperties properties) {\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator,\n+                                          LdapAuthoritiesPopulator authoritiesPopulator, LdapExtendProperties properties) {\n     super(authenticator, authoritiesPopulator);\n     this.properties = properties;\n   }\n \n-  public ApolloLdapAuthenticationProvider(\n-      LdapAuthenticator authenticator,\n-      LdapExtendProperties properties) {\n+  public ApolloLdapAuthenticationProvider(LdapAuthenticator authenticator, LdapExtendProperties properties) {\n     super(authenticator);\n     this.properties = properties;\n   }\n \n   @Override\n   public Authentication authenticate(Authentication authentication) throws AuthenticationException {\n-    Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages\n-        .getMessage(\"LdapAuthenticationProvider.onlySupports\",\n-            \"Only UsernamePasswordAuthenticationToken is supported\"));\n+    Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages.getMessage(\"LdapAuthenticationProvider.onlySupports\", \"Only UsernamePasswordAuthenticationToken is supported\"));\n     UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n     String username = userToken.getName();\n     String password = (String) authentication.getCredentials();\n@@ -65,18 +57,16 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n     }\n \n     if (!StringUtils.hasLength(username)) {\n-      throw new BadCredentialsException(\n-          this.messages.getMessage(\"LdapAuthenticationProvider.emptyUsername\", \"Empty Username\"));\n+      throw new BadCredentialsException(this.messages.getMessage(\"LdapAuthenticationProvider.emptyUsername\", \"Empty Username\"));\n     }\n+\n     if (!StringUtils.hasLength(password)) {\n-      throw new BadCredentialsException(this.messages\n-          .getMessage(\"AbstractLdapAuthenticationProvider.emptyPassword\", \"Empty Password\"));\n+      throw new BadCredentialsException(this.messages.getMessage(\"AbstractLdapAuthenticationProvider.emptyPassword\", \"Empty Password\"));\n     }\n     Assert.notNull(password, \"Null password was supplied in authentication token\");\n     DirContextOperations userData = this.doAuthentication(userToken);\n     String loginId = userData.getStringAttribute(properties.getMapping().getLoginId());\n-    UserDetails user = this.userDetailsContextMapper.mapUserFromContext(userData, loginId,\n-        this.loadUserAuthorities(userData, loginId, (String) authentication.getCredentials()));\n+    UserDetails user = this.userDetailsContextMapper.mapUserFromContext(userData, loginId, this.loadUserAuthorities(userData, loginId, (String) authentication.getCredentials()));\n     return this.createSuccessfulAuthentication(userToken, user);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 12, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "column": "151",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/styler/05_predictions/random/files-repaired/85/ApolloLdapAuthenticationProvider.java\nindex e3d27a997b3..64d8f2ed989 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/styler/05_predictions/random/files-repaired/85/ApolloLdapAuthenticationProvider.java\n@@ -57,8 +57,7 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n     Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages\n         .getMessage(\"LdapAuthenticationProvider.onlySupports\",\n             \"Only UsernamePasswordAuthenticationToken is supported\"));\n-    UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n-    String username = userToken.getName();\n+            UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken)authentication ;String username = userToken.getName();\n     String password = (String) authentication.getCredentials();\n     if (this.logger.isDebugEnabled()) {\n       this.logger.debug(\"Processing authentication request for user: \" + username);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/styler/05_predictions/three_grams/files-repaired/85/ApolloLdapAuthenticationProvider.java\nindex e3d27a997b3..9040bb0da12 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/violations/85/ApolloLdapAuthenticationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ctripcorp-apollo/styler/05_predictions/three_grams/files-repaired/85/ApolloLdapAuthenticationProvider.java\n@@ -57,7 +57,7 @@ public class ApolloLdapAuthenticationProvider extends LdapAuthenticationProvider\n     Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication, this.messages\n         .getMessage(\"LdapAuthenticationProvider.onlySupports\",\n             \"Only UsernamePasswordAuthenticationToken is supported\"));\n-    UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n+        UsernamePasswordAuthenticationToken userToken = (UsernamePasswordAuthenticationToken) authentication;\n     String username = userToken.getName();\n     String password = (String) authentication.getCredentials();\n     if (this.logger.isDebugEnabled()) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}