{
    "project_name": "Angel-ML-angel",
    "violation_id": "768",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/768/SnapshotDumper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/768/SnapshotDumper.java\nindex 6196e46be74..f7d0650832f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/768/SnapshotDumper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/768/SnapshotDumper.java\n@@ -43,215 +43,218 @@ import org.apache.hadoop.fs.Path;\n  */\n public class SnapshotDumper {\n \n-  private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n-  /**\n-   * PS context\n-   */\n-  private final PSContext context;\n+    private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n+    /**\n+     * PS context\n+     */\n+    private final PSContext context;\n \n-  /**\n-   * Dump interval in milliseconds\n-   */\n-  private final int backupIntervalMs;\n+    /**\n+     * Dump interval in milliseconds\n+     */\n+    private final int backupIntervalMs;\n \n-  /**\n-   * Dump dispatcher\n-   */\n-  private volatile Thread dumpDispatcher;\n-  private final AtomicBoolean stopped;\n+    /**\n+     * Dump dispatcher\n+     */\n+    private volatile Thread dumpDispatcher;\n+    private final AtomicBoolean stopped;\n \n-  /**\n-   * Application tmp output path\n-   */\n-  private final String outputDir;\n+    /**\n+     * Application tmp output path\n+     */\n+    private final String outputDir;\n \n-  /**\n-   * Need dump matrices\n-   */\n-  private final String[] needDumpMatrices;\n+    /**\n+     * Need dump matrices\n+     */\n+    private final String[] needDumpMatrices;\n \n-  /**\n-   * Snapshot base directory path\n-   */\n-  private final Path baseDirPath;\n+    /**\n+     * Snapshot base directory path\n+     */\n+    private final Path baseDirPath;\n \n-  /**\n-   * Last dump iteration number\n-   */\n-  private int lastIteration;\n+    /**\n+     * Last dump iteration number\n+     */\n+    private int lastIteration;\n \n-  /**\n-   * Application running mode\n-   */\n-  private final RunningMode mode;\n+    /**\n+     * Application running mode\n+     */\n+    private final RunningMode mode;\n \n-  private final int dumpParallel;\n+    private final int dumpParallel;\n \n-  /**\n-   * Create a SnapshotDumper\n-   *\n-   * @param context PS context\n-   */\n-  public SnapshotDumper(PSContext context) {\n-    this.context = context;\n-    stopped = new AtomicBoolean(false);\n-    lastIteration = 0;\n-    mode = context.getRunningMode();\n+    /**\n+     * Create a SnapshotDumper\n+     *\n+     * @param context PS context\n+     */\n+    public SnapshotDumper(PSContext context) {\n+        this.context = context;\n+        stopped = new AtomicBoolean(false);\n+        lastIteration = 0;\n+        mode = context.getRunningMode();\n \n-    backupIntervalMs = context.getConf()\n-        .getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n-            AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n+        backupIntervalMs = context.getConf()\n+                .getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n+                        AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n \n-    dumpParallel = context.getConf()\n-        .getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL, AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n+        dumpParallel = context.getConf()\n+                .getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL,\n+                        AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n \n-    outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n-    baseDirPath = new Path(\n-        outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR + context\n-            .getPSAttemptId().getPsId() + Path.SEPARATOR + context.getPSAttemptId().getIndex());\n+        outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n+        baseDirPath = new Path(\n+                outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR +\n+                        context\n+                                .getPSAttemptId().getPsId() + Path.SEPARATOR +\n+                        context.getPSAttemptId().getIndex());\n \n-    String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n-    if (matricesStr == null) {\n-      needDumpMatrices = null;\n-    } else {\n-      needDumpMatrices = matricesStr.split(\",\");\n+        String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n+        if (matricesStr == null) {\n+            needDumpMatrices = null;\n+        } else {\n+            needDumpMatrices = matricesStr.split(\",\");\n+        }\n     }\n-  }\n \n-  /**\n-   * Init\n-   */\n-  public void init() {\n-  }\n+    /**\n+     * Init\n+     */\n+    public void init() {\n+    }\n \n-  /**\n-   * Start dump dispatcher\n-   */\n-  public void start() {\n-    LOG.info(\"Start snapshot dumper\");\n-    dumpDispatcher = new Thread(() -> {\n-      while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n-        try {\n-          Thread.sleep(backupIntervalMs);\n-          try {\n-            LOG.info(\"to writeSnapshots\");\n-            while (context.getRunningContext().getState() == ServerState.BUSY) {\n-              Thread.sleep(5000);\n+    /**\n+     * Start dump dispatcher\n+     */\n+    public void start() {\n+        LOG.info(\"Start snapshot dumper\");\n+        dumpDispatcher = new Thread(() -> {\n+            while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n+                try {\n+                    Thread.sleep(backupIntervalMs);\n+                    try {\n+                        LOG.info(\"to writeSnapshots\");\n+                        while (context.getRunningContext().getState() == ServerState.BUSY) {\n+                            Thread.sleep(5000);\n+                        }\n+                        writeSnapshots();\n+                    } catch (Exception ioe) {\n+                        LOG.error(\"write snapshots error: \", ioe);\n+                    }\n+                } catch (InterruptedException e) {\n+                    if (!stopped.get()) {\n+                        LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n+                    }\n+                }\n             }\n-            writeSnapshots();\n-          } catch (Exception ioe) {\n-            LOG.error(\"write snapshots error: \", ioe);\n-          }\n-        } catch (InterruptedException e) {\n-          if (!stopped.get()) {\n-            LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n-          }\n+        });\n+        dumpDispatcher.setName(\"snapshot-dump-dispatcher\");\n+        dumpDispatcher.start();\n+    }\n+\n+    /**\n+     * Write snapshot\n+     */\n+    private void writeSnapshots() throws Exception {\n+        List<Integer> matrixIds = null;\n+        if (needDumpMatrices == null) {\n+            matrixIds = new ArrayList<>(context.getMatrixMetaManager().getMatrixMetas().keySet());\n+        } else {\n+            matrixIds = toMatrixIds();\n         }\n-      }\n-    });\n-    dumpDispatcher.setName(\"snapshot-dump-dispatcher\");\n-    dumpDispatcher.start();\n-  }\n \n-  /**\n-   * Write snapshot\n-   */\n-  private void writeSnapshots() throws Exception {\n-    List<Integer> matrixIds = null;\n-    if (needDumpMatrices == null) {\n-      matrixIds = new ArrayList<>(context.getMatrixMetaManager().getMatrixMetas().keySet());\n-    } else {\n-      matrixIds = toMatrixIds();\n-    }\n+        if (matrixIds.isEmpty()) {\n+            return;\n+        }\n \n-    if (matrixIds.isEmpty()) {\n-      return;\n-    }\n+        List<Integer> needDumpMatrices = filter(matrixIds);\n+        if (needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n+            FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n+            Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n+            if (fs.exists(tmpPath)) {\n+                fs.delete(tmpPath, true);\n+            }\n+\n+            List<Integer> ids = filter(matrixIds);\n+            if (!ids.isEmpty()) {\n+                int size = ids.size();\n+                List<PSMatrixSaveContext> saveContexts = new ArrayList<>(size);\n+                for (int i = 0; i < size; i++) {\n+                    MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(ids.get(i));\n+                    saveContexts.add(\n+                            new PSMatrixSaveContext(ids.get(i),\n+                                    new ArrayList<>(meta.getPartitionMetas().keySet()),\n+                                    null, SnapshotFormat.class.getName(),\n+                                    new Path(tmpPath, meta.getName()).toString(),\n+                                    true, false));\n+                }\n \n-    List<Integer> needDumpMatrices = filter(matrixIds);\n-    if (needDumpMatrices != null && !needDumpMatrices.isEmpty()) {\n-      FileSystem fs = baseDirPath.getFileSystem(context.getConf());\n-      Path tmpPath = HdfsUtil.toTmpPath(baseDirPath);\n-      if (fs.exists(tmpPath)) {\n-        fs.delete(tmpPath, true);\n-      }\n+                context.getIOExecutors()\n+                        .save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n+                HdfsUtil.rename(tmpPath, baseDirPath, fs);\n+            }\n+        }\n+    }\n \n-      List<Integer> ids = filter(matrixIds);\n-      if (!ids.isEmpty()) {\n-        int size = ids.size();\n-        List<PSMatrixSaveContext> saveContexts = new ArrayList<>(size);\n+    /**\n+     * Get the matrices that need dump\n+     *\n+     * @param matrixIds all matrices\n+     * @return the matrices that need dump\n+     */\n+    private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n+        int size = matrixIds.size();\n+        List<Integer> ret = new ArrayList<>(size);\n         for (int i = 0; i < size; i++) {\n-          MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(ids.get(i));\n-          saveContexts.add(\n-              new PSMatrixSaveContext(ids.get(i),\n-                  new ArrayList<>(meta.getPartitionMetas().keySet()),\n-                  null, SnapshotFormat.class.getName(),\n-                  new Path(tmpPath, meta.getName()).toString(),\n-                  true, false));\n+            if (checkNeedDump(matrixIds.get(i))) {\n+                ret.add(matrixIds.get(i));\n+            }\n         }\n \n-        context.getIOExecutors()\n-            .save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n-        HdfsUtil.rename(tmpPath, baseDirPath, fs);\n-      }\n+        return ret;\n     }\n-  }\n \n-  /**\n-   * Get the matrices that need dump\n-   *\n-   * @param matrixIds all matrices\n-   * @return the matrices that need dump\n-   */\n-  private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n-    int size = matrixIds.size();\n-    List<Integer> ret = new ArrayList<>(size);\n-    for (int i = 0; i < size; i++) {\n-      if (checkNeedDump(matrixIds.get(i))) {\n-        ret.add(matrixIds.get(i));\n-      }\n+    /**\n+     * Is this matrix need dump\n+     *\n+     * @param matrixId matrix id\n+     * @return true mean need dump\n+     */\n+    private boolean checkNeedDump(int matrixId) throws ServiceException {\n+        if (mode == RunningMode.ANGEL_PS) {\n+            return true;\n+        } else {\n+            MasterClient master = context.getMaster();\n+            if (master == null) {\n+                return false;\n+            } else {\n+                int iteration = context.getMaster().getIteration();\n+                return iteration > lastIteration;\n+            }\n+        }\n     }\n \n-    return ret;\n-  }\n-\n-  /**\n-   * Is this matrix need dump\n-   *\n-   * @param matrixId matrix id\n-   * @return true mean need dump\n-   */\n-  private boolean checkNeedDump(int matrixId) throws ServiceException {\n-    if (mode == RunningMode.ANGEL_PS) {\n-      return true;\n-    } else {\n-      MasterClient master = context.getMaster();\n-      if (master == null) {\n-        return false;\n-      } else {\n-        int iteration = context.getMaster().getIteration();\n-        return iteration > lastIteration;\n-      }\n-    }\n-  }\n+    private List<Integer> toMatrixIds() {\n+        List<Integer> matrixIds = new ArrayList<>(needDumpMatrices.length);\n+        for (int i = 0; i < needDumpMatrices.length; i++) {\n+            MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(needDumpMatrices[i]);\n+            if (meta != null) {\n+                matrixIds.add(meta.getId());\n+            }\n+        }\n \n-  private List<Integer> toMatrixIds() {\n-    List<Integer> matrixIds = new ArrayList<>(needDumpMatrices.length);\n-    for (int i = 0; i < needDumpMatrices.length; i++) {\n-      MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(needDumpMatrices[i]);\n-      if (meta != null) {\n-        matrixIds.add(meta.getId());\n-      }\n+        return matrixIds;\n     }\n \n-    return matrixIds;\n-  }\n-\n-  public void stop() {\n-    if (!stopped.getAndSet(true)) {\n-      if (dumpDispatcher != null) {\n-        dumpDispatcher.interrupt();\n-      }\n+    public void stop() {\n+        if (!stopped.getAndSet(true)) {\n+            if (dumpDispatcher != null) {\n+                dumpDispatcher.interrupt();\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 226
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/768/SnapshotDumper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/768/SnapshotDumper.java\nindex 6196e46be74..fed8f4acfc4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/768/SnapshotDumper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/768/SnapshotDumper.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.io.save;\n \n import com.google.protobuf.ServiceException;\n@@ -101,8 +100,7 @@ public class SnapshotDumper {\n     backupIntervalMs = context.getConf()\n         .getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n             AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n-\n-    dumpParallel = context.getConf()\n+dumpParallel = context.getConf()\n         .getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL, AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n \n     outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n@@ -183,11 +181,7 @@ public class SnapshotDumper {\n         for (int i = 0; i < size; i++) {\n           MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(ids.get(i));\n           saveContexts.add(\n-              new PSMatrixSaveContext(ids.get(i),\n-                  new ArrayList<>(meta.getPartitionMetas().keySet()),\n-                  null, SnapshotFormat.class.getName(),\n-                  new Path(tmpPath, meta.getName()).toString(),\n-                  true, false));\n+              new PSMatrixSaveContext(ids.get(i), new ArrayList<>(meta.getPartitionMetas().keySet()), null, SnapshotFormat.class.getName(), new Path(tmpPath, meta.getName()).toString(), true, false));\n         }\n \n         context.getIOExecutors()\n@@ -254,4 +248,4 @@ public class SnapshotDumper {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/768/SnapshotDumper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/768/SnapshotDumper.java\nindex 6196e46be74..54c9998339c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/768/SnapshotDumper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/768/SnapshotDumper.java\n@@ -41,6 +41,7 @@ import org.apache.hadoop.fs.Path;\n /**\n  * Snapshot dumper, it dump the matrices to hdfs once in a while\n  */\n+\n public class SnapshotDumper {\n \n   private static final Log LOG = LogFactory.getLog(SnapshotDumper.class);\n@@ -84,7 +85,6 @@ public class SnapshotDumper {\n    * Application running mode\n    */\n   private final RunningMode mode;\n-\n   private final int dumpParallel;\n \n   /**\n@@ -92,24 +92,16 @@ public class SnapshotDumper {\n    *\n    * @param context PS context\n    */\n+\n   public SnapshotDumper(PSContext context) {\n     this.context = context;\n     stopped = new AtomicBoolean(false);\n     lastIteration = 0;\n     mode = context.getRunningMode();\n-\n-    backupIntervalMs = context.getConf()\n-        .getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS,\n-            AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n-\n-    dumpParallel = context.getConf()\n-        .getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL, AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n-\n+    backupIntervalMs = context.getConf().getInt(AngelConf.ANGEL_PS_BACKUP_INTERVAL_MS, AngelConf.DEFAULT_ANGEL_PS_BACKUP_INTERVAL_MS);\n+    dumpParallel = context.getConf().getInt(AngelConf.ANGEL_PS_BACKUP_PARALLEL, AngelConf.DEFAULT_ANGEL_PS_BACKUP_PARALLEL);\n     outputDir = context.getConf().get(AngelConf.ANGEL_JOB_TMP_OUTPUT_PATH);\n-    baseDirPath = new Path(\n-        outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR + context\n-            .getPSAttemptId().getPsId() + Path.SEPARATOR + context.getPSAttemptId().getIndex());\n-\n+    baseDirPath = new Path(outputDir + Path.SEPARATOR + ModelFilesConstent.snapshotDirName + Path.SEPARATOR + context.getPSAttemptId().getPsId() + Path.SEPARATOR + context.getPSAttemptId().getIndex());\n     String matricesStr = context.getConf().get(AngelConf.ANGEL_PS_BACKUP_MATRICES);\n     if (matricesStr == null) {\n       needDumpMatrices = null;\n@@ -121,34 +113,36 @@ public class SnapshotDumper {\n   /**\n    * Init\n    */\n-  public void init() {\n-  }\n+\n+  public void init() {}\n \n   /**\n    * Start dump dispatcher\n    */\n+\n   public void start() {\n     LOG.info(\"Start snapshot dumper\");\n-    dumpDispatcher = new Thread(() -> {\n-      while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n-        try {\n-          Thread.sleep(backupIntervalMs);\n-          try {\n-            LOG.info(\"to writeSnapshots\");\n-            while (context.getRunningContext().getState() == ServerState.BUSY) {\n-              Thread.sleep(5000);\n-            }\n-            writeSnapshots();\n-          } catch (Exception ioe) {\n-            LOG.error(\"write snapshots error: \", ioe);\n-          }\n-        } catch (InterruptedException e) {\n-          if (!stopped.get()) {\n-            LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n-          }\n-        }\n-      }\n-    });\n+    dumpDispatcher = new Thread(()-> {\n+                                  while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\n+                                    try {\n+                                      Thread.sleep(backupIntervalMs);\n+                                      try {\n+                                        LOG.info(\"to writeSnapshots\");\n+\n+                                        while (context.getRunningContext().getState() == ServerState.BUSY) {\n+                                          Thread.sleep(5000);\n+                                        }\n+                                        writeSnapshots();\n+                                      } catch (Exception ioe) {\n+                                        LOG.error(\"write snapshots error: \", ioe);\n+                                      }\n+                                    } catch (InterruptedException e) {\n+                                      if (!stopped.get()) {\n+                                        LOG.warn(\"Snapshot dump dispatcher is interrupted. Returning.\");\n+                                      }\n+                                    }\n+                                  }\n+                                });\n     dumpDispatcher.setName(\"snapshot-dump-dispatcher\");\n     dumpDispatcher.start();\n   }\n@@ -156,6 +150,7 @@ public class SnapshotDumper {\n   /**\n    * Write snapshot\n    */\n+\n   private void writeSnapshots() throws Exception {\n     List<Integer> matrixIds = null;\n     if (needDumpMatrices == null) {\n@@ -182,16 +177,9 @@ public class SnapshotDumper {\n         List<PSMatrixSaveContext> saveContexts = new ArrayList<>(size);\n         for (int i = 0; i < size; i++) {\n           MatrixMeta meta = context.getMatrixMetaManager().getMatrixMeta(ids.get(i));\n-          saveContexts.add(\n-              new PSMatrixSaveContext(ids.get(i),\n-                  new ArrayList<>(meta.getPartitionMetas().keySet()),\n-                  null, SnapshotFormat.class.getName(),\n-                  new Path(tmpPath, meta.getName()).toString(),\n-                  true, false));\n+          saveContexts.add(new PSMatrixSaveContext(ids.get(i), new ArrayList<>(meta.getPartitionMetas().keySet()), null, SnapshotFormat.class.getName(), new Path(tmpPath, meta.getName()).toString(), true, false));\n         }\n-\n-        context.getIOExecutors()\n-            .save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n+        context.getIOExecutors().save(new PSMatricesSaveContext(-1, -1, saveContexts), dumpParallel);\n         HdfsUtil.rename(tmpPath, baseDirPath, fs);\n       }\n     }\n@@ -203,6 +191,7 @@ public class SnapshotDumper {\n    * @param matrixIds all matrices\n    * @return the matrices that need dump\n    */\n+\n   private List<Integer> filter(List<Integer> matrixIds) throws ServiceException {\n     int size = matrixIds.size();\n     List<Integer> ret = new ArrayList<>(size);\n@@ -211,7 +200,6 @@ public class SnapshotDumper {\n         ret.add(matrixIds.get(i));\n       }\n     }\n-\n     return ret;\n   }\n \n@@ -221,6 +209,7 @@ public class SnapshotDumper {\n    * @param matrixId matrix id\n    * @return true mean need dump\n    */\n+\n   private boolean checkNeedDump(int matrixId) throws ServiceException {\n     if (mode == RunningMode.ANGEL_PS) {\n       return true;\n@@ -243,7 +232,6 @@ public class SnapshotDumper {\n         matrixIds.add(meta.getId());\n       }\n     }\n-\n     return matrixIds;\n   }\n \n@@ -254,4 +242,5 @@ public class SnapshotDumper {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}