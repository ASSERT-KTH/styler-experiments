{
    "project_name": "neo4j-neo4j",
    "violation_id": "1088",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1088/IndexMonitorAdaptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1088/IndexMonitorAdaptor.java\nindex 611d5e6ffe8..1f9e99a1c25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1088/IndexMonitorAdaptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1088/IndexMonitorAdaptor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.index.internal.gbptree.GBPTree;\n@@ -33,10 +34,10 @@ class IndexMonitorAdaptor extends GBPTree.Monitor.Delegate\n     private final IndexFiles indexFiles;\n     private final IndexDescriptor descriptor;\n \n-    IndexMonitorAdaptor( GBPTree.Monitor treeMonitor, IndexProvider.Monitor indexMonitor, IndexFiles indexFiles,\n-            IndexDescriptor descriptor )\n+    IndexMonitorAdaptor(GBPTree.Monitor treeMonitor, IndexProvider.Monitor indexMonitor, IndexFiles indexFiles,\n+                        IndexDescriptor descriptor)\n     {\n-        super( treeMonitor );\n+        super(treeMonitor);\n         this.indexMonitor = indexMonitor;\n         this.indexFiles = indexFiles;\n         this.descriptor = descriptor;\n@@ -45,36 +46,36 @@ class IndexMonitorAdaptor extends GBPTree.Monitor.Delegate\n     @Override\n     public void cleanupRegistered()\n     {\n-        indexMonitor.recoveryCleanupRegistered( indexFiles.getStoreFile(), descriptor );\n+        indexMonitor.recoveryCleanupRegistered(indexFiles.getStoreFile(), descriptor);\n         super.cleanupRegistered();\n     }\n \n     @Override\n     public void cleanupStarted()\n     {\n-        indexMonitor.recoveryCleanupStarted( indexFiles.getStoreFile(), descriptor );\n+        indexMonitor.recoveryCleanupStarted(indexFiles.getStoreFile(), descriptor);\n         super.cleanupStarted();\n     }\n \n     @Override\n-    public void cleanupFinished( long numberOfPagesVisited, long numberOfTreeNodes, long numberOfCleanedCrashPointers, long durationMillis )\n+    public void cleanupFinished(long numberOfPagesVisited, long numberOfTreeNodes, long numberOfCleanedCrashPointers, long durationMillis)\n     {\n-        indexMonitor.recoveryCleanupFinished( indexFiles.getStoreFile(), descriptor,\n-                numberOfPagesVisited, numberOfTreeNodes, numberOfCleanedCrashPointers, durationMillis );\n-        super.cleanupFinished( numberOfPagesVisited, numberOfTreeNodes, numberOfCleanedCrashPointers, durationMillis );\n+        indexMonitor.recoveryCleanupFinished(indexFiles.getStoreFile(), descriptor,\n+          numberOfPagesVisited, numberOfTreeNodes, numberOfCleanedCrashPointers, durationMillis);\n+        super.cleanupFinished(numberOfPagesVisited, numberOfTreeNodes, numberOfCleanedCrashPointers, durationMillis);\n     }\n \n     @Override\n     public void cleanupClosed()\n     {\n-        indexMonitor.recoveryCleanupClosed( indexFiles.getStoreFile(), descriptor );\n+        indexMonitor.recoveryCleanupClosed(indexFiles.getStoreFile(), descriptor);\n         super.cleanupClosed();\n     }\n \n     @Override\n-    public void cleanupFailed( Throwable throwable )\n+    public void cleanupFailed(Throwable throwable)\n     {\n-        indexMonitor.recoveryCleanupFailed( indexFiles.getStoreFile(), descriptor, throwable );\n-        super.cleanupFailed( throwable );\n+        indexMonitor.recoveryCleanupFailed(indexFiles.getStoreFile(), descriptor, throwable);\n+        super.cleanupFailed(throwable);\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}