{
    "project_name": "Angel-ML-angel",
    "violation_id": "599",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/599/PartInitNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/599/PartInitNeighborParam.java\nindex a3c9f06978e..6d2e54d5064 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/599/PartInitNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/599/PartInitNeighborParam.java\n@@ -27,120 +27,120 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;\n  */\n public class PartInitNeighborParam extends PartitionUpdateParam {\n \n-  /**\n-   * Node ids\n-   */\n-  private int[] nodeIds;\n-\n-  /**\n-   * Node id to neighbors map, it it just used in PSClient\n-   */\n-  private Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors;\n-\n-  /**\n-   * Partition range start index for nodeIds, it is just used in PSClient\n-   */\n-  private transient int startPos;\n-\n-  /**\n-   * Partition range end index for nodeIds, it is just used in PSClient\n-   */\n-  private transient int endPos;\n-\n-  /**\n-   * Node neighbors, it is just used in PS\n-   */\n-  private int[] neighbors;\n-\n-  /**\n-   * Node neighbor number, it is just used in PS\n-   */\n-  private int[] neighborNums;\n-\n-  public PartInitNeighborParam(int matrixId, PartitionKey partKey, int[] nodeIds,\n-      Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors,\n-      int startPos, int endPos) {\n-    super(matrixId, partKey, false);\n-    this.nodeIds = nodeIds;\n-    this.nodeIdToNeighbors = nodeIdToNeighbors;\n-    this.startPos = startPos;\n-    this.endPos = endPos;\n-  }\n-\n-  public PartInitNeighborParam() {\n-    this(-1, null, null, null, 0, 0);\n-  }\n-\n-  public int[] getNodeIds() {\n-    return nodeIds;\n-  }\n-\n-  public void setNodeIds(int[] nodeIds) {\n-    this.nodeIds = nodeIds;\n-  }\n-\n-  public int[] getNeighbors() {\n-    return neighbors;\n-  }\n-\n-  public void setNeighbors(int[] neighbors) {\n-    this.neighbors = neighbors;\n-  }\n-\n-  public int[] getNeighborNums() {\n-    return neighborNums;\n-  }\n-\n-  public void setNeighborNums(int[] neighborNums) {\n-    this.neighborNums = neighborNums;\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    buf.writeInt(endPos - startPos);\n-    for (int i = startPos; i < endPos; i++) {\n-      buf.writeInt(nodeIds[i]);\n-      buf.writeInt(nodeIdToNeighbors.get(nodeIds[i]).length);\n+    /**\n+     * Node ids\n+     */\n+    private int[] nodeIds;\n+\n+    /**\n+     * Node id to neighbors map, it it just used in PSClient\n+     */\n+    private Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors;\n+\n+    /**\n+     * Partition range start index for nodeIds, it is just used in PSClient\n+     */\n+    private transient int startPos;\n+\n+    /**\n+     * Partition range end index for nodeIds, it is just used in PSClient\n+     */\n+    private transient int endPos;\n+\n+    /**\n+     * Node neighbors, it is just used in PS\n+     */\n+    private int[] neighbors;\n+\n+    /**\n+     * Node neighbor number, it is just used in PS\n+     */\n+    private int[] neighborNums;\n+\n+    public PartInitNeighborParam(int matrixId, PartitionKey partKey, int[] nodeIds,\n+                                 Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors,\n+                                 int startPos, int endPos) {\n+        super(matrixId, partKey, false);\n+        this.nodeIds = nodeIds;\n+        this.nodeIdToNeighbors = nodeIdToNeighbors;\n+        this.startPos = startPos;\n+        this.endPos = endPos;\n     }\n \n-    for (int i = startPos; i < endPos; i++) {\n-      int[] neighbors = nodeIdToNeighbors.get(nodeIds[i]);\n-      for (int j = 0; j < neighbors.length; j++) {\n-        buf.writeInt(neighbors[j]);\n-      }\n+    public PartInitNeighborParam() {\n+        this(-1, null, null, null, 0, 0);\n     }\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    int len = buf.readInt();\n-    nodeIds = new int[len];\n-    neighborNums = new int[len];\n-\n-    int totalNum = 0;\n-    for (int i = 0; i < len; i++) {\n-      nodeIds[i] = buf.readInt();\n-      neighborNums[i] = buf.readInt();\n-      totalNum += neighborNums[i];\n+\n+    public int[] getNodeIds() {\n+        return nodeIds;\n+    }\n+\n+    public void setNodeIds(int[] nodeIds) {\n+        this.nodeIds = nodeIds;\n     }\n \n-    neighbors = new int[totalNum];\n+    public int[] getNeighbors() {\n+        return neighbors;\n+    }\n \n-    for (int i = 0; i < totalNum; i++) {\n-      neighbors[i] = buf.readInt();\n+    public void setNeighbors(int[] neighbors) {\n+        this.neighbors = neighbors;\n     }\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    int len = super.bufferLen();\n-    len += 4;\n-    for (int i = startPos; i < endPos; i++) {\n-      len += 8;\n-      len += nodeIdToNeighbors.get(nodeIds[i]).length * 4;\n+\n+    public int[] getNeighborNums() {\n+        return neighborNums;\n+    }\n+\n+    public void setNeighborNums(int[] neighborNums) {\n+        this.neighborNums = neighborNums;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        buf.writeInt(endPos - startPos);\n+        for (int i = startPos; i < endPos; i++) {\n+            buf.writeInt(nodeIds[i]);\n+            buf.writeInt(nodeIdToNeighbors.get(nodeIds[i]).length);\n+        }\n+\n+        for (int i = startPos; i < endPos; i++) {\n+            int[] neighbors = nodeIdToNeighbors.get(nodeIds[i]);\n+            for (int j = 0; j < neighbors.length; j++) {\n+                buf.writeInt(neighbors[j]);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        int len = buf.readInt();\n+        nodeIds = new int[len];\n+        neighborNums = new int[len];\n+\n+        int totalNum = 0;\n+        for (int i = 0; i < len; i++) {\n+            nodeIds[i] = buf.readInt();\n+            neighborNums[i] = buf.readInt();\n+            totalNum += neighborNums[i];\n+        }\n+\n+        neighbors = new int[totalNum];\n+\n+        for (int i = 0; i < totalNum; i++) {\n+            neighbors[i] = buf.readInt();\n+        }\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+        int len = super.bufferLen();\n+        len += 4;\n+        for (int i = startPos; i < endPos; i++) {\n+            len += 8;\n+            len += nodeIdToNeighbors.get(nodeIds[i]).length * 4;\n+        }\n+        return len;\n     }\n-    return len;\n-  }\n }\n",
            "diff_size": 157
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/599/PartInitNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/599/PartInitNeighborParam.java\nindex a3c9f06978e..ed91a2b5971 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/599/PartInitNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/599/PartInitNeighborParam.java\n@@ -143,4 +143,4 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/599/PartInitNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/599/PartInitNeighborParam.java\nindex a3c9f06978e..b8c348a81d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/599/PartInitNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/599/PartInitNeighborParam.java\n@@ -25,11 +25,13 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;\n /**\n  * Partition parameter for InitNeighbor function\n  */\n+\n public class PartInitNeighborParam extends PartitionUpdateParam {\n \n   /**\n    * Node ids\n    */\n+\n   private int[] nodeIds;\n \n   /**\n@@ -57,9 +59,9 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n    */\n   private int[] neighborNums;\n \n-  public PartInitNeighborParam(int matrixId, PartitionKey partKey, int[] nodeIds,\n-      Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors,\n-      int startPos, int endPos) {\n+  public PartInitNeighborParam(int matrixId,\n+                               PartitionKey partKey, int[] nodeIds,\n+                               Int2ObjectOpenHashMap<int[]> nodeIdToNeighbors, int startPos, int endPos) {\n     super(matrixId, partKey, false);\n     this.nodeIds = nodeIds;\n     this.nodeIdToNeighbors = nodeIdToNeighbors;\n@@ -115,6 +117,7 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n   @Override\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n+\n     int len = buf.readInt();\n     nodeIds = new int[len];\n     neighborNums = new int[len];\n@@ -125,9 +128,7 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n       neighborNums[i] = buf.readInt();\n       totalNum += neighborNums[i];\n     }\n-\n     neighbors = new int[totalNum];\n-\n     for (int i = 0; i < totalNum; i++) {\n       neighbors[i] = buf.readInt();\n     }\n@@ -143,4 +144,5 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n     }\n     return len;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}