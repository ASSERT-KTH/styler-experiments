{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "976",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.corex12.docsubmission.audit.transform;\n\nimport gov.hhs.fha.nhinc.corex12.docsubmission.audit.CORE_X12AuditDataTransformConstants;\nimport java.io.ByteArrayOutputStream;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/976/COREX12RealTimeAuditTransforms.java\nindex e9798a08320..d6bbdb6b623 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/976/COREX12RealTimeAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.corex12.docsubmission.audit.transform;\n \n import gov.hhs.fha.nhinc.corex12.docsubmission.audit.CORE_X12AuditDataTransformConstants;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/976/COREX12RealTimeAuditTransforms.java\nindex e9798a08320..bcae1446af2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/976/COREX12RealTimeAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.corex12.docsubmission.audit.transform;\n \n import gov.hhs.fha.nhinc.corex12.docsubmission.audit.CORE_X12AuditDataTransformConstants;\n@@ -35,72 +36,71 @@ import org.caqh.soap.wsdl.corerule2_2_0.COREEnvelopeRealTimeRequest;\n import org.caqh.soap.wsdl.corerule2_2_0.COREEnvelopeRealTimeResponse;\n \n /**\n- *\n  * @author achidamb\n  */\n public class COREX12RealTimeAuditTransforms extends\n     COREX12AuditTransforms<COREEnvelopeRealTimeRequest, COREEnvelopeRealTimeResponse> {\n \n-    private static final Logger LOG = Logger.getLogger(COREX12RealTimeAuditTransforms.class);\n+  private static final Logger LOG = Logger.getLogger(COREX12RealTimeAuditTransforms.class);\n \n-    @Override\n-    protected byte[] marshallToByteArrayFromRequest(COREEnvelopeRealTimeRequest msg) {\n-        byte[] bObject = null;\n-        if (msg != null) {\n-            try {\n-                Object element = null;\n-                ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n-                msg.setPayload(\"\");\n-                element = new JAXBElement<COREEnvelopeRealTimeRequest>(getQname(\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_REQUEST_LOCALPART),\n-                    COREEnvelopeRealTimeRequest.class, msg);\n-                getMarshaller().marshal(element, baOutStrm);\n-                bObject = baOutStrm.toByteArray();\n-            } catch (JAXBException ex) {\n-                LOG.error(\"Error while marshalling COREEnvelopeRealTimeRequest Request: \"\n-                    + ex.getLocalizedMessage(), ex);\n-            }\n-        }\n-        return bObject;\n+  @Override\n+  protected byte[] marshallToByteArrayFromRequest(COREEnvelopeRealTimeRequest msg) {\n+    byte[] bObject = null;\n+    if (msg != null) {\n+      try {\n+        Object element = null;\n+        ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n+        msg.setPayload(\"\");\n+        element = new JAXBElement<COREEnvelopeRealTimeRequest>(getQname(\n+            CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n+            CORE_X12AuditDataTransformConstants.CORE_X12_REQUEST_LOCALPART),\n+            COREEnvelopeRealTimeRequest.class, msg);\n+        getMarshaller().marshal(element, baOutStrm);\n+        bObject = baOutStrm.toByteArray();\n+      } catch (JAXBException ex) {\n+        LOG.error(\"Error while marshalling COREEnvelopeRealTimeRequest Request: \"\n+            + ex.getLocalizedMessage(), ex);\n+      }\n     }\n+    return bObject;\n+  }\n \n-    @Override\n-    protected byte[] marshallToByteArrayFromResponse(COREEnvelopeRealTimeResponse msg) {\n-        byte[] bObject = null;\n-        if (msg != null) {\n-            try {\n-                Object element = null;\n-                ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n-                msg.setPayload(\"\");\n-                element = new JAXBElement<COREEnvelopeRealTimeResponse>(getQname(\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_RESPONSE_LOCALPART),\n-                    COREEnvelopeRealTimeResponse.class, msg);\n-                getMarshaller().marshal(element, baOutStrm);\n-                bObject = baOutStrm.toByteArray();\n-            } catch (JAXBException ex) {\n-                LOG.error(\"Error while marshalling COREEnvelopeRealTimeResponse Response: \"\n-                    + ex.getLocalizedMessage(), ex);\n-            }\n-        }\n-        return bObject;\n+  @Override\n+  protected byte[] marshallToByteArrayFromResponse(COREEnvelopeRealTimeResponse msg) {\n+    byte[] bObject = null;\n+    if (msg != null) {\n+      try {\n+        Object element = null;\n+        ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n+        msg.setPayload(\"\");\n+        element = new JAXBElement<COREEnvelopeRealTimeResponse>(getQname(\n+            CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n+            CORE_X12AuditDataTransformConstants.CORE_X12_RESPONSE_LOCALPART),\n+            COREEnvelopeRealTimeResponse.class, msg);\n+        getMarshaller().marshal(element, baOutStrm);\n+        bObject = baOutStrm.toByteArray();\n+      } catch (JAXBException ex) {\n+        LOG.error(\"Error while marshalling COREEnvelopeRealTimeResponse Response: \"\n+            + ex.getLocalizedMessage(), ex);\n+      }\n     }\n+    return bObject;\n+  }\n \n-    @Override\n-    protected String getPayloadFromRequest(COREEnvelopeRealTimeRequest request) {\n-        if (request != null && request.getPayloadID() != null) {\n-            return request.getPayloadID();\n-        }\n-        return null;\n+  @Override\n+  protected String getPayloadFromRequest(COREEnvelopeRealTimeRequest request) {\n+    if (request != null && request.getPayloadID() != null) {\n+      return request.getPayloadID();\n     }\n+    return null;\n+  }\n \n-    @Override\n-    protected String getPayloadFromResponse(COREEnvelopeRealTimeResponse response) {\n-        if (response != null && response.getPayloadID() != null) {\n-            return response.getPayloadID();\n-        }\n-        return null;\n+  @Override\n+  protected String getPayloadFromResponse(COREEnvelopeRealTimeResponse response) {\n+    if (response != null && response.getPayloadID() != null) {\n+      return response.getPayloadID();\n     }\n+    return null;\n+  }\n \n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/976/COREX12RealTimeAuditTransforms.java\nindex e9798a08320..fa4c57f9948 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/976/COREX12RealTimeAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.corex12.docsubmission.audit.transform;\n \n import gov.hhs.fha.nhinc.corex12.docsubmission.audit.CORE_X12AuditDataTransformConstants;\n@@ -39,7 +40,7 @@ import org.caqh.soap.wsdl.corerule2_2_0.COREEnvelopeRealTimeResponse;\n  * @author achidamb\n  */\n public class COREX12RealTimeAuditTransforms extends\n-    COREX12AuditTransforms<COREEnvelopeRealTimeRequest, COREEnvelopeRealTimeResponse> {\n+        COREX12AuditTransforms<COREEnvelopeRealTimeRequest, COREEnvelopeRealTimeResponse> {\n \n     private static final Logger LOG = Logger.getLogger(COREX12RealTimeAuditTransforms.class);\n \n@@ -49,18 +50,15 @@ public class COREX12RealTimeAuditTransforms extends\n         if (msg != null) {\n             try {\n                 Object element = null;\n-                ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n+\n+ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n                 msg.setPayload(\"\");\n-                element = new JAXBElement<COREEnvelopeRealTimeRequest>(getQname(\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_REQUEST_LOCALPART),\n-                    COREEnvelopeRealTimeRequest.class, msg);\n-                getMarshaller().marshal(element, baOutStrm);\n+                element = new JAXBElement<COREEnvelopeRealTimeRequest>(getQname(CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI, CORE_X12AuditDataTransformConstants.CORE_X12_REQUEST_LOCALPART), COREEnvelopeRealTimeRequest.class, msg);\n+getMarshaller().marshal(element, baOutStrm);\n                 bObject = baOutStrm.toByteArray();\n             } catch (JAXBException ex) {\n-                LOG.error(\"Error while marshalling COREEnvelopeRealTimeRequest Request: \"\n-                    + ex.getLocalizedMessage(), ex);\n-            }\n+                LOG.error(\"Error while marshalling COREEnvelopeRealTimeRequest Request: \" + ex.getLocalizedMessage(), ex);\n+    }\n         }\n         return bObject;\n     }\n@@ -71,18 +69,15 @@ public class COREX12RealTimeAuditTransforms extends\n         if (msg != null) {\n             try {\n                 Object element = null;\n-                ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n+\n+ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n                 msg.setPayload(\"\");\n-                element = new JAXBElement<COREEnvelopeRealTimeResponse>(getQname(\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_RESPONSE_LOCALPART),\n-                    COREEnvelopeRealTimeResponse.class, msg);\n-                getMarshaller().marshal(element, baOutStrm);\n+                element = new JAXBElement<COREEnvelopeRealTimeResponse>(getQname(CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI, CORE_X12AuditDataTransformConstants.CORE_X12_RESPONSE_LOCALPART), COREEnvelopeRealTimeResponse.class, msg);\n+getMarshaller().marshal(element, baOutStrm);\n                 bObject = baOutStrm.toByteArray();\n             } catch (JAXBException ex) {\n-                LOG.error(\"Error while marshalling COREEnvelopeRealTimeResponse Response: \"\n-                    + ex.getLocalizedMessage(), ex);\n-            }\n+                LOG.error(\"Error while marshalling COREEnvelopeRealTimeResponse Response: \" + ex.getLocalizedMessage(), ex);\n+    }\n         }\n         return bObject;\n     }\n@@ -91,7 +86,8 @@ public class COREX12RealTimeAuditTransforms extends\n     protected String getPayloadFromRequest(COREEnvelopeRealTimeRequest request) {\n         if (request != null && request.getPayloadID() != null) {\n             return request.getPayloadID();\n-        }\n+\n+    }\n         return null;\n     }\n \n@@ -99,8 +95,9 @@ public class COREX12RealTimeAuditTransforms extends\n     protected String getPayloadFromResponse(COREEnvelopeRealTimeResponse response) {\n         if (response != null && response.getPayloadID() != null) {\n             return response.getPayloadID();\n-        }\n+\n+    }\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "52",
                    "column": "13",
                    "severity": "error",
                    "message": "'byte' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "column": "13",
                    "severity": "error",
                    "message": "'byte' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/976/COREX12RealTimeAuditTransforms.java\nindex e9798a08320..27e3459d1d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/976/COREX12RealTimeAuditTransforms.java\n@@ -38,55 +38,54 @@ import org.caqh.soap.wsdl.corerule2_2_0.COREEnvelopeRealTimeResponse;\n  *\n  * @author achidamb\n  */\n+\n+\n public class COREX12RealTimeAuditTransforms extends\n     COREX12AuditTransforms<COREEnvelopeRealTimeRequest, COREEnvelopeRealTimeResponse> {\n \n     private static final Logger LOG = Logger.getLogger(COREX12RealTimeAuditTransforms.class);\n \n+\n     @Override\n-    protected byte[] marshallToByteArrayFromRequest(COREEnvelopeRealTimeRequest msg) {\n-        byte[] bObject = null;\n+    protected byte\n+                  [ ] marshallToByteArrayFromRequest(COREEnvelopeRealTimeRequest msg) {\n+        byte [] bObject = null;\n         if (msg != null) {\n             try {\n                 Object element = null;\n                 ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n                 msg.setPayload(\"\");\n-                element = new JAXBElement<COREEnvelopeRealTimeRequest>(getQname(\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_REQUEST_LOCALPART),\n-                    COREEnvelopeRealTimeRequest.class, msg);\n+                element = new JAXBElement<COREEnvelopeRealTimeRequest>(getQname(CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI, CORE_X12AuditDataTransformConstants.CORE_X12_REQUEST_LOCALPART), COREEnvelopeRealTimeRequest.class, msg);\n                 getMarshaller().marshal(element, baOutStrm);\n                 bObject = baOutStrm.toByteArray();\n             } catch (JAXBException ex) {\n-                LOG.error(\"Error while marshalling COREEnvelopeRealTimeRequest Request: \"\n-                    + ex.getLocalizedMessage(), ex);\n+                LOG.error(\"Error while marshalling COREEnvelopeRealTimeRequest Request: \" + ex.getLocalizedMessage(), ex);\n             }\n         }\n         return bObject;\n     }\n \n+\n     @Override\n-    protected byte[] marshallToByteArrayFromResponse(COREEnvelopeRealTimeResponse msg) {\n-        byte[] bObject = null;\n+    protected byte\n+                  [ ] marshallToByteArrayFromResponse(COREEnvelopeRealTimeResponse msg) {\n+        byte [] bObject = null;\n         if (msg != null) {\n             try {\n                 Object element = null;\n                 ByteArrayOutputStream baOutStrm = new ByteArrayOutputStream();\n                 msg.setPayload(\"\");\n-                element = new JAXBElement<COREEnvelopeRealTimeResponse>(getQname(\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI,\n-                    CORE_X12AuditDataTransformConstants.CORE_X12_RESPONSE_LOCALPART),\n-                    COREEnvelopeRealTimeResponse.class, msg);\n+                element = new JAXBElement<COREEnvelopeRealTimeResponse>(getQname(CORE_X12AuditDataTransformConstants.CORE_X12_NAMESPACE_URI, CORE_X12AuditDataTransformConstants.CORE_X12_RESPONSE_LOCALPART), COREEnvelopeRealTimeResponse.class, msg);\n                 getMarshaller().marshal(element, baOutStrm);\n                 bObject = baOutStrm.toByteArray();\n             } catch (JAXBException ex) {\n-                LOG.error(\"Error while marshalling COREEnvelopeRealTimeResponse Response: \"\n-                    + ex.getLocalizedMessage(), ex);\n+                LOG.error(\"Error while marshalling COREEnvelopeRealTimeResponse Response: \" + ex.getLocalizedMessage(), ex);\n             }\n         }\n         return bObject;\n     }\n \n+\n     @Override\n     protected String getPayloadFromRequest(COREEnvelopeRealTimeRequest request) {\n         if (request != null && request.getPayloadID() != null) {\n@@ -95,6 +94,7 @@ public class COREX12RealTimeAuditTransforms extends\n         return null;\n     }\n \n+\n     @Override\n     protected String getPayloadFromResponse(COREEnvelopeRealTimeResponse response) {\n         if (response != null && response.getPayloadID() != null) {\n@@ -103,4 +103,4 @@ public class COREX12RealTimeAuditTransforms extends\n         return null;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/976/COREX12RealTimeAuditTransforms.java\nindex e9798a08320..d6bbdb6b623 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/976/COREX12RealTimeAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/976/COREX12RealTimeAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.corex12.docsubmission.audit.transform;\n \n import gov.hhs.fha.nhinc.corex12.docsubmission.audit.CORE_X12AuditDataTransformConstants;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}