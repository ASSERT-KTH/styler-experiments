{
    "project_name": "wso2-attic-commons",
    "violation_id": "64",
    "information": {
        "violations": [
            {
                "line": "114",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 136).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "//                if (nextState != null) {\n//                    if (nextState instanceof OrSequenceState) {\n//                        ((OrSequenceState) nextState).getPartnerState().getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n//                    }\n//                    nextState.getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n////                    nextEvents.add(stateEvent);//to keep the reference of the next events",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/64/CountSequenceSingleStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/64/CountSequenceSingleStreamReceiver.java\nindex b09221cf194..56a31a99712 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/64/CountSequenceSingleStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/64/CountSequenceSingleStreamReceiver.java\n@@ -111,9 +111,9 @@ public class CountSequenceSingleStreamReceiver extends SequenceSingleStreamRecei\n //            if (stateEvent.getEventState() < currentState) {\n //                if (nextState != null) {\n //                    if (nextState instanceof OrSequenceState) {\n-//                        ((OrSequenceState) nextState).getPartnerState().getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n //                    }\n //                    nextState.getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n+//                    nextState.getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n ////                    nextEvents.add(stateEvent);//to keep the reference of the next events\n //                }\n //            }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/64/CountSequenceSingleStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/64/CountSequenceSingleStreamReceiver.java\nindex b09221cf194..0ce125a0b00 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/64/CountSequenceSingleStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/64/CountSequenceSingleStreamReceiver.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.stream.recevier.sequence;\n \n import org.apache.log4j.Logger;\n@@ -27,20 +28,20 @@ import org.wso2.siddhi.core.statemachine.sequence.CountSequenceState;\n import org.wso2.siddhi.core.query.stream.StreamProcessor;\n \n public class CountSequenceSingleStreamReceiver extends SequenceSingleStreamReceiver {\n-    static final Logger log = Logger.getLogger(SequenceSingleStreamReceiver.class);\n+  static final Logger log = Logger.getLogger(SequenceSingleStreamReceiver.class);\n \n-    private int min = -1;\n-    private int max = -1;\n-    private boolean passed;\n+  private int min = -1;\n+  private int max = -1;\n+  private boolean passed;\n \n-    public CountSequenceSingleStreamReceiver(CountSequenceState state,\n-                                             StreamProcessor firstSimpleStreamProcessor,\n-                                             int complexEventSize) {\n-        super(state, firstSimpleStreamProcessor, complexEventSize);\n-        this.min = state.getMin();\n-        this.max = state.getMax();\n+  public CountSequenceSingleStreamReceiver(CountSequenceState state,\n+                                           StreamProcessor firstSimpleStreamProcessor,\n+                                           int complexEventSize) {\n+    super(state, firstSimpleStreamProcessor, complexEventSize);\n+    this.min = state.getMin();\n+    this.max = state.getMax();\n \n-    }\n+  }\n \n //    @Override\n //    public void receive(Event event) {\n@@ -72,41 +73,41 @@ public class CountSequenceSingleStreamReceiver extends SequenceSingleStreamRecei\n ////        }\n //    }\n \n-    protected void sendForProcess(StreamEvent streamEvent) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"cr state=\" + currentState + \" event=\" + streamEvent + \" ||currentEvents=\" + currentEvents);\n-        }\n-        for (StateEvent currentEvent : currentEvents) {\n+  protected void sendForProcess(StreamEvent streamEvent) {\n+    if (log.isDebugEnabled()) {\n+      log.debug(\"cr state=\" + currentState + \" event=\" + streamEvent + \" ||currentEvents=\" + currentEvents);\n+    }\n+    for (StateEvent currentEvent : currentEvents) {\n \n-            if (currentEvent.getEventState() <= (state.getStateNumber())) {\n-                ListEvent listEvent = (ListEvent) currentEvent.getStreamEvent(currentState);\n-                if (listEvent == null) {\n-                    listEvent = new InListEvent(max);\n-                    currentEvent.setStreamEvent(currentState, listEvent);\n-                }\n-                setPassed(false);\n-                if (!listEvent.addEvent(((Event) streamEvent))) {\n-                    continue;\n-                }\n-                firstSimpleStreamProcessor.process(currentEvent);\n+      if (currentEvent.getEventState() <= (state.getStateNumber())) {\n+        ListEvent listEvent = (ListEvent) currentEvent.getStreamEvent(currentState);\n+        if (listEvent == null) {\n+          listEvent = new InListEvent(max);\n+          currentEvent.setStreamEvent(currentState, listEvent);\n+        }\n+        setPassed(false);\n+        if (!listEvent.addEvent(((Event) streamEvent))) {\n+          continue;\n+        }\n+        firstSimpleStreamProcessor.process(currentEvent);\n \n-                if (!isPassed()) {\n-                    listEvent.removeLast();  //to stop aggregation of not passed events\n+        if (!isPassed()) {\n+          listEvent.removeLast();  //to stop aggregation of not passed events\n //                    nextEvents.add(currentEvent);   //only to add to itself\n-                }\n-//                init();\n-            }\n         }\n+//                init();\n+      }\n     }\n+  }\n \n //    protected InComplexEvent createFirstEvent(int complexEventSize) {\n //        return new InComplexEvent(new SingleEventBundle[complexEventSize]);\n //    }\n \n-    public synchronized void addToNextEvents(StateEvent stateEvent) {\n+  public synchronized void addToNextEvents(StateEvent stateEvent) {\n //        System.out.println(\"in\");\n-        if (min == 0) {\n-            state.getSequenceStreamPacker().process(stateEvent.cloneEvent(currentState));\n+    if (min == 0) {\n+      state.getSequenceStreamPacker().process(stateEvent.cloneEvent(currentState));\n //\n //            if (stateEvent.getEventState() < currentState) {\n //                if (nextState != null) {\n@@ -117,28 +118,28 @@ public class CountSequenceSingleStreamReceiver extends SequenceSingleStreamRecei\n ////                    nextEvents.add(stateEvent);//to keep the reference of the next events\n //                }\n //            }\n-        } else {\n-            try {\n-                nextEvents.put(stateEvent);\n-            } catch (InterruptedException e) {\n-                e.printStackTrace();\n-            }\n-        }\n+    } else {\n+      try {\n+        nextEvents.put(stateEvent);\n+      } catch (InterruptedException e) {\n+        e.printStackTrace();\n+      }\n     }\n+  }\n \n-    public synchronized void setPassed(boolean passed) {\n-        this.passed = passed;\n-    }\n+  public synchronized void setPassed(boolean passed) {\n+    this.passed = passed;\n+  }\n \n-    public synchronized boolean isPassed() {\n-        return passed;\n-    }\n+  public synchronized boolean isPassed() {\n+    return passed;\n+  }\n \n-    public void addOnlyToNextEvents(StateEvent stateEvent) {\n-        try {\n-            nextEvents.put(stateEvent);\n-        } catch (InterruptedException e) {\n-            e.printStackTrace();\n-        }\n+  public void addOnlyToNextEvents(StateEvent stateEvent) {\n+    try {\n+      nextEvents.put(stateEvent);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n     }\n+  }\n }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/64/CountSequenceSingleStreamReceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/64/CountSequenceSingleStreamReceiver.java\nindex b09221cf194..56a31a99712 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/64/CountSequenceSingleStreamReceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/64/CountSequenceSingleStreamReceiver.java\n@@ -111,9 +111,9 @@ public class CountSequenceSingleStreamReceiver extends SequenceSingleStreamRecei\n //            if (stateEvent.getEventState() < currentState) {\n //                if (nextState != null) {\n //                    if (nextState instanceof OrSequenceState) {\n-//                        ((OrSequenceState) nextState).getPartnerState().getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n //                    }\n //                    nextState.getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n+//                    nextState.getSequenceSingleStreamReceiver().addToNextEvents(stateEvent);\n ////                    nextEvents.add(stateEvent);//to keep the reference of the next events\n //                }\n //            }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}