{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "146",
    "information": {
        "violations": [
            {
                "line": "42",
                "column": "30",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    this.defaultValue = defaultValue;\n    this.required = required;\n    if (defaultValue == null &&\n        targetType != null && targetType.getRawClass().isPrimitive()) {\n      this.defaultValue = Defaults.defaultValue(targetType.getRawClass());\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/146/AbstractParamProcessor.java\nindex 2513388db4a..7a173c3bae9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/146/AbstractParamProcessor.java\n@@ -39,8 +39,7 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n     this.targetType = targetType;\n     this.defaultValue = defaultValue;\n     this.required = required;\n-    if (defaultValue == null &&\n-        targetType != null && targetType.getRawClass().isPrimitive()) {\n+    if (defaultValue == null && targetType != null && targetType.getRawClass().isPrimitive()) {\n       this.defaultValue = Defaults.defaultValue(targetType.getRawClass());\n     }\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "42",
                    "column": "30",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/146/AbstractParamProcessor.java\nindex 2513388db4a..57d33c8b927 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/146/AbstractParamProcessor.java\n@@ -39,8 +39,7 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n     this.targetType = targetType;\n     this.defaultValue = defaultValue;\n     this.required = required;\n-    if (defaultValue == null &&\n-        targetType != null && targetType.getRawClass().isPrimitive()) {\n+    if (defaultValue == null && targetType != null && targetType.getRawClass().isPrimitive()) {\n       this.defaultValue = Defaults.defaultValue(targetType.getRawClass());\n     }\n   }\n@@ -57,4 +56,4 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n   public boolean isRequired() {\n     return required;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/146/AbstractParamProcessor.java\nindex 2513388db4a..36745809f5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/146/AbstractParamProcessor.java\n@@ -24,6 +24,7 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n   protected String paramPath;\n \n   // for consumer, targetType should be null\n+\n   protected JavaType targetType;\n \n   protected Object defaultValue;\n@@ -39,8 +40,7 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n     this.targetType = targetType;\n     this.defaultValue = defaultValue;\n     this.required = required;\n-    if (defaultValue == null &&\n-        targetType != null && targetType.getRawClass().isPrimitive()) {\n+    if (defaultValue == null && targetType != null && targetType.getRawClass().isPrimitive()) {\n       this.defaultValue = Defaults.defaultValue(targetType.getRawClass());\n     }\n   }\n@@ -57,4 +57,4 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n   public boolean isRequired() {\n     return required;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/146/AbstractParamProcessor.java\nindex 2513388db4a..7a173c3bae9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/146/AbstractParamProcessor.java\n@@ -39,8 +39,7 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n     this.targetType = targetType;\n     this.defaultValue = defaultValue;\n     this.required = required;\n-    if (defaultValue == null &&\n-        targetType != null && targetType.getRawClass().isPrimitive()) {\n+    if (defaultValue == null && targetType != null && targetType.getRawClass().isPrimitive()) {\n       this.defaultValue = Defaults.defaultValue(targetType.getRawClass());\n     }\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/146/AbstractParamProcessor.java\nindex 2513388db4a..7a173c3bae9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/146/AbstractParamProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/146/AbstractParamProcessor.java\n@@ -39,8 +39,7 @@ public abstract class AbstractParamProcessor implements ParamValueProcessor {\n     this.targetType = targetType;\n     this.defaultValue = defaultValue;\n     this.required = required;\n-    if (defaultValue == null &&\n-        targetType != null && targetType.getRawClass().isPrimitive()) {\n+    if (defaultValue == null && targetType != null && targetType.getRawClass().isPrimitive()) {\n       this.defaultValue = Defaults.defaultValue(targetType.getRawClass());\n     }\n   }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea"
    ]
}