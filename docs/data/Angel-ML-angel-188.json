{
    "project_name": "Angel-ML-angel",
    "violation_id": "188",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/188/CompIntIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/188/CompIntIntRowUpdateSplit.java\nindex 9abb17541eb..b7cbcff9934 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/188/CompIntIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/188/CompIntIntRowUpdateSplit.java\n@@ -30,85 +30,85 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n  */\n public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n \n-  /**\n-   * Row update split\n-   */\n-  private final IntIntVector split;\n+    /**\n+     * Row update split\n+     */\n+    private final IntIntVector split;\n \n-  /**\n-   * Max element number in this split\n-   */\n-  private final int maxItemNum;\n+    /**\n+     * Max element number in this split\n+     */\n+    private final int maxItemNum;\n \n-  /**\n-   * Create a new CompIntIntRowUpdateSplit.\n-   *\n-   * @param rowIndex row index\n-   * @param split row update split\n-   */\n-  public CompIntIntRowUpdateSplit(int rowIndex, IntIntVector split, int maxItemNum) {\n-    super(rowIndex, RowType.T_INT_DENSE, -1, -1);\n-    this.split = split;\n-    this.maxItemNum = maxItemNum;\n+    /**\n+     * Create a new CompIntIntRowUpdateSplit.\n+     *\n+     * @param rowIndex row index\n+     * @param split    row update split\n+     */\n+    public CompIntIntRowUpdateSplit(int rowIndex, IntIntVector split, int maxItemNum) {\n+        super(rowIndex, RowType.T_INT_DENSE, -1, -1);\n+        this.split = split;\n+        this.maxItemNum = maxItemNum;\n \n-    IntIntVectorStorage storage = split.getStorage();\n-    if (storage instanceof IntIntDenseVectorStorage) {\n-      rowType = RowType.T_INT_DENSE_COMPONENT;\n-    } else {\n-      rowType = RowType.T_INT_SPARSE_COMPONENT;\n+        IntIntVectorStorage storage = split.getStorage();\n+        if (storage instanceof IntIntDenseVectorStorage) {\n+            rowType = RowType.T_INT_DENSE_COMPONENT;\n+        } else {\n+            rowType = RowType.T_INT_SPARSE_COMPONENT;\n+        }\n     }\n-  }\n \n-  public IntIntVector getSplit() {\n-    return split;\n-  }\n+    public IntIntVector getSplit() {\n+        return split;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    IntIntVectorStorage storage = split.getStorage();\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        IntIntVectorStorage storage = split.getStorage();\n \n-    if (storage instanceof IntIntSparseVectorStorage) {\n-      buf.writeInt(storage.size());\n-      ObjectIterator<Int2IntMap.Entry> iter = storage.entryIterator();\n-      Int2IntMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeInt(entry.getIntKey());\n-        buf.writeInt(entry.getIntValue());\n-      }\n-    } else if (storage instanceof IntIntSortedVectorStorage) {\n-      buf.writeInt(storage.size());\n-      int[] indices = storage.getIndices();\n-      int[] values = storage.getValues();\n-      for (int i = 0; i < indices.length; i++) {\n-        buf.writeInt(indices[i]);\n-        buf.writeInt(values[i]);\n-      }\n-    } else if (storage instanceof IntIntDenseVectorStorage) {\n-      int[] values = storage.getValues();\n-      int writeSize = values.length < maxItemNum ? values.length : maxItemNum;\n-      buf.writeInt(writeSize);\n-      for (int i = 0; i < writeSize; i++) {\n-        buf.writeInt(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"unsupport split for storage \" + storage.getClass().getName());\n+        if (storage instanceof IntIntSparseVectorStorage) {\n+            buf.writeInt(storage.size());\n+            ObjectIterator<Int2IntMap.Entry> iter = storage.entryIterator();\n+            Int2IntMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                buf.writeInt(entry.getIntKey());\n+                buf.writeInt(entry.getIntValue());\n+            }\n+        } else if (storage instanceof IntIntSortedVectorStorage) {\n+            buf.writeInt(storage.size());\n+            int[] indices = storage.getIndices();\n+            int[] values = storage.getValues();\n+            for (int i = 0; i < indices.length; i++) {\n+                buf.writeInt(indices[i]);\n+                buf.writeInt(values[i]);\n+            }\n+        } else if (storage instanceof IntIntDenseVectorStorage) {\n+            int[] values = storage.getValues();\n+            int writeSize = values.length < maxItemNum ? values.length : maxItemNum;\n+            buf.writeInt(writeSize);\n+            for (int i = 0; i < writeSize; i++) {\n+                buf.writeInt(values[i]);\n+            }\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"unsupport split for storage \" + storage.getClass().getName());\n+        }\n     }\n-  }\n \n-  @Override\n-  public long size() {\n-    return split.size();\n-  }\n+    @Override\n+    public long size() {\n+        return split.size();\n+    }\n \n-  @Override\n-  public int bufferLen() {\n-    if (rowType == RowType.T_INT_DENSE) {\n-      return 4 + super.bufferLen() + split.getStorage().size() * 4;\n-    } else {\n-      return 4 + super.bufferLen() + split.getStorage().size() * 8;\n+    @Override\n+    public int bufferLen() {\n+        if (rowType == RowType.T_INT_DENSE) {\n+            return 4 + super.bufferLen() + split.getStorage().size() * 4;\n+        } else {\n+            return 4 + super.bufferLen() + split.getStorage().size() * 8;\n+        }\n     }\n-  }\n }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/188/CompIntIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/188/CompIntIntRowUpdateSplit.java\nindex 9abb17541eb..bd05eeec50b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/188/CompIntIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/188/CompIntIntRowUpdateSplit.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.psagent.matrix.oplog.cache;\n \n import com.tencent.angel.ml.math2.storage.*;\n@@ -93,8 +92,7 @@ public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n         buf.writeInt(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"unsupport split for storage \" + storage.getClass().getName());\n+      throw new UnsupportedOperationException(\"unsupport split for storage \" + storage.getClass().getName());\n     }\n   }\n \n@@ -111,4 +109,4 @@ public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n       return 4 + super.bufferLen() + split.getStorage().size() * 8;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/188/CompIntIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/188/CompIntIntRowUpdateSplit.java\nindex 9abb17541eb..ce91e0d7452 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/188/CompIntIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/188/CompIntIntRowUpdateSplit.java\n@@ -28,11 +28,13 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * Component int key int row update split\n  */\n+\n public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n \n   /**\n    * Row update split\n    */\n+\n   private final IntIntVector split;\n \n   /**\n@@ -46,11 +48,11 @@ public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n    * @param rowIndex row index\n    * @param split row update split\n    */\n+\n   public CompIntIntRowUpdateSplit(int rowIndex, IntIntVector split, int maxItemNum) {\n     super(rowIndex, RowType.T_INT_DENSE, -1, -1);\n     this.split = split;\n     this.maxItemNum = maxItemNum;\n-\n     IntIntVectorStorage storage = split.getStorage();\n     if (storage instanceof IntIntDenseVectorStorage) {\n       rowType = RowType.T_INT_DENSE_COMPONENT;\n@@ -67,7 +69,6 @@ public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n     IntIntVectorStorage storage = split.getStorage();\n-\n     if (storage instanceof IntIntSparseVectorStorage) {\n       buf.writeInt(storage.size());\n       ObjectIterator<Int2IntMap.Entry> iter = storage.entryIterator();\n@@ -78,24 +79,24 @@ public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n         buf.writeInt(entry.getIntValue());\n       }\n     } else if (storage instanceof IntIntSortedVectorStorage) {\n-      buf.writeInt(storage.size());\n-      int[] indices = storage.getIndices();\n-      int[] values = storage.getValues();\n-      for (int i = 0; i < indices.length; i++) {\n-        buf.writeInt(indices[i]);\n-        buf.writeInt(values[i]);\n-      }\n+             buf.writeInt(storage.size());\n+\n+             int[] indices = storage.getIndices();\n+             int[] values = storage.getValues();\n+             for (int i = 0; i < indices.length; i++) {\n+               buf.writeInt(indices[i]);\n+               buf.writeInt(values[i]);\n+             }\n     } else if (storage instanceof IntIntDenseVectorStorage) {\n-      int[] values = storage.getValues();\n-      int writeSize = values.length < maxItemNum ? values.length : maxItemNum;\n-      buf.writeInt(writeSize);\n-      for (int i = 0; i < writeSize; i++) {\n-        buf.writeInt(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"unsupport split for storage \" + storage.getClass().getName());\n-    }\n+             int[] values = storage.getValues();\n+             int writeSize = values.length < maxItemNum ? values.length : maxItemNum;\n+             buf.writeInt(writeSize);\n+             for (int i = 0; i < writeSize; i++) {\n+               buf.writeInt(values[i]);\n+             }\n+           } else {\n+             throw new UnsupportedOperationException(\"unsupport split for storage \" + storage.getClass().getName());\n+           }\n   }\n \n   @Override\n@@ -111,4 +112,5 @@ public class CompIntIntRowUpdateSplit extends RowUpdateSplit {\n       return 4 + super.bufferLen() + split.getStorage().size() * 8;\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}