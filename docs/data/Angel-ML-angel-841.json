{
    "project_name": "Angel-ML-angel",
    "violation_id": "841",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/841/WorkerClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/841/WorkerClient.java\nindex f81997d5fe3..1685db5d876 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/841/WorkerClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/841/WorkerClient.java\n@@ -33,41 +33,48 @@ import java.io.IOException;\n  * The RPC client from master to a worker, it just for get worker thread stack from worker.\n  */\n public class WorkerClient implements WorkerClientInterface {\n-  private static final Log LOG = LogFactory.getLog(WorkerClient.class);\n-  /**master context*/\n-  private final AMContext context;\n+    private static final Log LOG = LogFactory.getLog(WorkerClient.class);\n+    /**\n+     * master context\n+     */\n+    private final AMContext context;\n \n-  /**connection from master to the worker*/\n-  private final TConnection connection;\n+    /**\n+     * connection from master to the worker\n+     */\n+    private final TConnection connection;\n \n-  /**rpc protocol*/\n-  private final WorkerProtocol worker;\n+    /**\n+     * rpc protocol\n+     */\n+    private final WorkerProtocol worker;\n \n-  /**\n-   * Create a WorkerClient\n-   * @param context master context\n-   * @param workerAttemptId worker attempt id\n-   * @throws IOException\n-   */\n-  public WorkerClient(AMContext context, WorkerAttemptId workerAttemptId) throws IOException {\n-    this.context = context;\n-    this.connection = TConnectionManager.getConnection(context.getConf());\n-    Location workerLoc =\n-        context.getWorkerManager().getWorker(workerAttemptId.getWorkerId())\n-            .getWorkerAttempt(workerAttemptId).getLocation();\n-    LOG.debug(\"workerLoc= \" + workerLoc.toString());\n-    this.worker = connection.getWorkerService(workerLoc.getIp(), workerLoc.getPort());\n-  }\n+    /**\n+     * Create a WorkerClient\n+     *\n+     * @param context         master context\n+     * @param workerAttemptId worker attempt id\n+     * @throws IOException\n+     */\n+    public WorkerClient(AMContext context, WorkerAttemptId workerAttemptId) throws IOException {\n+        this.context = context;\n+        this.connection = TConnectionManager.getConnection(context.getConf());\n+        Location workerLoc =\n+                context.getWorkerManager().getWorker(workerAttemptId.getWorkerId())\n+                        .getWorkerAttempt(workerAttemptId).getLocation();\n+        LOG.debug(\"workerLoc= \" + workerLoc.toString());\n+        this.worker = connection.getWorkerService(workerLoc.getIp(), workerLoc.getPort());\n+    }\n \n-  @Override\n-  public String getThreadStack() throws ServiceException {\n-    WorkerProtocol workerProtocol = getWorker();\n-    GetThreadStackRequest request = GetThreadStackRequest.newBuilder().build();\n-    LOG.info(\"the class of workerProtocol is \" + workerProtocol.getClass());\n-    return workerProtocol.workerThreadStack(null, request).getStack();\n-  }\n+    @Override\n+    public String getThreadStack() throws ServiceException {\n+        WorkerProtocol workerProtocol = getWorker();\n+        GetThreadStackRequest request = GetThreadStackRequest.newBuilder().build();\n+        LOG.info(\"the class of workerProtocol is \" + workerProtocol.getClass());\n+        return workerProtocol.workerThreadStack(null, request).getStack();\n+    }\n \n-  private WorkerProtocol getWorker() {\n-    return worker;\n-  }\n+    private WorkerProtocol getWorker() {\n+        return worker;\n+    }\n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/841/WorkerClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/841/WorkerClient.java\nindex f81997d5fe3..d1fe5c57b9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/841/WorkerClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/841/WorkerClient.java\n@@ -70,4 +70,4 @@ public class WorkerClient implements WorkerClientInterface {\n   private WorkerProtocol getWorker() {\n     return worker;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/841/WorkerClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/841/WorkerClient.java\nindex f81997d5fe3..60073dfe134 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/841/WorkerClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/841/WorkerClient.java\n@@ -26,13 +26,14 @@ import com.tencent.angel.worker.WorkerAttemptId;\n import com.tencent.angel.worker.WorkerProtocol;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.io.IOException;\n \n /**\n  * The RPC client from master to a worker, it just for get worker thread stack from worker.\n  */\n+\n public class WorkerClient implements WorkerClientInterface {\n+\n   private static final Log LOG = LogFactory.getLog(WorkerClient.class);\n   /**master context*/\n   private final AMContext context;\n@@ -49,12 +50,12 @@ public class WorkerClient implements WorkerClientInterface {\n    * @param workerAttemptId worker attempt id\n    * @throws IOException\n    */\n-  public WorkerClient(AMContext context, WorkerAttemptId workerAttemptId) throws IOException {\n+\n+  public WorkerClient(AMContext context, WorkerAttemptId workerAttemptId)\n+  throws IOException {\n     this.context = context;\n     this.connection = TConnectionManager.getConnection(context.getConf());\n-    Location workerLoc =\n-        context.getWorkerManager().getWorker(workerAttemptId.getWorkerId())\n-            .getWorkerAttempt(workerAttemptId).getLocation();\n+    Location workerLoc = context.getWorkerManager().getWorker(workerAttemptId.getWorkerId()).getWorkerAttempt(workerAttemptId).getLocation();\n     LOG.debug(\"workerLoc= \" + workerLoc.toString());\n     this.worker = connection.getWorkerService(workerLoc.getIp(), workerLoc.getPort());\n   }\n@@ -70,4 +71,5 @@ public class WorkerClient implements WorkerClientInterface {\n   private WorkerProtocol getWorker() {\n     return worker;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}