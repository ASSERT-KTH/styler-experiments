{
    "project_name": "wso2-attic-commons",
    "violation_id": "457",
    "information": {
        "violations": [
            {
                "line": "86",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .append(\"@\").append(CARBON_CLIENT_ID)\n                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                .toString();\n    }\n ",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/457/QueueSenderAll.java\nindex 07f91fa0405..bc97a02f383 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/457/QueueSenderAll.java\n@@ -83,7 +83,8 @@ public class QueueSenderAll {\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n                 .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).\n+                append(\"'\")\n                 .toString();\n     }\n  \n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/457/QueueSenderAll.java\nindex 07f91fa0405..e0ef8ca668f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/457/QueueSenderAll.java\n@@ -1,20 +1,20 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n \n \n import javax.jms.JMSException;\n@@ -29,74 +29,76 @@ import javax.naming.NamingException;\n import java.util.Properties;\n \n public class QueueSenderAll {\n-    public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n-    private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n-    private static final String QUEUE_NAME_PREFIX = \"queue.\";\n-    private static final String CF_NAME = \"qpidConnectionfactory\";\n-    String userName = \"admin\";\n-    String password = \"admin\";\n-    private static String CARBON_CLIENT_ID = \"carbon\";\n-    private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n-    private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//localhost\n-    private static String CARBON_DEFAULT_PORT = \"5672\";\n-    String queueName = \"lanka\";\n- \n-    public static void main(String[] args) throws NamingException, JMSException {\n-        QueueSenderAll queueSender = new QueueSenderAll();\n-        queueSender.sendMessages();\n-    }\n-    public void sendMessages() throws NamingException, JMSException {\n-        Properties properties = new Properties();\n-        properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n-        properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n-        properties.put(QUEUE_NAME_PREFIX + queueName, queueName);\n-        System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n-        InitialContext ctx = new InitialContext(properties);\n-        // Lookup connection factory\n-        QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n-        QueueConnection queueConnection = connFactory.createQueueConnection();\n-        queueConnection.start();\n-        QueueSession queueSession =\n-                queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n-        // Send message\n-        Queue queue = (Queue)ctx.lookup(queueName);\n-        // create the message to send\n-\n-\tjavax.jms.QueueSender queueSender = queueSession.createSender(queue);\n-\n-\tfor(int i=1;i<=1;i=i+1){\n-        TextMessage textMessage = queueSession.createTextMessage(\"New Message :::::::::::AAA::::::: No :::\"+i);\n-\t\n-        \n-        queueSender.send(textMessage);\n-\t}\n-\n-        queueSender.close();\n-        queueSession.close();\n-        queueConnection.close();\n+  public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n+  private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n+  private static final String QUEUE_NAME_PREFIX = \"queue.\";\n+  private static final String CF_NAME = \"qpidConnectionfactory\";\n+  String userName = \"admin\";\n+  String password = \"admin\";\n+  private static String CARBON_CLIENT_ID = \"carbon\";\n+  private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n+  private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";//localhost\n+  private static String CARBON_DEFAULT_PORT = \"5672\";\n+  String queueName = \"lanka\";\n \n+  public static void main(String[] args) throws NamingException, JMSException {\n+    QueueSenderAll queueSender = new QueueSenderAll();\n+    queueSender.sendMessages();\n+  }\n \n+  public void sendMessages() throws NamingException, JMSException {\n+    Properties properties = new Properties();\n+    properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n+    properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n+    properties.put(QUEUE_NAME_PREFIX + queueName, queueName);\n+    System.out.println(\"getTCPConnectionURL(userName,password) = \" + getTCPConnectionURL(userName, password));\n+    InitialContext ctx = new InitialContext(properties);\n+    // Lookup connection factory\n+    QueueConnectionFactory connFactory = (QueueConnectionFactory) ctx.lookup(CF_NAME);\n+    QueueConnection queueConnection = connFactory.createQueueConnection();\n+    queueConnection.start();\n+    QueueSession queueSession =\n+      queueConnection.createQueueSession(false, QueueSession.AUTO_ACKNOWLEDGE);\n+    // Send message\n+    Queue queue = (Queue) ctx.lookup(queueName);\n+    // create the message to send\n+\n+    javax.jms.QueueSender queueSender = queueSession.createSender(queue);\n+\n+    for (int i = 1; i <= 1; i = i + 1) {\n+      TextMessage textMessage = queueSession.createTextMessage(\"New Message :::::::::::AAA::::::: No :::\" + i);\n+\n+\n+      queueSender.send(textMessage);\n     }\n-    public String getTCPConnectionURL(String username, String password) {\n-        // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n-        return new StringBuffer()\n-                .append(\"amqp://\").append(username).append(\":\").append(password)\n-                .append(\"@\").append(CARBON_CLIENT_ID)\n-                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n-                .toString();\n-    }\n- \n+\n+    queueSender.close();\n+    queueSession.close();\n+    queueConnection.close();\n+\n+\n+  }\n+\n+  public String getTCPConnectionURL(String username, String password) {\n+    // amqp://{username}:{password}@carbon/carbon?brokerlist='tcp://{hostname}:{port}'\n+    return new StringBuffer()\n+      .append(\"amqp://\").append(username).append(\":\").append(password)\n+      .append(\"@\").append(CARBON_CLIENT_ID)\n+      .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n+      .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+      .toString();\n+  }\n+\n }\n \n /**\n-queueConnection = queueConnectionFactory.createQueueConnection();\n-           queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\n-           queueSender = queueSession.createSender(queue);\n-//            queueSender.setTimeToLive(3000);\n-           message = queueSession.createTextMessage();\n-           for (int i = 0; i < NUM_MSGS; i++) {\n-//                message.setJMSExpiration(System.currentTimeMillis() + 40000);\n- Sent at 2:14 PM on Friday\n+ * queueConnection = queueConnectionFactory.createQueueConnection();\n+ * queueSession = queueConnection.createQueueSession(false, Session.AUTO_ACKNOWLEDGE);\n+ * queueSender = queueSession.createSender(queue);\n+ * //            queueSender.setTimeToLive(3000);\n+ * message = queueSession.createTextMessage();\n+ * for (int i = 0; i < NUM_MSGS; i++) {\n+ * //                message.setJMSExpiration(System.currentTimeMillis() + 40000);\n+ * Sent at 2:14 PM on Friday\n  */\n \n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/457/QueueSenderAll.java\nindex 07f91fa0405..bc97a02f383 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/457/QueueSenderAll.java\n@@ -83,7 +83,8 @@ public class QueueSenderAll {\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n                 .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).\n+                append(\"'\")\n                 .toString();\n     }\n  \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/457/QueueSenderAll.java\nindex 07f91fa0405..170cffa48bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/457/QueueSenderAll.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/457/QueueSenderAll.java\n@@ -83,7 +83,8 @@ public class QueueSenderAll {\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n                 .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+                .append(\"?brokerlist='tcp://\")\n+                .append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                 .toString();\n     }\n  \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}