{
    "project_name": "intuit-Tank",
    "violation_id": "180",
    "information": {
        "violations": [
            {
                "line": "26",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n\n\t/**\n\t * Returns the token to mark occurrences, of, provided it matches the\n\t * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n\t * For most languages, this method should return the token at the caret",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/intuit-Tank/styler/05_predictions/final/files-repaired/180/OccurrenceMarker.java\nindex b9b64204056..30a944c5114 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/intuit-Tank/styler/05_predictions/final/files-repaired/180/OccurrenceMarker.java\n@@ -22,8 +22,7 @@ import org.fife.ui.rtextarea.SmartHighlightPainter;\n  */\n public interface OccurrenceMarker {\n \n-\n-\t/**\n+    /**\n \t * Returns the token to mark occurrences, of, provided it matches the\n \t * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n \t * For most languages, this method should return the token at the caret\n@@ -33,7 +32,7 @@ public interface OccurrenceMarker {\n \t * @return The token to (possibly) mark occurrences of, or\n \t *         <code>null</code> if none.\n \t */\n-\tToken getTokenToMark(RSyntaxTextArea textArea);\n+ Token getTokenToMark(RSyntaxTextArea textArea);\n \n \n \t/**\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/checkstyle_idea/180/OccurrenceMarker.java\nindex b9b64204056..cc6b596eee7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/checkstyle_idea/180/OccurrenceMarker.java\n@@ -6,6 +6,7 @@\n  * This library is distributed under a modified BSD license.  See the included\n  * LICENSE file for details.\n  */\n+\n package org.fife.ui.rsyntaxtextarea;\n \n import org.fife.ui.rtextarea.SmartHighlightPainter;\n@@ -23,41 +24,41 @@ import org.fife.ui.rtextarea.SmartHighlightPainter;\n public interface OccurrenceMarker {\n \n \n-\t/**\n-\t * Returns the token to mark occurrences, of, provided it matches the\n-\t * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n-\t * For most languages, this method should return the token at the caret\n-\t * position.\n-\t *\n-\t * @param textArea The text area.\n-\t * @return The token to (possibly) mark occurrences of, or\n-\t *         <code>null</code> if none.\n-\t */\n-\tToken getTokenToMark(RSyntaxTextArea textArea);\n-\n-\n-\t/**\n-\t * Returns whether the specified token is a type that we can do a\n-\t * \"mark occurrences\" of.  Typically, this will delegate to\n-\t * {@link RSyntaxTextArea#getMarkOccurrencesOfTokenType(int)}.\n-\t *\n-\t * @param textArea The text area.\n-\t * @param t The token.\n-\t * @return Whether we should mark all occurrences of this token.\n-\t */\n-\tboolean isValidType(RSyntaxTextArea textArea, Token t);\n-\n-\n-\t/**\n-\t * Called when occurrences of a token should be marked.\n-\t *\n-\t * @param doc The document.\n-\t * @param t The document whose relevant occurrences should be marked.\n-\t * @param h The highlighter to add the highlights to.\n-\t * @param p The painter for the highlights.\n-\t */\n-\tvoid markOccurrences(RSyntaxDocument doc, Token t,\n-\t\t\tRSyntaxTextAreaHighlighter h, SmartHighlightPainter p);\n+  /**\n+   * Returns the token to mark occurrences, of, provided it matches the\n+   * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n+   * For most languages, this method should return the token at the caret\n+   * position.\n+   *\n+   * @param textArea The text area.\n+   * @return The token to (possibly) mark occurrences of, or\n+   * <code>null</code> if none.\n+   */\n+  Token getTokenToMark(RSyntaxTextArea textArea);\n+\n+\n+  /**\n+   * Returns whether the specified token is a type that we can do a\n+   * \"mark occurrences\" of.  Typically, this will delegate to\n+   * {@link RSyntaxTextArea#getMarkOccurrencesOfTokenType(int)}.\n+   *\n+   * @param textArea The text area.\n+   * @param t        The token.\n+   * @return Whether we should mark all occurrences of this token.\n+   */\n+  boolean isValidType(RSyntaxTextArea textArea, Token t);\n+\n+\n+  /**\n+   * Called when occurrences of a token should be marked.\n+   *\n+   * @param doc The document.\n+   * @param t   The document whose relevant occurrences should be marked.\n+   * @param h   The highlighter to add the highlights to.\n+   * @param p   The painter for the highlights.\n+   */\n+  void markOccurrences(RSyntaxDocument doc, Token t,\n+                       RSyntaxTextAreaHighlighter h, SmartHighlightPainter p);\n \n \n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "25",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/naturalize/180/OccurrenceMarker.java\nindex b9b64204056..b71d782bef2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/naturalize/180/OccurrenceMarker.java\n@@ -10,7 +10,6 @@ package org.fife.ui.rsyntaxtextarea;\n \n import org.fife.ui.rtextarea.SmartHighlightPainter;\n \n-\n /**\n  * An <code>OccurrenceMarker</code> is called when the caret stops moving after\n  * a short period.  If the current {@link TokenMaker} returns an instance of\n@@ -22,8 +21,7 @@ import org.fife.ui.rtextarea.SmartHighlightPainter;\n  */\n public interface OccurrenceMarker {\n \n-\n-\t/**\n+    /**\n \t * Returns the token to mark occurrences, of, provided it matches the\n \t * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n \t * For most languages, this method should return the token at the caret\n@@ -35,8 +33,7 @@ public interface OccurrenceMarker {\n \t */\n \tToken getTokenToMark(RSyntaxTextArea textArea);\n \n-\n-\t/**\n+/**\n \t * Returns whether the specified token is a type that we can do a\n \t * \"mark occurrences\" of.  Typically, this will delegate to\n \t * {@link RSyntaxTextArea#getMarkOccurrencesOfTokenType(int)}.\n@@ -47,8 +44,7 @@ public interface OccurrenceMarker {\n \t */\n \tboolean isValidType(RSyntaxTextArea textArea, Token t);\n \n-\n-\t/**\n+/**\n \t * Called when occurrences of a token should be marked.\n \t *\n \t * @param doc The document.\n@@ -56,8 +52,6 @@ public interface OccurrenceMarker {\n \t * @param h The highlighter to add the highlights to.\n \t * @param p The painter for the highlights.\n \t */\n-\tvoid markOccurrences(RSyntaxDocument doc, Token t,\n-\t\t\tRSyntaxTextAreaHighlighter h, SmartHighlightPainter p);\n-\n+\tvoid markOccurrences(RSyntaxDocument doc, Token t, RSyntaxTextAreaHighlighter h, SmartHighlightPainter p);\n \n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/codebuff/180/OccurrenceMarker.java\nindex b9b64204056..23fb2b238b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/codebuff/180/OccurrenceMarker.java\n@@ -8,6 +8,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea;\n \n+\n+\n import org.fife.ui.rtextarea.SmartHighlightPainter;\n \n \n@@ -20,44 +22,49 @@ import org.fife.ui.rtextarea.SmartHighlightPainter;\n  * @author Robert Futrell\n  * @version 1.0\n  */\n+\n+\n public interface OccurrenceMarker {\n \n \n-\t/**\n-\t * Returns the token to mark occurrences, of, provided it matches the\n-\t * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n-\t * For most languages, this method should return the token at the caret\n-\t * position.\n-\t *\n-\t * @param textArea The text area.\n-\t * @return The token to (possibly) mark occurrences of, or\n-\t *         <code>null</code> if none.\n-\t */\n-\tToken getTokenToMark(RSyntaxTextArea textArea);\n-\n-\n-\t/**\n-\t * Returns whether the specified token is a type that we can do a\n-\t * \"mark occurrences\" of.  Typically, this will delegate to\n-\t * {@link RSyntaxTextArea#getMarkOccurrencesOfTokenType(int)}.\n-\t *\n-\t * @param textArea The text area.\n-\t * @param t The token.\n-\t * @return Whether we should mark all occurrences of this token.\n-\t */\n-\tboolean isValidType(RSyntaxTextArea textArea, Token t);\n-\n-\n-\t/**\n-\t * Called when occurrences of a token should be marked.\n-\t *\n-\t * @param doc The document.\n-\t * @param t The document whose relevant occurrences should be marked.\n-\t * @param h The highlighter to add the highlights to.\n-\t * @param p The painter for the highlights.\n-\t */\n-\tvoid markOccurrences(RSyntaxDocument doc, Token t,\n-\t\t\tRSyntaxTextAreaHighlighter h, SmartHighlightPainter p);\n-\n-\n-}\n+    /**\n+     * Returns the token to mark occurrences, of, provided it matches the\n+     * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n+     * For most languages, this method should return the token at the caret\n+     * position.\n+     *\n+     * @param textArea The text area.\n+     * @return The token to (possibly) mark occurrences of, or\n+     *         <code>null</code> if none.\n+     */\n+\n+    Token getTokenToMark(RSyntaxTextArea textArea);\n+\n+\n+    /**\n+     * Returns whether the specified token is a type that we can do a\n+     * \"mark occurrences\" of.  Typically, this will delegate to\n+     * {@link RSyntaxTextArea#getMarkOccurrencesOfTokenType(int)}.\n+     *\n+     * @param textArea The text area.\n+     * @param t The token.\n+     * @return Whether we should mark all occurrences of this token.\n+     */\n+\n+    boolean isValidType(RSyntaxTextArea textArea, Token t);\n+\n+\n+    /**\n+     * Called when occurrences of a token should be marked.\n+     *\n+     * @param doc The document.\n+     * @param t The document whose relevant occurrences should be marked.\n+     * @param h The highlighter to add the highlights to.\n+     * @param p The painter for the highlights.\n+     */\n+\n+    void markOccurrences(RSyntaxDocument doc,\n+        Token t,\n+            RSyntaxTextAreaHighlighter h, SmartHighlightPainter p);\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/random/files-repaired/180/OccurrenceMarker.java\nindex b9b64204056..d23afb9784d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/random/files-repaired/180/OccurrenceMarker.java\n@@ -22,8 +22,7 @@ import org.fife.ui.rtextarea.SmartHighlightPainter;\n  */\n public interface OccurrenceMarker {\n \n-\n-\t/**\n+    /**\n \t * Returns the token to mark occurrences, of, provided it matches the\n \t * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n \t * For most languages, this method should return the token at the caret\n@@ -32,8 +31,8 @@ public interface OccurrenceMarker {\n \t * @param textArea The text area.\n \t * @return The token to (possibly) mark occurrences of, or\n \t *         <code>null</code> if none.\n-\t */\n-\tToken getTokenToMark(RSyntaxTextArea textArea);\n+\t */Token getTokenToMark(RSyntaxTextArea textArea);\n+Token getTokenToMark(RSyntaxTextArea textArea);\n \n \n \t/**\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "26",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/three_grams/files-repaired/180/OccurrenceMarker.java\nindex b9b64204056..30a944c5114 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/violations/180/OccurrenceMarker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/intuit-Tank/styler/05_predictions/three_grams/files-repaired/180/OccurrenceMarker.java\n@@ -22,8 +22,7 @@ import org.fife.ui.rtextarea.SmartHighlightPainter;\n  */\n public interface OccurrenceMarker {\n \n-\n-\t/**\n+    /**\n \t * Returns the token to mark occurrences, of, provided it matches the\n \t * criteria put forth by {@link #isValidType(RSyntaxTextArea, Token)}.\n \t * For most languages, this method should return the token at the caret\n@@ -33,7 +32,7 @@ public interface OccurrenceMarker {\n \t * @return The token to (possibly) mark occurrences of, or\n \t *         <code>null</code> if none.\n \t */\n-\tToken getTokenToMark(RSyntaxTextArea textArea);\n+ Token getTokenToMark(RSyntaxTextArea textArea);\n \n \n \t/**\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}