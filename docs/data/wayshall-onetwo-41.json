{
    "project_name": "wayshall-onetwo",
    "violation_id": "41",
    "information": {
        "violations": [
            {
                "line": "56",
                "column": "17",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\t\tString header = request.getHeader(strategyHeaderName);\n\t\tSessionStrategies strategy = SessionStrategies.of(header);\n\t\tif(SessionStrategies.HEADER.equals(strategy)) {\n\t\t\treturn headerStrategy;\n\t\t}\n\t\treturn cookieStrategy;",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "56",
                    "column": "17",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/41/CustomizableHttpSessionStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/checkstyle_idea/41/CustomizableHttpSessionStrategy.java\nindex 2b0343112e5..8465fac2e21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/violations/41/CustomizableHttpSessionStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wayshall-onetwo/checkstyle_idea/41/CustomizableHttpSessionStrategy.java\n@@ -18,45 +18,45 @@ import org.springframework.util.Assert;\n  * <br/>\n  */\n public class CustomizableHttpSessionStrategy implements HttpSessionStrategy, InitializingBean {\n-\t@Setter\n-\tprivate String strategyHeaderName;\n-\t@Setter\n-\tprivate String tokenHeaderName;\n-\n-\tprivate HeaderHttpSessionStrategy headerStrategy;\n-\tprivate CookieHttpSessionStrategy cookieStrategy;\n-\t\n-\n-\t@Override\n-\tpublic void afterPropertiesSet() throws Exception {\n-\t\tAssert.hasText(strategyHeaderName, \"strategyHeaderName must has text!\");\n-\t\tthis.headerStrategy = new HeaderHttpSessionStrategy();\n-\t\tthis.headerStrategy.setHeaderName(tokenHeaderName);\n-\t\tthis.cookieStrategy = new CookieHttpSessionStrategy();\n-\t}\n-\n-\t@Override\n-\tpublic String getRequestedSessionId(HttpServletRequest request) {\n-\t\treturn getCurrentStrategy(request).getRequestedSessionId(request);\n-\t}\n-\n-\t@Override\n-\tpublic void onNewSession(Session session, HttpServletRequest request, HttpServletResponse response) {\n-\t\tgetCurrentStrategy(request).onNewSession(session, request, response);\n-\t}\n-\n-\t@Override\n-\tpublic void onInvalidateSession(HttpServletRequest request, HttpServletResponse response) {\n-\t\tgetCurrentStrategy(request).onInvalidateSession(request, response);\n-\t}\n-\t\n-\tpublic HttpSessionStrategy getCurrentStrategy(HttpServletRequest request) {\n-\t\tString header = request.getHeader(strategyHeaderName);\n-\t\tSessionStrategies strategy = SessionStrategies.of(header);\n-\t\tif(SessionStrategies.HEADER.equals(strategy)) {\n-\t\t\treturn headerStrategy;\n-\t\t}\n-\t\treturn cookieStrategy;\n-\t}\n+  @Setter\n+  private String strategyHeaderName;\n+  @Setter\n+  private String tokenHeaderName;\n+\n+  private HeaderHttpSessionStrategy headerStrategy;\n+  private CookieHttpSessionStrategy cookieStrategy;\n+\n+\n+  @Override\n+  public void afterPropertiesSet() throws Exception {\n+    Assert.hasText(strategyHeaderName, \"strategyHeaderName must has text!\");\n+    this.headerStrategy = new HeaderHttpSessionStrategy();\n+    this.headerStrategy.setHeaderName(tokenHeaderName);\n+    this.cookieStrategy = new CookieHttpSessionStrategy();\n+  }\n+\n+  @Override\n+  public String getRequestedSessionId(HttpServletRequest request) {\n+    return getCurrentStrategy(request).getRequestedSessionId(request);\n+  }\n+\n+  @Override\n+  public void onNewSession(Session session, HttpServletRequest request, HttpServletResponse response) {\n+    getCurrentStrategy(request).onNewSession(session, request, response);\n+  }\n+\n+  @Override\n+  public void onInvalidateSession(HttpServletRequest request, HttpServletResponse response) {\n+    getCurrentStrategy(request).onInvalidateSession(request, response);\n+  }\n+\n+  public HttpSessionStrategy getCurrentStrategy(HttpServletRequest request) {\n+    String header = request.getHeader(strategyHeaderName);\n+    SessionStrategies strategy = SessionStrategies.of(header);\n+    if (SessionStrategies.HEADER.equals(strategy)) {\n+      return headerStrategy;\n+    }\n+    return cookieStrategy;\n+  }\n \n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "56",
                    "column": "17",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "56",
                    "column": "17",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}