{
    "project_name": "eclipse-ee4j-glassfish",
    "violation_id": "110",
    "information": {
        "violations": [
            {
                "line": "58",
                "column": "63",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    public static String[] getOriginalArguments(StartupContext sc) {\n        Properties args = sc.getArguments();\n        String s = args.getProperty(Constants.ORIGINAL_ARGS); // See how ASMain packages the arguments\n        if (s == null) return new String[0];\n        StringTokenizer st = new StringTokenizer(s, Constants.ARG_SEP, false);\n        List<String> result = new ArrayList<String>();",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "58",
                    "column": "62",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/eclipse-ee4j-glassfish/styler/05_predictions/final/files-repaired/110/StartupContextUtil.java\nindex 62a2e6aba28..966249e1c3f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/eclipse-ee4j-glassfish/styler/05_predictions/final/files-repaired/110/StartupContextUtil.java\n@@ -55,7 +55,7 @@ public final class StartupContextUtil {\n \n     public static String[] getOriginalArguments(StartupContext sc) {\n         Properties args = sc.getArguments();\n-        String s = args.getProperty(Constants.ORIGINAL_ARGS); // See how ASMain packages the arguments\n+        String s = args.getProperty(Constants.ORIGINAL_ARGS);// See how ASMain packages the arguments if (s == null) return new String[0];\n         if (s == null) return new String[0];\n         StringTokenizer st = new StringTokenizer(s, Constants.ARG_SEP, false);\n         List<String> result = new ArrayList<String>();\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "59",
                    "column": "56",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/checkstyle_idea/110/StartupContextUtil.java\nindex 62a2e6aba28..b638ccd980b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/checkstyle_idea/110/StartupContextUtil.java\n@@ -55,8 +55,11 @@ public final class StartupContextUtil {\n \n     public static String[] getOriginalArguments(StartupContext sc) {\n         Properties args = sc.getArguments();\n-        String s = args.getProperty(Constants.ORIGINAL_ARGS); // See how ASMain packages the arguments\n-        if (s == null) return new String[0];\n+        String s =\n+            args.getProperty(Constants.ORIGINAL_ARGS); // See how ASMain packages the arguments\n+        if (s == null) {\n+            return new String[0];\n+        }\n         StringTokenizer st = new StringTokenizer(s, Constants.ARG_SEP, false);\n         List<String> result = new ArrayList<String>();\n         while (st.hasMoreTokens()) {\n@@ -66,14 +69,10 @@ public final class StartupContextUtil {\n \n     }\n \n-    private static File absolutize(File f)\n-    {\n-        try\n-        {\n+    private static File absolutize(File f) {\n+        try {\n             return f.getCanonicalFile();\n-        }\n-        catch(Exception e)\n-        {\n+        } catch (Exception e) {\n             return f.getAbsoluteFile();\n         }\n     }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/naturalize/110/StartupContextUtil.java\nindex 62a2e6aba28..382409500fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/naturalize/110/StartupContextUtil.java\n@@ -55,7 +55,9 @@ public final class StartupContextUtil {\n \n     public static String[] getOriginalArguments(StartupContext sc) {\n         Properties args = sc.getArguments();\n-        String s = args.getProperty(Constants.ORIGINAL_ARGS); // See how ASMain packages the arguments\n+        String s = args.getProperty(Constants.ORIGINAL_ARGS);\n+\n+// See how ASMain packages the arguments\n         if (s == null) return new String[0];\n         StringTokenizer st = new StringTokenizer(s, Constants.ARG_SEP, false);\n         List<String> result = new ArrayList<String>();\n@@ -78,4 +80,4 @@ public final class StartupContextUtil {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "58",
                    "column": "62",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/styler/05_predictions/random/files-repaired/110/StartupContextUtil.java\nindex 62a2e6aba28..966249e1c3f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/styler/05_predictions/random/files-repaired/110/StartupContextUtil.java\n@@ -55,7 +55,7 @@ public final class StartupContextUtil {\n \n     public static String[] getOriginalArguments(StartupContext sc) {\n         Properties args = sc.getArguments();\n-        String s = args.getProperty(Constants.ORIGINAL_ARGS); // See how ASMain packages the arguments\n+        String s = args.getProperty(Constants.ORIGINAL_ARGS);// See how ASMain packages the arguments if (s == null) return new String[0];\n         if (s == null) return new String[0];\n         StringTokenizer st = new StringTokenizer(s, Constants.ARG_SEP, false);\n         List<String> result = new ArrayList<String>();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "60",
                    "column": "10",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/styler/05_predictions/three_grams/files-repaired/110/StartupContextUtil.java\nindex 62a2e6aba28..ec3c3ed34c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/violations/110/StartupContextUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/eclipse-ee4j-glassfish/styler/05_predictions/three_grams/files-repaired/110/StartupContextUtil.java\n@@ -55,8 +55,9 @@ public final class StartupContextUtil {\n \n     public static String[] getOriginalArguments(StartupContext sc) {\n         Properties args = sc.getArguments();\n-        String s = args.getProperty(Constants.ORIGINAL_ARGS); // See how ASMain packages the arguments\n-        if (s == null) return new String[0];\n+        String s = args.getProperty(Constants.ORIGINAL_ARGS);\n+    // See how ASMain packages the arguments\n+         if (s == null) return new String[0];\n         StringTokenizer st = new StringTokenizer(s, Constants.ARG_SEP, false);\n         List<String> result = new ArrayList<String>();\n         while (st.hasMoreTokens()) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}