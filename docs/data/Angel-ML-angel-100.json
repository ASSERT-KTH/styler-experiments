{
    "project_name": "Angel-ML-angel",
    "violation_id": "100",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/100/BufferedBitSetReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/100/BufferedBitSetReader.java\nindex 1f6a9fc3199..7e4293973ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/100/BufferedBitSetReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/100/BufferedBitSetReader.java\n@@ -19,56 +19,56 @@ package com.tencent.angel.spark.ml.tree.util;\n \n public class BufferedBitSetReader {\n \n-  //private final ByteBuffer bytes;\n-  private final byte[] bytes;\n-  private int readIndexH;\n-  private int readMaskH;\n-  private int readBufferH;\n-  private int readIndexT;\n-  private int readMaskT;\n-  private int readBufferT;\n+    //private final ByteBuffer bytes;\n+    private final byte[] bytes;\n+    private int readIndexH;\n+    private int readMaskH;\n+    private int readBufferH;\n+    private int readIndexT;\n+    private int readMaskT;\n+    private int readBufferT;\n \n-  public BufferedBitSetReader(byte[] bytes, int numBits) {\n-    //public BufferedBitSetReader(ByteBuffer bytes, int numBits) {\n-    this.bytes = bytes;\n-    //int capacity = bytes.capacity() * 8;\n-    //readIndexT = bytes.capacity() - 1;\n-    int capacity = bytes.length * 8;\n-    this.readIndexT = bytes.length - 1;\n-    for (int i = numBits; i < capacity; i++) {\n-      readTail();\n+    public BufferedBitSetReader(byte[] bytes, int numBits) {\n+        //public BufferedBitSetReader(ByteBuffer bytes, int numBits) {\n+        this.bytes = bytes;\n+        //int capacity = bytes.capacity() * 8;\n+        //readIndexT = bytes.capacity() - 1;\n+        int capacity = bytes.length * 8;\n+        this.readIndexT = bytes.length - 1;\n+        for (int i = numBits; i < capacity; i++) {\n+            readTail();\n+        }\n     }\n-  }\n \n-  public boolean readHead() {\n-    if (readMaskH == 0) {\n-      readBufferH = readFromBuffer(readIndexH++);\n-      readMaskH = 0b10000000;\n+    public boolean readHead() {\n+        if (readMaskH == 0) {\n+            readBufferH = readFromBuffer(readIndexH++);\n+            readMaskH = 0b10000000;\n+        }\n+        boolean bit = (readBufferH & readMaskH) > 0;\n+        readMaskH >>= 1;\n+        return bit;\n     }\n-    boolean bit = (readBufferH & readMaskH) > 0;\n-    readMaskH >>= 1;\n-    return bit;\n-  }\n \n-  public boolean readTail() {\n-    if (readMaskT == 0) {\n-      readBufferT = readFromBuffer(readIndexT--);\n-      readMaskT = 0b00000001;\n+    public boolean readTail() {\n+        if (readMaskT == 0) {\n+            readBufferT = readFromBuffer(readIndexT--);\n+            readMaskT = 0b00000001;\n+        }\n+        boolean bit = (readBufferT & readMaskT) > 0;\n+        readMaskT = (readMaskT << 1) & 0b11111111;\n+        return bit;\n     }\n-    boolean bit = (readBufferT & readMaskT) > 0;\n-    readMaskT = (readMaskT << 1) & 0b11111111;\n-    return bit;\n-  }\n \n-  public boolean read(int index) {\n-    int x = index >> 3;\n-    int y = index & 0b111;\n-    byte b = readFromBuffer(x);\n-    return ((b >> (7 - y)) & 0x1) == 1;\n-  }\n+    public boolean read(int index) {\n+        int x = index >> 3;\n+        int y = index & 0b111;\n+        byte b = readFromBuffer(x);\n+        return ((b >> (7 - y)) & 0x1) == 1;\n+    }\n \n-  public byte readFromBuffer(int index) {\n-    //return bytes.get(index);\n-    return bytes[index];\n-  }\n+    public byte readFromBuffer(int index) {\n+        //return bytes.get(index);\n+        return bytes[index];\n+    }\n }\n",
            "diff_size": 53
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/100/BufferedBitSetReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/100/BufferedBitSetReader.java\nindex 1f6a9fc3199..9f762fcc216 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/100/BufferedBitSetReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/100/BufferedBitSetReader.java\n@@ -71,4 +71,4 @@ public class BufferedBitSetReader {\n     //return bytes.get(index);\n     return bytes[index];\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/100/BufferedBitSetReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/100/BufferedBitSetReader.java\nindex 1f6a9fc3199..0c4c35c34f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/100/BufferedBitSetReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/100/BufferedBitSetReader.java\n@@ -17,9 +17,12 @@\n \n package com.tencent.angel.spark.ml.tree.util;\n \n+\n+\n public class BufferedBitSetReader {\n \n   //private final ByteBuffer bytes;\n+\n   private final byte[] bytes;\n   private int readIndexH;\n   private int readMaskH;\n@@ -33,6 +36,7 @@ public class BufferedBitSetReader {\n     this.bytes = bytes;\n     //int capacity = bytes.capacity() * 8;\n     //readIndexT = bytes.capacity() - 1;\n+\n     int capacity = bytes.length * 8;\n     this.readIndexT = bytes.length - 1;\n     for (int i = numBits; i < capacity; i++) {\n@@ -45,6 +49,7 @@ public class BufferedBitSetReader {\n       readBufferH = readFromBuffer(readIndexH++);\n       readMaskH = 0b10000000;\n     }\n+\n     boolean bit = (readBufferH & readMaskH) > 0;\n     readMaskH >>= 1;\n     return bit;\n@@ -55,6 +60,7 @@ public class BufferedBitSetReader {\n       readBufferT = readFromBuffer(readIndexT--);\n       readMaskT = 0b00000001;\n     }\n+\n     boolean bit = (readBufferT & readMaskT) > 0;\n     readMaskT = (readMaskT << 1) & 0b11111111;\n     return bit;\n@@ -71,4 +77,4 @@ public class BufferedBitSetReader {\n     //return bytes.get(index);\n     return bytes[index];\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}