{
    "project_name": "griddynamics-jagger",
    "violation_id": "117",
    "information": {
        "violations": [
            {
                "line": "67",
                "column": "9",
                "severity": "warning",
                "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "            Preconditions.checkArgument(threads >= 0);\n            Preconditions.checkArgument(delay   >= 0);\n        }\n        catch (IllegalArgumentException e) {\n            log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n            throw Throwables.propagate(e);",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "67",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/117/WorkloadConfiguration.java\nindex 1fd2677b094..b2d6d7fc7c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/117/WorkloadConfiguration.java\n@@ -63,15 +63,14 @@ public class WorkloadConfiguration implements Serializable {\n     private WorkloadConfiguration(int threads, int delay, int samples, long period) {\n         try {\n             Preconditions.checkArgument(threads >= 0);\n-            Preconditions.checkArgument(delay   >= 0);\n-        }\n-        catch (IllegalArgumentException e) {\n+            Preconditions.checkArgument(delay >= 0);\n+        } catch (IllegalArgumentException e) {\n             log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n             throw Throwables.propagate(e);\n         }\n \n         this.threads = threads;\n-        this.delay   = delay;\n+        this.delay = delay;\n         this.samples = samples;\n         this.period = period;\n     }\n@@ -94,14 +93,24 @@ public class WorkloadConfiguration implements Serializable {\n \n     @Override\n     public boolean equals(Object o) {\n-        if (this == o) return true;\n-        if (o == null || getClass() != o.getClass()) return false;\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n \n         WorkloadConfiguration that = (WorkloadConfiguration) o;\n \n-        if (delay != that.delay) return false;\n-        if (samples != that.samples) return false;\n-        if (threads != that.threads) return false;\n+        if (delay != that.delay) {\n+            return false;\n+        }\n+        if (samples != that.samples) {\n+            return false;\n+        }\n+        if (threads != that.threads) {\n+            return false;\n+        }\n \n         return true;\n     }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/117/WorkloadConfiguration.java\nindex 1fd2677b094..96c289bc2a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/117/WorkloadConfiguration.java\n@@ -63,15 +63,14 @@ public class WorkloadConfiguration implements Serializable {\n     private WorkloadConfiguration(int threads, int delay, int samples, long period) {\n         try {\n             Preconditions.checkArgument(threads >= 0);\n-            Preconditions.checkArgument(delay   >= 0);\n-        }\n-        catch (IllegalArgumentException e) {\n+            Preconditions.checkArgument(delay >= 0);\n+        } catch (IllegalArgumentException e) {\n             log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n             throw Throwables.propagate(e);\n         }\n \n         this.threads = threads;\n-        this.delay   = delay;\n+        this.delay = delay;\n         this.samples = samples;\n         this.period = period;\n     }\n@@ -123,4 +122,4 @@ public class WorkloadConfiguration implements Serializable {\n                 \", period=\" + period +\n                 '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/117/WorkloadConfiguration.java\nindex 1fd2677b094..e1540de7cdb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/117/WorkloadConfiguration.java\n@@ -24,7 +24,6 @@ import com.google.common.base.Preconditions;\n import com.google.common.base.Throwables;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.io.Serializable;\n \n /**\n@@ -32,9 +31,11 @@ import java.io.Serializable;\n  *\n  * @author Mairbek Khadikov\n  */\n+\n+\n public class WorkloadConfiguration implements Serializable {\n-    private static final Logger log = LoggerFactory.getLogger(WorkloadConfiguration.class);\n \n+    private static final Logger log = LoggerFactory.getLogger(WorkloadConfiguration.class);\n     private final int threads;\n     private final int delay;\n     private final int samples;\n@@ -63,15 +64,14 @@ public class WorkloadConfiguration implements Serializable {\n     private WorkloadConfiguration(int threads, int delay, int samples, long period) {\n         try {\n             Preconditions.checkArgument(threads >= 0);\n-            Preconditions.checkArgument(delay   >= 0);\n-        }\n-        catch (IllegalArgumentException e) {\n-            log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n+            Preconditions.checkArgument(delay >= 0);\n+        } catch (IllegalArgumentException e) {\n+            log.error(\"Unsupported configuration. threads=\" + threads +\n+            \", delay=\" + delay);\n             throw Throwables.propagate(e);\n         }\n-\n         this.threads = threads;\n-        this.delay   = delay;\n+        this.delay = delay;\n         this.samples = samples;\n         this.period = period;\n     }\n@@ -98,11 +98,9 @@ public class WorkloadConfiguration implements Serializable {\n         if (o == null || getClass() != o.getClass()) return false;\n \n         WorkloadConfiguration that = (WorkloadConfiguration) o;\n-\n         if (delay != that.delay) return false;\n         if (samples != that.samples) return false;\n         if (threads != that.threads) return false;\n-\n         return true;\n     }\n \n@@ -117,10 +115,9 @@ public class WorkloadConfiguration implements Serializable {\n     @Override\n     public String toString() {\n         return \"WorkloadConfiguration{\" +\n-                \"threads=\" + threads +\n-                \", delay=\" + delay +\n-                \", samples=\" + samples +\n-                \", period=\" + period +\n-                '}';\n+        \"threads=\" + threads +\n+        \", delay=\" + delay +\n+        \", samples=\" + samples +\n+        \", period=\" + period + '}';\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "67",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "68",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "column": "14",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'catch' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "68",
                    "column": "14",
                    "severity": "warning",
                    "message": "WhitespaceAround: '}' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/117/WorkloadConfiguration.java\nindex 1fd2677b094..823e6a808e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/117/WorkloadConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/117/WorkloadConfiguration.java\n@@ -64,8 +64,8 @@ public class WorkloadConfiguration implements Serializable {\n         try {\n             Preconditions.checkArgument(threads >= 0);\n             Preconditions.checkArgument(delay   >= 0);\n-        }\n-        catch (IllegalArgumentException e) {\n+\n+            }catch (IllegalArgumentException e) {\n             log.error(\"Unsupported configuration. threads=\" + threads + \", delay=\" + delay);\n             throw Throwables.propagate(e);\n         }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}