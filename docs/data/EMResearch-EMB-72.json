{
    "project_name": "EMResearch-EMB",
    "violation_id": "72",
    "information": {
        "violations": [
            {
                "line": "40",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Nullable\n  @Override\n  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n    try {\n      int x = Integer.parseInt(arguments.get(\"x\"));\n      String centuryPrefix = arguments.get(\"x\").substring(0, 2);",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "40",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "40",
                    "column": "54",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "40",
                    "column": "60",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "40",
                    "column": "60",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "40",
                    "column": "68",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "40",
                    "column": "75",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "41",
                    "column": "3",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "41",
                    "column": "25",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "41",
                    "column": "66",
                    "severity": "warning",
                    "message": "'{' at column 66 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "41",
                    "column": "66",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "66",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "67",
                    "severity": "warning",
                    "message": "'try' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "67",
                    "severity": "warning",
                    "message": "'try' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "70",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/72/ShortenedYearRangeChecker.java\nindex b9054010d34..33bcc735523 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/72/ShortenedYearRangeChecker.java\n@@ -37,8 +37,8 @@ public class ShortenedYearRangeChecker extends RuleFilter {\n \n   @Nullable\n   @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    try {\n+  public RuleMatch acceptRuleMatch ( RuleMatch match , Map < String,String>arguments\n+  , int patternTokenPos , AnalyzedTokenReadings [ ]patternTokens){try{\n       int x = Integer.parseInt(arguments.get(\"x\"));\n       String centuryPrefix = arguments.get(\"x\").substring(0, 2);\n       int y = Integer.parseInt(centuryPrefix + arguments.get(\"y\"));\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/72/ShortenedYearRangeChecker.java\nindex b9054010d34..6fc05b05b26 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/72/ShortenedYearRangeChecker.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules;\n \n import org.jetbrains.annotations.Nullable;\n@@ -29,28 +30,30 @@ import java.util.Map;\n  * date happens before the end date. The check is trivial: simply check\n  * whether the first integer number is smaller than the second, so this\n  * can be implemented for any language.\n- *\n+ * <p>\n  * The parameters used in the XML file are called 'x' and 'y'.\n+ *\n  * @since 3.3\n  */\n public class ShortenedYearRangeChecker extends RuleFilter {\n \n-  @Nullable\n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    try {\n-      int x = Integer.parseInt(arguments.get(\"x\"));\n-      String centuryPrefix = arguments.get(\"x\").substring(0, 2);\n-      int y = Integer.parseInt(centuryPrefix + arguments.get(\"y\"));\n-      if (x >= y) {\n-        return match;\n-      }\n-    } catch (IllegalArgumentException ignore) {\n-      // if something's fishy with the number \u2013 ignore it silently,\n-      // it's not a date range\n-      return null;\n+    @Nullable\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos,\n+                                     AnalyzedTokenReadings[] patternTokens) {\n+        try {\n+            int x = Integer.parseInt(arguments.get(\"x\"));\n+            String centuryPrefix = arguments.get(\"x\").substring(0, 2);\n+            int y = Integer.parseInt(centuryPrefix + arguments.get(\"y\"));\n+            if (x >= y) {\n+                return match;\n+            }\n+        } catch (IllegalArgumentException ignore) {\n+            // if something's fishy with the number \u2013 ignore it silently,\n+            // it's not a date range\n+            return null;\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/72/ShortenedYearRangeChecker.java\nindex b9054010d34..ea67cf19fd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/72/ShortenedYearRangeChecker.java\n@@ -53,4 +53,4 @@ public class ShortenedYearRangeChecker extends RuleFilter {\n     return null;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/72/ShortenedYearRangeChecker.java\nindex b9054010d34..b84839a4bb1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/72/ShortenedYearRangeChecker.java\n@@ -21,7 +21,6 @@ package org.languagetool.rules;\n import org.jetbrains.annotations.Nullable;\n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.rules.patterns.RuleFilter;\n-\n import java.util.Map;\n \n /**\n@@ -33,24 +32,25 @@ import java.util.Map;\n  * The parameters used in the XML file are called 'x' and 'y'.\n  * @since 3.3\n  */\n-public class ShortenedYearRangeChecker extends RuleFilter {\n \n-  @Nullable\n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    try {\n-      int x = Integer.parseInt(arguments.get(\"x\"));\n-      String centuryPrefix = arguments.get(\"x\").substring(0, 2);\n-      int y = Integer.parseInt(centuryPrefix + arguments.get(\"y\"));\n-      if (x >= y) {\n-        return match;\n-      }\n-    } catch (IllegalArgumentException ignore) {\n+\n+public class ShortenedYearRangeChecker extends RuleFilter {\n+    @Nullable\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n+        try {\n+            int x = Integer.parseInt(arguments.get(\"x\"));\n+            String centuryPrefix = arguments.get(\"x\").substring(0, 2);\n+            int y = Integer.parseInt(centuryPrefix + arguments.get(\"y\"));\n+            if (x >= y) {\n+                return match;\n+            }\n+        } catch (IllegalArgumentException ignore) {\n       // if something's fishy with the number \u2013 ignore it silently,\n       // it's not a date range\n-      return null;\n+          return null;\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "40",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "40",
                    "column": "54",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "40",
                    "column": "60",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "40",
                    "column": "60",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "40",
                    "column": "68",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "40",
                    "column": "75",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "41",
                    "column": "3",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "41",
                    "column": "25",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "41",
                    "column": "66",
                    "severity": "warning",
                    "message": "'{' at column 66 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "41",
                    "column": "66",
                    "severity": "warning",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "66",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "67",
                    "severity": "warning",
                    "message": "'try' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "67",
                    "severity": "warning",
                    "message": "'try' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "41",
                    "column": "70",
                    "severity": "warning",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/72/ShortenedYearRangeChecker.java\nindex b9054010d34..33bcc735523 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/72/ShortenedYearRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/72/ShortenedYearRangeChecker.java\n@@ -37,8 +37,8 @@ public class ShortenedYearRangeChecker extends RuleFilter {\n \n   @Nullable\n   @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    try {\n+  public RuleMatch acceptRuleMatch ( RuleMatch match , Map < String,String>arguments\n+  , int patternTokenPos , AnalyzedTokenReadings [ ]patternTokens){try{\n       int x = Integer.parseInt(arguments.get(\"x\"));\n       String centuryPrefix = arguments.get(\"x\").substring(0, 2);\n       int y = Integer.parseInt(centuryPrefix + arguments.get(\"y\"));\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}