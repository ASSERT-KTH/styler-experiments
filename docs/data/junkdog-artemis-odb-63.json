{
    "project_name": "junkdog-artemis-odb",
    "violation_id": "63",
    "information": {
        "violations": [
            {
                "line": "24",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\tprivate String className; \n\n\tpublic ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n\t\tsuper(mt);\n\t\tthis.className = className;\n\t\t",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/63/ExternalFieldMethodTransformer.java\nindex 8b26f2d4e98..c8c12528c7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/63/ExternalFieldMethodTransformer.java\n@@ -19,10 +19,11 @@ import com.artemis.transformer.MethodTransformer;\n class ExternalFieldMethodTransformer extends MethodTransformer implements Opcodes {\n \n \tprivate final Map<String, ClassMetadata> components;\n-\tprivate String className; \n+\tprivate String className;\n \n-\tpublic ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n-\t\tsuper(mt);\n+ public ExternalFieldMethodTransformer(MethodTransformer mt, String\n+\t\tclassName , List <ClassMetadata>packedComponents){super\n+ (mt);\n \t\tthis.className = className;\n \t\t\n \t\tcomponents = new HashMap<String, ClassMetadata>();\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/63/ExternalFieldMethodTransformer.java\nindex 8b26f2d4e98..ea0c066d188 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/63/ExternalFieldMethodTransformer.java\n@@ -18,57 +18,60 @@ import com.artemis.transformer.MethodTransformer;\n \n class ExternalFieldMethodTransformer extends MethodTransformer implements Opcodes {\n \n-\tprivate final Map<String, ClassMetadata> components;\n-\tprivate String className; \n-\n-\tpublic ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n-\t\tsuper(mt);\n-\t\tthis.className = className;\n-\t\t\n-\t\tcomponents = new HashMap<String, ClassMetadata>();\n-\t\tfor (ClassMetadata meta : packedComponents) {\n-\t\t\tcomponents.put(meta.type.getInternalName(), meta);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean transform(MethodNode mn) {\n-\t\tInsnList instructions = mn.instructions;\n-\t\tboolean changed = false;\n-\t\t\n-\t\tfor (int i = 0; instructions.size() > i; i++) {\n-\t\t\tAbstractInsnNode node = instructions.get(i);\n-\t\t\tif (AbstractInsnNode.FIELD_INSN != node.getType())\n-\t\t\t\tcontinue;\n-\t\t\t\n-\t\t\tFieldInsnNode fn = (FieldInsnNode)node;\n-\t\t\tif (className.equals(fn.owner))\n-\t\t\t\tcontinue;\n-\t\t\t\n-\t\t\tif (PUTFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n-\t\t\t\tchanged = true;\n-\t\t\t\ti = InstructionMutator.on(instructions, fn)\n-\t\t\t\t\t.insertAtOffset(0,\n-\t\t\t\t\t\tnew MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, param(fn), false))\n-\t\t\t\t\t.delete(0)\n-\t\t\t\t\t.transform();\n-\t\t\t} else if (GETFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n-\t\t\t\tchanged = true;\n-\t\t\t\t\n-\t\t\t\ti = on(instructions, fn)\n-\t\t\t\t\t.insertAtOffset(0,\n-\t\t\t\t\t\tnew MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, \"()\" + fn.desc, false))\n-\t\t\t\t\t.delete(0)\n-\t\t\t\t\t.transform();\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\treturn changed || super.transform(mn);\n-\t}\n-\n-\tprivate static String param(FieldInsnNode n) {\n-\t\treturn \"(\" + n.desc + \")V\";\n-\t}\n-\t\n+  private final Map<String, ClassMetadata> components;\n+  private String className;\n+\n+  public ExternalFieldMethodTransformer(MethodTransformer mt, String className,\n+                                        List<ClassMetadata> packedComponents) {\n+    super(mt);\n+    this.className = className;\n+\n+    components = new HashMap<String, ClassMetadata>();\n+    for (ClassMetadata meta : packedComponents) {\n+      components.put(meta.type.getInternalName(), meta);\n+    }\n+  }\n+\n+  @Override\n+  public boolean transform(MethodNode mn) {\n+    InsnList instructions = mn.instructions;\n+    boolean changed = false;\n+\n+    for (int i = 0; instructions.size() > i; i++) {\n+      AbstractInsnNode node = instructions.get(i);\n+      if (AbstractInsnNode.FIELD_INSN != node.getType()) {\n+        continue;\n+      }\n+\n+      FieldInsnNode fn = (FieldInsnNode) node;\n+      if (className.equals(fn.owner)) {\n+        continue;\n+      }\n+\n+      if (PUTFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n+        changed = true;\n+        i = InstructionMutator.on(instructions, fn)\n+            .insertAtOffset(0,\n+                new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, param(fn), false))\n+            .delete(0)\n+            .transform();\n+      } else if (GETFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n+        changed = true;\n+\n+        i = on(instructions, fn)\n+            .insertAtOffset(0,\n+                new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, \"()\" + fn.desc, false))\n+            .delete(0)\n+            .transform();\n+      }\n+    }\n+\n+\n+    return changed || super.transform(mn);\n+  }\n+\n+  private static String param(FieldInsnNode n) {\n+    return \"(\" + n.desc + \")V\";\n+  }\n+\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/63/ExternalFieldMethodTransformer.java\nindex 8b26f2d4e98..d47afefe498 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/63/ExternalFieldMethodTransformer.java\n@@ -19,10 +19,10 @@ import com.artemis.transformer.MethodTransformer;\n class ExternalFieldMethodTransformer extends MethodTransformer implements Opcodes {\n \n \tprivate final Map<String, ClassMetadata> components;\n-\tprivate String className; \n+\tprivate String className;\n \n-\tpublic ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n-\t\tsuper(mt);\n+public ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n+\tsuper(mt);\n \t\tthis.className = className;\n \t\t\n \t\tcomponents = new HashMap<String, ClassMetadata>();\n@@ -35,8 +35,8 @@ class ExternalFieldMethodTransformer extends MethodTransformer implements Opcode\n \tpublic boolean transform(MethodNode mn) {\n \t\tInsnList instructions = mn.instructions;\n \t\tboolean changed = false;\n-\t\t\n-\t\tfor (int i = 0; instructions.size() > i; i++) {\n+\n+for (int i = 0; instructions.size() > i; i++) {\n \t\t\tAbstractInsnNode node = instructions.get(i);\n \t\t\tif (AbstractInsnNode.FIELD_INSN != node.getType())\n \t\t\t\tcontinue;\n@@ -46,7 +46,7 @@ class ExternalFieldMethodTransformer extends MethodTransformer implements Opcode\n \t\t\t\tcontinue;\n \t\t\t\n \t\t\tif (PUTFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n-\t\t\t\tchanged = true;\n+\tchanged = true;\n \t\t\t\ti = InstructionMutator.on(instructions, fn)\n \t\t\t\t\t.insertAtOffset(0,\n \t\t\t\t\t\tnew MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, param(fn), false))\n@@ -54,21 +54,17 @@ class ExternalFieldMethodTransformer extends MethodTransformer implements Opcode\n \t\t\t\t\t.transform();\n \t\t\t} else if (GETFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n \t\t\t\tchanged = true;\n-\t\t\t\t\n-\t\t\t\ti = on(instructions, fn)\n-\t\t\t\t\t.insertAtOffset(0,\n+i = on(instructions, fn).insertAtOffset(0,\n \t\t\t\t\t\tnew MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, \"()\" + fn.desc, false))\n \t\t\t\t\t.delete(0)\n \t\t\t\t\t.transform();\n \t\t\t}\n \t\t}\n-\t\t\n-\t\t\n-\t\treturn changed || super.transform(mn);\n+return changed || super.transform(mn);\n \t}\n \n \tprivate static String param(FieldInsnNode n) {\n \t\treturn \"(\" + n.desc + \")V\";\n \t}\n \t\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "22",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/63/ExternalFieldMethodTransformer.java\nindex 8b26f2d4e98..1a67640ffc0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/63/ExternalFieldMethodTransformer.java\n@@ -5,70 +5,61 @@ import static com.artemis.weaver.packed.InstructionMutator.on;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.objectweb.asm.Opcodes;\n import org.objectweb.asm.tree.AbstractInsnNode;\n import org.objectweb.asm.tree.FieldInsnNode;\n import org.objectweb.asm.tree.InsnList;\n import org.objectweb.asm.tree.MethodInsnNode;\n import org.objectweb.asm.tree.MethodNode;\n-\n import com.artemis.meta.ClassMetadata;\n import com.artemis.transformer.MethodTransformer;\n \n class ExternalFieldMethodTransformer extends MethodTransformer implements Opcodes {\n+ private final Map<String, ClassMetadata> components;\n+\n+ private String className;\n+\n+ public ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n+  super(mt);\n+  this.className = className;\n+  components = new HashMap<String, ClassMetadata>();\n+  for (ClassMetadata meta : packedComponents) {\n+   components.put(meta.type.getInternalName(), meta);\n+  }\n+ }\n \n-\tprivate final Map<String, ClassMetadata> components;\n-\tprivate String className; \n+ @Override\n+ public boolean transform(MethodNode mn) {\n+  InsnList instructions = mn.instructions;\n+  boolean changed = false;\n+  for (int i = 0; instructions.size() > i; i++) {\n+   AbstractInsnNode node = instructions.get(i);\n+   if (AbstractInsnNode.FIELD_INSN != node.getType())\n+    continue;\n \n-\tpublic ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n-\t\tsuper(mt);\n-\t\tthis.className = className;\n-\t\t\n-\t\tcomponents = new HashMap<String, ClassMetadata>();\n-\t\tfor (ClassMetadata meta : packedComponents) {\n-\t\t\tcomponents.put(meta.type.getInternalName(), meta);\n-\t\t}\n-\t}\n+   FieldInsnNode fn = (FieldInsnNode) node;\n+   if (className.equals(fn.owner))\n+    continue;\n+   if (PUTFIELD == fn.getOpcode() &&\n+   components.containsKey(fn.owner)) {\n+    changed = true;\n+    i = InstructionMutator.on(instructions, fn).insertAtOffset(0, new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, param(fn), false))\n+                                               .delete(0)\n+                                               .transform();\n+   } else if (GETFIELD == fn.getOpcode() &&\n+   components.containsKey(fn.owner)) {\n+           changed = true;\n+           i = on(instructions, fn).insertAtOffset(0,\n+new MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, \"()\" + fn.desc, false))\n+                                   .delete(0)\n+                                   .transform();\n+          }\n+  }\n \n-\t@Override\n-\tpublic boolean transform(MethodNode mn) {\n-\t\tInsnList instructions = mn.instructions;\n-\t\tboolean changed = false;\n-\t\t\n-\t\tfor (int i = 0; instructions.size() > i; i++) {\n-\t\t\tAbstractInsnNode node = instructions.get(i);\n-\t\t\tif (AbstractInsnNode.FIELD_INSN != node.getType())\n-\t\t\t\tcontinue;\n-\t\t\t\n-\t\t\tFieldInsnNode fn = (FieldInsnNode)node;\n-\t\t\tif (className.equals(fn.owner))\n-\t\t\t\tcontinue;\n-\t\t\t\n-\t\t\tif (PUTFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n-\t\t\t\tchanged = true;\n-\t\t\t\ti = InstructionMutator.on(instructions, fn)\n-\t\t\t\t\t.insertAtOffset(0,\n-\t\t\t\t\t\tnew MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, param(fn), false))\n-\t\t\t\t\t.delete(0)\n-\t\t\t\t\t.transform();\n-\t\t\t} else if (GETFIELD == fn.getOpcode() && components.containsKey(fn.owner)) {\n-\t\t\t\tchanged = true;\n-\t\t\t\t\n-\t\t\t\ti = on(instructions, fn)\n-\t\t\t\t\t.insertAtOffset(0,\n-\t\t\t\t\t\tnew MethodInsnNode(INVOKEVIRTUAL, fn.owner, fn.name, \"()\" + fn.desc, false))\n-\t\t\t\t\t.delete(0)\n-\t\t\t\t\t.transform();\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t\n-\t\treturn changed || super.transform(mn);\n-\t}\n+  return changed || super.transform(mn);\n+ }\n \n-\tprivate static String param(FieldInsnNode n) {\n-\t\treturn \"(\" + n.desc + \")V\";\n-\t}\n-\t\n-}\n+ private static String param(FieldInsnNode n) {\n+  return \"(\" + n.desc + \")V\";\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/63/ExternalFieldMethodTransformer.java\nindex 8b26f2d4e98..c8c12528c7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/63/ExternalFieldMethodTransformer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/63/ExternalFieldMethodTransformer.java\n@@ -19,10 +19,11 @@ import com.artemis.transformer.MethodTransformer;\n class ExternalFieldMethodTransformer extends MethodTransformer implements Opcodes {\n \n \tprivate final Map<String, ClassMetadata> components;\n-\tprivate String className; \n+\tprivate String className;\n \n-\tpublic ExternalFieldMethodTransformer(MethodTransformer mt, String className, List<ClassMetadata> packedComponents) {\n-\t\tsuper(mt);\n+ public ExternalFieldMethodTransformer(MethodTransformer mt, String\n+\t\tclassName , List <ClassMetadata>packedComponents){super\n+ (mt);\n \t\tthis.className = className;\n \t\t\n \t\tcomponents = new HashMap<String, ClassMetadata>();\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}