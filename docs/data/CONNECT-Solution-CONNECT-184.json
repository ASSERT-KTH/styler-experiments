{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "184",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.mpi.adapter.proxy;\n\nimport gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/184/AdapterMpiProxyJavaImpl.java\nindex 47dcce958d9..175da6d71bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/184/AdapterMpiProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.proxy;\n \n import gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/184/AdapterMpiProxyJavaImpl.java\nindex 47dcce958d9..0f07c75af0d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/184/AdapterMpiProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.proxy;\n \n import gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\n@@ -43,26 +44,24 @@ import org.hl7.v3.PRPAIN201306UV02;\n  * @author Les Westberg\n  */\n public class AdapterMpiProxyJavaImpl implements AdapterMpiProxy {\n-    private static final Logger LOG = Logger.getLogger(AdapterMpiProxyJavaImpl.class);\n+  private static final Logger LOG = Logger.getLogger(AdapterMpiProxyJavaImpl.class);\n \n-    /**\n-     * Find the matching candidates from the MPI.\n-     *\n-     * @param findCandidatesRequest\n-     *            The information to use for matching.\n-     * @param assertion\n-     *            The assertion data.\n-     * @return The matches that are found.\n-     */\n-    @Override\n-    @AdapterDelegationEvent(beforeBuilder = PRPAIN201305UV02EventDescriptionBuilder.class,\n-            afterReturningBuilder = PRPAIN201306UV02EventDescriptionBuilder.class,\n-            serviceType = \"Patient Discovery MPI\", version = \"1.0\")\n-    public PRPAIN201306UV02 findCandidates(PRPAIN201305UV02 findCandidatesRequest, AssertionType assertion) {\n-        LOG.trace(\"Entering AdapterMpiProxyJavaImpl.findCandidates\");\n-        AdapterMpiOrchImpl oOrchestrator = new AdapterMpiOrchImpl();\n-        PRPAIN201306UV02 response = oOrchestrator.query(findCandidatesRequest, assertion);\n-        LOG.trace(\"Leaving AdapterMpiProxyJavaImpl.findCandidates\");\n-        return response;\n-    }\n+  /**\n+   * Find the matching candidates from the MPI.\n+   *\n+   * @param findCandidatesRequest The information to use for matching.\n+   * @param assertion             The assertion data.\n+   * @return The matches that are found.\n+   */\n+  @Override\n+  @AdapterDelegationEvent(beforeBuilder = PRPAIN201305UV02EventDescriptionBuilder.class,\n+      afterReturningBuilder = PRPAIN201306UV02EventDescriptionBuilder.class,\n+      serviceType = \"Patient Discovery MPI\", version = \"1.0\")\n+  public PRPAIN201306UV02 findCandidates(PRPAIN201305UV02 findCandidatesRequest, AssertionType assertion) {\n+    LOG.trace(\"Entering AdapterMpiProxyJavaImpl.findCandidates\");\n+    AdapterMpiOrchImpl oOrchestrator = new AdapterMpiOrchImpl();\n+    PRPAIN201306UV02 response = oOrchestrator.query(findCandidatesRequest, assertion);\n+    LOG.trace(\"Leaving AdapterMpiProxyJavaImpl.findCandidates\");\n+    return response;\n+  }\n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/184/AdapterMpiProxyJavaImpl.java\nindex 47dcce958d9..d1d66cd9869 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/184/AdapterMpiProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.proxy;\n \n import gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\n@@ -55,14 +56,13 @@ public class AdapterMpiProxyJavaImpl implements AdapterMpiProxy {\n      * @return The matches that are found.\n      */\n     @Override\n-    @AdapterDelegationEvent(beforeBuilder = PRPAIN201305UV02EventDescriptionBuilder.class,\n-            afterReturningBuilder = PRPAIN201306UV02EventDescriptionBuilder.class,\n-            serviceType = \"Patient Discovery MPI\", version = \"1.0\")\n-    public PRPAIN201306UV02 findCandidates(PRPAIN201305UV02 findCandidatesRequest, AssertionType assertion) {\n+    @AdapterDelegationEvent(beforeBuilder = PRPAIN201305UV02EventDescriptionBuilder.class, afterReturningBuilder = PRPAIN201306UV02EventDescriptionBuilder.class, serviceType = \"Patient Discovery MPI\", version = \"1.0\")\n+public PRPAIN201306UV02 findCandidates(PRPAIN201305UV02 findCandidatesRequest, AssertionType assertion) {\n         LOG.trace(\"Entering AdapterMpiProxyJavaImpl.findCandidates\");\n         AdapterMpiOrchImpl oOrchestrator = new AdapterMpiOrchImpl();\n         PRPAIN201306UV02 response = oOrchestrator.query(findCandidatesRequest, assertion);\n         LOG.trace(\"Leaving AdapterMpiProxyJavaImpl.findCandidates\");\n-        return response;\n+\n+return response;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 217).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/184/AdapterMpiProxyJavaImpl.java\nindex 47dcce958d9..ff3fbdb9bf6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/184/AdapterMpiProxyJavaImpl.java\n@@ -31,7 +31,6 @@ import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n import gov.hhs.fha.nhinc.mpi.adapter.AdapterMpiOrchImpl;\n import gov.hhs.fha.nhinc.patientdiscovery.aspect.PRPAIN201305UV02EventDescriptionBuilder;\n import gov.hhs.fha.nhinc.patientdiscovery.aspect.PRPAIN201306UV02EventDescriptionBuilder;\n-\n import org.apache.log4j.Logger;\n import org.hl7.v3.PRPAIN201305UV02;\n import org.hl7.v3.PRPAIN201306UV02;\n@@ -42,7 +41,10 @@ import org.hl7.v3.PRPAIN201306UV02;\n  *\n  * @author Les Westberg\n  */\n+\n+\n public class AdapterMpiProxyJavaImpl implements AdapterMpiProxy {\n+\n     private static final Logger LOG = Logger.getLogger(AdapterMpiProxyJavaImpl.class);\n \n     /**\n@@ -54,10 +56,10 @@ public class AdapterMpiProxyJavaImpl implements AdapterMpiProxy {\n      *            The assertion data.\n      * @return The matches that are found.\n      */\n+\n+\n     @Override\n-    @AdapterDelegationEvent(beforeBuilder = PRPAIN201305UV02EventDescriptionBuilder.class,\n-            afterReturningBuilder = PRPAIN201306UV02EventDescriptionBuilder.class,\n-            serviceType = \"Patient Discovery MPI\", version = \"1.0\")\n+    @AdapterDelegationEvent(beforeBuilder = PRPAIN201305UV02EventDescriptionBuilder.class, afterReturningBuilder = PRPAIN201306UV02EventDescriptionBuilder.class, serviceType = \"Patient Discovery MPI\", version = \"1.0\")\n     public PRPAIN201306UV02 findCandidates(PRPAIN201305UV02 findCandidatesRequest, AssertionType assertion) {\n         LOG.trace(\"Entering AdapterMpiProxyJavaImpl.findCandidates\");\n         AdapterMpiOrchImpl oOrchestrator = new AdapterMpiOrchImpl();\n@@ -65,4 +67,5 @@ public class AdapterMpiProxyJavaImpl implements AdapterMpiProxy {\n         LOG.trace(\"Leaving AdapterMpiProxyJavaImpl.findCandidates\");\n         return response;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/184/AdapterMpiProxyJavaImpl.java\nindex 47dcce958d9..175da6d71bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/184/AdapterMpiProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.mpi.adapter.proxy;\n \n import gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "package statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "30",
                    "column": "6",
                    "severity": "error",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/184/AdapterMpiProxyJavaImpl.java\nindex 47dcce958d9..e4b332330ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/184/AdapterMpiProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/184/AdapterMpiProxyJavaImpl.java\n@@ -24,7 +24,10 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n-package gov.hhs.fha.nhinc.mpi.adapter.proxy;\n+\n+package gov.hhs.fha.nhinc.mpi.adapter.\n+\n+proxy ;\n \n import gov.hhs.fha.nhinc.aspect.AdapterDelegationEvent;\n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}