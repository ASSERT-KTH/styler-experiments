{
    "project_name": "neo4j-neo4j",
    "violation_id": "2473",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2473/BitsUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2473/BitsUtil.java\nindex 8fd72e2c315..7a6381caed2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2473/BitsUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2473/BitsUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.id.indexed;\n \n import static java.lang.Integer.min;\n@@ -38,7 +39,7 @@ final class BitsUtil\n      * @param slots number of bits to set.\n      * @return a {@code long} with the desired bits set.\n      */\n-    static long bitsInSingleLong( int start, int slots )\n+    static long bitsInSingleLong(int start, int slots)\n     {\n         long bits = (start + slots == Long.SIZE) ? -1 : (1L << (start + slots)) - 1;\n         return bits & -(1L << start);\n@@ -47,19 +48,19 @@ final class BitsUtil\n     /**\n      * Sets a range of bits in one of the longs in the provided array.\n      *\n-     * @param bits array of longs where one of them, decided by {@code bitsArraySlot} will have some bits set.\n-     * @param start offset of starting bit to set.\n-     * @param slots number of bits to set.\n+     * @param bits          array of longs where one of them, decided by {@code bitsArraySlot} will have some bits set.\n+     * @param start         offset of starting bit to set.\n+     * @param slots         number of bits to set.\n      * @param bitsArraySlot the index into {@code bits} which will have the bits set.\n      */\n-    static void setBits( long[] bits, int start, int slots, int bitsArraySlot )\n+    static void setBits(long[] bits, int start, int slots, int bitsArraySlot)\n     {\n         int firstArraySlot = bitsArraySlot + start / Long.SIZE;\n         start %= Long.SIZE;\n-        for ( int arraySlot = firstArraySlot; slots > 0; arraySlot++ )\n+        for (int arraySlot = firstArraySlot; slots > 0; arraySlot++)\n         {\n-            int slotsInThisLong = min( slots, Long.SIZE - start );\n-            long bitsInThisSlot = bitsInSingleLong( start, slotsInThisLong );\n+            int slotsInThisLong = min(slots, Long.SIZE - start);\n+            long bitsInThisSlot = bitsInSingleLong(start, slotsInThisLong);\n             assert bits[arraySlot] == 0;\n             bits[arraySlot] = bitsInThisSlot;\n             slots -= slotsInThisLong;\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}