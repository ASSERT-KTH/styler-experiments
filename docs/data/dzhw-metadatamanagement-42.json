{
    "project_name": "dzhw-metadatamanagement",
    "violation_id": "42",
    "information": {
        "violations": [
            {
                "line": "29",
                "column": "75",
                "severity": "error",
                "message": "'}' at column 75 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/42/ValidUniqueQuestionNumberValidator.java\nindex c72d35e4574..4e9fea3a330 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/42/ValidUniqueQuestionNumberValidator.java\n@@ -26,7 +26,9 @@ public class ValidUniqueQuestionNumberValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n+  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/42/ValidUniqueQuestionNumberValidator.java\nindex c72d35e4574..856ae47db03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/42/ValidUniqueQuestionNumberValidator.java\n@@ -16,21 +16,22 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n  */\n public class ValidUniqueQuestionNumberValidator\n     implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n-  \n+\n   @Autowired\n   private QuestionRepository questionRepository;\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n+  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "'}' at column 75 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/naturalize/42/ValidUniqueQuestionNumberValidator.java\nindex c72d35e4574..d24874ffd8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/naturalize/42/ValidUniqueQuestionNumberValidator.java\n@@ -45,7 +45,7 @@ public class ValidUniqueQuestionNumberValidator\n         List<IdAndVersionProjection> existingQuestions =\n             questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n                 question.getNumber());\n-        if (existingQuestions.isEmpty()) {\n+if (existingQuestions.isEmpty()) {\n           return true;\n         } else {\n           //we are updating this question\n@@ -54,6 +54,5 @@ public class ValidUniqueQuestionNumberValidator\n       }\n       return true;\n     }\n-\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'ConstraintValidatorContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/42/ValidUniqueQuestionNumberValidator.java\nindex c72d35e4574..1cd91a4fd30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/42/ValidUniqueQuestionNumberValidator.java\n@@ -1,12 +1,9 @@\n package eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.validation;\n \n import java.util.List;\n-\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n-\n import eu.dzhw.fdz.metadatamanagement.common.domain.projections.IdAndVersionProjection;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.domain.Question;\n import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepository;\n@@ -14,9 +11,10 @@ import eu.dzhw.fdz.metadatamanagement.questionmanagement.repository.QuestionRepo\n /**\n  * Validates the uniqueness of question.\n  */\n-public class ValidUniqueQuestionNumberValidator\n-    implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n-  \n+\n+\n+public class ValidUniqueQuestionNumberValidator implements ConstraintValidator<ValidUniqueQuestionNumber, Question> {\n+\n   @Autowired\n   private QuestionRepository questionRepository;\n \n@@ -25,8 +23,11 @@ public class ValidUniqueQuestionNumberValidator\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n+\n   @Override\n-  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n+  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n@@ -34,26 +35,26 @@ public class ValidUniqueQuestionNumberValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n+\n+\n   @Override\n-  public boolean isValid(Question question, ConstraintValidatorContext context) {\n+  public boolean isValid(Question question,\n+    ConstraintValidatorContext context) {\n     if (question.isShadow()) {\n       return true;\n     } else {\n-      if (question.getInstrumentId() != null\n-          && question.getNumber() != null) {\n-\n-        List<IdAndVersionProjection> existingQuestions =\n-            questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(),\n-                question.getNumber());\n+      if (question.getInstrumentId() != null && question.getNumber() != null) {\n+        List<IdAndVersionProjection> existingQuestions = questionRepository.findIdsByInstrumentIdAndNumber(question.getInstrumentId(), question.getNumber());\n         if (existingQuestions.isEmpty()) {\n           return true;\n         } else {\n           //we are updating this question\n-          return existingQuestions.get(0).getId().equals(question.getId());\n+          return existingQuestions.get(0).getId()\n+                                         .equals(question.getId());\n         }\n       }\n+\n       return true;\n     }\n-\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/42/ValidUniqueQuestionNumberValidator.java\nindex c72d35e4574..4e9fea3a330 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/42/ValidUniqueQuestionNumberValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/42/ValidUniqueQuestionNumberValidator.java\n@@ -26,7 +26,9 @@ public class ValidUniqueQuestionNumberValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {}\n+  public void initialize(ValidUniqueQuestionNumber constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "29",
                    "column": "75",
                    "severity": "error",
                    "message": "'}' at column 75 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}