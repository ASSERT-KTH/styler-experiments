{
    "project_name": "Angel-ML-angel",
    "violation_id": "820",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/820/ServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/820/ServerRowsStorage.java\nindex aa33fc63f43..e97c5c95a71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/820/ServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/820/ServerRowsStorage.java\n@@ -30,68 +30,68 @@ import io.netty.buffer.ByteBuf;\n  * Base class for row-based matrix partition storage\n  */\n public abstract class ServerRowsStorage extends ServerPartitionStorage implements\n-    IServerRowsStorageOp {\n+        IServerRowsStorageOp {\n \n-  /**\n-   * Create new ServerRowsStorage\n-   *\n-   * @param rowIdOffset Row id offset\n-   */\n-  public ServerRowsStorage(int rowIdOffset) {\n-    super(rowIdOffset);\n-  }\n+    /**\n+     * Create new ServerRowsStorage\n+     *\n+     * @param rowIdOffset Row id offset\n+     */\n+    public ServerRowsStorage(int rowIdOffset) {\n+        super(rowIdOffset);\n+    }\n \n-  /**\n-   * Create new ServerRowsStorage\n-   */\n-  public ServerRowsStorage() {\n-    this(0);\n-  }\n+    /**\n+     * Create new ServerRowsStorage\n+     */\n+    public ServerRowsStorage() {\n+        this(0);\n+    }\n \n-  /**\n-   * Init the server rows in the storage\n-   *\n-   * @param partKey partition key\n-   * @param rowType row type\n-   * @param estSparsity estimate sparsity\n-   * @param valueClass row element type\n-   */\n-  public void init(\n-      PartitionKey partKey, RowType rowType, double estSparsity,\n-      Class<? extends IElement> valueClass) {\n-    int rowStart = partKey.getStartRow();\n-    int rowEnd = partKey.getEndRow();\n-    long startCol = partKey.getStartCol();\n-    long endCol = partKey.getEndCol();\n+    /**\n+     * Init the server rows in the storage\n+     *\n+     * @param partKey     partition key\n+     * @param rowType     row type\n+     * @param estSparsity estimate sparsity\n+     * @param valueClass  row element type\n+     */\n+    public void init(\n+            PartitionKey partKey, RowType rowType, double estSparsity,\n+            Class<? extends IElement> valueClass) {\n+        int rowStart = partKey.getStartRow();\n+        int rowEnd = partKey.getEndRow();\n+        long startCol = partKey.getStartCol();\n+        long endCol = partKey.getEndCol();\n \n-    int elementNum = partKey.getIndexNum();\n-    if (elementNum <= 0) {\n-      elementNum = (int) ((endCol - startCol) * estSparsity);\n-    }\n+        int elementNum = partKey.getIndexNum();\n+        if (elementNum <= 0) {\n+            elementNum = (int) ((endCol - startCol) * estSparsity);\n+        }\n \n-    if(elementNum < 0) {\n-      elementNum = 1024;\n-    }\n+        if (elementNum < 0) {\n+            elementNum = 1024;\n+        }\n \n-    for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n-      ServerRow row = ServerRowFactory\n-          .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n-      row.init();\n-      putRow(rowIndex, row);\n+        for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n+            ServerRow row = ServerRowFactory\n+                    .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n+            row.init();\n+            putRow(rowIndex, row);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void update(ByteBuf buf, UpdateOp op) {\n-    int rowNum = buf.readInt();\n-    int rowId;\n-    RowType rowType;\n+    @Override\n+    public void update(ByteBuf buf, UpdateOp op) {\n+        int rowNum = buf.readInt();\n+        int rowId;\n+        RowType rowType;\n \n-    for (int i = 0; i < rowNum; i++) {\n-      rowId = buf.readInt();\n-      rowType = RowType.valueOf(buf.readInt());\n-      ServerRow row = getRow(rowId);\n-      row.update(rowType, buf, op);\n+        for (int i = 0; i < rowNum; i++) {\n+            rowId = buf.readInt();\n+            rowType = RowType.valueOf(buf.readInt());\n+            ServerRow row = getRow(rowId);\n+            row.update(rowType, buf, op);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/820/ServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/820/ServerRowsStorage.java\nindex aa33fc63f43..dcfe875d7c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/820/ServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/820/ServerRowsStorage.java\n@@ -29,8 +29,7 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Base class for row-based matrix partition storage\n  */\n-public abstract class ServerRowsStorage extends ServerPartitionStorage implements\n-    IServerRowsStorageOp {\n+public abstract class ServerRowsStorage extends ServerPartitionStorage implements IServerRowsStorageOp {\n \n   /**\n    * Create new ServerRowsStorage\n@@ -59,7 +58,7 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n   public void init(\n       PartitionKey partKey, RowType rowType, double estSparsity,\n       Class<? extends IElement> valueClass) {\n-    int rowStart = partKey.getStartRow();\n+  int rowStart = partKey.getStartRow();\n     int rowEnd = partKey.getEndRow();\n     long startCol = partKey.getStartCol();\n     long endCol = partKey.getEndCol();\n@@ -69,13 +68,12 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n       elementNum = (int) ((endCol - startCol) * estSparsity);\n     }\n \n-    if(elementNum < 0) {\n+    if (elementNum < 0) {\n       elementNum = 1024;\n     }\n \n     for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n-      ServerRow row = ServerRowFactory\n-          .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n+      ServerRow row = ServerRowFactory.createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n       row.init();\n       putRow(rowIndex, row);\n     }\n@@ -94,4 +92,4 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n       row.update(rowType, buf, op);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/820/ServerRowsStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/820/ServerRowsStorage.java\nindex aa33fc63f43..f7e4639cfeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/820/ServerRowsStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/820/ServerRowsStorage.java\n@@ -29,14 +29,15 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Base class for row-based matrix partition storage\n  */\n-public abstract class ServerRowsStorage extends ServerPartitionStorage implements\n-    IServerRowsStorageOp {\n+\n+public abstract class ServerRowsStorage extends ServerPartitionStorage implements IServerRowsStorageOp {\n \n   /**\n    * Create new ServerRowsStorage\n    *\n    * @param rowIdOffset Row id offset\n    */\n+\n   public ServerRowsStorage(int rowIdOffset) {\n     super(rowIdOffset);\n   }\n@@ -44,6 +45,7 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n   /**\n    * Create new ServerRowsStorage\n    */\n+\n   public ServerRowsStorage() {\n     this(0);\n   }\n@@ -56,26 +58,24 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n    * @param estSparsity estimate sparsity\n    * @param valueClass row element type\n    */\n+\n   public void init(\n-      PartitionKey partKey, RowType rowType, double estSparsity,\n-      Class<? extends IElement> valueClass) {\n+    PartitionKey partKey, RowType rowType, double estSparsity, Class<? extends IElement> valueClass) {\n     int rowStart = partKey.getStartRow();\n     int rowEnd = partKey.getEndRow();\n     long startCol = partKey.getStartCol();\n     long endCol = partKey.getEndCol();\n-\n     int elementNum = partKey.getIndexNum();\n     if (elementNum <= 0) {\n       elementNum = (int) ((endCol - startCol) * estSparsity);\n     }\n \n-    if(elementNum < 0) {\n+    if (elementNum < 0) {\n       elementNum = 1024;\n     }\n \n     for (int rowIndex = rowStart; rowIndex < rowEnd; rowIndex++) {\n-      ServerRow row = ServerRowFactory\n-          .createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n+      ServerRow row = ServerRowFactory.createServerRow(rowIndex, rowType, startCol, endCol, elementNum, valueClass);\n       row.init();\n       putRow(rowIndex, row);\n     }\n@@ -86,7 +86,6 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n     int rowNum = buf.readInt();\n     int rowId;\n     RowType rowType;\n-\n     for (int i = 0; i < rowNum; i++) {\n       rowId = buf.readInt();\n       rowType = RowType.valueOf(buf.readInt());\n@@ -94,4 +93,5 @@ public abstract class ServerRowsStorage extends ServerPartitionStorage implement\n       row.update(rowType, buf, op);\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}