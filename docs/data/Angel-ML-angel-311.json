{
    "project_name": "Angel-ML-angel",
    "violation_id": "311",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/311/GetNodeFeats.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/311/GetNodeFeats.java\nindex 39f4a600b28..4e7a7c56c67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/311/GetNodeFeats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/311/GetNodeFeats.java\n@@ -33,64 +33,65 @@ import java.util.List;\n \n public class GetNodeFeats extends GetFunc {\n \n-  /**\n-   * Create a new DefaultGetFunc.\n-   *\n-   * @param param parameter of get udf\n-   */\n-  public GetNodeFeats(GetNodeFeatsParam param) {\n-    super(param);\n-  }\n+    /**\n+     * Create a new DefaultGetFunc.\n+     *\n+     * @param param parameter of get udf\n+     */\n+    public GetNodeFeats(GetNodeFeatsParam param) {\n+        super(param);\n+    }\n \n-  public GetNodeFeats() {\n-    this(null);\n-  }\n+    public GetNodeFeats() {\n+        this(null);\n+    }\n \n-  @Override\n-  public PartitionGetResult partitionGet(PartitionGetParam partParam) {\n-    PartGetNodeFeatsParam param = (PartGetNodeFeatsParam) partParam;\n-    ServerMatrix matrix = psContext.getMatrixStorageManager().getMatrix(partParam.getMatrixId());\n-    ServerPartition part = matrix.getPartition(partParam.getPartKey().getPartitionId());\n-    ServerIntAnyRow row = (ServerIntAnyRow) (((RowBasedPartition) part).getRow(0));\n-    int[] nodeIds = param.getNodeIds();\n+    @Override\n+    public PartitionGetResult partitionGet(PartitionGetParam partParam) {\n+        PartGetNodeFeatsParam param = (PartGetNodeFeatsParam) partParam;\n+        ServerMatrix matrix =\n+                psContext.getMatrixStorageManager().getMatrix(partParam.getMatrixId());\n+        ServerPartition part = matrix.getPartition(partParam.getPartKey().getPartitionId());\n+        ServerIntAnyRow row = (ServerIntAnyRow) (((RowBasedPartition) part).getRow(0));\n+        int[] nodeIds = param.getNodeIds();\n \n-    IntFloatVector[] feats = new IntFloatVector[nodeIds.length];\n-    for (int i = 0; i < nodeIds.length; i++) {\n-      if (row.get(nodeIds[i]) == null) {\n-        continue;\n-      }\n-      feats[i] = ((Node) (row.get(nodeIds[i]))).getFeats();\n+        IntFloatVector[] feats = new IntFloatVector[nodeIds.length];\n+        for (int i = 0; i < nodeIds.length; i++) {\n+            if (row.get(nodeIds[i]) == null) {\n+                continue;\n+            }\n+            feats[i] = ((Node) (row.get(nodeIds[i]))).getFeats();\n+        }\n+        return new PartGetNodeFeatsResult(part.getPartitionKey().getPartitionId(), feats);\n     }\n-    return new PartGetNodeFeatsResult(part.getPartitionKey().getPartitionId(), feats);\n-  }\n \n-  @Override\n-  public GetResult merge(List<PartitionGetResult> partResults) {\n-    Int2ObjectArrayMap<PartitionGetResult> partIdToResultMap = new Int2ObjectArrayMap<>(\n-        partResults.size());\n-    for (PartitionGetResult result : partResults) {\n-      partIdToResultMap.put(((PartGetNodeFeatsResult) result).getPartId(), result);\n-    }\n+    @Override\n+    public GetResult merge(List<PartitionGetResult> partResults) {\n+        Int2ObjectArrayMap<PartitionGetResult> partIdToResultMap = new Int2ObjectArrayMap<>(\n+                partResults.size());\n+        for (PartitionGetResult result : partResults) {\n+            partIdToResultMap.put(((PartGetNodeFeatsResult) result).getPartId(), result);\n+        }\n \n-    GetNodeFeatsParam param = (GetNodeFeatsParam) getParam();\n-    int[] nodeIds = param.getNodeIds();\n-    List<PartitionGetParam> partParams = param.getPartParams();\n+        GetNodeFeatsParam param = (GetNodeFeatsParam) getParam();\n+        int[] nodeIds = param.getNodeIds();\n+        List<PartitionGetParam> partParams = param.getPartParams();\n \n-    Int2ObjectOpenHashMap<IntFloatVector> results = new Int2ObjectOpenHashMap<>(nodeIds.length);\n+        Int2ObjectOpenHashMap<IntFloatVector> results = new Int2ObjectOpenHashMap<>(nodeIds.length);\n \n-    int size = partResults.size();\n-    for (int i = 0; i < size; i++) {\n-      PartGetNodeFeatsParam partParam = (PartGetNodeFeatsParam) partParams.get(i);\n-      PartGetNodeFeatsResult partResult = (PartGetNodeFeatsResult) partIdToResultMap\n-          .get(partParam.getPartKey().getPartitionId());\n+        int size = partResults.size();\n+        for (int i = 0; i < size; i++) {\n+            PartGetNodeFeatsParam partParam = (PartGetNodeFeatsParam) partParams.get(i);\n+            PartGetNodeFeatsResult partResult = (PartGetNodeFeatsResult) partIdToResultMap\n+                    .get(partParam.getPartKey().getPartitionId());\n \n-      int start = partParam.getStartIndex();\n-      int end = partParam.getEndIndex();\n-      IntFloatVector[] feats = partResult.getFeats();\n-      for (int j = start; j < end; j++) {\n-        results.put(nodeIds[j], feats[j - start]);\n-      }\n+            int start = partParam.getStartIndex();\n+            int end = partParam.getEndIndex();\n+            IntFloatVector[] feats = partResult.getFeats();\n+            for (int j = start; j < end; j++) {\n+                results.put(nodeIds[j], feats[j - start]);\n+            }\n+        }\n+        return new GetNodeFeatsResult(results);\n     }\n-    return new GetNodeFeatsResult(results);\n-  }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/311/GetNodeFeats.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/311/GetNodeFeats.java\nindex 39f4a600b28..1a4a3afde87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/311/GetNodeFeats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/311/GetNodeFeats.java\n@@ -66,8 +66,7 @@ public class GetNodeFeats extends GetFunc {\n \n   @Override\n   public GetResult merge(List<PartitionGetResult> partResults) {\n-    Int2ObjectArrayMap<PartitionGetResult> partIdToResultMap = new Int2ObjectArrayMap<>(\n-        partResults.size());\n+    Int2ObjectArrayMap<PartitionGetResult> partIdToResultMap = new Int2ObjectArrayMap<>(partResults.size());\n     for (PartitionGetResult result : partResults) {\n       partIdToResultMap.put(((PartGetNodeFeatsResult) result).getPartId(), result);\n     }\n@@ -81,8 +80,7 @@ public class GetNodeFeats extends GetFunc {\n     int size = partResults.size();\n     for (int i = 0; i < size; i++) {\n       PartGetNodeFeatsParam partParam = (PartGetNodeFeatsParam) partParams.get(i);\n-      PartGetNodeFeatsResult partResult = (PartGetNodeFeatsResult) partIdToResultMap\n-          .get(partParam.getPartKey().getPartitionId());\n+      PartGetNodeFeatsResult partResult = (PartGetNodeFeatsResult) partIdToResultMap.get(partParam.getPartKey().getPartitionId());\n \n       int start = partParam.getStartIndex();\n       int end = partParam.getEndIndex();\n@@ -93,4 +91,4 @@ public class GetNodeFeats extends GetFunc {\n     }\n     return new GetNodeFeatsResult(results);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/311/GetNodeFeats.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/311/GetNodeFeats.java\nindex 39f4a600b28..846f34d2d6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/311/GetNodeFeats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/311/GetNodeFeats.java\n@@ -38,6 +38,7 @@ public class GetNodeFeats extends GetFunc {\n    *\n    * @param param parameter of get udf\n    */\n+\n   public GetNodeFeats(GetNodeFeatsParam param) {\n     super(param);\n   }\n@@ -53,7 +54,6 @@ public class GetNodeFeats extends GetFunc {\n     ServerPartition part = matrix.getPartition(partParam.getPartKey().getPartitionId());\n     ServerIntAnyRow row = (ServerIntAnyRow) (((RowBasedPartition) part).getRow(0));\n     int[] nodeIds = param.getNodeIds();\n-\n     IntFloatVector[] feats = new IntFloatVector[nodeIds.length];\n     for (int i = 0; i < nodeIds.length; i++) {\n       if (row.get(nodeIds[i]) == null) {\n@@ -66,8 +66,7 @@ public class GetNodeFeats extends GetFunc {\n \n   @Override\n   public GetResult merge(List<PartitionGetResult> partResults) {\n-    Int2ObjectArrayMap<PartitionGetResult> partIdToResultMap = new Int2ObjectArrayMap<>(\n-        partResults.size());\n+    Int2ObjectArrayMap<PartitionGetResult> partIdToResultMap = new Int2ObjectArrayMap<>(partResults.size());\n     for (PartitionGetResult result : partResults) {\n       partIdToResultMap.put(((PartGetNodeFeatsResult) result).getPartId(), result);\n     }\n@@ -75,15 +74,11 @@ public class GetNodeFeats extends GetFunc {\n     GetNodeFeatsParam param = (GetNodeFeatsParam) getParam();\n     int[] nodeIds = param.getNodeIds();\n     List<PartitionGetParam> partParams = param.getPartParams();\n-\n     Int2ObjectOpenHashMap<IntFloatVector> results = new Int2ObjectOpenHashMap<>(nodeIds.length);\n-\n     int size = partResults.size();\n     for (int i = 0; i < size; i++) {\n       PartGetNodeFeatsParam partParam = (PartGetNodeFeatsParam) partParams.get(i);\n-      PartGetNodeFeatsResult partResult = (PartGetNodeFeatsResult) partIdToResultMap\n-          .get(partParam.getPartKey().getPartitionId());\n-\n+      PartGetNodeFeatsResult partResult = (PartGetNodeFeatsResult) partIdToResultMap.get(partParam.getPartKey().getPartitionId());\n       int start = partParam.getStartIndex();\n       int end = partParam.getEndIndex();\n       IntFloatVector[] feats = partResult.getFeats();\n@@ -93,4 +88,5 @@ public class GetNodeFeats extends GetFunc {\n     }\n     return new GetNodeFeatsResult(results);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}