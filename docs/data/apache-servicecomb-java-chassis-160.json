{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "160",
    "information": {
        "violations": [
            {
                "line": "86",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 154).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "              responseEx.getHeader(HttpHeaders.CONTENT_TYPE));\n      LOGGER.error(msg);\n      return ExceptionFactory.createConsumerException(new InvocationException(responseEx.getStatus(), responseEx.getStatusType().getReasonPhrase(), msg));\n    }\n\n    try {",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/160/DefaultHttpClientFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/160/DefaultHttpClientFilter.java\nindex 659ba2a8682..aa448a1635b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/160/DefaultHttpClientFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/160/DefaultHttpClientFilter.java\n@@ -50,7 +50,7 @@ public class DefaultHttpClientFilter implements HttpClientFilter {\n   }\n \n   protected ProduceProcessor findProduceProcessor(RestOperationMeta restOperation,\n-      HttpServletResponseEx responseEx) {\n+                                                  HttpServletResponseEx responseEx) {\n     String contentType = responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n     if (contentType == null) {\n       return null;\n@@ -83,7 +83,8 @@ public class DefaultHttpClientFilter implements HttpClientFilter {\n               responseEx.getStatusType().getReasonPhrase(),\n               responseEx.getHeader(HttpHeaders.CONTENT_TYPE));\n       LOGGER.error(msg);\n-      return ExceptionFactory.createConsumerException(new InvocationException(responseEx.getStatus(), responseEx.getStatusType().getReasonPhrase(), msg));\n+      return ExceptionFactory.createConsumerException(\n+          new InvocationException(responseEx.getStatus(), responseEx.getStatusType().getReasonPhrase(), msg));\n     }\n \n     try {\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/160/DefaultHttpClientFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/160/DefaultHttpClientFilter.java\nindex 659ba2a8682..99018c42a7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/160/DefaultHttpClientFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/160/DefaultHttpClientFilter.java\n@@ -109,4 +109,4 @@ public class DefaultHttpClientFilter implements HttpClientFilter {\n \n     return response;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 326).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/160/DefaultHttpClientFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/160/DefaultHttpClientFilter.java\nindex 659ba2a8682..e781e3cb2e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/160/DefaultHttpClientFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/160/DefaultHttpClientFilter.java\n@@ -18,9 +18,7 @@\n package org.apache.servicecomb.transport.rest.client.http;\n \n import java.util.Collection;\n-\n import javax.ws.rs.core.HttpHeaders;\n-\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.codec.produce.ProduceProcessor;\n import org.apache.servicecomb.common.rest.definition.RestOperationMeta;\n@@ -49,8 +47,7 @@ public class DefaultHttpClientFilter implements HttpClientFilter {\n \n   }\n \n-  protected ProduceProcessor findProduceProcessor(RestOperationMeta restOperation,\n-      HttpServletResponseEx responseEx) {\n+  protected ProduceProcessor findProduceProcessor(RestOperationMeta restOperation, HttpServletResponseEx responseEx) {\n     String contentType = responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n     if (contentType == null) {\n       return null;\n@@ -75,13 +72,7 @@ public class DefaultHttpClientFilter implements HttpClientFilter {\n     RestOperationMeta swaggerRestOperation = operationMeta.getExtData(RestConst.SWAGGER_REST_OPERATION);\n     ProduceProcessor produceProcessor = findProduceProcessor(swaggerRestOperation, responseEx);\n     if (produceProcessor == null) {\n-      String msg =\n-          String.format(\"method %s, path %s, statusCode %d, reasonPhrase %s, response content-type %s is not supported\",\n-              swaggerRestOperation.getHttpMethod(),\n-              swaggerRestOperation.getAbsolutePath(),\n-              responseEx.getStatus(),\n-              responseEx.getStatusType().getReasonPhrase(),\n-              responseEx.getHeader(HttpHeaders.CONTENT_TYPE));\n+      String msg = String.format(\"method %s, path %s, statusCode %d, reasonPhrase %s, response content-type %s is not supported\", swaggerRestOperation.getHttpMethod(), swaggerRestOperation.getAbsolutePath(), responseEx.getStatus(), responseEx.getStatusType().getReasonPhrase(), responseEx.getHeader(HttpHeaders.CONTENT_TYPE));\n       LOGGER.error(msg);\n       return ExceptionFactory.createConsumerException(new InvocationException(responseEx.getStatus(), responseEx.getStatusType().getReasonPhrase(), msg));\n     }\n@@ -97,16 +88,13 @@ public class DefaultHttpClientFilter implements HttpClientFilter {\n   @Override\n   public Response afterReceiveResponse(Invocation invocation, HttpServletResponseEx responseEx) {\n     Object result = extractResponse(invocation, responseEx);\n-\n-    Response response =\n-        Response.create(responseEx.getStatusType(), result);\n+    Response response = Response.create(responseEx.getStatusType(), result);\n     for (String headerName : responseEx.getHeaderNames()) {\n       Collection<String> headerValues = responseEx.getHeaders(headerName);\n       for (String headerValue : headerValues) {\n         response.getHeaders().addHeader(headerName, headerValue);\n       }\n     }\n-\n     return response;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}