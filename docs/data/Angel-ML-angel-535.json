{
    "project_name": "Angel-ML-angel",
    "violation_id": "535",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/535/SampleNeighborPartParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/535/SampleNeighborPartParam.java\nindex 015b69c7b78..b04fdd5f0fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/535/SampleNeighborPartParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/535/SampleNeighborPartParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.sampleneighbor4;\n \n import com.tencent.angel.PartitionKey;\n@@ -23,75 +24,76 @@ import io.netty.buffer.ByteBuf;\n \n public class SampleNeighborPartParam extends PartitionGetParam {\n \n-  private long[] keys;\n-  private int numSample;\n-  private int startIndex;\n-  private int endIndex;\n-  private boolean sampleTypes;\n+    private long[] keys;\n+    private int numSample;\n+    private int startIndex;\n+    private int endIndex;\n+    private boolean sampleTypes;\n \n-  public SampleNeighborPartParam(int matrixId, PartitionKey pkey,\n-      int numSample, long[] keys,\n-      boolean sampleTypes,\n-      int startIndex, int endIndex) {\n-    super(matrixId, pkey);\n-    this.keys = keys;\n-    this.numSample = numSample;\n-    this.sampleTypes = sampleTypes;\n-    this.startIndex = startIndex;\n-    this.endIndex = endIndex;\n-    assert endIndex > startIndex;\n-  }\n+    public SampleNeighborPartParam(int matrixId, PartitionKey pkey,\n+                                   int numSample, long[] keys,\n+                                   boolean sampleTypes,\n+                                   int startIndex, int endIndex) {\n+        super(matrixId, pkey);\n+        this.keys = keys;\n+        this.numSample = numSample;\n+        this.sampleTypes = sampleTypes;\n+        this.startIndex = startIndex;\n+        this.endIndex = endIndex;\n+        assert endIndex > startIndex;\n+    }\n \n-  public SampleNeighborPartParam() {\n-    this(0, null, 0, null, false, 0, 0);\n-  }\n+    public SampleNeighborPartParam() {\n+        this(0, null, 0, null, false, 0, 0);\n+    }\n \n-  public long[] getKeys() {\n-    return keys;\n-  }\n+    public long[] getKeys() {\n+        return keys;\n+    }\n \n-  public int getNumSample() {\n-    return numSample;\n-  }\n+    public int getNumSample() {\n+        return numSample;\n+    }\n \n-  public int getStartIndex() {\n-    return startIndex;\n-  }\n+    public int getStartIndex() {\n+        return startIndex;\n+    }\n \n-  public int getEndIndex() {\n-    return endIndex;\n-  }\n+    public int getEndIndex() {\n+        return endIndex;\n+    }\n \n-  public boolean getSampleTypes() {\n-    return sampleTypes;\n-  }\n+    public boolean getSampleTypes() {\n+        return sampleTypes;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    buf.writeInt(numSample);\n-    buf.writeBoolean(sampleTypes);\n-    buf.writeInt(endIndex - startIndex);\n-    for (int i = startIndex; i < endIndex; i++) {\n-      buf.writeLong(keys[i]);\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        buf.writeInt(numSample);\n+        buf.writeBoolean(sampleTypes);\n+        buf.writeInt(endIndex - startIndex);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            buf.writeLong(keys[i]);\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    numSample = buf.readInt();\n-    sampleTypes = buf.readBoolean();\n-    keys = new long[buf.readInt()];\n-    for (int i = 0; i < keys.length; i++) {\n-      keys[i] = buf.readLong();\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        numSample = buf.readInt();\n+        sampleTypes = buf.readBoolean();\n+        keys = new long[buf.readInt()];\n+        for (int i = 0; i < keys.length; i++) {\n+            keys[i] = buf.readLong();\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = super.bufferLen();\n-    len += 8 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes) + 8 * (endIndex - startIndex);\n-    return len;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        int len = super.bufferLen();\n+        len += 8 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes) +\n+                8 * (endIndex - startIndex);\n+        return len;\n+    }\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/535/SampleNeighborPartParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/535/SampleNeighborPartParam.java\nindex 015b69c7b78..ac7c3535438 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/535/SampleNeighborPartParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/535/SampleNeighborPartParam.java\n@@ -29,9 +29,7 @@ public class SampleNeighborPartParam extends PartitionGetParam {\n   private int endIndex;\n   private boolean sampleTypes;\n \n-  public SampleNeighborPartParam(int matrixId, PartitionKey pkey,\n-      int numSample, long[] keys,\n-      boolean sampleTypes,\n+  public SampleNeighborPartParam(int matrixId, PartitionKey pkey, int numSample, long[] keys, boolean sampleTypes,\n       int startIndex, int endIndex) {\n     super(matrixId, pkey);\n     this.keys = keys;\n@@ -94,4 +92,4 @@ public class SampleNeighborPartParam extends PartitionGetParam {\n     len += 8 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes) + 8 * (endIndex - startIndex);\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/535/SampleNeighborPartParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/535/SampleNeighborPartParam.java\nindex 015b69c7b78..ed5a2a16196 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/535/SampleNeighborPartParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/535/SampleNeighborPartParam.java\n@@ -29,10 +29,10 @@ public class SampleNeighborPartParam extends PartitionGetParam {\n   private int endIndex;\n   private boolean sampleTypes;\n \n-  public SampleNeighborPartParam(int matrixId, PartitionKey pkey,\n-      int numSample, long[] keys,\n-      boolean sampleTypes,\n-      int startIndex, int endIndex) {\n+  public SampleNeighborPartParam(int matrixId,\n+                                 PartitionKey pkey, int numSample,\n+                                 long[] keys,\n+                                 boolean sampleTypes, int startIndex, int endIndex) {\n     super(matrixId, pkey);\n     this.keys = keys;\n     this.numSample = numSample;\n@@ -94,4 +94,5 @@ public class SampleNeighborPartParam extends PartitionGetParam {\n     len += 8 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes) + 8 * (endIndex - startIndex);\n     return len;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}