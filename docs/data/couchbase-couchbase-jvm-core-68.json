{
    "project_name": "couchbase-couchbase-jvm-core",
    "violation_id": "68",
    "information": {
        "violations": [
            {
                "line": "44",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return the parsed bucket configuration.\n     */\n    public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n        try {\n            InjectableValues inject = new InjectableValues.Std()\n                    .addValue(\"env\", env)",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/final/files-repaired/68/BucketConfigParser.java\nindex e864937846d..874e73c3e24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/final/files-repaired/68/BucketConfigParser.java\n@@ -40,8 +40,7 @@ public final class BucketConfigParser {\n      * @param env the environment to use.\n      * @param origin the origin of the configuration. If null / none provided then localhost is assumed.\n      * @return the parsed bucket configuration.\n-     */\n-    public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n+     */ public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n         try {\n             InjectableValues inject = new InjectableValues.Std()\n                     .addValue(\"env\", env)\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/checkstyle_idea/68/BucketConfigParser.java\nindex e864937846d..4b56d85ff34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/checkstyle_idea/68/BucketConfigParser.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core.config.parser;\n \n import com.couchbase.client.core.CouchbaseException;\n@@ -36,21 +37,22 @@ public final class BucketConfigParser {\n     /**\n      * Parse a raw configuration into a {@link BucketConfig}.\n      *\n-     * @param input the raw string input.\n-     * @param env the environment to use.\n+     * @param input  the raw string input.\n+     * @param env    the environment to use.\n      * @param origin the origin of the configuration. If null / none provided then localhost is assumed.\n      * @return the parsed bucket configuration.\n      */\n-    public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n+    public static BucketConfig parse(final String input, final ConfigParserEnvironment env,\n+                                     final NetworkAddress origin) {\n         try {\n             InjectableValues inject = new InjectableValues.Std()\n-                    .addValue(\"env\", env)\n-                    .addValue(\"origin\", origin == null ? NetworkAddress.localhost() : origin);\n+                .addValue(\"env\", env)\n+                .addValue(\"origin\", origin == null ? NetworkAddress.localhost() : origin);\n             return DefaultObjectMapper.reader()\n-                    .forType(BucketConfig.class)\n-                    .with(inject)\n-                    .with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\n-                    .readValue(input);\n+                .forType(BucketConfig.class)\n+                .with(inject)\n+                .with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\n+                .readValue(input);\n         } catch (IOException e) {\n             throw new CouchbaseException(\"Could not parse configuration\", e);\n         }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/naturalize/68/BucketConfigParser.java\nindex e864937846d..71008f5b582 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/naturalize/68/BucketConfigParser.java\n@@ -43,11 +43,9 @@ public final class BucketConfigParser {\n      */\n     public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n         try {\n-            InjectableValues inject = new InjectableValues.Std()\n-                    .addValue(\"env\", env)\n+            InjectableValues inject = new InjectableValues.Std().addValue(\"env\", env)\n                     .addValue(\"origin\", origin == null ? NetworkAddress.localhost() : origin);\n-            return DefaultObjectMapper.reader()\n-                    .forType(BucketConfig.class)\n+return DefaultObjectMapper.reader().forType(BucketConfig.class)\n                     .with(inject)\n                     .with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\n                     .readValue(input);\n@@ -55,4 +53,4 @@ public final class BucketConfigParser {\n             throw new CouchbaseException(\"Could not parse configuration\", e);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/codebuff/68/BucketConfigParser.java\nindex e864937846d..cd50903a4e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/codebuff/68/BucketConfigParser.java\n@@ -22,7 +22,6 @@ import com.couchbase.client.core.utils.DefaultObjectMapper;\n import com.couchbase.client.core.utils.NetworkAddress;\n import com.fasterxml.jackson.databind.DeserializationFeature;\n import com.fasterxml.jackson.databind.InjectableValues;\n-\n import java.io.IOException;\n \n /**\n@@ -32,6 +31,7 @@ import java.io.IOException;\n  * @author Michael Nitschinger\n  * @since 2.0.0\n  */\n+\n public final class BucketConfigParser {\n     /**\n      * Parse a raw configuration into a {@link BucketConfig}.\n@@ -41,18 +41,16 @@ public final class BucketConfigParser {\n      * @param origin the origin of the configuration. If null / none provided then localhost is assumed.\n      * @return the parsed bucket configuration.\n      */\n-    public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n+\n+\n+    public static BucketConfig parse(final String input,\n+        final ConfigParserEnvironment env, final NetworkAddress origin) {\n         try {\n-            InjectableValues inject = new InjectableValues.Std()\n-                    .addValue(\"env\", env)\n-                    .addValue(\"origin\", origin == null ? NetworkAddress.localhost() : origin);\n-            return DefaultObjectMapper.reader()\n-                    .forType(BucketConfig.class)\n-                    .with(inject)\n-                    .with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL)\n-                    .readValue(input);\n+            InjectableValues inject = new InjectableValues.Std().addValue(\"env\", env).addValue(\"origin\", origin == null ? NetworkAddress.localhost() : origin);\n+            return DefaultObjectMapper.reader().forType(BucketConfig.class).with(inject).with(DeserializationFeature.READ_UNKNOWN_ENUM_VALUES_AS_NULL).readValue(input);\n         } catch (IOException e) {\n-            throw new CouchbaseException(\"Could not parse configuration\", e);\n+            throw new CouchbaseException(\"Could not parse configuration\",\n+                e);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/three_grams/files-repaired/68/BucketConfigParser.java\nindex e864937846d..874e73c3e24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/68/BucketConfigParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/three_grams/files-repaired/68/BucketConfigParser.java\n@@ -40,8 +40,7 @@ public final class BucketConfigParser {\n      * @param env the environment to use.\n      * @param origin the origin of the configuration. If null / none provided then localhost is assumed.\n      * @return the parsed bucket configuration.\n-     */\n-    public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n+     */ public static BucketConfig parse(final String input, final ConfigParserEnvironment env, final NetworkAddress origin) {\n         try {\n             InjectableValues inject = new InjectableValues.Std()\n                     .addValue(\"env\", env)\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}