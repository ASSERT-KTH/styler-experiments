{
    "project_name": "IQSS-dataverse",
    "violation_id": "79",
    "information": {
        "violations": [
            {
                "line": "13",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n    /**\n\t * Changes the session id (jsessionId) - for use when the session's authority increases (i.e. at login)\n\t * Servlet 3.1 Note: This method is needed while using Servlets 2.0. 3.1 has a HttpServletRequest.chageSessionId(); method that can be used instead.\n\t * \n\t * @param h the current HttpServletRequest",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/79/SessionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/79/SessionUtil.java\nindex 0539ea40cb8..574d5930e1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/79/SessionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/79/SessionUtil.java\n@@ -9,24 +9,24 @@ import javax.servlet.http.HttpSession;\n \n public class SessionUtil {\n \n-    /**\n-\t * Changes the session id (jsessionId) - for use when the session's authority increases (i.e. at login)\n-\t * Servlet 3.1 Note: This method is needed while using Servlets 2.0. 3.1 has a HttpServletRequest.chageSessionId(); method that can be used instead.\n-\t * \n-\t * @param h the current HttpServletRequest\n-     * e.g. for pages you can get this from (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\n-     */\n-    public static void changeSessionId(HttpServletRequest h) {\n-        HttpSession session = h.getSession(false);\n-        HashMap<String, Object> sessionAttributes = new HashMap<String,Object>();\n-        for(Enumeration<String> e = session.getAttributeNames();e.hasMoreElements();) {\n-        \tString name = e.nextElement();\n-        \tsessionAttributes.put(name, session.getAttribute(name));\n-        }\n-        h.getSession().invalidate();\n-        session = h.getSession(true);\n-        for(Entry<String, Object> entry: sessionAttributes.entrySet()) {\n-        \tsession.setAttribute(entry.getKey(), entry.getValue());\n-        }\n+  /**\n+   * Changes the session id (jsessionId) - for use when the session's authority increases (i.e. at login)\n+   * Servlet 3.1 Note: This method is needed while using Servlets 2.0. 3.1 has a HttpServletRequest.chageSessionId(); method that can be used instead.\n+   *\n+   * @param h the current HttpServletRequest\n+   *          e.g. for pages you can get this from (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\n+   */\n+  public static void changeSessionId(HttpServletRequest h) {\n+    HttpSession session = h.getSession(false);\n+    HashMap<String, Object> sessionAttributes = new HashMap<String, Object>();\n+    for (Enumeration<String> e = session.getAttributeNames(); e.hasMoreElements(); ) {\n+      String name = e.nextElement();\n+      sessionAttributes.put(name, session.getAttribute(name));\n     }\n+    h.getSession().invalidate();\n+    session = h.getSession(true);\n+    for (Entry<String, Object> entry : sessionAttributes.entrySet()) {\n+      session.setAttribute(entry.getKey(), entry.getValue());\n+    }\n+  }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/79/SessionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/naturalize/79/SessionUtil.java\nindex 0539ea40cb8..11f27d9b2d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/79/SessionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/naturalize/79/SessionUtil.java\n@@ -19,14 +19,15 @@ public class SessionUtil {\n     public static void changeSessionId(HttpServletRequest h) {\n         HttpSession session = h.getSession(false);\n         HashMap<String, Object> sessionAttributes = new HashMap<String,Object>();\n-        for(Enumeration<String> e = session.getAttributeNames();e.hasMoreElements();) {\n-        \tString name = e.nextElement();\n+        for(Enumeration<String> e = session.getAttributeNames();\n+e.hasMoreElements();) {\n+    String name = e.nextElement();\n         \tsessionAttributes.put(name, session.getAttribute(name));\n-        }\n+    }\n         h.getSession().invalidate();\n         session = h.getSession(true);\n         for(Entry<String, Object> entry: sessionAttributes.entrySet()) {\n-        \tsession.setAttribute(entry.getKey(), entry.getValue());\n-        }\n+    session.setAttribute(entry.getKey(), entry.getValue());\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/79/SessionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/codebuff/79/SessionUtil.java\nindex 0539ea40cb8..727d2e9ce20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/79/SessionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/codebuff/79/SessionUtil.java\n@@ -3,30 +3,33 @@ package edu.harvard.iq.dataverse.util;\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.Map.Entry;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n \n+\n public class SessionUtil {\n \n     /**\n-\t * Changes the session id (jsessionId) - for use when the session's authority increases (i.e. at login)\n-\t * Servlet 3.1 Note: This method is needed while using Servlets 2.0. 3.1 has a HttpServletRequest.chageSessionId(); method that can be used instead.\n-\t * \n-\t * @param h the current HttpServletRequest\n+     * Changes the session id (jsessionId) - for use when the session's authority increases (i.e. at login)\n+     * Servlet 3.1 Note: This method is needed while using Servlets 2.0. 3.1 has a HttpServletRequest.chageSessionId(); method that can be used instead.\n+     * \n+     * @param h the current HttpServletRequest\n      * e.g. for pages you can get this from (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\n      */\n+\n     public static void changeSessionId(HttpServletRequest h) {\n         HttpSession session = h.getSession(false);\n-        HashMap<String, Object> sessionAttributes = new HashMap<String,Object>();\n-        for(Enumeration<String> e = session.getAttributeNames();e.hasMoreElements();) {\n-        \tString name = e.nextElement();\n-        \tsessionAttributes.put(name, session.getAttribute(name));\n+        HashMap<String, Object> sessionAttributes = new HashMap<String, Object>();\n+        for (Enumeration<String> e = session.getAttributeNames(); e.hasMoreElements();) {\n+            String name = e.nextElement();\n+            sessionAttributes.put(name, session.getAttribute(name));\n         }\n         h.getSession().invalidate();\n         session = h.getSession(true);\n-        for(Entry<String, Object> entry: sessionAttributes.entrySet()) {\n-        \tsession.setAttribute(entry.getKey(), entry.getValue());\n+\n+        for (Entry<String, Object> entry : sessionAttributes.entrySet()) {\n+            session.setAttribute(entry.getKey(), entry.getValue());\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "13",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}