{
    "project_name": "Activiti-Activiti",
    "violation_id": "264",
    "information": {
        "violations": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.api.runtime.shared.security;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/264/AbstractSecurityManager.java\nindex 4a31b34f961..fe5cd4c9f87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/264/AbstractSecurityManager.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.shared.security;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/264/AbstractSecurityManager.java\nindex 4a31b34f961..db4e01faf58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/264/AbstractSecurityManager.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.shared.security;\n \n import java.util.List;\n@@ -39,22 +40,22 @@ public abstract class AbstractSecurityManager implements SecurityManager {\n     @Override\n     public String getAuthenticatedUserId() {\n         return securityContextPrincipalProvider.getCurrentPrincipal()\n-                                               .map(principalIdentityProvider::getUserId)\n-                                               .orElseThrow(this::securityException);\n+                .map(principalIdentityProvider::getUserId)\n+                .orElseThrow(this::securityException);\n     }\n \n     @Override\n     public List<String> getAuthenticatedUserGroups() {\n         return securityContextPrincipalProvider.getCurrentPrincipal()\n-                                               .map(principalGroupsProvider::getGroups)\n-                                               .orElseThrow(this::securityException);\n+                .map(principalGroupsProvider::getGroups)\n+                .orElseThrow(this::securityException);\n     }\n \n     @Override\n     public List<String> getAuthenticatedUserRoles() {\n         return securityContextPrincipalProvider.getCurrentPrincipal()\n-                                               .map(principalRolesProvider::getRoles)\n-                                               .orElseThrow(this::securityException);\n+                .map(principalRolesProvider::getRoles)\n+                .orElseThrow(this::securityException);\n     }\n \n     protected SecurityException securityException() {\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "21",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/264/AbstractSecurityManager.java\nindex 4a31b34f961..1cd5252be10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/264/AbstractSecurityManager.java\n@@ -17,48 +17,45 @@ package org.activiti.api.runtime.shared.security;\n \n import java.util.List;\n \n+\n public abstract class AbstractSecurityManager implements SecurityManager {\n \n-    private static final String INVALID_AUTHENTICATED_PRINCIPAL = \"Invalid authenticated principal\";\n+  private static final String INVALID_AUTHENTICATED_PRINCIPAL = \"Invalid authenticated principal\";\n+\n+  private final SecurityContextPrincipalProvider securityContextPrincipalProvider;\n+\n+  private final PrincipalIdentityProvider principalIdentityProvider;\n+\n+  private final PrincipalGroupsProvider principalGroupsProvider;\n \n-    private final SecurityContextPrincipalProvider securityContextPrincipalProvider;\n-    private final PrincipalIdentityProvider principalIdentityProvider;\n-    private final PrincipalGroupsProvider principalGroupsProvider;\n-    private final PrincipalRolesProvider principalRolesProvider;\n+  private final PrincipalRolesProvider principalRolesProvider;\n \n-    public AbstractSecurityManager(SecurityContextPrincipalProvider securityContextPrincipalProvider,\n-                                   PrincipalIdentityProvider principalIdentityProvider,\n-                                   PrincipalGroupsProvider principalGroupsProvider,\n-                                   PrincipalRolesProvider principalRolesProvider) {\n-        this.securityContextPrincipalProvider = securityContextPrincipalProvider;\n-        this.principalIdentityProvider = principalIdentityProvider;\n-        this.principalGroupsProvider = principalGroupsProvider;\n-        this.principalRolesProvider = principalRolesProvider;\n-    }\n+  public AbstractSecurityManager(SecurityContextPrincipalProvider securityContextPrincipalProvider,\n+                                 PrincipalIdentityProvider principalIdentityProvider,\n+                                 PrincipalGroupsProvider principalGroupsProvider, PrincipalRolesProvider principalRolesProvider) {\n+    this.securityContextPrincipalProvider = securityContextPrincipalProvider;\n+    this.principalIdentityProvider = principalIdentityProvider;\n+    this.principalGroupsProvider = principalGroupsProvider;\n+    this.principalRolesProvider = principalRolesProvider;\n+  }\n \n-    @Override\n-    public String getAuthenticatedUserId() {\n-        return securityContextPrincipalProvider.getCurrentPrincipal()\n-                                               .map(principalIdentityProvider::getUserId)\n-                                               .orElseThrow(this::securityException);\n-    }\n+  @Override\n+  public String getAuthenticatedUserId() {\n+    return securityContextPrincipalProvider.getCurrentPrincipal().map(principalIdentityProvider::getUserId).orElseThrow(this::securityException);\n+  }\n \n-    @Override\n-    public List<String> getAuthenticatedUserGroups() {\n-        return securityContextPrincipalProvider.getCurrentPrincipal()\n-                                               .map(principalGroupsProvider::getGroups)\n-                                               .orElseThrow(this::securityException);\n-    }\n+  @Override\n+  public List<String> getAuthenticatedUserGroups() {\n+    return securityContextPrincipalProvider.getCurrentPrincipal().map(principalGroupsProvider::getGroups).orElseThrow(this::securityException);\n+  }\n \n-    @Override\n-    public List<String> getAuthenticatedUserRoles() {\n-        return securityContextPrincipalProvider.getCurrentPrincipal()\n-                                               .map(principalRolesProvider::getRoles)\n-                                               .orElseThrow(this::securityException);\n-    }\n+  @Override\n+  public List<String> getAuthenticatedUserRoles() {\n+    return securityContextPrincipalProvider.getCurrentPrincipal().map(principalRolesProvider::getRoles).orElseThrow(this::securityException);\n+  }\n \n-    protected SecurityException securityException() {\n-        return new SecurityException(INVALID_AUTHENTICATED_PRINCIPAL);\n-    }\n+  protected SecurityException securityException() {\n+    return new SecurityException(INVALID_AUTHENTICATED_PRINCIPAL);\n+  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/264/AbstractSecurityManager.java\nindex 4a31b34f961..fe5cd4c9f87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/264/AbstractSecurityManager.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.shared.security;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/264/AbstractSecurityManager.java\nindex 4a31b34f961..fe5cd4c9f87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/264/AbstractSecurityManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/264/AbstractSecurityManager.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.shared.security;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}