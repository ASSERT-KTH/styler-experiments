{
    "project_name": "neo4j-neo4j",
    "violation_id": "2899",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "129",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "220",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2899/Relationship.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2899/Relationship.java\nindex e82e041a7b8..cb1ae9c510f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2899/Relationship.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2899/Relationship.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import org.neo4j.annotations.api.PublicApi;\n@@ -57,7 +58,7 @@ import org.neo4j.annotations.api.PublicApi;\n  *        rel.{@link Relationship#getNodes() getNodes}()[1].equals( b );\n  * </code>\n  * </pre>\n- *\n+ * <p>\n  * Even though all relationships have a direction they are equally well\n  * traversed in both directions so there's no need to create duplicate\n  * relationships in the opposite direction (with regard to traversal or\n@@ -80,9 +81,10 @@ public interface Relationship extends Entity\n      * after <code>delete()</code> has returned is invalid and will lead to\n      * {@link NotFoundException} being thrown.\n      */\n-     void delete();\n+    void delete();\n \n     // Node accessors\n+\n     /**\n      * Returns the start node of this relationship. For a definition of how\n      * start node relates to {@link Direction directions} as arguments to the\n@@ -122,9 +124,9 @@ public interface Relationship extends Entity\n      * @param node the start or end node of this relationship\n      * @return the other node\n      * @throws RuntimeException if the given node is neither the start nor end\n-     *             node of this relationship\n+     *                          node of this relationship\n      */\n-    Node getOtherNode( Node node );\n+    Node getOtherNode(Node node);\n \n     /**\n      * Returns the two nodes that are attached to this relationship. The first\n@@ -158,10 +160,10 @@ public interface Relationship extends Entity\n      *\n      * @param type the type to check\n      * @return <code>true</code> if this relationship is of the type\n-     *         <code>type</code>, <code>false</code> otherwise or if\n-     *         <code>null</code>\n+     * <code>type</code>, <code>false</code> otherwise or if\n+     * <code>null</code>\n      */\n-    boolean isType( RelationshipType type );\n+    boolean isType(RelationshipType type);\n \n     /**\n      * Returns the id of the start node of this relationship. For a definition of how\n@@ -206,20 +208,19 @@ public interface Relationship extends Entity\n      * @param id the id of the start or end node of this relationship\n      * @return the id of the other node\n      * @throws RuntimeException if the given node id is not the id of either the start or end\n-     *             node of this relationship.\n+     *                          node of this relationship.\n      */\n-    default long getOtherNodeId( long id )\n+    default long getOtherNodeId(long id)\n     {\n         long start = getStartNodeId();\n         long end = getEndNodeId();\n-        if ( id == start )\n+        if (id == start)\n         {\n             return end;\n-        }\n-        else if ( id == end )\n+        } else if (id == end)\n         {\n             return start;\n         }\n-        throw new NotFoundException( \"Node[\" + id + \"] not connected to this relationship[\" + getId() + \"]\" );\n+        throw new NotFoundException(\"Node[\" + id + \"] not connected to this relationship[\" + getId() + \"]\");\n     }\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}