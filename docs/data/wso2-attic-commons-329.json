{
    "project_name": "wso2-attic-commons",
    "violation_id": "329",
    "information": {
        "violations": [
            {
                "line": "47",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 136).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n        return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion)).within(getLifeTime());\n\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/329/NotCondition.java\nindex 3f163bc3f6a..853dff60c8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/329/NotCondition.java\n@@ -44,7 +44,8 @@ public class NotCondition extends ExpirableCondition implements WhereCondition {\n \n     @Override\n     public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion)).within(getLifeTime());\n+        return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion) )\n+    .within(getLifeTime());\n \n     }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/329/NotCondition.java\nindex 3f163bc3f6a..a06eb839a42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/329/NotCondition.java\n@@ -2,9 +2,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -22,29 +22,30 @@ import org.wso2.siddhi.api.condition.where.WhereCondition;\n import java.util.Map;\n \n /**\n- * \n+ *\n  *\n  * NotCondition class handles the Logical Not operation of the condition\n  */\n public class NotCondition extends ExpirableCondition implements WhereCondition {\n-    private Condition condition;\n-\n-    public NotCondition(Condition condition) {\n-        this.condition = condition;\n-    }\n-\n-    /**\n-     * get the condition\n-     *\n-     * @return the condition\n-     */\n-    public Condition getCondition() {\n-        return condition;\n-    }\n-\n-    @Override\n-    public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion)).within(getLifeTime());\n-\n-    }\n+  private Condition condition;\n+\n+  public NotCondition(Condition condition) {\n+    this.condition = condition;\n+  }\n+\n+  /**\n+   * get the condition\n+   *\n+   * @return the condition\n+   */\n+  public Condition getCondition() {\n+    return condition;\n+  }\n+\n+  @Override\n+  public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n+    return (WhereCondition) new NotCondition(((WhereCondition) condition).getNewInstance(referenceConversion)).within(\n+      getLifeTime());\n+\n+  }\n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/329/NotCondition.java\nindex 3f163bc3f6a..cf5364a3030 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/329/NotCondition.java\n@@ -47,4 +47,4 @@ public class NotCondition extends ExpirableCondition implements WhereCondition {\n         return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion)).within(getLifeTime());\n \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/329/NotCondition.java\nindex 3f163bc3f6a..853dff60c8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/329/NotCondition.java\n@@ -44,7 +44,8 @@ public class NotCondition extends ExpirableCondition implements WhereCondition {\n \n     @Override\n     public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion)).within(getLifeTime());\n+        return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion) )\n+    .within(getLifeTime());\n \n     }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/329/NotCondition.java\nindex 3f163bc3f6a..77574d4d49e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/329/NotCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/329/NotCondition.java\n@@ -44,7 +44,7 @@ public class NotCondition extends ExpirableCondition implements WhereCondition {\n \n     @Override\n     public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        return (WhereCondition) new NotCondition(((WhereCondition)condition).getNewInstance(referenceConversion)).within(getLifeTime());\n-\n-    }\n+        return (WhereCondition) new NotCondition(((WhereCondition)condition)\n+        .getNewInstance(referenceConversion)).within(getLifeTime());\n+}\n }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}