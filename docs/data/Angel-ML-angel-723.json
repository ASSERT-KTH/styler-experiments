{
    "project_name": "Angel-ML-angel",
    "violation_id": "723",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/723/LongKeySparseIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/723/LongKeySparseIntRowUpdateSplit.java\nindex 93611c71953..826b83705cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/723/LongKeySparseIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/723/LongKeySparseIntRowUpdateSplit.java\n@@ -26,161 +26,163 @@ import io.netty.buffer.ByteBuf;\n \n public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n \n-  /**\n-   * indexes\n-   */\n-  private final long[] offsets;\n-\n-  /**\n-   * values of row\n-   */\n-  private final int[] values;\n-\n-  /**\n-   * Create a new RowUpdateSplit.\n-   *\n-   * @param rowIndex row index\n-   * @param start split start position\n-   * @param end split end position\n-   */\n-  public LongKeySparseIntRowUpdateSplit(int rowIndex, int start, int end, long[] offsets,\n-      int[] values) {\n-    super(rowIndex, RowType.T_INT_SPARSE_LONGKEY, start, end);\n-    this.offsets = offsets;\n-    this.values = values;\n-  }\n-\n-  public LongKeySparseIntRowUpdateSplit() {\n-    this(-1, -1, -1, null, null);\n-  }\n-\n-  /**\n-   * Get indexes of row values\n-   *\n-   * @return int[] indexes of row values\n-   */\n-  public long[] getOffsets() {\n-    return offsets;\n-  }\n-\n-  /**\n-   * Get row values\n-   *\n-   * @return double[] row values\n-   */\n-  public int[] getValues() {\n-    return values;\n-  }\n-\n-  @Override\n-  public boolean isUseIntKey() {\n-    return rowType == RowType.T_INT_SPARSE;\n-  }\n-\n-  @Override\n-  public void setUseIntKey(boolean useIntKey) {\n-    if (useIntKey) {\n-      setRowType(RowType.T_INT_SPARSE);\n-    } else {\n-      setRowType(RowType.T_INT_SPARSE_LONGKEY);\n+    /**\n+     * indexes\n+     */\n+    private final long[] offsets;\n+\n+    /**\n+     * values of row\n+     */\n+    private final int[] values;\n+\n+    /**\n+     * Create a new RowUpdateSplit.\n+     *\n+     * @param rowIndex row index\n+     * @param start    split start position\n+     * @param end      split end position\n+     */\n+    public LongKeySparseIntRowUpdateSplit(int rowIndex, int start, int end, long[] offsets,\n+                                          int[] values) {\n+        super(rowIndex, RowType.T_INT_SPARSE_LONGKEY, start, end);\n+        this.offsets = offsets;\n+        this.values = values;\n     }\n-  }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    long startCol = splitContext.getPartKey().getStartCol();\n+    public LongKeySparseIntRowUpdateSplit() {\n+        this(-1, -1, -1, null, null);\n+    }\n \n-    if (isUseIntKey()) {\n-      if (splitContext.isEnableFilter()) {\n-        int filterValue = (int) splitContext.getFilterThreshold();\n-        int position = buf.writerIndex();\n-        buf.writeInt(0);\n-        int needUpdateItemNum = 0;\n-        for (int i = start; i < end; i++) {\n-          if (Math.abs(values[i]) > filterValue) {\n-            buf.writeInt((int) (offsets[i] - startCol));\n-            buf.writeInt(values[i]);\n-            needUpdateItemNum++;\n-          }\n+    /**\n+     * Get indexes of row values\n+     *\n+     * @return int[] indexes of row values\n+     */\n+    public long[] getOffsets() {\n+        return offsets;\n+    }\n+\n+    /**\n+     * Get row values\n+     *\n+     * @return double[] row values\n+     */\n+    public int[] getValues() {\n+        return values;\n+    }\n+\n+    @Override\n+    public boolean isUseIntKey() {\n+        return rowType == RowType.T_INT_SPARSE;\n+    }\n+\n+    @Override\n+    public void setUseIntKey(boolean useIntKey) {\n+        if (useIntKey) {\n+            setRowType(RowType.T_INT_SPARSE);\n+        } else {\n+            setRowType(RowType.T_INT_SPARSE_LONGKEY);\n         }\n-        buf.setInt(position, needUpdateItemNum);\n-      } else {\n-        buf.writeInt(end - start);\n-        for (int i = start; i < end; i++) {\n-          buf.writeInt((int) (offsets[i] - startCol));\n-          buf.writeInt(values[i]);\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        long startCol = splitContext.getPartKey().getStartCol();\n+\n+        if (isUseIntKey()) {\n+            if (splitContext.isEnableFilter()) {\n+                int filterValue = (int) splitContext.getFilterThreshold();\n+                int position = buf.writerIndex();\n+                buf.writeInt(0);\n+                int needUpdateItemNum = 0;\n+                for (int i = start; i < end; i++) {\n+                    if (Math.abs(values[i]) > filterValue) {\n+                        buf.writeInt((int) (offsets[i] - startCol));\n+                        buf.writeInt(values[i]);\n+                        needUpdateItemNum++;\n+                    }\n+                }\n+                buf.setInt(position, needUpdateItemNum);\n+            } else {\n+                buf.writeInt(end - start);\n+                for (int i = start; i < end; i++) {\n+                    buf.writeInt((int) (offsets[i] - startCol));\n+                    buf.writeInt(values[i]);\n+                }\n+            }\n+        } else {\n+            if (splitContext.isEnableFilter()) {\n+                int filterValue = (int) splitContext.getFilterThreshold();\n+                int position = buf.writerIndex();\n+                buf.writeInt(0);\n+                int needUpdateItemNum = 0;\n+                for (int i = start; i < end; i++) {\n+                    if (Math.abs(values[i]) > filterValue) {\n+                        buf.writeLong(offsets[i] - startCol);\n+                        buf.writeInt(values[i]);\n+                        needUpdateItemNum++;\n+                    }\n+                }\n+                buf.setInt(position, needUpdateItemNum);\n+            } else {\n+                buf.writeInt(end - start);\n+                for (int i = start; i < end; i++) {\n+                    buf.writeLong(offsets[i] - startCol);\n+                    buf.writeInt(values[i]);\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      if (splitContext.isEnableFilter()) {\n-        int filterValue = (int) splitContext.getFilterThreshold();\n-        int position = buf.writerIndex();\n-        buf.writeInt(0);\n-        int needUpdateItemNum = 0;\n-        for (int i = start; i < end; i++) {\n-          if (Math.abs(values[i]) > filterValue) {\n-            buf.writeLong(offsets[i] - startCol);\n-            buf.writeInt(values[i]);\n-            needUpdateItemNum++;\n-          }\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        int size = buf.readInt();\n+        if (isUseIntKey()) {\n+            vector = VFactory.sparseIntVector(\n+                    (int) (splitContext.getPartKey().getEndCol() -\n+                            splitContext.getPartKey().getStartCol()),\n+                    size);\n+            for (int i = 0; i < size; i++) {\n+                ((IntIntVector) vector).set(buf.readInt(), buf.readInt());\n+            }\n+        } else {\n+            vector = VFactory.sparseLongKeyIntVector(\n+                    splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(),\n+                    size);\n+            for (int i = 0; i < size; i++) {\n+                ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n+            }\n         }\n-        buf.setInt(position, needUpdateItemNum);\n-      } else {\n-        buf.writeInt(end - start);\n+    }\n+\n+    private int getNeedUpdateItemNum() {\n+        int needUpdateItemNum = 0;\n+        int filterValue = (int) splitContext.getFilterThreshold();\n         for (int i = start; i < end; i++) {\n-          buf.writeLong(offsets[i] - startCol);\n-          buf.writeInt(values[i]);\n+            if (Math.abs(values[i]) > filterValue) {\n+                needUpdateItemNum++;\n+            }\n         }\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    int size = buf.readInt();\n-    if (isUseIntKey()) {\n-      vector = VFactory.sparseIntVector(\n-          (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\n-          size);\n-      for (int i = 0; i < size; i++) {\n-        ((IntIntVector) vector).set(buf.readInt(), buf.readInt());\n-      }\n-    } else {\n-      vector = VFactory.sparseLongKeyIntVector(\n-          splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), size);\n-      for (int i = 0; i < size; i++) {\n-        ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n-      }\n+        return needUpdateItemNum;\n     }\n-  }\n-\n-  private int getNeedUpdateItemNum() {\n-    int needUpdateItemNum = 0;\n-    int filterValue = (int) splitContext.getFilterThreshold();\n-    for (int i = start; i < end; i++) {\n-      if (Math.abs(values[i]) > filterValue) {\n-        needUpdateItemNum++;\n-      }\n-    }\n-    return needUpdateItemNum;\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    if (isUseIntKey()) {\n-      if (splitContext.isEnableFilter()) {\n-        return 12 + super.bufferLen() + getNeedUpdateItemNum() * 8;\n-      } else {\n-        return 12 + super.bufferLen() + (end - start) * 8;\n-      }\n-    } else {\n-      if (splitContext.isEnableFilter()) {\n-        return 12 + super.bufferLen() + getNeedUpdateItemNum() * 12;\n-      } else {\n-        return 12 + super.bufferLen() + (end - start) * 12;\n-      }\n+\n+    @Override\n+    public int bufferLen() {\n+        if (isUseIntKey()) {\n+            if (splitContext.isEnableFilter()) {\n+                return 12 + super.bufferLen() + getNeedUpdateItemNum() * 8;\n+            } else {\n+                return 12 + super.bufferLen() + (end - start) * 8;\n+            }\n+        } else {\n+            if (splitContext.isEnableFilter()) {\n+                return 12 + super.bufferLen() + getNeedUpdateItemNum() * 12;\n+            } else {\n+                return 12 + super.bufferLen() + (end - start) * 12;\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 218
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/723/LongKeySparseIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/723/LongKeySparseIntRowUpdateSplit.java\nindex 93611c71953..872a5924d23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/723/LongKeySparseIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/723/LongKeySparseIntRowUpdateSplit.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.psagent.matrix.oplog.cache;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -43,8 +42,7 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n    * @param start split start position\n    * @param end split end position\n    */\n-  public LongKeySparseIntRowUpdateSplit(int rowIndex, int start, int end, long[] offsets,\n-      int[] values) {\n+  public LongKeySparseIntRowUpdateSplit(int rowIndex, int start, int end, long[] offsets, int[] values) {\n     super(rowIndex, RowType.T_INT_SPARSE_LONGKEY, start, end);\n     this.offsets = offsets;\n     this.values = values;\n@@ -148,8 +146,7 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n         ((IntIntVector) vector).set(buf.readInt(), buf.readInt());\n       }\n     } else {\n-      vector = VFactory.sparseLongKeyIntVector(\n-          splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), size);\n+      vector = VFactory.sparseLongKeyIntVector(splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), size);\n       for (int i = 0; i < size; i++) {\n         ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n       }\n@@ -183,4 +180,4 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "155",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/723/LongKeySparseIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/723/LongKeySparseIntRowUpdateSplit.java\nindex 93611c71953..0bfbc4b2bb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/723/LongKeySparseIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/723/LongKeySparseIntRowUpdateSplit.java\n@@ -29,6 +29,7 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n   /**\n    * indexes\n    */\n+\n   private final long[] offsets;\n \n   /**\n@@ -43,8 +44,8 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n    * @param start split start position\n    * @param end split end position\n    */\n-  public LongKeySparseIntRowUpdateSplit(int rowIndex, int start, int end, long[] offsets,\n-      int[] values) {\n+\n+  public LongKeySparseIntRowUpdateSplit(int rowIndex, int start, int end, long[] offsets, int[] values) {\n     super(rowIndex, RowType.T_INT_SPARSE_LONGKEY, start, end);\n     this.offsets = offsets;\n     this.values = values;\n@@ -59,6 +60,7 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n    *\n    * @return int[] indexes of row values\n    */\n+\n   public long[] getOffsets() {\n     return offsets;\n   }\n@@ -68,6 +70,7 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n    *\n    * @return double[] row values\n    */\n+\n   public int[] getValues() {\n     return values;\n   }\n@@ -89,13 +92,14 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n   @Override\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n-    long startCol = splitContext.getPartKey().getStartCol();\n \n+    long startCol = splitContext.getPartKey().getStartCol();\n     if (isUseIntKey()) {\n       if (splitContext.isEnableFilter()) {\n         int filterValue = (int) splitContext.getFilterThreshold();\n         int position = buf.writerIndex();\n         buf.writeInt(0);\n+\n         int needUpdateItemNum = 0;\n         for (int i = start; i < end; i++) {\n           if (Math.abs(values[i]) > filterValue) {\n@@ -117,6 +121,7 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n         int filterValue = (int) splitContext.getFilterThreshold();\n         int position = buf.writerIndex();\n         buf.writeInt(0);\n+\n         int needUpdateItemNum = 0;\n         for (int i = start; i < end; i++) {\n           if (Math.abs(values[i]) > filterValue) {\n@@ -139,17 +144,15 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n   @Override\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n+\n     int size = buf.readInt();\n     if (isUseIntKey()) {\n-      vector = VFactory.sparseIntVector(\n-          (int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()),\n-          size);\n+      vector = VFactory.sparseIntVector((int) (splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol()), size);\n       for (int i = 0; i < size; i++) {\n         ((IntIntVector) vector).set(buf.readInt(), buf.readInt());\n       }\n     } else {\n-      vector = VFactory.sparseLongKeyIntVector(\n-          splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), size);\n+      vector = VFactory.sparseLongKeyIntVector(splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), size);\n       for (int i = 0; i < size; i++) {\n         ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n       }\n@@ -183,4 +186,4 @@ public class LongKeySparseIntRowUpdateSplit extends RowUpdateSplit {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}