{
    "project_name": "Angel-ML-angel",
    "violation_id": "25",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/25/TVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/25/TVector.java\nindex 5869a5b9078..a1ed2d6d9cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/25/TVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/25/TVector.java\n@@ -22,135 +22,136 @@ package com.tencent.angel.ml.math;\n  */\n public abstract class TVector extends TAbstractVector {\n \n-  /**\n-   * Instantiates a new T vector.\n-   */\n-  public TVector() {\n-    super();\n-  }\n-\n-  /**\n-   * Instantiates a new T vector.\n-   *\n-   * @param other the other\n-   */\n-  public TVector(TVector other) {\n-    super(other);\n-  }\n-\n-  /**\n-   *Plus this vector with other vector element by element.\n-   *\n-   * @param other the other vector\n-   * @return the reference of object\n-   */\n-  public abstract TVector plusBy(TAbstractVector other);\n-\n-  /**\n-   * Plus a element of vector.\n-   *\n-   * @param index the element index\n-   * @param x     the double update value\n-   * @return the reference of object\n-   */\n-  public abstract TVector plusBy(int index, double x);\n-\n-  /**\n-   * Multiply plus this vector with other vector element by element.\n-   *\n-   * @param other the other\n-   * @param x     the double multiply factor\n-   * @return the reference of object\n-   */\n-  public abstract TVector plusBy(TAbstractVector other, double x);\n-\n-\n-  /**\n-   * Plus this vector with other vector to generate a new vector element by element.\n-   *\n-   * @param other the other vector\n-   * @return the new vector\n-   */\n-  public abstract TVector plus(TAbstractVector other);\n-\n-  /**\n-   * Multiply plus this vector with other vector to a generate new vector element by element.\n-   *\n-   * @param other the other\n-   * @param x     the double multiply factor\n-   * @return the new vector\n-   */\n-  public abstract TVector plus(TAbstractVector other, double x);\n-\n-  /**\n-   * Dot this vector with other.\n-   *\n-   * @param other the other\n-   * @return the result\n-   */\n-  public abstract double dot(TAbstractVector other);\n-\n-  /**\n-   * Times this vector with x, generating a new vector\n-   *\n-   * @param x the double multiply factor\n-   * @return the new vector\n-   */\n-  public abstract TVector times(double x);\n-\n-  /**\n-   * Times this vector with x\n-   *\n-   * @param x the double multiply factor\n-   * @return the reference of object\n-   */\n-  public abstract TVector timesBy(double x);\n-\n-  /**\n-   * Filter value whose absolute value less than x.\n-   *\n-   * @param x the comparison value\n-   * @return the t vector\n-   */\n-  public abstract TVector filter(double x);\n-\n-  /**\n-   * Clear.\n-   */\n-  public abstract void clear();\n-\n-  /**\n-   * Non zero number long.\n-   *\n-   * @return the long\n-   */\n-  public abstract long nonZeroNumber();\n-\n-\n-  /**\n-   * Calculate square norm value of vector\n-   * @return square norm value\n-   */\n-  public abstract double squaredNorm();\n-\n-  /**\n-   * Clone.\n-   *\n-   * @param vector for cloning the vector\n-   */\n-  public void clone(TVector vector) {\n-    assert this.getClass() == vector.getClass();\n-    assert this.dim == vector.dim;\n-    this.matrixId = vector.matrixId;\n-    this.rowId = vector.rowId;\n-    this.clock = vector.clock;\n-    this.dim = vector.dim;\n-  }\n-\n-  /**\n-   * Clone a vector.\n-   *\n-   * @return  cloned vector\n-   */\n-  public abstract TVector clone();\n+    /**\n+     * Instantiates a new T vector.\n+     */\n+    public TVector() {\n+        super();\n+    }\n+\n+    /**\n+     * Instantiates a new T vector.\n+     *\n+     * @param other the other\n+     */\n+    public TVector(TVector other) {\n+        super(other);\n+    }\n+\n+    /**\n+     * Plus this vector with other vector element by element.\n+     *\n+     * @param other the other vector\n+     * @return the reference of object\n+     */\n+    public abstract TVector plusBy(TAbstractVector other);\n+\n+    /**\n+     * Plus a element of vector.\n+     *\n+     * @param index the element index\n+     * @param x     the double update value\n+     * @return the reference of object\n+     */\n+    public abstract TVector plusBy(int index, double x);\n+\n+    /**\n+     * Multiply plus this vector with other vector element by element.\n+     *\n+     * @param other the other\n+     * @param x     the double multiply factor\n+     * @return the reference of object\n+     */\n+    public abstract TVector plusBy(TAbstractVector other, double x);\n+\n+\n+    /**\n+     * Plus this vector with other vector to generate a new vector element by element.\n+     *\n+     * @param other the other vector\n+     * @return the new vector\n+     */\n+    public abstract TVector plus(TAbstractVector other);\n+\n+    /**\n+     * Multiply plus this vector with other vector to a generate new vector element by element.\n+     *\n+     * @param other the other\n+     * @param x     the double multiply factor\n+     * @return the new vector\n+     */\n+    public abstract TVector plus(TAbstractVector other, double x);\n+\n+    /**\n+     * Dot this vector with other.\n+     *\n+     * @param other the other\n+     * @return the result\n+     */\n+    public abstract double dot(TAbstractVector other);\n+\n+    /**\n+     * Times this vector with x, generating a new vector\n+     *\n+     * @param x the double multiply factor\n+     * @return the new vector\n+     */\n+    public abstract TVector times(double x);\n+\n+    /**\n+     * Times this vector with x\n+     *\n+     * @param x the double multiply factor\n+     * @return the reference of object\n+     */\n+    public abstract TVector timesBy(double x);\n+\n+    /**\n+     * Filter value whose absolute value less than x.\n+     *\n+     * @param x the comparison value\n+     * @return the t vector\n+     */\n+    public abstract TVector filter(double x);\n+\n+    /**\n+     * Clear.\n+     */\n+    public abstract void clear();\n+\n+    /**\n+     * Non zero number long.\n+     *\n+     * @return the long\n+     */\n+    public abstract long nonZeroNumber();\n+\n+\n+    /**\n+     * Calculate square norm value of vector\n+     *\n+     * @return square norm value\n+     */\n+    public abstract double squaredNorm();\n+\n+    /**\n+     * Clone.\n+     *\n+     * @param vector for cloning the vector\n+     */\n+    public void clone(TVector vector) {\n+        assert this.getClass() == vector.getClass();\n+        assert this.dim == vector.dim;\n+        this.matrixId = vector.matrixId;\n+        this.rowId = vector.rowId;\n+        this.clock = vector.clock;\n+        this.dim = vector.dim;\n+    }\n+\n+    /**\n+     * Clone a vector.\n+     *\n+     * @return cloned vector\n+     */\n+    public abstract TVector clone();\n }\n",
            "diff_size": 132
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/25/TVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/25/TVector.java\nindex 5869a5b9078..05feab03f9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/25/TVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/25/TVector.java\n@@ -153,4 +153,4 @@ public abstract class TVector extends TAbstractVector {\n    * @return  cloned vector\n    */\n   public abstract TVector clone();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/25/TVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/25/TVector.java\nindex 5869a5b9078..77b9a33fb72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/25/TVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/25/TVector.java\n@@ -20,11 +20,15 @@ package com.tencent.angel.ml.math;\n /**\n  * The vector oriented column, represented a one-dimensional values.\n  */\n+\n+\n+\n public abstract class TVector extends TAbstractVector {\n \n   /**\n    * Instantiates a new T vector.\n    */\n+\n   public TVector() {\n     super();\n   }\n@@ -34,6 +38,7 @@ public abstract class TVector extends TAbstractVector {\n    *\n    * @param other the other\n    */\n+\n   public TVector(TVector other) {\n     super(other);\n   }\n@@ -44,6 +49,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param other the other vector\n    * @return the reference of object\n    */\n+\n   public abstract TVector plusBy(TAbstractVector other);\n \n   /**\n@@ -53,6 +59,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param x     the double update value\n    * @return the reference of object\n    */\n+\n   public abstract TVector plusBy(int index, double x);\n \n   /**\n@@ -62,6 +69,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param x     the double multiply factor\n    * @return the reference of object\n    */\n+\n   public abstract TVector plusBy(TAbstractVector other, double x);\n \n \n@@ -71,6 +79,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param other the other vector\n    * @return the new vector\n    */\n+\n   public abstract TVector plus(TAbstractVector other);\n \n   /**\n@@ -80,6 +89,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param x     the double multiply factor\n    * @return the new vector\n    */\n+\n   public abstract TVector plus(TAbstractVector other, double x);\n \n   /**\n@@ -88,6 +98,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param other the other\n    * @return the result\n    */\n+\n   public abstract double dot(TAbstractVector other);\n \n   /**\n@@ -96,6 +107,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param x the double multiply factor\n    * @return the new vector\n    */\n+\n   public abstract TVector times(double x);\n \n   /**\n@@ -104,6 +116,7 @@ public abstract class TVector extends TAbstractVector {\n    * @param x the double multiply factor\n    * @return the reference of object\n    */\n+\n   public abstract TVector timesBy(double x);\n \n   /**\n@@ -112,11 +125,13 @@ public abstract class TVector extends TAbstractVector {\n    * @param x the comparison value\n    * @return the t vector\n    */\n+\n   public abstract TVector filter(double x);\n \n   /**\n    * Clear.\n    */\n+\n   public abstract void clear();\n \n   /**\n@@ -124,6 +139,7 @@ public abstract class TVector extends TAbstractVector {\n    *\n    * @return the long\n    */\n+\n   public abstract long nonZeroNumber();\n \n \n@@ -131,6 +147,7 @@ public abstract class TVector extends TAbstractVector {\n    * Calculate square norm value of vector\n    * @return square norm value\n    */\n+\n   public abstract double squaredNorm();\n \n   /**\n@@ -138,6 +155,7 @@ public abstract class TVector extends TAbstractVector {\n    *\n    * @param vector for cloning the vector\n    */\n+\n   public void clone(TVector vector) {\n     assert this.getClass() == vector.getClass();\n     assert this.dim == vector.dim;\n@@ -152,5 +170,7 @@ public abstract class TVector extends TAbstractVector {\n    *\n    * @return  cloned vector\n    */\n+\n   public abstract TVector clone();\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}