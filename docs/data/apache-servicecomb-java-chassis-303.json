{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "303",
    "information": {
        "violations": [
            {
                "line": "82",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    assert sslContext != null;\n    //register http/https socket factory\n    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n        .build();",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/303/TLSHttpsTransport.java\nindex d544662fd04..de5a9edfb94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/303/TLSHttpsTransport.java\n@@ -64,6 +64,7 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n \n   /**\n    * configure the certificate to httpClient\n+   *\n    * @param tlsConfig\n    */\n   public TLSHttpsTransport(TLSConfig tlsConfig) {\n@@ -79,10 +80,11 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n \n     assert sslContext != null;\n     //register http/https socket factory\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n-        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n-        .build();\n+    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry =\n+        RegistryBuilder.<ConnectionSocketFactory>create()\n+            .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n+            .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n+            .build();\n \n     //connection pool management\n     PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/303/TLSHttpsTransport.java\nindex d544662fd04..c07f3ad97d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/303/TLSHttpsTransport.java\n@@ -67,8 +67,7 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n    * @param tlsConfig\n    */\n   public TLSHttpsTransport(TLSConfig tlsConfig) {\n-\n-    // create keyStore and trustStore\n+  // create keyStore and trustStore\n     KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\n         tlsConfig.getKeyStoreValue());\n     KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\n@@ -85,23 +84,17 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n         .build();\n \n     //connection pool management\n-    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n-        connectionSocketFactoryRegistry);\n+    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(connectionSocketFactoryRegistry);\n     connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\n     connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\n \n     //request parameter configuration\n     RequestConfig config = RequestConfig.custom().\n-        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\n-        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\n-        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\n-        build();\n+        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).build();\n \n     // construct httpClient\n     HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\n-        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\n-        setConnectionManager(connectionManager).\n-        setDefaultRequestConfig(config);\n+        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).setConnectionManager(connectionManager).setDefaultRequestConfig(config);\n \n     this.httpClient = httpClientBuilder.build();\n   }\n@@ -137,4 +130,4 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n     }\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/303/TLSHttpsTransport.java\nindex d544662fd04..2a5470fec0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/303/TLSHttpsTransport.java\n@@ -27,13 +27,11 @@ import java.security.NoSuchAlgorithmException;\n import java.security.SecureRandom;\n import java.security.UnrecoverableKeyException;\n import java.security.cert.CertificateException;\n-\n import javax.net.ssl.KeyManager;\n import javax.net.ssl.KeyManagerFactory;\n import javax.net.ssl.SSLContext;\n import javax.net.ssl.TrustManager;\n import javax.net.ssl.TrustManagerFactory;\n-\n import org.apache.http.client.config.RequestConfig;\n import org.apache.http.config.Registry;\n import org.apache.http.config.RegistryBuilder;\n@@ -48,8 +46,8 @@ import org.apache.http.ssl.SSLContexts;\n /**\n  * Created by   on 2019/10/31.\n  */\n-public class TLSHttpsTransport extends HttpTransportImpl {\n \n+public class TLSHttpsTransport extends HttpTransportImpl {\n   private static final int DEFAULT_MAX_CONNECTIONS = 1000;\n \n   private static final int DEFAULT_MAX_PER_ROUTE = 500;\n@@ -59,49 +57,49 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n   private static final int DEFAULT_CONNECTION_TIMEOUT = 5000;\n \n   public TLSHttpsTransport() {\n-\n   }\n \n   /**\n    * configure the certificate to httpClient\n    * @param tlsConfig\n    */\n+\n   public TLSHttpsTransport(TLSConfig tlsConfig) {\n \n     // create keyStore and trustStore\n-    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(), tlsConfig.getKeyStoreType().name(),\n-        tlsConfig.getKeyStoreValue());\n-    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(), TLSConfig.KeyStoreInstanceType.JKS.name(),\n-        tlsConfig.getTrustStoreValue());\n+    KeyStore keyStore = getKeyStore(tlsConfig.getKeyStore(),\n+tlsConfig.getKeyStoreType().name(),\n+tlsConfig.getKeyStoreValue());\n+    KeyStore trustStore = getKeyStore(tlsConfig.getTrustStore(),\n+TLSConfig.KeyStoreInstanceType.JKS.name(),\n+tlsConfig.getTrustStoreValue());\n \n     // initialize SSLContext\n     SSLContext sslContext = getSSLContext(keyStore, tlsConfig.getKeyStoreValue(), trustStore);\n-\n     assert sslContext != null;\n     //register http/https socket factory\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n-        .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n-        .build();\n+\n+    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create().register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n+                                                                                                                         .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n+                                                                                                                         .build();\n \n     //connection pool management\n-    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(\n-        connectionSocketFactoryRegistry);\n+    PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager(connectionSocketFactoryRegistry);\n     connectionManager.setMaxTotal(DEFAULT_MAX_CONNECTIONS);\n     connectionManager.setDefaultMaxPerRoute(DEFAULT_MAX_PER_ROUTE);\n \n     //request parameter configuration\n-    RequestConfig config = RequestConfig.custom().\n-        setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT).\n-        setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT).\n-        setSocketTimeout(DEFAULT_REQUEST_TIMEOUT).\n-        build();\n+\n+    RequestConfig config = RequestConfig.custom().setConnectTimeout(DEFAULT_CONNECTION_TIMEOUT)\n+                                                 .setConnectionRequestTimeout(DEFAULT_CONNECTION_TIMEOUT)\n+                                                 .setSocketTimeout(DEFAULT_REQUEST_TIMEOUT)\n+                                                 .build();\n \n     // construct httpClient\n-    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().\n-        setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext)).\n-        setConnectionManager(connectionManager).\n-        setDefaultRequestConfig(config);\n+    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create().setSSLSocketFactory(new SSLConnectionSocketFactory(sslContext))\n+                                                                    .setConnectionManager(connectionManager)\n+                                                                    .setDefaultRequestConfig(config);\n+\n \n     this.httpClient = httpClientBuilder.build();\n   }\n@@ -122,14 +120,14 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n     try {\n       KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n       keyManagerFactory.init(keyStore, keyStoreValue.toCharArray());\n-      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n \n-      TrustManagerFactory trustManagerFactory = TrustManagerFactory\n-          .getInstance(TrustManagerFactory.getDefaultAlgorithm());\n+      KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n+      TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\n       trustManagerFactory.init(trustStore);\n-      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n \n-      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy()).build();\n+      TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n+      SSLContext sslContext = SSLContexts.custom().loadTrustMaterial(new TrustSelfSignedStrategy())\n+                                                  .build();\n       sslContext.init(keyManagers, trustManagers, new SecureRandom());\n       return sslContext;\n     } catch (UnrecoverableKeyException | NoSuchAlgorithmException | KeyStoreException | KeyManagementException e) {\n@@ -137,4 +135,4 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n     }\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "82",
                    "column": "38",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/303/TLSHttpsTransport.java\nindex d544662fd04..477e08e9b91 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/303/TLSHttpsTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/303/TLSHttpsTransport.java\n@@ -79,8 +79,8 @@ public class TLSHttpsTransport extends HttpTransportImpl {\n \n     assert sslContext != null;\n     //register http/https socket factory\n-    Registry<ConnectionSocketFactory> connectionSocketFactoryRegistry = RegistryBuilder.<ConnectionSocketFactory>create()\n-        .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n+    Registry<ConnectionSocketFactory>connectionSocketFactoryRegistry = RegistryBuilder.\n+    <ConnectionSocketFactory>create() .register(\"http\", PlainConnectionSocketFactory.INSTANCE)\n         .register(\"https\", new SSLConnectionSocketFactory(sslContext))\n         .build();\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}