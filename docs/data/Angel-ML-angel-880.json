{
    "project_name": "Angel-ML-angel",
    "violation_id": "880",
    "information": {
        "violations": [
            {
                "line": "8",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/880/QuantifyFloatFunc.java\nindex 870506628e9..6c5139100ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/880/QuantifyFloatFunc.java\n@@ -31,57 +31,60 @@ import com.tencent.angel.ps.storage.vector.ServerRow;\n \n public class QuantifyFloatFunc extends UpdateFunc {\n \n-  public QuantifyFloatFunc(int matrixId, int rowId, float[] array, int bitPerItem) {\n-    super(new QuantifyFloatParam(matrixId, rowId, array, bitPerItem));\n-  }\n+    public QuantifyFloatFunc(int matrixId, int rowId, float[] array, int bitPerItem) {\n+        super(new QuantifyFloatParam(matrixId, rowId, array, bitPerItem));\n+    }\n \n-  public QuantifyFloatFunc(int matrixId, int rowId, IntFloatVector vector, int bitPerItem) {\n-    this(matrixId, rowId, vector.getStorage().getValues(), bitPerItem);\n-  }\n+    public QuantifyFloatFunc(int matrixId, int rowId, IntFloatVector vector, int bitPerItem) {\n+        this(matrixId, rowId, vector.getStorage().getValues(), bitPerItem);\n+    }\n \n-  public QuantifyFloatFunc(int matrixId, int rowId, Vector vector, int bitPerItem) {\n-    this(matrixId, rowId, (IntFloatVector) vector, bitPerItem);\n-  }\n+    public QuantifyFloatFunc(int matrixId, int rowId, Vector vector, int bitPerItem) {\n+        this(matrixId, rowId, (IntFloatVector) vector, bitPerItem);\n+    }\n \n-  public QuantifyFloatFunc() {\n-    super(null);\n-  }\n+    public QuantifyFloatFunc() {\n+        super(null);\n+    }\n \n-  @Override public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part = psContext.getMatrixStorageManager()\n-        .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n+    @Override\n+    public void partitionUpdate(PartitionUpdateParam partParam) {\n+        ServerPartition part = psContext.getMatrixStorageManager()\n+                .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n \n-    if (part != null) {\n-      QuantifyFloatPartParam cp =\n-          (QuantifyFloatPartParam) partParam;\n-      ServerRow row = part.getRow(cp.getRowId());\n-      if (row != null) {\n-        update(row, cp.getArraySlice());\n-      }\n+        if (part != null) {\n+            QuantifyFloatPartParam cp =\n+                    (QuantifyFloatPartParam) partParam;\n+            ServerRow row = part.getRow(cp.getRowId());\n+            if (row != null) {\n+                update(row, cp.getArraySlice());\n+            }\n+        }\n     }\n-  }\n \n-  private void update(ServerRow row, float[] arraySlice) {\n-    switch (row.getRowType()) {\n-      case T_DOUBLE_DENSE:\n-        doUpdate((ServerIntFloatRow) row, arraySlice);\n-        return;\n-      default:\n-        throw new RuntimeException(\"Spark on Angel currently only supports Double Dense Row\");\n+    private void update(ServerRow row, float[] arraySlice) {\n+        switch (row.getRowType()) {\n+            case T_DOUBLE_DENSE:\n+                doUpdate((ServerIntFloatRow) row, arraySlice);\n+                return;\n+            default:\n+                throw new RuntimeException(\n+                        \"Spark on Angel currently only supports Double Dense Row\");\n+        }\n     }\n-  }\n \n-  private void doUpdate(ServerIntFloatRow row, float[] arraySlice) {\n-    try {\n-      row.getLock().writeLock().lock();\n-      float[] values = ((IntFloatDenseVectorStorage)(row.getSplit().getStorage())).getValues();\n-      int size = row.size();\n-      for (int i = 0; i < size; i++) {\n-        values[i] = values[i] + arraySlice[i];\n-      }\n-    } finally {\n-      row.getLock().writeLock().unlock();\n+    private void doUpdate(ServerIntFloatRow row, float[] arraySlice) {\n+        try {\n+            row.getLock().writeLock().lock();\n+            float[] values =\n+                    ((IntFloatDenseVectorStorage) (row.getSplit().getStorage())).getValues();\n+            int size = row.size();\n+            for (int i = 0; i < size; i++) {\n+                values[i] = values[i] + arraySlice[i];\n+            }\n+        } finally {\n+            row.getLock().writeLock().unlock();\n+        }\n     }\n-  }\n }\n \n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/880/QuantifyFloatFunc.java\nindex 870506628e9..1e7e32fe070 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/880/QuantifyFloatFunc.java\n@@ -16,8 +16,6 @@ package com.tencent.angel.ml.psf.compress;\n  * the License.\n  *\n  */\n-\n-\n import com.tencent.angel.ml.math2.storage.IntFloatDenseVectorStorage;\n import com.tencent.angel.ml.math2.vector.IntFloatVector;\n import com.tencent.angel.ml.math2.vector.Vector;\n@@ -47,7 +45,8 @@ public class QuantifyFloatFunc extends UpdateFunc {\n     super(null);\n   }\n \n-  @Override public void partitionUpdate(PartitionUpdateParam partParam) {\n+  @Override\n+public void partitionUpdate(PartitionUpdateParam partParam) {\n     ServerPartition part = psContext.getMatrixStorageManager()\n         .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n \n@@ -83,5 +82,4 @@ public class QuantifyFloatFunc extends UpdateFunc {\n       row.getLock().writeLock().unlock();\n     }\n   }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/880/QuantifyFloatFunc.java\nindex 870506628e9..525294432d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/880/QuantifyFloatFunc.java\n@@ -17,7 +17,6 @@ package com.tencent.angel.ml.psf.compress;\n  *\n  */\n \n-\n import com.tencent.angel.ml.math2.storage.IntFloatDenseVectorStorage;\n import com.tencent.angel.ml.math2.vector.IntFloatVector;\n import com.tencent.angel.ml.math2.vector.Vector;\n@@ -28,7 +27,6 @@ import com.tencent.angel.ps.storage.matrix.ServerPartition;\n import com.tencent.angel.ps.storage.vector.ServerIntFloatRow;\n import com.tencent.angel.ps.storage.vector.ServerRow;\n \n-\n public class QuantifyFloatFunc extends UpdateFunc {\n \n   public QuantifyFloatFunc(int matrixId, int rowId, float[] array, int bitPerItem) {\n@@ -47,13 +45,11 @@ public class QuantifyFloatFunc extends UpdateFunc {\n     super(null);\n   }\n \n-  @Override public void partitionUpdate(PartitionUpdateParam partParam) {\n-    ServerPartition part = psContext.getMatrixStorageManager()\n-        .getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n-\n+  @Override\n+  public void partitionUpdate(PartitionUpdateParam partParam) {\n+    ServerPartition part = psContext.getMatrixStorageManager().getPart(partParam.getMatrixId(), partParam.getPartKey().getPartitionId());\n     if (part != null) {\n-      QuantifyFloatPartParam cp =\n-          (QuantifyFloatPartParam) partParam;\n+      QuantifyFloatPartParam cp = (QuantifyFloatPartParam) partParam;\n       ServerRow row = part.getRow(cp.getRowId());\n       if (row != null) {\n         update(row, cp.getArraySlice());\n@@ -74,7 +70,7 @@ public class QuantifyFloatFunc extends UpdateFunc {\n   private void doUpdate(ServerIntFloatRow row, float[] arraySlice) {\n     try {\n       row.getLock().writeLock().lock();\n-      float[] values = ((IntFloatDenseVectorStorage)(row.getSplit().getStorage())).getValues();\n+      float[] values = ((IntFloatDenseVectorStorage) (row.getSplit().getStorage())).getValues();\n       int size = row.size();\n       for (int i = 0; i < size; i++) {\n         values[i] = values[i] + arraySlice[i];\n@@ -83,5 +79,5 @@ public class QuantifyFloatFunc extends UpdateFunc {\n       row.getLock().writeLock().unlock();\n     }\n   }\n-}\n \n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/880/QuantifyFloatFunc.java\nindex 870506628e9..2ef57e565b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/880/QuantifyFloatFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/880/QuantifyFloatFunc.java\n@@ -17,7 +17,6 @@ package com.tencent.angel.ml.psf.compress;\n  *\n  */\n \n-\n import com.tencent.angel.ml.math2.storage.IntFloatDenseVectorStorage;\n import com.tencent.angel.ml.math2.vector.IntFloatVector;\n import com.tencent.angel.ml.math2.vector.Vector;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}