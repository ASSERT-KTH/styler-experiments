{
    "project_name": "EMResearch-EMB",
    "violation_id": "79",
    "information": {
        "violations": [
            {
                "line": "76",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 141).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      // then show to the user:\n      if (token.getToken().equals(\"demo\")) {\n        RuleMatch ruleMatch = new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(), \"The demo rule thinks this looks wrong\");\n        ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n        ruleMatches.add(ruleMatch);\n      }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "76",
                    "column": "45",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/79/DemoRule.java\nindex 2696525e803..eae096ae0e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/79/DemoRule.java\n@@ -73,8 +73,10 @@ public class DemoRule extends Rule {\n       // the word \"demo\" an error and create a rule match that LanguageTool will\n       // then show to the user:\n       if (token.getToken().equals(\"demo\")) {\n-        RuleMatch ruleMatch = new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(), \"The demo rule thinks this looks wrong\");\n-        ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n+        RuleMatch ruleMatch = new RuleMatch (this,sentence,\n+        token.getStartPos(),token.getEndPos(),\n+        \"The demo rule thinks this looks wrong\");\n+          ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n         ruleMatches.add(ruleMatch);\n       }\n     }\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/79/DemoRule.java\nindex 2696525e803..0e657d25806 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/79/DemoRule.java\n@@ -1,6 +1,6 @@\n-/* LanguageTool, a natural language style checker \n+/* LanguageTool, a natural language style checker\n  * Copyright (C) 2015 Daniel Naber (http://www.danielnaber.de)\n- * \n+ *\n  * This library is free software; you can redistribute it and/or\n  * modify it under the terms of the GNU Lesser General Public\n  * License as published by the Free Software Foundation; either\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules;\n \n import org.languagetool.AnalyzedSentence;\n@@ -30,56 +31,57 @@ import java.util.List;\n  * A simple demo rule as an example for how to implement your own Java-based\n  * rule in LanguageTool. Simple walks over the text and prints the words\n  * and their analysis.\n- * \n+ *\n  * <p>To activate this rule, add it to {@code getRelevantRules()} in e.g. {@code English.java}.\n- * \n- * <p>This rule works on sentences, extend {@link TextLevelRule} instead to work \n+ *\n+ * <p>This rule works on sentences, extend {@link TextLevelRule} instead to work\n  * on the complete text.\n  */\n public class DemoRule extends Rule {\n-  \n-  @Override\n-  public String getId() {\n-    return \"DEMO_RULE\";  // a unique id that doesn't change over time\n-  }\n \n-  @Override\n-  public String getDescription() {\n-    return \"A demo rule that just prints the text analysis\";  // shown in the configuration dialog\n-  }\n-\n-  // This is the method with the error detection logic that you need to implement:\n-  @Override\n-  public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n-    List<RuleMatch> ruleMatches = new ArrayList<>();\n+    @Override\n+    public String getId() {\n+        return \"DEMO_RULE\";  // a unique id that doesn't change over time\n+    }\n \n-    // Let's get all the tokens (i.e. words) of this sentence, but not the spaces:\n-    AnalyzedTokenReadings[] tokens = sentence.getTokensWithoutWhitespace();\n-    \n-    // No let's iterate over those - note that the first token will\n-    // be a special token that indicates the start of a sentence:\n-    for (AnalyzedTokenReadings token : tokens) {\n-      \n-      System.out.println(\"Token: \" + token.getToken());  // the original word from the input text\n-      \n-      // A word can have more than one reading, e.g. 'dance' can be a verb or a noun,\n-      // so we iterate over the readings:\n-      for (AnalyzedToken analyzedToken : token.getReadings()) {\n-        System.out.println(\"  Lemma: \" + analyzedToken.getLemma());\n-        System.out.println(\"  POS: \" + analyzedToken.getPOSTag());\n-      }\n-      \n-      // You can add your own logic here to find errors. Here, we just consider\n-      // the word \"demo\" an error and create a rule match that LanguageTool will\n-      // then show to the user:\n-      if (token.getToken().equals(\"demo\")) {\n-        RuleMatch ruleMatch = new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(), \"The demo rule thinks this looks wrong\");\n-        ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n-        ruleMatches.add(ruleMatch);\n-      }\n+    @Override\n+    public String getDescription() {\n+        return \"A demo rule that just prints the text analysis\";  // shown in the configuration dialog\n     }\n \n-    return toRuleMatchArray(ruleMatches);\n-  }\n+    // This is the method with the error detection logic that you need to implement:\n+    @Override\n+    public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n+        List<RuleMatch> ruleMatches = new ArrayList<>();\n+\n+        // Let's get all the tokens (i.e. words) of this sentence, but not the spaces:\n+        AnalyzedTokenReadings[] tokens = sentence.getTokensWithoutWhitespace();\n+\n+        // No let's iterate over those - note that the first token will\n+        // be a special token that indicates the start of a sentence:\n+        for (AnalyzedTokenReadings token : tokens) {\n+\n+            System.out.println(\"Token: \" + token.getToken());  // the original word from the input text\n+\n+            // A word can have more than one reading, e.g. 'dance' can be a verb or a noun,\n+            // so we iterate over the readings:\n+            for (AnalyzedToken analyzedToken : token.getReadings()) {\n+                System.out.println(\"  Lemma: \" + analyzedToken.getLemma());\n+                System.out.println(\"  POS: \" + analyzedToken.getPOSTag());\n+            }\n+\n+            // You can add your own logic here to find errors. Here, we just consider\n+            // the word \"demo\" an error and create a rule match that LanguageTool will\n+            // then show to the user:\n+            if (token.getToken().equals(\"demo\")) {\n+                RuleMatch ruleMatch = new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(),\n+                    \"The demo rule thinks this looks wrong\");\n+                ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n+                ruleMatches.add(ruleMatch);\n+            }\n+        }\n+\n+        return toRuleMatchArray(ruleMatches);\n+    }\n \n }\n",
            "diff_size": 78
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/79/DemoRule.java\nindex 2696525e803..2e038d8d0d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/79/DemoRule.java\n@@ -21,7 +21,6 @@ package org.languagetool.rules;\n import org.languagetool.AnalyzedSentence;\n import org.languagetool.AnalyzedToken;\n import org.languagetool.AnalyzedTokenReadings;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -36,50 +35,57 @@ import java.util.List;\n  * <p>This rule works on sentences, extend {@link TextLevelRule} instead to work \n  * on the complete text.\n  */\n+\n+\n public class DemoRule extends Rule {\n-  \n-  @Override\n-  public String getId() {\n-    return \"DEMO_RULE\";  // a unique id that doesn't change over time\n-  }\n+    @Override\n+    public String getId() {\n+        return \"DEMO_RULE\";  // a unique id that doesn't change over time\n+    }\n \n-  @Override\n-  public String getDescription() {\n-    return \"A demo rule that just prints the text analysis\";  // shown in the configuration dialog\n-  }\n+    @Override\n+    public String getDescription() {\n+        return \"A demo rule that just prints the text analysis\";  // shown in the configuration dialog\n+    }\n \n   // This is the method with the error detection logic that you need to implement:\n-  @Override\n-  public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n-    List<RuleMatch> ruleMatches = new ArrayList<>();\n+\n+    @Override\n+    public RuleMatch[] match(AnalyzedSentence sentence) throws IOException {\n+        List<RuleMatch> ruleMatches = new ArrayList<>();\n \n     // Let's get all the tokens (i.e. words) of this sentence, but not the spaces:\n-    AnalyzedTokenReadings[] tokens = sentence.getTokensWithoutWhitespace();\n+        AnalyzedTokenReadings[] tokens = sentence.getTokensWithoutWhitespace();\n     \n     // No let's iterate over those - note that the first token will\n     // be a special token that indicates the start of a sentence:\n-    for (AnalyzedTokenReadings token : tokens) {\n-      \n-      System.out.println(\"Token: \" + token.getToken());  // the original word from the input text\n+        for (AnalyzedTokenReadings token : tokens) {\n+        System.out.println(\"Token: \"\n+            + token.getToken());  // the original word from the input text\n       \n       // A word can have more than one reading, e.g. 'dance' can be a verb or a noun,\n       // so we iterate over the readings:\n-      for (AnalyzedToken analyzedToken : token.getReadings()) {\n-        System.out.println(\"  Lemma: \" + analyzedToken.getLemma());\n-        System.out.println(\"  POS: \" + analyzedToken.getPOSTag());\n-      }\n+\n+        for (AnalyzedToken analyzedToken : token.getReadings()) {\n+                                                       System.out.println(\"  Lemma: \"\n+                                                           + analyzedToken.getLemma());\n+                                                       System.out.println(\"  POS: \"\n+                                                           + analyzedToken.getPOSTag());\n+        }\n       \n       // You can add your own logic here to find errors. Here, we just consider\n       // the word \"demo\" an error and create a rule match that LanguageTool will\n       // then show to the user:\n-      if (token.getToken().equals(\"demo\")) {\n-        RuleMatch ruleMatch = new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(), \"The demo rule thinks this looks wrong\");\n-        ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n-        ruleMatches.add(ruleMatch);\n-      }\n+        if (token.getToken().equals(\"demo\")) {\n+            RuleMatch ruleMatch = new RuleMatch(this,\n+                sentence,\n+                    token.getStartPos(),\n+                        token.getEndPos(),\n+                                                \"The demo rule thinks this looks wrong\");\n+            ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n+            ruleMatches.add(ruleMatch);\n+        }\n+        }\n+        return toRuleMatchArray(ruleMatches);\n     }\n-\n-    return toRuleMatchArray(ruleMatches);\n-  }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "76",
                    "column": "45",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "77",
                    "column": "28",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/79/DemoRule.java\nindex 2696525e803..eae096ae0e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/79/DemoRule.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/79/DemoRule.java\n@@ -73,8 +73,10 @@ public class DemoRule extends Rule {\n       // the word \"demo\" an error and create a rule match that LanguageTool will\n       // then show to the user:\n       if (token.getToken().equals(\"demo\")) {\n-        RuleMatch ruleMatch = new RuleMatch(this, sentence, token.getStartPos(), token.getEndPos(), \"The demo rule thinks this looks wrong\");\n-        ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n+        RuleMatch ruleMatch = new RuleMatch (this,sentence,\n+        token.getStartPos(),token.getEndPos(),\n+        \"The demo rule thinks this looks wrong\");\n+          ruleMatch.setSuggestedReplacement(\"blablah\");  // the user will see this as a suggested correction\n         ruleMatches.add(ruleMatch);\n       }\n     }\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}