{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "violation_id": "52",
    "information": {
        "violations": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 100).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public long getWatermark() {\n    final long watermark =\n        isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n    if (watermark < lastWatermark) {\n      return lastWatermark;\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "'isIdle' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/final/files-repaired/52/AbstractWatermarkEstimator.java\nindex 22e1fa2ad83..607b293c395 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/final/files-repaired/52/AbstractWatermarkEstimator.java\n@@ -74,7 +74,7 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n   @Override\n   public long getWatermark() {\n     final long watermark =\n-        isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n+      isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n     if (watermark < lastWatermark) {\n       return lastWatermark;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/checkstyle_idea/52/AbstractWatermarkEstimator.java\nindex 22e1fa2ad83..ac8172633b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/checkstyle_idea/52/AbstractWatermarkEstimator.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.time;\n \n import com.google.common.base.Preconditions;\n@@ -74,7 +75,8 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n   @Override\n   public long getWatermark() {\n     final long watermark =\n-        isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n+        isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) :\n+            estimateWatermark();\n     if (watermark < lastWatermark) {\n       return lastWatermark;\n     }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/naturalize/52/AbstractWatermarkEstimator.java\nindex 22e1fa2ad83..1fbc41a60c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/naturalize/52/AbstractWatermarkEstimator.java\n@@ -75,10 +75,10 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n   public long getWatermark() {\n     final long watermark =\n         isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n-    if (watermark < lastWatermark) {\n+if (watermark < lastWatermark) {\n       return lastWatermark;\n     }\n     lastWatermark = watermark;\n     return watermark;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "column": "34",
                    "severity": "error",
                    "message": "WhitespaceAround: '?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/codebuff/52/AbstractWatermarkEstimator.java\nindex 22e1fa2ad83..6bc47e1279c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/codebuff/52/AbstractWatermarkEstimator.java\n@@ -19,13 +19,15 @@ import com.google.common.base.Preconditions;\n import cz.o2.proxima.storage.StreamElement;\n \n /** The watermark estimator base class. */\n+\n+\n public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n   /** Used idle policy */\n+\n   private final WatermarkIdlePolicy idlePolicy;\n \n   /** If estimator is in the idle state */\n   private boolean isIdle = false;\n-\n   private long lastWatermark = Watermarks.MIN_WATERMARK;\n \n   protected AbstractWatermarkEstimator(WatermarkIdlePolicy idlePolicy) {\n@@ -38,6 +40,7 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n    *\n    * @return the estimated watermark.\n    */\n+\n   protected abstract long estimateWatermark();\n \n   /**\n@@ -48,6 +51,7 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n   protected abstract void updateWatermark(StreamElement element);\n \n   /** Signals that streaming source is idle. */\n+\n   @Override\n   public void idle() {\n     isIdle = true;\n@@ -59,6 +63,7 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n    *\n    * @param element a stream element.\n    */\n+\n   @Override\n   public final void update(StreamElement element) {\n     isIdle = false;\n@@ -71,14 +76,14 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n    *\n    * @return the watermark estimate.\n    */\n+\n   @Override\n   public long getWatermark() {\n-    final long watermark =\n-        isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n+    final long watermark = isIdle? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n     if (watermark < lastWatermark) {\n       return lastWatermark;\n     }\n     lastWatermark = watermark;\n     return watermark;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "77",
                    "column": "17",
                    "severity": "error",
                    "message": "WhitespaceAround: '?' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/random/files-repaired/52/AbstractWatermarkEstimator.java\nindex 22e1fa2ad83..07e64a2204d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/random/files-repaired/52/AbstractWatermarkEstimator.java\n@@ -74,7 +74,8 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n   @Override\n   public long getWatermark() {\n     final long watermark =\n-        isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n+        isIdle ?Math.max(estimateWatermark() ,idlePolicy.getIdleWatermark (\n+          ) ) : estimateWatermark();\n     if (watermark < lastWatermark) {\n       return lastWatermark;\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "'isIdle' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/three_grams/files-repaired/52/AbstractWatermarkEstimator.java\nindex 22e1fa2ad83..607b293c395 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/52/AbstractWatermarkEstimator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/three_grams/files-repaired/52/AbstractWatermarkEstimator.java\n@@ -74,7 +74,7 @@ public abstract class AbstractWatermarkEstimator implements WatermarkEstimator {\n   @Override\n   public long getWatermark() {\n     final long watermark =\n-        isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n+      isIdle ? Math.max(estimateWatermark(), idlePolicy.getIdleWatermark()) : estimateWatermark();\n     if (watermark < lastWatermark) {\n       return lastWatermark;\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}