{
    "project_name": "RWTH-i5-IDSG-steve",
    "violation_id": "109",
    "information": {
        "violations": [
            {
                "line": "52",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    @PostConstruct\n    public void init() {\n        List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n        List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n\n        createOcppService(ocpp12Server, \"/CentralSystemServiceOCPP12\", interceptors, logging);",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'{' at column 24 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/RWTH-i5-IDSG-steve/styler/05_predictions/final/files-repaired/109/OcppConfiguration.java\nindex e316724f427..a4ddad073f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/RWTH-i5-IDSG-steve/styler/05_predictions/final/files-repaired/109/OcppConfiguration.java\n@@ -48,9 +48,8 @@ public class OcppConfiguration {\n     private PhaseInterceptor<Message> messageHeaderInterceptor;\n \n     @PostConstruct\n-    public void init() {\n-        List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n-        List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n+    public void init() {List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n+    List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n \n         createOcppService(ocpp12Server, \"/CentralSystemServiceOCPP12\", interceptors, logging);\n         createOcppService(ocpp15Server, \"/CentralSystemServiceOCPP15\", interceptors, logging);\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/checkstyle_idea/109/OcppConfiguration.java\nindex e316724f427..731f4f2a3d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/checkstyle_idea/109/OcppConfiguration.java\n@@ -35,48 +35,51 @@ import static java.util.Collections.singletonList;\n @Configuration\n public class OcppConfiguration {\n \n-    static {\n-        LogUtils.setLoggerClass(Slf4jLogger.class);\n-    }\n+  static {\n+    LogUtils.setLoggerClass(Slf4jLogger.class);\n+  }\n \n-    @Autowired private ocpp.cs._2010._08.CentralSystemService ocpp12Server;\n-    @Autowired private ocpp.cs._2012._06.CentralSystemService ocpp15Server;\n-    @Autowired private ocpp.cs._2015._10.CentralSystemService ocpp16Server;\n+  @Autowired\n+  private ocpp.cs._2010._08.CentralSystemService ocpp12Server;\n+  @Autowired\n+  private ocpp.cs._2012._06.CentralSystemService ocpp15Server;\n+  @Autowired\n+  private ocpp.cs._2015._10.CentralSystemService ocpp16Server;\n \n-    @Autowired\n-    @Qualifier(\"MessageHeaderInterceptor\")\n-    private PhaseInterceptor<Message> messageHeaderInterceptor;\n+  @Autowired\n+  @Qualifier(\"MessageHeaderInterceptor\")\n+  private PhaseInterceptor<Message> messageHeaderInterceptor;\n \n-    @PostConstruct\n-    public void init() {\n-        List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n-        List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n+  @PostConstruct\n+  public void init() {\n+    List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n+    List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n \n-        createOcppService(ocpp12Server, \"/CentralSystemServiceOCPP12\", interceptors, logging);\n-        createOcppService(ocpp15Server, \"/CentralSystemServiceOCPP15\", interceptors, logging);\n-        createOcppService(ocpp16Server, \"/CentralSystemServiceOCPP16\", interceptors, logging);\n+    createOcppService(ocpp12Server, \"/CentralSystemServiceOCPP12\", interceptors, logging);\n+    createOcppService(ocpp15Server, \"/CentralSystemServiceOCPP15\", interceptors, logging);\n+    createOcppService(ocpp16Server, \"/CentralSystemServiceOCPP16\", interceptors, logging);\n \n-        // Just a dummy service to route incoming messages to the appropriate service version. This should be the last\n-        // one to be created, since in MediatorInInterceptor we go over created/registered services and build a map.\n-        //\n-        List<Interceptor<? extends Message>> mediator = singletonList(new MediatorInInterceptor(springBus()));\n-        createOcppService(ocpp12Server, CONFIG.getRouterEndpointPath(), mediator, Collections.emptyList());\n-    }\n+    // Just a dummy service to route incoming messages to the appropriate service version. This should be the last\n+    // one to be created, since in MediatorInInterceptor we go over created/registered services and build a map.\n+    //\n+    List<Interceptor<? extends Message>> mediator = singletonList(new MediatorInInterceptor(springBus()));\n+    createOcppService(ocpp12Server, CONFIG.getRouterEndpointPath(), mediator, Collections.emptyList());\n+  }\n \n-    @Bean(name = Bus.DEFAULT_BUS_ID, destroyMethod = \"shutdown\")\n-    public SpringBus springBus() {\n-        return new SpringBus();\n-    }\n+  @Bean(name = Bus.DEFAULT_BUS_ID, destroyMethod = \"shutdown\")\n+  public SpringBus springBus() {\n+    return new SpringBus();\n+  }\n \n-    private void createOcppService(Object serviceBean, String address,\n-                                   List<Interceptor<? extends Message>> interceptors,\n-                                   Collection<? extends Feature> features) {\n-        JaxWsServerFactoryBean f = new JaxWsServerFactoryBean();\n-        f.setBus(springBus());\n-        f.setServiceBean(serviceBean);\n-        f.setAddress(address);\n-        f.getFeatures().addAll(features);\n-        f.getInInterceptors().addAll(interceptors);\n-        f.create();\n-    }\n+  private void createOcppService(Object serviceBean, String address,\n+                                 List<Interceptor<? extends Message>> interceptors,\n+                                 Collection<? extends Feature> features) {\n+    JaxWsServerFactoryBean f = new JaxWsServerFactoryBean();\n+    f.setBus(springBus());\n+    f.setServiceBean(serviceBean);\n+    f.setAddress(address);\n+    f.getFeatures().addAll(features);\n+    f.getInInterceptors().addAll(interceptors);\n+    f.create();\n+  }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/naturalize/109/OcppConfiguration.java\nindex e316724f427..e8c39738574 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/naturalize/109/OcppConfiguration.java\n@@ -71,7 +71,7 @@ public class OcppConfiguration {\n     private void createOcppService(Object serviceBean, String address,\n                                    List<Interceptor<? extends Message>> interceptors,\n                                    Collection<? extends Feature> features) {\n-        JaxWsServerFactoryBean f = new JaxWsServerFactoryBean();\n+    JaxWsServerFactoryBean f = new JaxWsServerFactoryBean();\n         f.setBus(springBus());\n         f.setServiceBean(serviceBean);\n         f.setAddress(address);\n@@ -79,4 +79,4 @@ public class OcppConfiguration {\n         f.getInInterceptors().addAll(interceptors);\n         f.create();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/codebuff/109/OcppConfiguration.java\nindex e316724f427..9f4c31ced74 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/codebuff/109/OcppConfiguration.java\n@@ -16,7 +16,6 @@ import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-\n import javax.annotation.PostConstruct;\n import java.util.Collection;\n import java.util.Collections;\n@@ -32,26 +31,25 @@ import static java.util.Collections.singletonList;\n  * @author Sevket Goekay <goekay@dbis.rwth-aachen.de>\n  * @since 18.11.2014\n  */\n+\n+\n @Configuration\n public class OcppConfiguration {\n \n     static {\n-        LogUtils.setLoggerClass(Slf4jLogger.class);\n+           LogUtils.setLoggerClass(Slf4jLogger.class);\n     }\n \n     @Autowired private ocpp.cs._2010._08.CentralSystemService ocpp12Server;\n     @Autowired private ocpp.cs._2012._06.CentralSystemService ocpp15Server;\n     @Autowired private ocpp.cs._2015._10.CentralSystemService ocpp16Server;\n-\n     @Autowired\n     @Qualifier(\"MessageHeaderInterceptor\")\n     private PhaseInterceptor<Message> messageHeaderInterceptor;\n-\n     @PostConstruct\n     public void init() {\n         List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n         List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n-\n         createOcppService(ocpp12Server, \"/CentralSystemServiceOCPP12\", interceptors, logging);\n         createOcppService(ocpp15Server, \"/CentralSystemServiceOCPP15\", interceptors, logging);\n         createOcppService(ocpp16Server, \"/CentralSystemServiceOCPP16\", interceptors, logging);\n@@ -59,6 +57,7 @@ public class OcppConfiguration {\n         // Just a dummy service to route incoming messages to the appropriate service version. This should be the last\n         // one to be created, since in MediatorInInterceptor we go over created/registered services and build a map.\n         //\n+\n         List<Interceptor<? extends Message>> mediator = singletonList(new MediatorInInterceptor(springBus()));\n         createOcppService(ocpp12Server, CONFIG.getRouterEndpointPath(), mediator, Collections.emptyList());\n     }\n@@ -68,9 +67,9 @@ public class OcppConfiguration {\n         return new SpringBus();\n     }\n \n-    private void createOcppService(Object serviceBean, String address,\n-                                   List<Interceptor<? extends Message>> interceptors,\n-                                   Collection<? extends Feature> features) {\n+    private void createOcppService(Object serviceBean,\n+                                   String address,\n+                                   List<Interceptor<? extends Message>> interceptors, Collection<? extends Feature> features) {\n         JaxWsServerFactoryBean f = new JaxWsServerFactoryBean();\n         f.setBus(springBus());\n         f.setServiceBean(serviceBean);\n@@ -79,4 +78,4 @@ public class OcppConfiguration {\n         f.getInInterceptors().addAll(interceptors);\n         f.create();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'{' at column 24 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'{' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/styler/05_predictions/random/files-repaired/109/OcppConfiguration.java\nindex e316724f427..a4ddad073f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/violations/109/OcppConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/RWTH-i5-IDSG-steve/styler/05_predictions/random/files-repaired/109/OcppConfiguration.java\n@@ -48,9 +48,8 @@ public class OcppConfiguration {\n     private PhaseInterceptor<Message> messageHeaderInterceptor;\n \n     @PostConstruct\n-    public void init() {\n-        List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n-        List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n+    public void init() {List<Interceptor<? extends Message>> interceptors = asList(new MessageIdInterceptor(), messageHeaderInterceptor);\n+    List<Feature> logging = singletonList(LoggingFeatureProxy.INSTANCE.get());\n \n         createOcppService(ocpp12Server, \"/CentralSystemServiceOCPP12\", interceptors, logging);\n         createOcppService(ocpp15Server, \"/CentralSystemServiceOCPP15\", interceptors, logging);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}