{
    "project_name": "Angel-ML-angel",
    "violation_id": "227",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/227/ObjectiveFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/227/ObjectiveFactory.java\nindex 775f05173d2..00de01d03ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/227/ObjectiveFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/227/ObjectiveFactory.java\n@@ -24,137 +24,137 @@ import com.tencent.angel.spark.ml.tree.objective.metric.*;\n \n public class ObjectiveFactory {\n \n-  public static Loss getLoss(Loss.Kind lossFunc) {\n-    switch (lossFunc) {\n-      case RMSE:\n-        return RMSELoss.getInstance();\n-      case BinaryLogistic:\n-        return BinaryLogisticLoss.getInstance();\n-      case MultiLogistic:\n-        return MultinomialLogisticLoss.getInstance();\n-      default:\n-        throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n+    public static Loss getLoss(Loss.Kind lossFunc) {\n+        switch (lossFunc) {\n+            case RMSE:\n+                return RMSELoss.getInstance();\n+            case BinaryLogistic:\n+                return BinaryLogisticLoss.getInstance();\n+            case MultiLogistic:\n+                return MultinomialLogisticLoss.getInstance();\n+            default:\n+                throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n+        }\n     }\n-  }\n-\n-  public static BinaryLoss getBinaryLoss(Loss.Kind lossFunc) {\n-    switch (lossFunc) {\n-      case RMSE:\n-        return RMSELoss.getInstance();\n-      case BinaryLogistic:\n-        return BinaryLogisticLoss.getInstance();\n-      case MultiLogistic:\n-        throw new GBDTException(\"Loss function \" + lossFunc\n-            + \" is not a binary loss function\");\n-      default:\n-        throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n+\n+    public static BinaryLoss getBinaryLoss(Loss.Kind lossFunc) {\n+        switch (lossFunc) {\n+            case RMSE:\n+                return RMSELoss.getInstance();\n+            case BinaryLogistic:\n+                return BinaryLogisticLoss.getInstance();\n+            case MultiLogistic:\n+                throw new GBDTException(\"Loss function \" + lossFunc\n+                        + \" is not a binary loss function\");\n+            default:\n+                throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n+        }\n     }\n-  }\n-\n-  public static MultiLoss getMultiLoss(Loss.Kind lossFunc) {\n-    switch (lossFunc) {\n-      case RMSE:\n-        return RMSELoss.getInstance();\n-      case MultiLogistic:\n-        return MultinomialLogisticLoss.getInstance();\n-      case BinaryLogistic:\n-        throw new GBDTException(\"Loss function \" + lossFunc\n-            + \" is not a multi-class loss function\");\n-      default:\n+\n+    public static MultiLoss getMultiLoss(Loss.Kind lossFunc) {\n+        switch (lossFunc) {\n+            case RMSE:\n+                return RMSELoss.getInstance();\n+            case MultiLogistic:\n+                return MultinomialLogisticLoss.getInstance();\n+            case BinaryLogistic:\n+                throw new GBDTException(\"Loss function \" + lossFunc\n+                        + \" is not a multi-class loss function\");\n+            default:\n+                throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n+        }\n+    }\n+\n+    public static Loss getLoss(String lossFunc) {\n+        for (Loss.Kind kind : Loss.Kind.values()) {\n+            if (lossFunc.equalsIgnoreCase(kind.toString())) {\n+                return getLoss(kind);\n+            }\n+        }\n         throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n     }\n-  }\n \n-  public static Loss getLoss(String lossFunc) {\n-    for (Loss.Kind kind : Loss.Kind.values()) {\n-      if (lossFunc.equalsIgnoreCase(kind.toString())) {\n-        return getLoss(kind);\n-      }\n+    public static BinaryLoss getBinaryLoss(String lossFunc) {\n+        for (Loss.Kind kind : Loss.Kind.values()) {\n+            if (lossFunc.equalsIgnoreCase(kind.toString())) {\n+                return getBinaryLoss(kind);\n+            }\n+        }\n+        throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n     }\n-    throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n-  }\n-\n-  public static BinaryLoss getBinaryLoss(String lossFunc) {\n-    for (Loss.Kind kind : Loss.Kind.values()) {\n-      if (lossFunc.equalsIgnoreCase(kind.toString())) {\n-        return getBinaryLoss(kind);\n-      }\n+\n+    public static MultiLoss getMultiLoss(String lossFunc) {\n+        for (Loss.Kind kind : Loss.Kind.values()) {\n+            if (lossFunc.equalsIgnoreCase(kind.toString())) {\n+                return getMultiLoss(kind);\n+            }\n+        }\n+        throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n     }\n-    throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n-  }\n-\n-  public static MultiLoss getMultiLoss(String lossFunc) {\n-    for (Loss.Kind kind : Loss.Kind.values()) {\n-      if (lossFunc.equalsIgnoreCase(kind.toString())) {\n-        return getMultiLoss(kind);\n-      }\n+\n+    public static EvalMetric getEvalMetric(EvalMetric.Kind metric) {\n+        switch (metric) {\n+            case RMSE:\n+                return RMSEMetric.getInstance();\n+            case ERROR:\n+                return ErrorMetric.getInstance();\n+            case PRECISION:\n+                return PrecisionMetric.getInstance();\n+            case LOG_LOSS:\n+                return LogLossMetric.getInstance();\n+            case CROSS_ENTROPY:\n+                return CrossEntropyMetric.getInstance();\n+            case AUC:\n+                return new AUCMetric();\n+            default:\n+                throw new GBDTException(\"Unrecognizable eval metric: \" + metric);\n+        }\n     }\n-    throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n-  }\n-\n-  public static EvalMetric getEvalMetric(EvalMetric.Kind metric) {\n-    switch (metric) {\n-      case RMSE:\n-        return RMSEMetric.getInstance();\n-      case ERROR:\n-        return ErrorMetric.getInstance();\n-      case PRECISION:\n-        return PrecisionMetric.getInstance();\n-      case LOG_LOSS:\n-        return LogLossMetric.getInstance();\n-      case CROSS_ENTROPY:\n-        return CrossEntropyMetric.getInstance();\n-      case AUC:\n-        return new AUCMetric();\n-      default:\n+\n+    public static EvalMetric getEvalMetric(String metric) {\n+        for (EvalMetric.Kind kind : EvalMetric.Kind.values()) {\n+            if (metric.equalsIgnoreCase(kind.toString())) {\n+                return getEvalMetric(kind);\n+            }\n+        }\n         throw new GBDTException(\"Unrecognizable eval metric: \" + metric);\n     }\n-  }\n \n-  public static EvalMetric getEvalMetric(String metric) {\n-    for (EvalMetric.Kind kind : EvalMetric.Kind.values()) {\n-      if (metric.equalsIgnoreCase(kind.toString())) {\n-        return getEvalMetric(kind);\n-      }\n+    public static EvalMetric getEvalMetricOrDefault(String metric, Loss loss) {\n+        if (metric == null || metric.length() == 0) {\n+            return getEvalMetric(loss.defaultEvalMetric());\n+        } else {\n+            return getEvalMetric(metric);\n+        }\n     }\n-    throw new GBDTException(\"Unrecognizable eval metric: \" + metric);\n-  }\n-\n-  public static EvalMetric getEvalMetricOrDefault(String metric, Loss loss) {\n-    if (metric == null || metric.length() == 0) {\n-      return getEvalMetric(loss.defaultEvalMetric());\n-    } else {\n-      return getEvalMetric(metric);\n-    }\n-  }\n \n-  public static EvalMetric[] getEvalMetrics(String[] metrics) {\n-    if (metrics.length == 0) {\n-      throw new GBDTException(\"No eval metric specified\");\n-    }\n+    public static EvalMetric[] getEvalMetrics(String[] metrics) {\n+        if (metrics.length == 0) {\n+            throw new GBDTException(\"No eval metric specified\");\n+        }\n \n-    EvalMetric[] result = new EvalMetric[metrics.length];\n-    for (int i = 0; i < metrics.length; i++) {\n-      result[i] = getEvalMetric(metrics[i]);\n+        EvalMetric[] result = new EvalMetric[metrics.length];\n+        for (int i = 0; i < metrics.length; i++) {\n+            result[i] = getEvalMetric(metrics[i]);\n+        }\n+        return result;\n     }\n-    return result;\n-  }\n-\n-  public static EvalMetric[] getEvalMetricsOrDefault(String[] metrics, Loss loss) {\n-    if (metrics == null || metrics.length == 0) {\n-      return new EvalMetric[]{getEvalMetric(loss.defaultEvalMetric())};\n-    } else {\n-      return getEvalMetrics(metrics);\n+\n+    public static EvalMetric[] getEvalMetricsOrDefault(String[] metrics, Loss loss) {\n+        if (metrics == null || metrics.length == 0) {\n+            return new EvalMetric[] {getEvalMetric(loss.defaultEvalMetric())};\n+        } else {\n+            return getEvalMetrics(metrics);\n+        }\n     }\n-  }\n \n-  public static MultiStrategy getMultiStrategy(String name) {\n-    for (MultiStrategy strategy : MultiStrategy.values()) {\n-      if (name.equalsIgnoreCase(strategy.toString())) {\n-        return strategy;\n-      }\n+    public static MultiStrategy getMultiStrategy(String name) {\n+        for (MultiStrategy strategy : MultiStrategy.values()) {\n+            if (name.equalsIgnoreCase(strategy.toString())) {\n+                return strategy;\n+            }\n+        }\n+        throw new GBDTException(\"Unrecognizable multi strategy: \" + name);\n     }\n-    throw new GBDTException(\"Unrecognizable multi strategy: \" + name);\n-  }\n \n }\n",
            "diff_size": 141
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/227/ObjectiveFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/227/ObjectiveFactory.java\nindex 775f05173d2..088514d72e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/227/ObjectiveFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/227/ObjectiveFactory.java\n@@ -46,7 +46,7 @@ public class ObjectiveFactory {\n       case MultiLogistic:\n         throw new GBDTException(\"Loss function \" + lossFunc\n             + \" is not a binary loss function\");\n-      default:\n+  default:\n         throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n     }\n   }\n@@ -60,7 +60,7 @@ public class ObjectiveFactory {\n       case BinaryLogistic:\n         throw new GBDTException(\"Loss function \" + lossFunc\n             + \" is not a multi-class loss function\");\n-      default:\n+  default:\n         throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n     }\n   }\n@@ -157,4 +157,4 @@ public class ObjectiveFactory {\n     throw new GBDTException(\"Unrecognizable multi strategy: \" + name);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/227/ObjectiveFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/227/ObjectiveFactory.java\nindex 775f05173d2..11389cdd932 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/227/ObjectiveFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/227/ObjectiveFactory.java\n@@ -44,8 +44,7 @@ public class ObjectiveFactory {\n       case BinaryLogistic:\n         return BinaryLogisticLoss.getInstance();\n       case MultiLogistic:\n-        throw new GBDTException(\"Loss function \" + lossFunc\n-            + \" is not a binary loss function\");\n+        throw new GBDTException(\"Loss function \" + lossFunc + \" is not a binary loss function\");\n       default:\n         throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n     }\n@@ -58,8 +57,7 @@ public class ObjectiveFactory {\n       case MultiLogistic:\n         return MultinomialLogisticLoss.getInstance();\n       case BinaryLogistic:\n-        throw new GBDTException(\"Loss function \" + lossFunc\n-            + \" is not a multi-class loss function\");\n+        throw new GBDTException(\"Loss function \" + lossFunc + \" is not a multi-class loss function\");\n       default:\n         throw new GBDTException(\"Unrecognizable loss function: \" + lossFunc);\n     }\n@@ -142,7 +140,7 @@ public class ObjectiveFactory {\n \n   public static EvalMetric[] getEvalMetricsOrDefault(String[] metrics, Loss loss) {\n     if (metrics == null || metrics.length == 0) {\n-      return new EvalMetric[]{getEvalMetric(loss.defaultEvalMetric())};\n+      return new EvalMetric[] {getEvalMetric(loss.defaultEvalMetric())};\n     } else {\n       return getEvalMetrics(metrics);\n     }\n@@ -156,5 +154,4 @@ public class ObjectiveFactory {\n     }\n     throw new GBDTException(\"Unrecognizable multi strategy: \" + name);\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}