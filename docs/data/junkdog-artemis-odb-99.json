{
    "project_name": "junkdog-artemis-odb",
    "violation_id": "99",
    "information": {
        "violations": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 120).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            aspect = new SystemMetadata(getClass()).getAspect();\n            if (aspect == null) {\n                String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n                        \"do not subscribe to entities, extend BaseSystem directly.\";\n                throw new NullPointerException(error);\n            }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/99/BaseEntitySystem.java\nindex 107d0f645d1..8fa7dc4a47e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/99/BaseEntitySystem.java\n@@ -32,8 +32,8 @@ public abstract class BaseEntitySystem extends BaseSystem\n         if (aspect == null) {\n             aspect = new SystemMetadata(getClass()).getAspect();\n             if (aspect == null) {\n-                String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n-                        \"do not subscribe to entities, extend BaseSystem directly.\";\n+\t\t\t\t\t\t\t\t\t\t\t\t\tString error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" + \"do not subscribe to entities, extend BaseSystem directly.\"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t;\n                 throw new NullPointerException(error);\n             }\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/99/BaseEntitySystem.java\nindex 107d0f645d1..5f8c18df43b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/99/BaseEntitySystem.java\n@@ -13,110 +13,112 @@ import static com.artemis.utils.reflect.ReflectionUtil.implementsAnyObserver;\n  * @author Adrian Papari\n  */\n public abstract class BaseEntitySystem extends BaseSystem\n-        implements EntitySubscription.SubscriptionListener {\n-\n-    private final Aspect.Builder aspectConfiguration;\n-    protected EntitySubscription subscription;\n-\n-    public BaseEntitySystem() {\n-        this(null);\n-    }\n-\n-    /**\n-     * Creates an entity system that uses the specified aspect as a matcher\n-     * against entities.\n-     *\n-     * @param aspect to match against entities\n-     */\n-    public BaseEntitySystem(Aspect.Builder aspect) {\n-        if (aspect == null) {\n-            aspect = new SystemMetadata(getClass()).getAspect();\n-            if (aspect == null) {\n-                String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n-                        \"do not subscribe to entities, extend BaseSystem directly.\";\n-                throw new NullPointerException(error);\n-            }\n-        }\n-\n-        aspectConfiguration = aspect;\n-    }\n-\n-    protected void setWorld(World world) {\n-        super.setWorld(world);\n-\n-        subscription = getSubscription();\n-        if (implementsAnyObserver(this))\n-            subscription.addSubscriptionListener(this);\n+    implements EntitySubscription.SubscriptionListener {\n+\n+  private final Aspect.Builder aspectConfiguration;\n+  protected EntitySubscription subscription;\n+\n+  public BaseEntitySystem() {\n+    this(null);\n+  }\n+\n+  /**\n+   * Creates an entity system that uses the specified aspect as a matcher\n+   * against entities.\n+   *\n+   * @param aspect to match against entities\n+   */\n+  public BaseEntitySystem(Aspect.Builder aspect) {\n+    if (aspect == null) {\n+      aspect = new SystemMetadata(getClass()).getAspect();\n+      if (aspect == null) {\n+        String error =\n+            \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n+                \"do not subscribe to entities, extend BaseSystem directly.\";\n+        throw new NullPointerException(error);\n+      }\n     }\n \n-    /**\n-     * @return entity subscription backing this system.\n-     */\n-    public EntitySubscription getSubscription() {\n-        final AspectSubscriptionManager sm = world.getAspectSubscriptionManager();\n-        return sm.get(aspectConfiguration);\n-    }\n+    aspectConfiguration = aspect;\n+  }\n \n-    @Override\n-    public void inserted(IntBag entities) {\n-        int[] ids = entities.getData();\n-        for (int i = 0, s = entities.size(); s > i; i++) {\n-            inserted(ids[i]);\n-        }\n-    }\n+  protected void setWorld(World world) {\n+    super.setWorld(world);\n \n-    /**\n-     * Gets the entities processed by this system. Do not delete entities from\n-     * this bag - it is the live thing.\n-     *\n-     * @return System's entity ids, as matched by aspect.\n-     */\n-    public IntBag getEntityIds() {\n-        return subscription.getEntities();\n+    subscription = getSubscription();\n+    if (implementsAnyObserver(this)) {\n+      subscription.addSubscriptionListener(this);\n     }\n-\n-    /**\n-     * Called if entity has come into scope for this system, e.g\n-     * created or a component was added to it.\n-     *\n-     * @param entityId the entity that was added to this system\n-     */\n-    protected void inserted(int entityId) {\n+  }\n+\n+  /**\n+   * @return entity subscription backing this system.\n+   */\n+  public EntitySubscription getSubscription() {\n+    final AspectSubscriptionManager sm = world.getAspectSubscriptionManager();\n+    return sm.get(aspectConfiguration);\n+  }\n+\n+  @Override\n+  public void inserted(IntBag entities) {\n+    int[] ids = entities.getData();\n+    for (int i = 0, s = entities.size(); s > i; i++) {\n+      inserted(ids[i]);\n     }\n-\n-\n-    /**\n-     * <p>Called if entity has gone out of scope of this system, e.g deleted\n-     * or had one of it's components removed.</p>\n-     * <p>\n-     * <p>Explicitly removed components are only retrievable at this point\n-     * if annotated with {@link DelayedComponentRemoval}.</p>\n-     * <p>\n-     * <p>Deleted entities retain all their components - until all listeners\n-     * have been informed.</p>\n-     *\n-     * @param entities entities removed from this system.\n-     */\n-    @Override\n-    public void removed(IntBag entities) {\n-        int[] ids = entities.getData();\n-        for (int i = 0, s = entities.size(); s > i; i++) {\n-            removed(ids[i]);\n-        }\n-    }\n-\n-    /**\n-     * <p>Called if entity has gone out of scope of this system, e.g deleted\n-     * or had one of it's components removed.</p>\n-     * <p>\n-     * <p>Explicitly removed components are only retrievable at this point\n-     * if annotated with {@link DelayedComponentRemoval}.</p>\n-     * <p>\n-     * <p>Deleted entities retain all their components - until all listeners\n-     * have been informed.</p>\n-     *\n-     * @param entityId the entity that was removed from this system\n-     */\n-    protected void removed(int entityId) {\n+  }\n+\n+  /**\n+   * Gets the entities processed by this system. Do not delete entities from\n+   * this bag - it is the live thing.\n+   *\n+   * @return System's entity ids, as matched by aspect.\n+   */\n+  public IntBag getEntityIds() {\n+    return subscription.getEntities();\n+  }\n+\n+  /**\n+   * Called if entity has come into scope for this system, e.g\n+   * created or a component was added to it.\n+   *\n+   * @param entityId the entity that was added to this system\n+   */\n+  protected void inserted(int entityId) {\n+  }\n+\n+\n+  /**\n+   * <p>Called if entity has gone out of scope of this system, e.g deleted\n+   * or had one of it's components removed.</p>\n+   * <p>\n+   * <p>Explicitly removed components are only retrievable at this point\n+   * if annotated with {@link DelayedComponentRemoval}.</p>\n+   * <p>\n+   * <p>Deleted entities retain all their components - until all listeners\n+   * have been informed.</p>\n+   *\n+   * @param entities entities removed from this system.\n+   */\n+  @Override\n+  public void removed(IntBag entities) {\n+    int[] ids = entities.getData();\n+    for (int i = 0, s = entities.size(); s > i; i++) {\n+      removed(ids[i]);\n     }\n+  }\n+\n+  /**\n+   * <p>Called if entity has gone out of scope of this system, e.g deleted\n+   * or had one of it's components removed.</p>\n+   * <p>\n+   * <p>Explicitly removed components are only retrievable at this point\n+   * if annotated with {@link DelayedComponentRemoval}.</p>\n+   * <p>\n+   * <p>Deleted entities retain all their components - until all listeners\n+   * have been informed.</p>\n+   *\n+   * @param entityId the entity that was removed from this system\n+   */\n+  protected void removed(int entityId) {\n+  }\n }\n",
            "diff_size": 126
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "15",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/99/BaseEntitySystem.java\nindex 107d0f645d1..1863075ebeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/99/BaseEntitySystem.java\n@@ -12,14 +12,13 @@ import static com.artemis.utils.reflect.ReflectionUtil.implementsAnyObserver;\n  * @author Arni Arent\n  * @author Adrian Papari\n  */\n-public abstract class BaseEntitySystem extends BaseSystem\n-        implements EntitySubscription.SubscriptionListener {\n+public abstract class BaseEntitySystem extends BaseSystem implements EntitySubscription.SubscriptionListener {\n \n-    private final Aspect.Builder aspectConfiguration;\n+\tprivate final Aspect.Builder aspectConfiguration;\n     protected EntitySubscription subscription;\n \n     public BaseEntitySystem() {\n-        this(null);\n+\tthis(null);\n     }\n \n     /**\n@@ -29,39 +28,39 @@ public abstract class BaseEntitySystem extends BaseSystem\n      * @param aspect to match against entities\n      */\n     public BaseEntitySystem(Aspect.Builder aspect) {\n-        if (aspect == null) {\n+\tif (aspect == null) {\n             aspect = new SystemMetadata(getClass()).getAspect();\n             if (aspect == null) {\n                 String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n-                        \"do not subscribe to entities, extend BaseSystem directly.\";\n-                throw new NullPointerException(error);\n+\t\t\"do not subscribe to entities, extend BaseSystem directly.\";\n+\t\tthrow new NullPointerException(error);\n             }\n         }\n \n         aspectConfiguration = aspect;\n-    }\n+\t}\n \n     protected void setWorld(World world) {\n         super.setWorld(world);\n \n         subscription = getSubscription();\n         if (implementsAnyObserver(this))\n-            subscription.addSubscriptionListener(this);\n-    }\n+\tsubscription.addSubscriptionListener(this);\n+\t}\n \n     /**\n      * @return entity subscription backing this system.\n      */\n     public EntitySubscription getSubscription() {\n-        final AspectSubscriptionManager sm = world.getAspectSubscriptionManager();\n+\tfinal AspectSubscriptionManager sm = world.getAspectSubscriptionManager();\n         return sm.get(aspectConfiguration);\n     }\n \n     @Override\n     public void inserted(IntBag entities) {\n-        int[] ids = entities.getData();\n+\tint[] ids = entities.getData();\n         for (int i = 0, s = entities.size(); s > i; i++) {\n-            inserted(ids[i]);\n+\tinserted(ids[i]);\n         }\n     }\n \n@@ -72,7 +71,7 @@ public abstract class BaseEntitySystem extends BaseSystem\n      * @return System's entity ids, as matched by aspect.\n      */\n     public IntBag getEntityIds() {\n-        return subscription.getEntities();\n+\treturn subscription.getEntities();\n     }\n \n     /**\n@@ -84,8 +83,7 @@ public abstract class BaseEntitySystem extends BaseSystem\n     protected void inserted(int entityId) {\n     }\n \n-\n-    /**\n+/**\n      * <p>Called if entity has gone out of scope of this system, e.g deleted\n      * or had one of it's components removed.</p>\n      * <p>\n@@ -99,9 +97,9 @@ public abstract class BaseEntitySystem extends BaseSystem\n      */\n     @Override\n     public void removed(IntBag entities) {\n-        int[] ids = entities.getData();\n+\tint[] ids = entities.getData();\n         for (int i = 0, s = entities.size(); s > i; i++) {\n-            removed(ids[i]);\n+\tremoved(ids[i]);\n         }\n     }\n \n@@ -118,5 +116,6 @@ public abstract class BaseEntitySystem extends BaseSystem\n      * @param entityId the entity that was removed from this system\n      */\n     protected void removed(int entityId) {\n-    }\n+\n }\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/99/BaseEntitySystem.java\nindex 107d0f645d1..cc334641d49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/99/BaseEntitySystem.java\n@@ -12,15 +12,17 @@ import static com.artemis.utils.reflect.ReflectionUtil.implementsAnyObserver;\n  * @author Arni Arent\n  * @author Adrian Papari\n  */\n-public abstract class BaseEntitySystem extends BaseSystem\n-        implements EntitySubscription.SubscriptionListener {\n \n-    private final Aspect.Builder aspectConfiguration;\n-    protected EntitySubscription subscription;\n \n-    public BaseEntitySystem() {\n-        this(null);\n-    }\n+\n+public abstract class BaseEntitySystem extends BaseSystem implements EntitySubscription.SubscriptionListener {\n+ private final Aspect.Builder aspectConfiguration;\n+\n+ protected EntitySubscription subscription;\n+\n+ public BaseEntitySystem() {\n+  this(null);\n+ }\n \n     /**\n      * Creates an entity system that uses the specified aspect as a matcher\n@@ -28,42 +30,44 @@ public abstract class BaseEntitySystem extends BaseSystem\n      *\n      * @param aspect to match against entities\n      */\n-    public BaseEntitySystem(Aspect.Builder aspect) {\n-        if (aspect == null) {\n-            aspect = new SystemMetadata(getClass()).getAspect();\n-            if (aspect == null) {\n-                String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n-                        \"do not subscribe to entities, extend BaseSystem directly.\";\n-                throw new NullPointerException(error);\n-            }\n-        }\n-\n-        aspectConfiguration = aspect;\n-    }\n-\n-    protected void setWorld(World world) {\n-        super.setWorld(world);\n-\n-        subscription = getSubscription();\n-        if (implementsAnyObserver(this))\n-            subscription.addSubscriptionListener(this);\n-    }\n+\n+ public BaseEntitySystem(Aspect.Builder aspect) {\n+  if (aspect == null) {\n+   aspect = new SystemMetadata(getClass()).getAspect();\n+   if (aspect == null) {\n+    String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" + \"do not subscribe to entities, extend BaseSystem directly.\";\n+    throw new NullPointerException(error);\n+   }\n+  }\n+\n+  aspectConfiguration = aspect;\n+ }\n+\n+\n+ protected void setWorld(World world) {\n+  super.setWorld(world);\n+  subscription = getSubscription();\n+  if (implementsAnyObserver(this))\n+   subscription.addSubscriptionListener(this);\n+ }\n \n     /**\n      * @return entity subscription backing this system.\n      */\n-    public EntitySubscription getSubscription() {\n-        final AspectSubscriptionManager sm = world.getAspectSubscriptionManager();\n-        return sm.get(aspectConfiguration);\n-    }\n-\n-    @Override\n-    public void inserted(IntBag entities) {\n-        int[] ids = entities.getData();\n-        for (int i = 0, s = entities.size(); s > i; i++) {\n-            inserted(ids[i]);\n-        }\n-    }\n+\n+\n+ public EntitySubscription getSubscription() {\n+  final AspectSubscriptionManager sm = world.getAspectSubscriptionManager();\n+  return sm.get(aspectConfiguration);\n+ }\n+\n+ @Override\n+ public void inserted(IntBag entities) {\n+  int[] ids = entities.getData();\n+  for (int i = 0, s = entities.size(); s > i; i++) {\n+   inserted(ids[i]);\n+  }\n+ }\n \n     /**\n      * Gets the entities processed by this system. Do not delete entities from\n@@ -71,9 +75,11 @@ public abstract class BaseEntitySystem extends BaseSystem\n      *\n      * @return System's entity ids, as matched by aspect.\n      */\n-    public IntBag getEntityIds() {\n-        return subscription.getEntities();\n-    }\n+\n+\n+ public IntBag getEntityIds() {\n+  return subscription.getEntities();\n+ }\n \n     /**\n      * Called if entity has come into scope for this system, e.g\n@@ -81,8 +87,8 @@ public abstract class BaseEntitySystem extends BaseSystem\n      *\n      * @param entityId the entity that was added to this system\n      */\n-    protected void inserted(int entityId) {\n-    }\n+\n+ protected void inserted(int entityId) {}\n \n \n     /**\n@@ -97,13 +103,14 @@ public abstract class BaseEntitySystem extends BaseSystem\n      *\n      * @param entities entities removed from this system.\n      */\n-    @Override\n-    public void removed(IntBag entities) {\n-        int[] ids = entities.getData();\n-        for (int i = 0, s = entities.size(); s > i; i++) {\n-            removed(ids[i]);\n-        }\n-    }\n+\n+ @Override\n+ public void removed(IntBag entities) {\n+  int[] ids = entities.getData();\n+  for (int i = 0, s = entities.size(); s > i; i++) {\n+   removed(ids[i]);\n+  }\n+ }\n \n     /**\n      * <p>Called if entity has gone out of scope of this system, e.g deleted\n@@ -117,6 +124,6 @@ public abstract class BaseEntitySystem extends BaseSystem\n      *\n      * @param entityId the entity that was removed from this system\n      */\n-    protected void removed(int entityId) {\n-    }\n-}\n+\n+ protected void removed(int entityId) {}\n+}\n\\ No newline at end of file\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/99/BaseEntitySystem.java\nindex 107d0f645d1..8fa7dc4a47e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/99/BaseEntitySystem.java\n@@ -32,8 +32,8 @@ public abstract class BaseEntitySystem extends BaseSystem\n         if (aspect == null) {\n             aspect = new SystemMetadata(getClass()).getAspect();\n             if (aspect == null) {\n-                String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n-                        \"do not subscribe to entities, extend BaseSystem directly.\";\n+\t\t\t\t\t\t\t\t\t\t\t\t\tString error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" + \"do not subscribe to entities, extend BaseSystem directly.\"\n+\t\t\t\t\t\t\t\t\t\t\t\t\t;\n                 throw new NullPointerException(error);\n             }\n         }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/99/BaseEntitySystem.java\nindex 107d0f645d1..2bed36e1a47 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/99/BaseEntitySystem.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/99/BaseEntitySystem.java\n@@ -32,8 +32,7 @@ public abstract class BaseEntitySystem extends BaseSystem\n         if (aspect == null) {\n             aspect = new SystemMetadata(getClass()).getAspect();\n             if (aspect == null) {\n-                String error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \" +\n-                        \"do not subscribe to entities, extend BaseSystem directly.\";\n+\t\t\t\t\t\t\t\t\t\t\t\t\tString error = \"Aspect was null and no aspect annotations set on system (@All); to use systems which \"+\"do not subscribe to entities, extend BaseSystem directly.\";\n                 throw new NullPointerException(error);\n             }\n         }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}