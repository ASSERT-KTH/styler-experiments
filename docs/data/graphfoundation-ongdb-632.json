{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "632",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "320",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "329",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "376",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "492",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "510",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "518",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "551",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "556",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "583",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "592",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "597",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "611",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "613",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "635",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "645",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "654",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "665",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "676",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "698",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "700",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "727",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "780",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "780",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "810",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/632/Dijkstra.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/632/Dijkstra.java\nindex c2134e21ede..9dcb67884a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/632/Dijkstra.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/632/Dijkstra.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.Collections;\n@@ -50,766 +51,764 @@ import org.neo4j.helpers.collection.Iterables;\n  * be sure to call getPaths (or calculateMultiple) before any call to getPath or\n  * getCost (or calculate) is made.\n  *\n- * @complexity The {@link CostEvaluator}, the {@link CostAccumulator} and the\n- *             cost comparator will all be called once for every relationship\n- *             traversed. Assuming they run in constant time, the time\n- *             complexity for this algorithm is O(m + n * log(n)).\n- * @author Patrik Larsson\n  * @param <CostType> The datatype the edge weights will be represented by.\n+ * @author Patrik Larsson\n+ * @complexity The {@link CostEvaluator}, the {@link CostAccumulator} and the\n+ * cost comparator will all be called once for every relationship\n+ * traversed. Assuming they run in constant time, the time\n+ * complexity for this algorithm is O(m + n * log(n)).\n  */\n public class Dijkstra<CostType> implements\n-        SingleSourceSingleSinkShortestPath<CostType>\n+    SingleSourceSingleSinkShortestPath<CostType>\n {\n-    protected CostType startCost; // starting cost for both the start node and\n-    // the end node\n-    protected Node startNode;\n-    protected Node endNode;\n-    protected RelationshipType[] costRelationTypes;\n-    protected Direction relationDirection;\n-    protected CostEvaluator<CostType> costEvaluator;\n-    protected CostAccumulator<CostType> costAccumulator;\n-    protected Comparator<CostType> costComparator;\n-    protected boolean calculateAllShortestPaths;\n-    // Limits\n-    protected long maxRelationShipsToTraverse = -1;\n-    protected long numberOfTraversedRelationShips;\n-    protected long maxNodesToTraverse = -1;\n-    protected long numberOfNodesTraversed;\n-    protected CostType maxCost;\n+  protected CostType startCost; // starting cost for both the start node and\n+  // the end node\n+  protected Node startNode;\n+  protected Node endNode;\n+  protected RelationshipType[] costRelationTypes;\n+  protected Direction relationDirection;\n+  protected CostEvaluator<CostType> costEvaluator;\n+  protected CostAccumulator<CostType> costAccumulator;\n+  protected Comparator<CostType> costComparator;\n+  protected boolean calculateAllShortestPaths;\n+  // Limits\n+  protected long maxRelationShipsToTraverse = -1;\n+  protected long numberOfTraversedRelationShips;\n+  protected long maxNodesToTraverse = -1;\n+  protected long numberOfNodesTraversed;\n+  protected CostType maxCost;\n+\n+  /**\n+   * @return True if the set limits for the calculation has been reached (but\n+   * not exceeded)\n+   */\n+  protected boolean limitReached()\n+  {\n+    return maxRelationShipsToTraverse >= 0 && numberOfTraversedRelationShips >= maxRelationShipsToTraverse ||\n+        maxNodesToTraverse >= 0 && numberOfNodesTraversed >= maxNodesToTraverse;\n+  }\n+\n+  protected boolean limitReached(CostType cost1, CostType cost2)\n+  {\n+    if (maxCost != null)\n+    {\n+      CostType totalCost = costAccumulator.addCosts(cost1, cost2);\n+      if (costComparator.compare(totalCost, maxCost) > 0)\n+      {\n+        foundPathsMiddleNodes = null;\n+        foundPathsCost = null;\n+        return true;\n+      }\n+    }\n \n-    /**\n-     * @return True if the set limits for the calculation has been reached (but\n-     *         not exceeded)\n-     */\n-    protected boolean limitReached()\n+    return false;\n+  }\n+\n+  // Result data\n+  protected boolean doneCalculation;\n+  protected Set<Node> foundPathsMiddleNodes;\n+  protected CostType foundPathsCost;\n+  protected HashMap<Node, List<Relationship>> predecessors1 = new HashMap<>();\n+  protected HashMap<Node, List<Relationship>> predecessors2 = new HashMap<>();\n+\n+  /**\n+   * Resets the result data to force the computation to be run again when some\n+   * result is asked for.\n+   */\n+  @Override\n+  public void reset()\n+  {\n+    doneCalculation = false;\n+    foundPathsMiddleNodes = null;\n+    predecessors1 = new HashMap<>();\n+    predecessors2 = new HashMap<>();\n+    // Limits\n+    numberOfTraversedRelationShips = 0;\n+    numberOfNodesTraversed = 0;\n+  }\n+\n+  /**\n+   * @param startCost         Starting cost for both the start node and the end node\n+   * @param startNode         the start node\n+   * @param endNode           the end node\n+   * @param costRelationTypes the relationship that should be included in the\n+   *                          path\n+   * @param relationDirection relationship direction to follow\n+   * @param costEvaluator     the cost function per relationship\n+   * @param costAccumulator   adding up the path cost\n+   * @param costComparator    comparing to path costs\n+   */\n+  public Dijkstra(CostType startCost, Node startNode, Node endNode,\n+                  CostEvaluator<CostType> costEvaluator,\n+                  CostAccumulator<CostType> costAccumulator,\n+                  Comparator<CostType> costComparator, Direction relationDirection,\n+                  RelationshipType... costRelationTypes)\n+  {\n+    super();\n+    this.startCost = startCost;\n+    this.startNode = startNode;\n+    this.endNode = endNode;\n+    this.costRelationTypes = costRelationTypes;\n+    this.relationDirection = relationDirection;\n+    this.costEvaluator = costEvaluator;\n+    this.costAccumulator = costAccumulator;\n+    this.costComparator = costComparator;\n+  }\n+\n+  /**\n+   * A DijkstraIterator computes the distances to nodes from a specified\n+   * starting node, one at a time, following the dijkstra algorithm.\n+   *\n+   * @author Patrik Larsson\n+   */\n+  protected class DijstraIterator implements Iterator<Node>\n+  {\n+    protected Node startNode;\n+    // where do we come from\n+    protected HashMap<Node, List<Relationship>> predecessors;\n+    // observed distances not yet final\n+    protected HashMap<Node, CostType> mySeen;\n+    protected HashMap<Node, CostType> otherSeen;\n+    // the final distances\n+    protected HashMap<Node, CostType> myDistances;\n+    protected HashMap<Node, CostType> otherDistances;\n+    // Flag that indicates if we should follow egdes in the opposite\n+    // direction instead\n+    protected boolean backwards;\n+    // The priority queue\n+    protected DijkstraPriorityQueue<CostType> queue;\n+    // \"Done\" flags. The first is set to true when a node is found that is\n+    // contained in both myDistances and otherDistances. This means the\n+    // calculation has found one of the shortest paths.\n+    protected boolean oneShortestPathHasBeenFound;\n+    protected boolean allShortestPathsHasBeenFound;\n+\n+    public DijstraIterator(Node startNode,\n+                           HashMap<Node, List<Relationship>> predecessors,\n+                           HashMap<Node, CostType> mySeen,\n+                           HashMap<Node, CostType> otherSeen,\n+                           HashMap<Node, CostType> myDistances,\n+                           HashMap<Node, CostType> otherDistances, boolean backwards)\n     {\n-        return maxRelationShipsToTraverse >= 0 && numberOfTraversedRelationShips >= maxRelationShipsToTraverse ||\n-                maxNodesToTraverse >= 0 && numberOfNodesTraversed >= maxNodesToTraverse;\n+      super();\n+      this.startNode = startNode;\n+      this.predecessors = predecessors;\n+      this.mySeen = mySeen;\n+      this.otherSeen = otherSeen;\n+      this.myDistances = myDistances;\n+      this.otherDistances = otherDistances;\n+      this.backwards = backwards;\n+      InitQueue();\n     }\n \n-    protected boolean limitReached( CostType cost1, CostType cost2 )\n+    /**\n+     * @return The direction to use when searching for relations/edges\n+     */\n+    protected Direction getDirection()\n     {\n-        if ( maxCost != null )\n+      if (backwards)\n+      {\n+        if (relationDirection.equals(Direction.INCOMING))\n         {\n-            CostType totalCost = costAccumulator.addCosts( cost1, cost2 );\n-            if ( costComparator.compare( totalCost, maxCost ) > 0 )\n-            {\n-                foundPathsMiddleNodes = null;\n-                foundPathsCost = null;\n-                return true;\n-            }\n+          return Direction.OUTGOING;\n         }\n-\n-        return false;\n+        if (relationDirection.equals(Direction.OUTGOING))\n+        {\n+          return Direction.INCOMING;\n+        }\n+      }\n+      return relationDirection;\n     }\n \n-    // Result data\n-    protected boolean doneCalculation;\n-    protected Set<Node> foundPathsMiddleNodes;\n-    protected CostType foundPathsCost;\n-    protected HashMap<Node, List<Relationship>> predecessors1 = new HashMap<>();\n-    protected HashMap<Node, List<Relationship>> predecessors2 = new HashMap<>();\n+    // This puts the start node into the queue\n+    protected void InitQueue()\n+    {\n+      queue = new DijkstraPriorityQueueFibonacciImpl<>(costComparator);\n+      queue.insertValue(startNode, startCost);\n+      mySeen.put(startNode, startCost);\n+    }\n \n-    /**\n-     * Resets the result data to force the computation to be run again when some\n-     * result is asked for.\n-     */\n     @Override\n-    public void reset()\n+    public boolean hasNext()\n     {\n-        doneCalculation = false;\n-        foundPathsMiddleNodes = null;\n-        predecessors1 = new HashMap<>();\n-        predecessors2 = new HashMap<>();\n-        // Limits\n-        numberOfTraversedRelationShips = 0;\n-        numberOfNodesTraversed = 0;\n+      return !queue.isEmpty() && !limitReached();\n     }\n \n-    /**\n-     * @param startCost Starting cost for both the start node and the end node\n-     * @param startNode the start node\n-     * @param endNode the end node\n-     * @param costRelationTypes the relationship that should be included in the\n-     *            path\n-     * @param relationDirection relationship direction to follow\n-     * @param costEvaluator the cost function per relationship\n-     * @param costAccumulator adding up the path cost\n-     * @param costComparator comparing to path costs\n-     */\n-    public Dijkstra( CostType startCost, Node startNode, Node endNode,\n-            CostEvaluator<CostType> costEvaluator,\n-            CostAccumulator<CostType> costAccumulator,\n-            Comparator<CostType> costComparator, Direction relationDirection,\n-            RelationshipType... costRelationTypes )\n+    @Override\n+    public void remove()\n     {\n-        super();\n-        this.startCost = startCost;\n-        this.startNode = startNode;\n-        this.endNode = endNode;\n-        this.costRelationTypes = costRelationTypes;\n-        this.relationDirection = relationDirection;\n-        this.costEvaluator = costEvaluator;\n-        this.costAccumulator = costAccumulator;\n-        this.costComparator = costComparator;\n+      // Not used\n+      // Could be used to generate more sollutions, by removing an edge\n+      // from the sollution and run again?\n     }\n \n     /**\n-     * A DijkstraIterator computes the distances to nodes from a specified\n-     * starting node, one at a time, following the dijkstra algorithm.\n+     * This checks if a node has been seen by the other iterator/traverser\n+     * as well. In that case a path has been found. In that case, the total\n+     * cost for the path is calculated and compared to previously found\n+     * paths.\n      *\n-     * @author Patrik Larsson\n+     * @param currentNode        The node to be examined.\n+     * @param currentCost        The cost from the start node to this node.\n+     * @param otherSideDistances Map over distances from other side. A path\n+     *                           is found and examined if this contains currentNode.\n      */\n-    protected class DijstraIterator implements Iterator<Node>\n+    protected void checkForPath(Node currentNode, CostType currentCost,\n+                                HashMap<Node, CostType> otherSideDistances)\n     {\n-        protected Node startNode;\n-        // where do we come from\n-        protected HashMap<Node, List<Relationship>> predecessors;\n-        // observed distances not yet final\n-        protected HashMap<Node, CostType> mySeen;\n-        protected HashMap<Node, CostType> otherSeen;\n-        // the final distances\n-        protected HashMap<Node, CostType> myDistances;\n-        protected HashMap<Node, CostType> otherDistances;\n-        // Flag that indicates if we should follow egdes in the opposite\n-        // direction instead\n-        protected boolean backwards;\n-        // The priority queue\n-        protected DijkstraPriorityQueue<CostType> queue;\n-        // \"Done\" flags. The first is set to true when a node is found that is\n-        // contained in both myDistances and otherDistances. This means the\n-        // calculation has found one of the shortest paths.\n-        protected boolean oneShortestPathHasBeenFound;\n-        protected boolean allShortestPathsHasBeenFound;\n-\n-        public DijstraIterator( Node startNode,\n-                HashMap<Node, List<Relationship>> predecessors,\n-                HashMap<Node, CostType> mySeen,\n-                HashMap<Node, CostType> otherSeen,\n-                HashMap<Node, CostType> myDistances,\n-                HashMap<Node, CostType> otherDistances, boolean backwards )\n-        {\n-            super();\n-            this.startNode = startNode;\n-            this.predecessors = predecessors;\n-            this.mySeen = mySeen;\n-            this.otherSeen = otherSeen;\n-            this.myDistances = myDistances;\n-            this.otherDistances = otherDistances;\n-            this.backwards = backwards;\n-            InitQueue();\n-        }\n-\n-        /**\n-         * @return The direction to use when searching for relations/edges\n-         */\n-        protected Direction getDirection()\n+      // Found a path?\n+      if (otherSideDistances.containsKey(currentNode))\n+      {\n+        // Is it better than previously found paths?\n+        CostType otherCost = otherSideDistances.get(currentNode);\n+        CostType newTotalCost = costAccumulator.addCosts(currentCost,\n+            otherCost);\n+        if (foundPathsMiddleNodes == null)\n         {\n-            if ( backwards )\n-            {\n-                if ( relationDirection.equals( Direction.INCOMING ) )\n-                {\n-                    return Direction.OUTGOING;\n-                }\n-                if ( relationDirection.equals( Direction.OUTGOING ) )\n-                {\n-                    return Direction.INCOMING;\n-                }\n-            }\n-            return relationDirection;\n+          foundPathsMiddleNodes = new HashSet<>();\n         }\n-\n-        // This puts the start node into the queue\n-        protected void InitQueue()\n+        // No previous path found, or equally good one found?\n+        if (foundPathsMiddleNodes.size() == 0\n+            || costComparator.compare(foundPathsCost, newTotalCost) == 0)\n         {\n-            queue = new DijkstraPriorityQueueFibonacciImpl<>( costComparator );\n-            queue.insertValue( startNode, startCost );\n-            mySeen.put( startNode, startCost );\n+          foundPathsCost = newTotalCost; // in case we had no\n+          // previous path\n+          foundPathsMiddleNodes.add(currentNode);\n         }\n-\n-        @Override\n-        public boolean hasNext()\n+        // New better path found?\n+        else if (costComparator.compare(foundPathsCost, newTotalCost) > 0)\n         {\n-            return !queue.isEmpty() && !limitReached();\n-        }\n-\n-        @Override\n-        public void remove()\n-        {\n-            // Not used\n-            // Could be used to generate more sollutions, by removing an edge\n-            // from the sollution and run again?\n+          foundPathsMiddleNodes.clear();\n+          foundPathsCost = newTotalCost;\n+          foundPathsMiddleNodes.add(currentNode);\n         }\n+      }\n+    }\n \n-        /**\n-         * This checks if a node has been seen by the other iterator/traverser\n-         * as well. In that case a path has been found. In that case, the total\n-         * cost for the path is calculated and compared to previously found\n-         * paths.\n-         *\n-         * @param currentNode The node to be examined.\n-         * @param currentCost The cost from the start node to this node.\n-         * @param otherSideDistances Map over distances from other side. A path\n-         *            is found and examined if this contains currentNode.\n-         */\n-        protected void checkForPath( Node currentNode, CostType currentCost,\n-                HashMap<Node, CostType> otherSideDistances )\n+    @Override\n+    public Node next()\n+    {\n+      if (!hasNext())\n+      {\n+        throw new NoSuchElementException();\n+      }\n+\n+      Node currentNode = queue.extractMin();\n+      CostType currentCost = mySeen.get(currentNode);\n+      // Already done with this node?\n+      if (myDistances.containsKey(currentNode))\n+      {\n+        return null;\n+      }\n+      if (limitReached())\n+      {\n+        return null;\n+      }\n+      ++numberOfNodesTraversed;\n+      myDistances.put(currentNode, currentCost);\n+      // TODO: remove from seen or not? probably not... because of path\n+      // detection\n+      // Check if we have found a better path\n+      checkForPath(currentNode, currentCost, otherSeen);\n+      // Found a path? (abort traversing from this node)\n+      if (otherDistances.containsKey(currentNode))\n+      {\n+        oneShortestPathHasBeenFound = true;\n+      } else\n+      {\n+        // Otherwise, follow all edges from this node\n+        for (RelationshipType costRelationType : costRelationTypes)\n         {\n-            // Found a path?\n-            if ( otherSideDistances.containsKey( currentNode ) )\n+          ResourceIterable<Relationship> relationships = Iterables.asResourceIterable(\n+              currentNode.getRelationships(costRelationType, getDirection()));\n+          try (ResourceIterator<Relationship> iterator = relationships.iterator())\n+          {\n+            while (iterator.hasNext())\n             {\n-                // Is it better than previously found paths?\n-                CostType otherCost = otherSideDistances.get( currentNode );\n-                CostType newTotalCost = costAccumulator.addCosts( currentCost,\n-                        otherCost );\n-                if ( foundPathsMiddleNodes == null )\n+              Relationship relationship = iterator.next();\n+              if (limitReached())\n+              {\n+                break;\n+              }\n+              ++numberOfTraversedRelationShips;\n+              // Target node\n+              Node target = relationship.getOtherNode(currentNode);\n+              // Find out if an eventual path would go in the opposite\n+              // direction of the edge\n+              boolean backwardsEdge = relationship.getEndNode().equals(currentNode) ^ backwards;\n+              CostType newCost = costAccumulator.addCosts(currentCost, costEvaluator\n+                  .getCost(relationship, backwardsEdge ? Direction.INCOMING : Direction.OUTGOING));\n+              // Already done with target node?\n+              if (myDistances.containsKey(target))\n+              {\n+                // Have we found a better cost for a node which is\n+                // already\n+                // calculated?\n+                if (costComparator.compare(myDistances.get(target), newCost) > 0)\n                 {\n-                    foundPathsMiddleNodes = new HashSet<>();\n+                  throw new RuntimeException(\"Cycle with negative costs found.\");\n                 }\n-                // No previous path found, or equally good one found?\n-                if ( foundPathsMiddleNodes.size() == 0\n-                     || costComparator.compare( foundPathsCost, newTotalCost ) == 0 )\n+                // Equally good path found?\n+                else if (calculateAllShortestPaths &&\n+                    costComparator.compare(myDistances.get(target), newCost) == 0)\n                 {\n-                    foundPathsCost = newTotalCost; // in case we had no\n-                    // previous path\n-                    foundPathsMiddleNodes.add( currentNode );\n+                  // Put it in predecessors\n+                  List<Relationship> myPredecessors = predecessors.get(currentNode);\n+                  // Dont do it if this relation is already in\n+                  // predecessors (other direction)\n+                  if (myPredecessors == null || !myPredecessors.contains(relationship))\n+                  {\n+                    List<Relationship> predList = predecessors.get(target);\n+                    if (predList == null)\n+                    {\n+                      // This only happens if we get back to\n+                      // the\n+                      // start node, which is just bogus\n+                    } else\n+                    {\n+                      predList.add(relationship);\n+                    }\n+                  }\n                 }\n-                // New better path found?\n-                else if ( costComparator.compare( foundPathsCost, newTotalCost ) > 0 )\n+                continue;\n+              }\n+              // Have we found a better cost for this node?\n+              if (!mySeen.containsKey(target) ||\n+                  costComparator.compare(mySeen.get(target), newCost) > 0)\n+              {\n+                // Put it in the queue\n+                if (!mySeen.containsKey(target))\n                 {\n-                    foundPathsMiddleNodes.clear();\n-                    foundPathsCost = newTotalCost;\n-                    foundPathsMiddleNodes.add( currentNode );\n+                  queue.insertValue(target, newCost);\n                 }\n-            }\n-        }\n-\n-        @Override\n-        public Node next()\n-        {\n-            if ( !hasNext() )\n-            {\n-                throw new NoSuchElementException();\n-            }\n-\n-            Node currentNode = queue.extractMin();\n-            CostType currentCost = mySeen.get( currentNode );\n-            // Already done with this node?\n-            if ( myDistances.containsKey( currentNode ) )\n-            {\n-                return null;\n-            }\n-            if ( limitReached() )\n-            {\n-                return null;\n-            }\n-            ++numberOfNodesTraversed;\n-            myDistances.put( currentNode, currentCost );\n-            // TODO: remove from seen or not? probably not... because of path\n-            // detection\n-            // Check if we have found a better path\n-            checkForPath( currentNode, currentCost, otherSeen );\n-            // Found a path? (abort traversing from this node)\n-            if ( otherDistances.containsKey( currentNode ) )\n-            {\n-                oneShortestPathHasBeenFound = true;\n-            }\n-            else\n-            {\n-                // Otherwise, follow all edges from this node\n-                for ( RelationshipType costRelationType : costRelationTypes )\n+                // or update the entry. (It is important to keep\n+                // these\n+                // cases apart to limit the size of the queue)\n+                else\n                 {\n-                    ResourceIterable<Relationship> relationships = Iterables.asResourceIterable(\n-                            currentNode.getRelationships( costRelationType, getDirection() ) );\n-                    try ( ResourceIterator<Relationship> iterator = relationships.iterator() )\n-                    {\n-                        while ( iterator.hasNext() )\n-                        {\n-                            Relationship relationship = iterator.next();\n-                            if ( limitReached() )\n-                            {\n-                                break;\n-                            }\n-                            ++numberOfTraversedRelationShips;\n-                            // Target node\n-                            Node target = relationship.getOtherNode( currentNode );\n-                            // Find out if an eventual path would go in the opposite\n-                            // direction of the edge\n-                            boolean backwardsEdge = relationship.getEndNode().equals( currentNode ) ^ backwards;\n-                            CostType newCost = costAccumulator.addCosts( currentCost, costEvaluator\n-                                    .getCost( relationship, backwardsEdge ? Direction.INCOMING : Direction.OUTGOING ) );\n-                            // Already done with target node?\n-                            if ( myDistances.containsKey( target ) )\n-                            {\n-                                // Have we found a better cost for a node which is\n-                                // already\n-                                // calculated?\n-                                if ( costComparator.compare( myDistances.get( target ), newCost ) > 0 )\n-                                {\n-                                    throw new RuntimeException( \"Cycle with negative costs found.\" );\n-                                }\n-                                // Equally good path found?\n-                                else if ( calculateAllShortestPaths &&\n-                                        costComparator.compare( myDistances.get( target ), newCost ) == 0 )\n-                                {\n-                                    // Put it in predecessors\n-                                    List<Relationship> myPredecessors = predecessors.get( currentNode );\n-                                    // Dont do it if this relation is already in\n-                                    // predecessors (other direction)\n-                                    if ( myPredecessors == null || !myPredecessors.contains( relationship ) )\n-                                    {\n-                                        List<Relationship> predList = predecessors.get( target );\n-                                        if ( predList == null )\n-                                        {\n-                                            // This only happens if we get back to\n-                                            // the\n-                                            // start node, which is just bogus\n-                                        }\n-                                        else\n-                                        {\n-                                            predList.add( relationship );\n-                                        }\n-                                    }\n-                                }\n-                                continue;\n-                            }\n-                            // Have we found a better cost for this node?\n-                            if ( !mySeen.containsKey( target ) ||\n-                                    costComparator.compare( mySeen.get( target ), newCost ) > 0 )\n-                            {\n-                                // Put it in the queue\n-                                if ( !mySeen.containsKey( target ) )\n-                                {\n-                                    queue.insertValue( target, newCost );\n-                                }\n-                                // or update the entry. (It is important to keep\n-                                // these\n-                                // cases apart to limit the size of the queue)\n-                                else\n-                                {\n-                                    queue.decreaseValue( target, newCost );\n-                                }\n-                                // Update it\n-                                mySeen.put( target, newCost );\n-                                // Put it in predecessors\n-                                List<Relationship> predList = new LinkedList<>();\n-                                predList.add( relationship );\n-                                predecessors.put( target, predList );\n-                            }\n-                            // Have we found an equal cost for (additonal path to)\n-                            // this\n-                            // node?\n-                            else if ( calculateAllShortestPaths &&\n-                                    costComparator.compare( mySeen.get( target ), newCost ) == 0 )\n-                            {\n-                                // Put it in predecessors\n-                                List<Relationship> predList = predecessors.get( target );\n-                                predList.add( relationship );\n-                            }\n-                        }\n-                    }\n+                  queue.decreaseValue(target, newCost);\n                 }\n+                // Update it\n+                mySeen.put(target, newCost);\n+                // Put it in predecessors\n+                List<Relationship> predList = new LinkedList<>();\n+                predList.add(relationship);\n+                predecessors.put(target, predList);\n+              }\n+              // Have we found an equal cost for (additonal path to)\n+              // this\n+              // node?\n+              else if (calculateAllShortestPaths &&\n+                  costComparator.compare(mySeen.get(target), newCost) == 0)\n+              {\n+                // Put it in predecessors\n+                List<Relationship> predList = predecessors.get(target);\n+                predList.add(relationship);\n+              }\n             }\n-            // Check how far we need to continue when searching for all shortest\n-            // paths\n-            if ( calculateAllShortestPaths && oneShortestPathHasBeenFound )\n-            {\n-                // If we cannot continue or continuation would only find more\n-                // expensive paths: conclude that all shortest paths have been\n-                // found.\n-                allShortestPathsHasBeenFound = queue.isEmpty()\n-                                               || costComparator.compare(\n-                                                       mySeen.get( queue.peek() ),\n-                                                       currentCost ) > 0;\n-            }\n-            return currentNode;\n-        }\n-\n-        public boolean isDone()\n-        {\n-            if ( !calculateAllShortestPaths )\n-            {\n-                return oneShortestPathHasBeenFound;\n-            }\n-            return allShortestPathsHasBeenFound;\n+          }\n         }\n+      }\n+      // Check how far we need to continue when searching for all shortest\n+      // paths\n+      if (calculateAllShortestPaths && oneShortestPathHasBeenFound)\n+      {\n+        // If we cannot continue or continuation would only find more\n+        // expensive paths: conclude that all shortest paths have been\n+        // found.\n+        allShortestPathsHasBeenFound = queue.isEmpty()\n+            || costComparator.compare(\n+            mySeen.get(queue.peek()),\n+            currentCost) > 0;\n+      }\n+      return currentNode;\n     }\n \n-    /**\n-     * Same as calculate(), but will set the flag to calculate all shortest\n-     * paths. It sets the flag and then calls calculate, so inheriting classes\n-     * only need to override calculate().\n-     *\n-     * @return\n-     */\n-    public boolean calculateMultiple()\n+    public boolean isDone()\n     {\n-        if ( !calculateAllShortestPaths )\n-        {\n-            reset();\n-            calculateAllShortestPaths = true;\n-        }\n-        return calculate();\n+      if (!calculateAllShortestPaths)\n+      {\n+        return oneShortestPathHasBeenFound;\n+      }\n+      return allShortestPathsHasBeenFound;\n     }\n-\n-    /**\n-     * Makes the main calculation If some limit is set, the shortest path(s)\n-     * that could be found within those limits will be calculated.\n-     *\n-     * @return True if a path was found.\n-     */\n-    public boolean calculate()\n+  }\n+\n+  /**\n+   * Same as calculate(), but will set the flag to calculate all shortest\n+   * paths. It sets the flag and then calls calculate, so inheriting classes\n+   * only need to override calculate().\n+   *\n+   * @return\n+   */\n+  public boolean calculateMultiple()\n+  {\n+    if (!calculateAllShortestPaths)\n     {\n-        // Do this first as a general error check since this is supposed to be\n-        // called whenever a result is asked for.\n-        if ( startNode == null || endNode == null )\n-        {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n-        }\n-        // Don't do it more than once\n-        if ( doneCalculation )\n-        {\n-            return true;\n-        }\n-        doneCalculation = true;\n-        // Special case when path length is zero\n-        if ( startNode.equals( endNode ) )\n-        {\n-            foundPathsMiddleNodes = new HashSet<>();\n-            foundPathsMiddleNodes.add( startNode );\n-            foundPathsCost = costAccumulator.addCosts( startCost, startCost );\n-            return true;\n-        }\n-        HashMap<Node, CostType> seen1 = new HashMap<>();\n-        HashMap<Node, CostType> seen2 = new HashMap<>();\n-        HashMap<Node, CostType> dists1 = new HashMap<>();\n-        HashMap<Node, CostType> dists2 = new HashMap<>();\n-        DijstraIterator iter1 = new DijstraIterator( startNode, predecessors1,\n-                seen1, seen2, dists1, dists2, false );\n-        DijstraIterator iter2 = new DijstraIterator( endNode, predecessors2,\n-                seen2, seen1, dists2, dists1, true );\n-        Node node1 = null;\n-        Node node2 = null;\n-        while ( iter1.hasNext() && iter2.hasNext() )\n-        {\n-            if ( limitReached() )\n-            {\n-                break;\n-            }\n-            if ( iter1.hasNext() )\n-            {\n-                node1 = iter1.next();\n-                if ( node1 == null )\n-                {\n-                    break;\n-                }\n-            }\n-            if ( limitReached() )\n-            {\n-                break;\n-            }\n-            if ( !iter1.isDone() && iter2.hasNext() )\n-            {\n-                node2 = iter2.next();\n-                if ( node2 == null )\n-                {\n-                    break;\n-                }\n-            }\n-            if ( limitReached( seen1.get( node1 ), seen2.get( node2 ) ) )\n-            {\n-                break;\n-            }\n-            if ( iter1.isDone() || iter2.isDone() ) // A path was found\n-            {\n-                return true;\n-            }\n-        }\n-\n-        return false;\n+      reset();\n+      calculateAllShortestPaths = true;\n     }\n-\n-    /**\n-     * @return The cost for the found path(s).\n-     */\n-    @Override\n-    public CostType getCost()\n+    return calculate();\n+  }\n+\n+  /**\n+   * Makes the main calculation If some limit is set, the shortest path(s)\n+   * that could be found within those limits will be calculated.\n+   *\n+   * @return True if a path was found.\n+   */\n+  public boolean calculate()\n+  {\n+    // Do this first as a general error check since this is supposed to be\n+    // called whenever a result is asked for.\n+    if (startNode == null || endNode == null)\n     {\n-        if ( startNode == null || endNode == null )\n-        {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n-        }\n-        calculate();\n-        return foundPathsCost;\n+      throw new RuntimeException(\"Start or end node undefined.\");\n     }\n-\n-    /**\n-     * @return All the found paths or null.\n-     */\n-    @Override\n-    public List<List<PropertyContainer>> getPaths()\n+    // Don't do it more than once\n+    if (doneCalculation)\n     {\n-        if ( startNode == null || endNode == null )\n-        {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n-        }\n-        calculateMultiple();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n-        {\n-            return Collections.emptyList();\n-        }\n-        // Currently we use a set to avoid duplicate paths\n-        // TODO: can this be done smarter?\n-        Set<List<PropertyContainer>> paths = new HashSet<>();\n-        for ( Node middleNode : foundPathsMiddleNodes )\n-        {\n-            List<List<PropertyContainer>> paths1 = Util.constructAllPathsToNode(\n-                    middleNode, predecessors1, true, false );\n-            List<List<PropertyContainer>> paths2 = Util.constructAllPathsToNode(\n-                    middleNode, predecessors2, false, true );\n-            // For all combinations...\n-            for ( List<PropertyContainer> part1 : paths1 )\n-            {\n-                for ( List<PropertyContainer> part2 : paths2 )\n-                {\n-                    // Combine them\n-                    LinkedList<PropertyContainer> path = new LinkedList<>();\n-                    path.addAll( part1 );\n-                    path.addAll( part2 );\n-                    // Add to collection\n-                    paths.add( path );\n-                }\n-            }\n-        }\n-        return new LinkedList<>( paths );\n+      return true;\n     }\n-\n-    /**\n-     * @return All the found paths or null.\n-     */\n-    @Override\n-    public List<List<Node>> getPathsAsNodes()\n+    doneCalculation = true;\n+    // Special case when path length is zero\n+    if (startNode.equals(endNode))\n     {\n-        if ( startNode == null || endNode == null )\n-        {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n-        }\n-        calculateMultiple();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n-        {\n-            return null;\n-        }\n-        // Currently we use a set to avoid duplicate paths\n-        // TODO: can this be done smarter?\n-        Set<List<Node>> paths = new HashSet<>();\n-        for ( Node middleNode : foundPathsMiddleNodes )\n-        {\n-            List<List<Node>> paths1 = Util.constructAllPathsToNodeAsNodes(\n-                    middleNode, predecessors1, true, false );\n-            List<List<Node>> paths2 = Util.constructAllPathsToNodeAsNodes(\n-                    middleNode, predecessors2, false, true );\n-            // For all combinations...\n-            for ( List<Node> part1 : paths1 )\n-            {\n-                for ( List<Node> part2 : paths2 )\n-                {\n-                    // Combine them\n-                    LinkedList<Node> path = new LinkedList<>();\n-                    path.addAll( part1 );\n-                    path.addAll( part2 );\n-                    // Add to collection\n-                    paths.add( path );\n-                }\n-            }\n-        }\n-        return new LinkedList<>( paths );\n+      foundPathsMiddleNodes = new HashSet<>();\n+      foundPathsMiddleNodes.add(startNode);\n+      foundPathsCost = costAccumulator.addCosts(startCost, startCost);\n+      return true;\n     }\n-\n-    /**\n-     * @return All the found paths or null.\n-     */\n-    @Override\n-    public List<List<Relationship>> getPathsAsRelationships()\n+    HashMap<Node, CostType> seen1 = new HashMap<>();\n+    HashMap<Node, CostType> seen2 = new HashMap<>();\n+    HashMap<Node, CostType> dists1 = new HashMap<>();\n+    HashMap<Node, CostType> dists2 = new HashMap<>();\n+    DijstraIterator iter1 = new DijstraIterator(startNode, predecessors1,\n+        seen1, seen2, dists1, dists2, false);\n+    DijstraIterator iter2 = new DijstraIterator(endNode, predecessors2,\n+        seen2, seen1, dists2, dists1, true);\n+    Node node1 = null;\n+    Node node2 = null;\n+    while (iter1.hasNext() && iter2.hasNext())\n     {\n-        if ( startNode == null || endNode == null )\n+      if (limitReached())\n+      {\n+        break;\n+      }\n+      if (iter1.hasNext())\n+      {\n+        node1 = iter1.next();\n+        if (node1 == null)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+          break;\n         }\n-        calculateMultiple();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n+      }\n+      if (limitReached())\n+      {\n+        break;\n+      }\n+      if (!iter1.isDone() && iter2.hasNext())\n+      {\n+        node2 = iter2.next();\n+        if (node2 == null)\n         {\n-            return null;\n+          break;\n         }\n-        // Currently we use a set to avoid duplicate paths\n-        // TODO: can this be done smarter?\n-        Set<List<Relationship>> paths = new HashSet<>();\n-        for ( Node middleNode : foundPathsMiddleNodes )\n-        {\n-            List<List<Relationship>> paths1 = Util.constructAllPathsToNodeAsRelationships(\n-                    middleNode, predecessors1, false );\n-            List<List<Relationship>> paths2 = Util.constructAllPathsToNodeAsRelationships(\n-                    middleNode, predecessors2, true );\n-            // For all combinations...\n-            for ( List<Relationship> part1 : paths1 )\n-            {\n-                for ( List<Relationship> part2 : paths2 )\n-                {\n-                    // Combine them\n-                    LinkedList<Relationship> path = new LinkedList<>();\n-                    path.addAll( part1 );\n-                    path.addAll( part2 );\n-                    // Add to collection\n-                    paths.add( path );\n-                }\n-            }\n-        }\n-        return new LinkedList<>( paths );\n+      }\n+      if (limitReached(seen1.get(node1), seen2.get(node2)))\n+      {\n+        break;\n+      }\n+      if (iter1.isDone() || iter2.isDone()) // A path was found\n+      {\n+        return true;\n+      }\n     }\n \n-    /**\n-     * @return One of the shortest paths found or null.\n-     */\n-    @Override\n-    public List<PropertyContainer> getPath()\n+    return false;\n+  }\n+\n+  /**\n+   * @return The cost for the found path(s).\n+   */\n+  @Override\n+  public CostType getCost()\n+  {\n+    if (startNode == null || endNode == null)\n     {\n-        if ( startNode == null || endNode == null )\n-        {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n-        }\n-        calculate();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n-        {\n-            return null;\n-        }\n-        Node middleNode = foundPathsMiddleNodes.iterator().next();\n-        LinkedList<PropertyContainer> path = new LinkedList<>();\n-        path.addAll( Util.constructSinglePathToNode( middleNode, predecessors1,\n-                true, false ) );\n-        path.addAll( Util.constructSinglePathToNode( middleNode, predecessors2,\n-                false, true ) );\n-        return path;\n+      throw new RuntimeException(\"Start or end node undefined.\");\n     }\n-\n-    /**\n-     * @return One of the shortest paths found or null.\n-     */\n-    @Override\n-    public List<Node> getPathAsNodes()\n+    calculate();\n+    return foundPathsCost;\n+  }\n+\n+  /**\n+   * @return All the found paths or null.\n+   */\n+  @Override\n+  public List<List<PropertyContainer>> getPaths()\n+  {\n+    if (startNode == null || endNode == null)\n     {\n-        if ( startNode == null || endNode == null )\n-        {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n-        }\n-        calculate();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n-        {\n-            return null;\n-        }\n-        Node middleNode = foundPathsMiddleNodes.iterator().next();\n-        LinkedList<Node> pathNodes = new LinkedList<>();\n-        pathNodes.addAll( Util.constructSinglePathToNodeAsNodes( middleNode,\n-                predecessors1, true, false ) );\n-        pathNodes.addAll( Util.constructSinglePathToNodeAsNodes( middleNode,\n-                predecessors2, false, true ) );\n-        return pathNodes;\n+      throw new RuntimeException(\"Start or end node undefined.\");\n     }\n-\n-    /**\n-     * @return One of the shortest paths found or null.\n-     */\n-    @Override\n-    public List<Relationship> getPathAsRelationships()\n+    calculateMultiple();\n+    if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0)\n     {\n-        if ( startNode == null || endNode == null )\n+      return Collections.emptyList();\n+    }\n+    // Currently we use a set to avoid duplicate paths\n+    // TODO: can this be done smarter?\n+    Set<List<PropertyContainer>> paths = new HashSet<>();\n+    for (Node middleNode : foundPathsMiddleNodes)\n+    {\n+      List<List<PropertyContainer>> paths1 = Util.constructAllPathsToNode(\n+          middleNode, predecessors1, true, false);\n+      List<List<PropertyContainer>> paths2 = Util.constructAllPathsToNode(\n+          middleNode, predecessors2, false, true);\n+      // For all combinations...\n+      for (List<PropertyContainer> part1 : paths1)\n+      {\n+        for (List<PropertyContainer> part2 : paths2)\n         {\n-            throw new RuntimeException( \"Start or end node undefined.\" );\n+          // Combine them\n+          LinkedList<PropertyContainer> path = new LinkedList<>();\n+          path.addAll(part1);\n+          path.addAll(part2);\n+          // Add to collection\n+          paths.add(path);\n         }\n-        calculate();\n-        if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n+      }\n+    }\n+    return new LinkedList<>(paths);\n+  }\n+\n+  /**\n+   * @return All the found paths or null.\n+   */\n+  @Override\n+  public List<List<Node>> getPathsAsNodes()\n+  {\n+    if (startNode == null || endNode == null)\n+    {\n+      throw new RuntimeException(\"Start or end node undefined.\");\n+    }\n+    calculateMultiple();\n+    if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0)\n+    {\n+      return null;\n+    }\n+    // Currently we use a set to avoid duplicate paths\n+    // TODO: can this be done smarter?\n+    Set<List<Node>> paths = new HashSet<>();\n+    for (Node middleNode : foundPathsMiddleNodes)\n+    {\n+      List<List<Node>> paths1 = Util.constructAllPathsToNodeAsNodes(\n+          middleNode, predecessors1, true, false);\n+      List<List<Node>> paths2 = Util.constructAllPathsToNodeAsNodes(\n+          middleNode, predecessors2, false, true);\n+      // For all combinations...\n+      for (List<Node> part1 : paths1)\n+      {\n+        for (List<Node> part2 : paths2)\n         {\n-            return null;\n+          // Combine them\n+          LinkedList<Node> path = new LinkedList<>();\n+          path.addAll(part1);\n+          path.addAll(part2);\n+          // Add to collection\n+          paths.add(path);\n         }\n-        Node middleNode = foundPathsMiddleNodes.iterator().next();\n-        List<Relationship> path = new LinkedList<>();\n-        path.addAll( Util.constructSinglePathToNodeAsRelationships( middleNode,\n-                predecessors1, false ) );\n-        path.addAll( Util.constructSinglePathToNodeAsRelationships( middleNode,\n-                predecessors2, true ) );\n-        return path;\n+      }\n     }\n-\n-    /**\n-     * This sets the maximum depth in the form of a maximum number of\n-     * relationships to follow.\n-     *\n-     * @param maxRelationShipsToTraverse\n-     */\n-    public void limitMaxRelationShipsToTraverse( long maxRelationShipsToTraverse )\n+    return new LinkedList<>(paths);\n+  }\n+\n+  /**\n+   * @return All the found paths or null.\n+   */\n+  @Override\n+  public List<List<Relationship>> getPathsAsRelationships()\n+  {\n+    if (startNode == null || endNode == null)\n     {\n-        this.maxRelationShipsToTraverse = maxRelationShipsToTraverse;\n+      throw new RuntimeException(\"Start or end node undefined.\");\n     }\n-\n-    /**\n-     * This sets the maximum depth in the form of a maximum number of nodes to\n-     * scan.\n-     *\n-     * @param maxNodesToTraverse\n-     */\n-    public void limitMaxNodesToTraverse( long maxNodesToTraverse )\n+    calculateMultiple();\n+    if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0)\n     {\n-        this.maxNodesToTraverse = maxNodesToTraverse;\n+      return null;\n     }\n-\n-    /**\n-     * Set the end node. Will reset the calculation.\n-     *\n-     * @param endNode the endNode to set\n-     */\n-    @Override\n-    public void setEndNode( Node endNode )\n+    // Currently we use a set to avoid duplicate paths\n+    // TODO: can this be done smarter?\n+    Set<List<Relationship>> paths = new HashSet<>();\n+    for (Node middleNode : foundPathsMiddleNodes)\n     {\n-        reset();\n-        this.endNode = endNode;\n+      List<List<Relationship>> paths1 = Util.constructAllPathsToNodeAsRelationships(\n+          middleNode, predecessors1, false);\n+      List<List<Relationship>> paths2 = Util.constructAllPathsToNodeAsRelationships(\n+          middleNode, predecessors2, true);\n+      // For all combinations...\n+      for (List<Relationship> part1 : paths1)\n+      {\n+        for (List<Relationship> part2 : paths2)\n+        {\n+          // Combine them\n+          LinkedList<Relationship> path = new LinkedList<>();\n+          path.addAll(part1);\n+          path.addAll(part2);\n+          // Add to collection\n+          paths.add(path);\n+        }\n+      }\n     }\n-\n-    /**\n-     * Set the start node. Will reset the calculation.\n-     *\n-     * @param startNode the startNode to set\n-     */\n-    @Override\n-    public void setStartNode( Node startNode )\n+    return new LinkedList<>(paths);\n+  }\n+\n+  /**\n+   * @return One of the shortest paths found or null.\n+   */\n+  @Override\n+  public List<PropertyContainer> getPath()\n+  {\n+    if (startNode == null || endNode == null)\n     {\n-        this.startNode = startNode;\n-        reset();\n+      throw new RuntimeException(\"Start or end node undefined.\");\n     }\n-\n-    /**\n-     * @return the relationDirection\n-     */\n-    @Override\n-    public Direction getDirection()\n+    calculate();\n+    if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0)\n     {\n-        return relationDirection;\n+      return null;\n     }\n-\n-    /**\n-     * @return the costRelationType\n-     */\n-    @Override\n-    public RelationshipType[] getRelationshipTypes()\n+    Node middleNode = foundPathsMiddleNodes.iterator().next();\n+    LinkedList<PropertyContainer> path = new LinkedList<>();\n+    path.addAll(Util.constructSinglePathToNode(middleNode, predecessors1,\n+        true, false));\n+    path.addAll(Util.constructSinglePathToNode(middleNode, predecessors2,\n+        false, true));\n+    return path;\n+  }\n+\n+  /**\n+   * @return One of the shortest paths found or null.\n+   */\n+  @Override\n+  public List<Node> getPathAsNodes()\n+  {\n+    if (startNode == null || endNode == null)\n     {\n-        return costRelationTypes;\n+      throw new RuntimeException(\"Start or end node undefined.\");\n     }\n-\n-    /**\n-     * Set the evaluator for pruning the paths when the maximum cost is\n-     * exceeded.\n-     *\n-     * @param maxCost\n-     */\n-    public void limitMaxCostToTraverse( CostType maxCost )\n+    calculate();\n+    if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0)\n+    {\n+      return null;\n+    }\n+    Node middleNode = foundPathsMiddleNodes.iterator().next();\n+    LinkedList<Node> pathNodes = new LinkedList<>();\n+    pathNodes.addAll(Util.constructSinglePathToNodeAsNodes(middleNode,\n+        predecessors1, true, false));\n+    pathNodes.addAll(Util.constructSinglePathToNodeAsNodes(middleNode,\n+        predecessors2, false, true));\n+    return pathNodes;\n+  }\n+\n+  /**\n+   * @return One of the shortest paths found or null.\n+   */\n+  @Override\n+  public List<Relationship> getPathAsRelationships()\n+  {\n+    if (startNode == null || endNode == null)\n+    {\n+      throw new RuntimeException(\"Start or end node undefined.\");\n+    }\n+    calculate();\n+    if (foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0)\n     {\n-        this.maxCost = maxCost;\n+      return null;\n     }\n+    Node middleNode = foundPathsMiddleNodes.iterator().next();\n+    List<Relationship> path = new LinkedList<>();\n+    path.addAll(Util.constructSinglePathToNodeAsRelationships(middleNode,\n+        predecessors1, false));\n+    path.addAll(Util.constructSinglePathToNodeAsRelationships(middleNode,\n+        predecessors2, true));\n+    return path;\n+  }\n+\n+  /**\n+   * This sets the maximum depth in the form of a maximum number of\n+   * relationships to follow.\n+   *\n+   * @param maxRelationShipsToTraverse\n+   */\n+  public void limitMaxRelationShipsToTraverse(long maxRelationShipsToTraverse)\n+  {\n+    this.maxRelationShipsToTraverse = maxRelationShipsToTraverse;\n+  }\n+\n+  /**\n+   * This sets the maximum depth in the form of a maximum number of nodes to\n+   * scan.\n+   *\n+   * @param maxNodesToTraverse\n+   */\n+  public void limitMaxNodesToTraverse(long maxNodesToTraverse)\n+  {\n+    this.maxNodesToTraverse = maxNodesToTraverse;\n+  }\n+\n+  /**\n+   * Set the end node. Will reset the calculation.\n+   *\n+   * @param endNode the endNode to set\n+   */\n+  @Override\n+  public void setEndNode(Node endNode)\n+  {\n+    reset();\n+    this.endNode = endNode;\n+  }\n+\n+  /**\n+   * Set the start node. Will reset the calculation.\n+   *\n+   * @param startNode the startNode to set\n+   */\n+  @Override\n+  public void setStartNode(Node startNode)\n+  {\n+    this.startNode = startNode;\n+    reset();\n+  }\n+\n+  /**\n+   * @return the relationDirection\n+   */\n+  @Override\n+  public Direction getDirection()\n+  {\n+    return relationDirection;\n+  }\n+\n+  /**\n+   * @return the costRelationType\n+   */\n+  @Override\n+  public RelationshipType[] getRelationshipTypes()\n+  {\n+    return costRelationTypes;\n+  }\n+\n+  /**\n+   * Set the evaluator for pruning the paths when the maximum cost is\n+   * exceeded.\n+   *\n+   * @param maxCost\n+   */\n+  public void limitMaxCostToTraverse(CostType maxCost)\n+  {\n+    this.maxCost = maxCost;\n+  }\n }\n",
            "diff_size": 1127
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 218).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 255).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "261",
                    "column": "55",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "313",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "330",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "342",
                    "column": "69",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "366",
                    "column": "64",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "390",
                    "column": "65",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "407",
                    "column": "63",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/632/Dijkstra.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/632/Dijkstra.java\nindex c2134e21ede..a5e4f7eeaa5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/632/Dijkstra.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/632/Dijkstra.java\n@@ -57,8 +57,7 @@ import org.neo4j.helpers.collection.Iterables;\n  * @author Patrik Larsson\n  * @param <CostType> The datatype the edge weights will be represented by.\n  */\n-public class Dijkstra<CostType> implements\n-        SingleSourceSingleSinkShortestPath<CostType>\n+public class Dijkstra<CostType> implements SingleSourceSingleSinkShortestPath<CostType>\n {\n     protected CostType startCost; // starting cost for both the start node and\n     // the end node\n@@ -137,10 +136,7 @@ public class Dijkstra<CostType> implements\n      * @param costAccumulator adding up the path cost\n      * @param costComparator comparing to path costs\n      */\n-    public Dijkstra( CostType startCost, Node startNode, Node endNode,\n-            CostEvaluator<CostType> costEvaluator,\n-            CostAccumulator<CostType> costAccumulator,\n-            Comparator<CostType> costComparator, Direction relationDirection,\n+    public Dijkstra( CostType startCost, Node startNode, Node endNode, CostEvaluator<CostType> costEvaluator, CostAccumulator<CostType> costAccumulator, Comparator<CostType> costComparator, Direction relationDirection,\n             RelationshipType... costRelationTypes )\n     {\n         super();\n@@ -166,11 +162,11 @@ public class Dijkstra<CostType> implements\n         // where do we come from\n         protected HashMap<Node, List<Relationship>> predecessors;\n         // observed distances not yet final\n-        protected HashMap<Node, CostType> mySeen;\n-        protected HashMap<Node, CostType> otherSeen;\n+        protected HashMap<Node,CostType> mySeen;\n+        protected HashMap<Node,CostType> otherSeen;\n         // the final distances\n-        protected HashMap<Node, CostType> myDistances;\n-        protected HashMap<Node, CostType> otherDistances;\n+        protected HashMap<Node,CostType> myDistances;\n+        protected HashMap<Node,CostType> otherDistances;\n         // Flag that indicates if we should follow egdes in the opposite\n         // direction instead\n         protected boolean backwards;\n@@ -182,12 +178,7 @@ public class Dijkstra<CostType> implements\n         protected boolean oneShortestPathHasBeenFound;\n         protected boolean allShortestPathsHasBeenFound;\n \n-        public DijstraIterator( Node startNode,\n-                HashMap<Node, List<Relationship>> predecessors,\n-                HashMap<Node, CostType> mySeen,\n-                HashMap<Node, CostType> otherSeen,\n-                HashMap<Node, CostType> myDistances,\n-                HashMap<Node, CostType> otherDistances, boolean backwards )\n+        public DijstraIterator( Node startNode, HashMap<Node, List<Relationship>> predecessors, HashMap<Node,CostType> mySeen, HashMap<Node,CostType> otherSeen, HashMap<Node,CostType> myDistances, HashMap<Node,CostType> otherDistances, boolean backwards )\n         {\n             super();\n             this.startNode = startNode;\n@@ -211,7 +202,8 @@ public class Dijkstra<CostType> implements\n                 {\n                     return Direction.OUTGOING;\n                 }\n-                if ( relationDirection.equals( Direction.OUTGOING ) )\n+\n+if ( relationDirection.equals( Direction.OUTGOING ) )\n                 {\n                     return Direction.INCOMING;\n                 }\n@@ -252,8 +244,7 @@ public class Dijkstra<CostType> implements\n          * @param otherSideDistances Map over distances from other side. A path\n          *            is found and examined if this contains currentNode.\n          */\n-        protected void checkForPath( Node currentNode, CostType currentCost,\n-                HashMap<Node, CostType> otherSideDistances )\n+        protected void checkForPath( Node currentNode, CostType currentCost, HashMap<Node,CostType> otherSideDistances )\n         {\n             // Found a path?\n             if ( otherSideDistances.containsKey( currentNode ) )\n@@ -262,14 +253,13 @@ public class Dijkstra<CostType> implements\n                 CostType otherCost = otherSideDistances.get( currentNode );\n                 CostType newTotalCost = costAccumulator.addCosts( currentCost,\n                         otherCost );\n-                if ( foundPathsMiddleNodes == null )\n+if ( foundPathsMiddleNodes == null )\n                 {\n                     foundPathsMiddleNodes = new HashSet<>();\n                 }\n                 // No previous path found, or equally good one found?\n-                if ( foundPathsMiddleNodes.size() == 0\n-                     || costComparator.compare( foundPathsCost, newTotalCost ) == 0 )\n-                {\n+                if ( foundPathsMiddleNodes.size() == 0|| costComparator.compare( foundPathsCost, newTotalCost ) == 0 )\n+{\n                     foundPathsCost = newTotalCost; // in case we had no\n                     // previous path\n                     foundPathsMiddleNodes.add( currentNode );\n@@ -299,7 +289,8 @@ public class Dijkstra<CostType> implements\n             {\n                 return null;\n             }\n-            if ( limitReached() )\n+\n+if ( limitReached() )\n             {\n                 return null;\n             }\n@@ -319,9 +310,9 @@ public class Dijkstra<CostType> implements\n                 // Otherwise, follow all edges from this node\n                 for ( RelationshipType costRelationType : costRelationTypes )\n                 {\n-                    ResourceIterable<Relationship> relationships = Iterables.asResourceIterable(\n-                            currentNode.getRelationships( costRelationType, getDirection() ) );\n-                    try ( ResourceIterator<Relationship> iterator = relationships.iterator() )\n+                    ResourceIterable<Relationship> relationships = Iterables.asResourceIterable( currentNode.getRelationships( costRelationType, getDirection() ) );\n+\n+try ( ResourceIterator<Relationship> iterator = relationships.iterator() )\n                     {\n                         while ( iterator.hasNext() )\n                         {\n@@ -336,9 +327,8 @@ public class Dijkstra<CostType> implements\n                             // Find out if an eventual path would go in the opposite\n                             // direction of the edge\n                             boolean backwardsEdge = relationship.getEndNode().equals( currentNode ) ^ backwards;\n-                            CostType newCost = costAccumulator.addCosts( currentCost, costEvaluator\n-                                    .getCost( relationship, backwardsEdge ? Direction.INCOMING : Direction.OUTGOING ) );\n-                            // Already done with target node?\n+                            CostType newCost = costAccumulator.addCosts( currentCost, costEvaluator.getCost( relationship, backwardsEdge ? Direction.INCOMING : Direction.OUTGOING ) );\n+    // Already done with target node?\n                             if ( myDistances.containsKey( target ) )\n                             {\n                                 // Have we found a better cost for a node which is\n@@ -349,8 +339,7 @@ public class Dijkstra<CostType> implements\n                                     throw new RuntimeException( \"Cycle with negative costs found.\" );\n                                 }\n                                 // Equally good path found?\n-                                else if ( calculateAllShortestPaths &&\n-                                        costComparator.compare( myDistances.get( target ), newCost ) == 0 )\n+                                else if ( calculateAllShortestPaths &&costComparator.compare( myDistances.get( target ), newCost ) == 0 )\n                                 {\n                                     // Put it in predecessors\n                                     List<Relationship> myPredecessors = predecessors.get( currentNode );\n@@ -374,8 +363,7 @@ public class Dijkstra<CostType> implements\n                                 continue;\n                             }\n                             // Have we found a better cost for this node?\n-                            if ( !mySeen.containsKey( target ) ||\n-                                    costComparator.compare( mySeen.get( target ), newCost ) > 0 )\n+                            if ( !mySeen.containsKey( target ) ||costComparator.compare( mySeen.get( target ), newCost ) > 0 )\n                             {\n                                 // Put it in the queue\n                                 if ( !mySeen.containsKey( target ) )\n@@ -399,8 +387,7 @@ public class Dijkstra<CostType> implements\n                             // Have we found an equal cost for (additonal path to)\n                             // this\n                             // node?\n-                            else if ( calculateAllShortestPaths &&\n-                                    costComparator.compare( mySeen.get( target ), newCost ) == 0 )\n+                            else if ( calculateAllShortestPaths &&costComparator.compare( mySeen.get( target ), newCost ) == 0 )\n                             {\n                                 // Put it in predecessors\n                                 List<Relationship> predList = predecessors.get( target );\n@@ -417,11 +404,8 @@ public class Dijkstra<CostType> implements\n                 // If we cannot continue or continuation would only find more\n                 // expensive paths: conclude that all shortest paths have been\n                 // found.\n-                allShortestPathsHasBeenFound = queue.isEmpty()\n-                                               || costComparator.compare(\n-                                                       mySeen.get( queue.peek() ),\n-                                                       currentCost ) > 0;\n-            }\n+                allShortestPathsHasBeenFound = queue.isEmpty()|| costComparator.compare( mySeen.get( queue.peek() ), currentCost ) > 0;\n+    }\n             return currentNode;\n         }\n \n@@ -431,7 +415,8 @@ public class Dijkstra<CostType> implements\n             {\n                 return oneShortestPathHasBeenFound;\n             }\n-            return allShortestPathsHasBeenFound;\n+\n+return allShortestPathsHasBeenFound;\n         }\n     }\n \n@@ -449,7 +434,8 @@ public class Dijkstra<CostType> implements\n             reset();\n             calculateAllShortestPaths = true;\n         }\n-        return calculate();\n+\n+return calculate();\n     }\n \n     /**\n@@ -471,7 +457,8 @@ public class Dijkstra<CostType> implements\n         {\n             return true;\n         }\n-        doneCalculation = true;\n+\n+doneCalculation = true;\n         // Special case when path length is zero\n         if ( startNode.equals( endNode ) )\n         {\n@@ -480,15 +467,15 @@ public class Dijkstra<CostType> implements\n             foundPathsCost = costAccumulator.addCosts( startCost, startCost );\n             return true;\n         }\n-        HashMap<Node, CostType> seen1 = new HashMap<>();\n-        HashMap<Node, CostType> seen2 = new HashMap<>();\n-        HashMap<Node, CostType> dists1 = new HashMap<>();\n-        HashMap<Node, CostType> dists2 = new HashMap<>();\n+        HashMap<Node,CostType> seen1 = new HashMap<>();\n+        HashMap<Node,CostType> seen2 = new HashMap<>();\n+        HashMap<Node,CostType> dists1 = new HashMap<>();\n+        HashMap<Node,CostType> dists2 = new HashMap<>();\n         DijstraIterator iter1 = new DijstraIterator( startNode, predecessors1,\n                 seen1, seen2, dists1, dists2, false );\n-        DijstraIterator iter2 = new DijstraIterator( endNode, predecessors2,\n+DijstraIterator iter2 = new DijstraIterator( endNode, predecessors2,\n                 seen2, seen1, dists2, dists1, true );\n-        Node node1 = null;\n+Node node1 = null;\n         Node node2 = null;\n         while ( iter1.hasNext() && iter2.hasNext() )\n         {\n@@ -496,7 +483,8 @@ public class Dijkstra<CostType> implements\n             {\n                 break;\n             }\n-            if ( iter1.hasNext() )\n+\n+if ( iter1.hasNext() )\n             {\n                 node1 = iter1.next();\n                 if ( node1 == null )\n@@ -508,7 +496,8 @@ public class Dijkstra<CostType> implements\n             {\n                 break;\n             }\n-            if ( !iter1.isDone() && iter2.hasNext() )\n+\n+if ( !iter1.isDone() && iter2.hasNext() )\n             {\n                 node2 = iter2.next();\n                 if ( node2 == null )\n@@ -520,7 +509,8 @@ public class Dijkstra<CostType> implements\n             {\n                 break;\n             }\n-            if ( iter1.isDone() || iter2.isDone() ) // A path was found\n+\n+if ( iter1.isDone() || iter2.isDone() ) // A path was found\n             {\n                 return true;\n             }\n@@ -539,7 +529,8 @@ public class Dijkstra<CostType> implements\n         {\n             throw new RuntimeException( \"Start or end node undefined.\" );\n         }\n-        calculate();\n+\n+calculate();\n         return foundPathsCost;\n     }\n \n@@ -553,7 +544,8 @@ public class Dijkstra<CostType> implements\n         {\n             throw new RuntimeException( \"Start or end node undefined.\" );\n         }\n-        calculateMultiple();\n+\n+calculateMultiple();\n         if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n         {\n             return Collections.emptyList();\n@@ -563,11 +555,9 @@ public class Dijkstra<CostType> implements\n         Set<List<PropertyContainer>> paths = new HashSet<>();\n         for ( Node middleNode : foundPathsMiddleNodes )\n         {\n-            List<List<PropertyContainer>> paths1 = Util.constructAllPathsToNode(\n-                    middleNode, predecessors1, true, false );\n-            List<List<PropertyContainer>> paths2 = Util.constructAllPathsToNode(\n-                    middleNode, predecessors2, false, true );\n-            // For all combinations...\n+            List<List<PropertyContainer>> paths1 = Util.constructAllPathsToNode( middleNode, predecessors1, true, false );\n+List<List<PropertyContainer>> paths2 = Util.constructAllPathsToNode( middleNode, predecessors2, false, true );\n+    // For all combinations...\n             for ( List<PropertyContainer> part1 : paths1 )\n             {\n                 for ( List<PropertyContainer> part2 : paths2 )\n@@ -594,7 +584,8 @@ public class Dijkstra<CostType> implements\n         {\n             throw new RuntimeException( \"Start or end node undefined.\" );\n         }\n-        calculateMultiple();\n+\n+calculateMultiple();\n         if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n         {\n             return null;\n@@ -604,11 +595,9 @@ public class Dijkstra<CostType> implements\n         Set<List<Node>> paths = new HashSet<>();\n         for ( Node middleNode : foundPathsMiddleNodes )\n         {\n-            List<List<Node>> paths1 = Util.constructAllPathsToNodeAsNodes(\n-                    middleNode, predecessors1, true, false );\n-            List<List<Node>> paths2 = Util.constructAllPathsToNodeAsNodes(\n-                    middleNode, predecessors2, false, true );\n-            // For all combinations...\n+            List<List<Node>> paths1 = Util.constructAllPathsToNodeAsNodes( middleNode, predecessors1, true, false );\n+List<List<Node>> paths2 = Util.constructAllPathsToNodeAsNodes( middleNode, predecessors2, false, true );\n+    // For all combinations...\n             for ( List<Node> part1 : paths1 )\n             {\n                 for ( List<Node> part2 : paths2 )\n@@ -635,7 +624,8 @@ public class Dijkstra<CostType> implements\n         {\n             throw new RuntimeException( \"Start or end node undefined.\" );\n         }\n-        calculateMultiple();\n+\n+calculateMultiple();\n         if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n         {\n             return null;\n@@ -645,11 +635,9 @@ public class Dijkstra<CostType> implements\n         Set<List<Relationship>> paths = new HashSet<>();\n         for ( Node middleNode : foundPathsMiddleNodes )\n         {\n-            List<List<Relationship>> paths1 = Util.constructAllPathsToNodeAsRelationships(\n-                    middleNode, predecessors1, false );\n-            List<List<Relationship>> paths2 = Util.constructAllPathsToNodeAsRelationships(\n-                    middleNode, predecessors2, true );\n-            // For all combinations...\n+            List<List<Relationship>> paths1 = Util.constructAllPathsToNodeAsRelationships( middleNode, predecessors1, false );\n+List<List<Relationship>> paths2 = Util.constructAllPathsToNodeAsRelationships( middleNode, predecessors2, true );\n+    // For all combinations...\n             for ( List<Relationship> part1 : paths1 )\n             {\n                 for ( List<Relationship> part2 : paths2 )\n@@ -676,18 +664,20 @@ public class Dijkstra<CostType> implements\n         {\n             throw new RuntimeException( \"Start or end node undefined.\" );\n         }\n-        calculate();\n+\n+calculate();\n         if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n         {\n             return null;\n         }\n-        Node middleNode = foundPathsMiddleNodes.iterator().next();\n+\n+Node middleNode = foundPathsMiddleNodes.iterator().next();\n         LinkedList<PropertyContainer> path = new LinkedList<>();\n         path.addAll( Util.constructSinglePathToNode( middleNode, predecessors1,\n                 true, false ) );\n-        path.addAll( Util.constructSinglePathToNode( middleNode, predecessors2,\n+path.addAll( Util.constructSinglePathToNode( middleNode, predecessors2,\n                 false, true ) );\n-        return path;\n+return path;\n     }\n \n     /**\n@@ -700,18 +690,20 @@ public class Dijkstra<CostType> implements\n         {\n             throw new RuntimeException( \"Start or end node undefined.\" );\n         }\n-        calculate();\n+\n+calculate();\n         if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n         {\n             return null;\n         }\n-        Node middleNode = foundPathsMiddleNodes.iterator().next();\n+\n+Node middleNode = foundPathsMiddleNodes.iterator().next();\n         LinkedList<Node> pathNodes = new LinkedList<>();\n         pathNodes.addAll( Util.constructSinglePathToNodeAsNodes( middleNode,\n                 predecessors1, true, false ) );\n-        pathNodes.addAll( Util.constructSinglePathToNodeAsNodes( middleNode,\n+pathNodes.addAll( Util.constructSinglePathToNodeAsNodes( middleNode,\n                 predecessors2, false, true ) );\n-        return pathNodes;\n+return pathNodes;\n     }\n \n     /**\n@@ -724,18 +716,20 @@ public class Dijkstra<CostType> implements\n         {\n             throw new RuntimeException( \"Start or end node undefined.\" );\n         }\n-        calculate();\n+\n+calculate();\n         if ( foundPathsMiddleNodes == null || foundPathsMiddleNodes.size() == 0 )\n         {\n             return null;\n         }\n-        Node middleNode = foundPathsMiddleNodes.iterator().next();\n+\n+Node middleNode = foundPathsMiddleNodes.iterator().next();\n         List<Relationship> path = new LinkedList<>();\n         path.addAll( Util.constructSinglePathToNodeAsRelationships( middleNode,\n                 predecessors1, false ) );\n-        path.addAll( Util.constructSinglePathToNodeAsRelationships( middleNode,\n+path.addAll( Util.constructSinglePathToNodeAsRelationships( middleNode,\n                 predecessors2, true ) );\n-        return path;\n+return path;\n     }\n \n     /**\n@@ -812,4 +806,4 @@ public class Dijkstra<CostType> implements\n     {\n         this.maxCost = maxCost;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 103
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}