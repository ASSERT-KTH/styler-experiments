{
    "project_name": "Angel-ML-angel",
    "violation_id": "795",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/795/InitHyperLogLogParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/795/InitHyperLogLogParam.java\nindex 10c0251f520..30ba20cd0e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/795/InitHyperLogLogParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/795/InitHyperLogLogParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.psf.hyperanf;\n \n import com.tencent.angel.PartitionKey;\n@@ -29,49 +30,50 @@ import java.util.List;\n \n public class InitHyperLogLogParam extends UpdateParam {\n \n-  private long[] nodes;\n-  private int p;\n-  private int sp;\n+    private long[] nodes;\n+    private int p;\n+    private int sp;\n \n-  public InitHyperLogLogParam(int matrixId, int p, int sp, long[] nodes) {\n-    super(matrixId);\n-    this.p = p;\n-    this.sp = sp;\n-    this.nodes = nodes;\n-  }\n+    public InitHyperLogLogParam(int matrixId, int p, int sp, long[] nodes) {\n+        super(matrixId);\n+        this.p = p;\n+        this.sp = sp;\n+        this.nodes = nodes;\n+    }\n \n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    Arrays.sort(nodes);\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+        Arrays.sort(nodes);\n \n-    List<PartitionUpdateParam> params = new ArrayList<>();\n-    List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n+        List<PartitionUpdateParam> params = new ArrayList<>();\n+        List<PartitionKey> parts =\n+                PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n-    if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n-      throw new AngelException(\n-        \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n-          .get(parts.size() - 1).getEndCol());\n-    }\n+        if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n+            throw new AngelException(\n+                    \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n+                            .get(parts.size() - 1).getEndCol());\n+        }\n \n-    int nodeIndex = 0;\n-    int partIndex = 0;\n-    while (nodeIndex < nodes.length || partIndex < parts.size()) {\n-      int length = 0;\n-      long endOffset = parts.get(partIndex).getEndCol();\n-      while (nodeIndex < nodes.length && nodes[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n+        int nodeIndex = 0;\n+        int partIndex = 0;\n+        while (nodeIndex < nodes.length || partIndex < parts.size()) {\n+            int length = 0;\n+            long endOffset = parts.get(partIndex).getEndCol();\n+            while (nodeIndex < nodes.length && nodes[nodeIndex] < endOffset) {\n+                nodeIndex++;\n+                length++;\n+            }\n \n-      if (length > 0) {\n-        params.add(new InitHyperLogLogPartParam(matrixId,\n-          parts.get(partIndex), nodes, nodeIndex - length, nodeIndex,\n-          p, sp));\n-      }\n-      partIndex++;\n-    }\n+            if (length > 0) {\n+                params.add(new InitHyperLogLogPartParam(matrixId,\n+                        parts.get(partIndex), nodes, nodeIndex - length, nodeIndex,\n+                        p, sp));\n+            }\n+            partIndex++;\n+        }\n \n-    return params;\n-  }\n+        return params;\n+    }\n \n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/795/InitHyperLogLogParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/795/InitHyperLogLogParam.java\nindex 10c0251f520..bda30308a39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/795/InitHyperLogLogParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/795/InitHyperLogLogParam.java\n@@ -48,10 +48,8 @@ public class InitHyperLogLogParam extends UpdateParam {\n     List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n     if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n-      throw new AngelException(\n-        \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n-          .get(parts.size() - 1).getEndCol());\n-    }\n+      throw new AngelException(\"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts.get(parts.size() - 1).getEndCol());\n+  }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n@@ -67,11 +65,11 @@ public class InitHyperLogLogParam extends UpdateParam {\n         params.add(new InitHyperLogLogPartParam(matrixId,\n           parts.get(partIndex), nodes, nodeIndex - length, nodeIndex,\n           p, sp));\n-      }\n+  }\n       partIndex++;\n     }\n \n     return params;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/795/InitHyperLogLogParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/795/InitHyperLogLogParam.java\nindex 10c0251f520..5e8f92057a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/795/InitHyperLogLogParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/795/InitHyperLogLogParam.java\n@@ -22,7 +22,6 @@ import com.tencent.angel.ml.matrix.psf.update.base.PartitionUpdateParam;\n import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;\n import com.tencent.angel.psagent.PSAgentContext;\n import com.tencent.angel.psagent.matrix.oplog.cache.RowUpdateSplitUtils;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n@@ -43,14 +42,10 @@ public class InitHyperLogLogParam extends UpdateParam {\n   @Override\n   public List<PartitionUpdateParam> split() {\n     Arrays.sort(nodes);\n-\n     List<PartitionUpdateParam> params = new ArrayList<>();\n     List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n     if (!RowUpdateSplitUtils.isInRange(nodes, parts)) {\n-      throw new AngelException(\n-        \"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts\n-          .get(parts.size() - 1).getEndCol());\n+      throw new AngelException(\"node id is not in range [\" + parts.get(0).getStartCol() + \", \" + parts.get(parts.size() - 1).getEndCol());\n     }\n \n     int nodeIndex = 0;\n@@ -64,14 +59,11 @@ public class InitHyperLogLogParam extends UpdateParam {\n       }\n \n       if (length > 0) {\n-        params.add(new InitHyperLogLogPartParam(matrixId,\n-          parts.get(partIndex), nodes, nodeIndex - length, nodeIndex,\n-          p, sp));\n+        params.add(new InitHyperLogLogPartParam(matrixId, parts.get(partIndex), nodes, nodeIndex - length, nodeIndex, p, sp));\n       }\n       partIndex++;\n     }\n-\n     return params;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}