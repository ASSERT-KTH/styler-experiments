{
    "project_name": "EMResearch-EMB",
    "violation_id": "76",
    "information": {
        "violations": [
            {
                "line": "46",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public List<Project> findProjects(String organization, Date snapshotDate, Optional<String> query, Optional<String> language) {\n        BooleanBuilder q = new BooleanBuilder(project.organizationName.eq(organization));\n\n        Optional<Date> snapshotDateMatch = getSnapshotDateMatch(snapshotDate, organization);",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/76/ProjectRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/76/ProjectRepositoryImpl.java\nindex ff2e2b897e3..2b92357f21c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/76/ProjectRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/76/ProjectRepositoryImpl.java\n@@ -43,7 +43,8 @@ class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n     }\n \n     @Override\n-    public List<Project> findProjects(String organization, Date snapshotDate, Optional<String> query, Optional<String> language) {\n+    public List<Project> findProjects(String organization, Date snapshotDate, Optional<String> query,\n+                                      Optional<String> language) {\n         BooleanBuilder q = new BooleanBuilder(project.organizationName.eq(organization));\n \n         Optional<Date> snapshotDateMatch = getSnapshotDateMatch(snapshotDate, organization);\n@@ -65,7 +66,6 @@ class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n \n     /**\n      * @param snapshot\n-     *\n      * @return date that is closest in the past. If there is no earlier date in\n      * the past, nothing is returned\n      */\n@@ -73,7 +73,7 @@ class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n         return queryProject()\n             .where(\n                 project.organizationName.eq(organization)\n-                .and(project.snapshotDate.loe(snapshot))\n+                    .and(project.snapshotDate.loe(snapshot))\n             )\n             .orderBy(project.snapshotDate.desc())\n             .limit(1)\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/76/ProjectRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/76/ProjectRepositoryImpl.java\nindex ff2e2b897e3..c8c9b4bd222 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/76/ProjectRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/76/ProjectRepositoryImpl.java\n@@ -30,8 +30,7 @@ class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n         BooleanBuilder q = new BooleanBuilder()\n             .and(project.organizationName.eq(organization))\n             .and(project.snapshotDate.eq(lastSnapshot));\n-\n-        if (query.isPresent()) {\n+if (query.isPresent()) {\n             q.and(project.name.startsWith(query.get()));\n         }\n \n@@ -71,10 +70,8 @@ class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n      */\n     private Optional<Date> getSnapshotDateMatch(Date snapshot, String organization) {\n         return queryProject()\n-            .where(\n-                project.organizationName.eq(organization)\n-                .and(project.snapshotDate.loe(snapshot))\n-            )\n+            .where(project.organizationName.eq(organization)\n+                .and(project.snapshotDate.loe(snapshot)))\n             .orderBy(project.snapshotDate.desc())\n             .limit(1)\n             .list(project)\n@@ -86,4 +83,4 @@ class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n     private JPAQuery queryProject() {\n         return new JPAQuery(entityManager).from(project);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "24",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/76/ProjectRepositoryImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/76/ProjectRepositoryImpl.java\nindex ff2e2b897e3..5f93cf54b8e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/76/ProjectRepositoryImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/76/ProjectRepositoryImpl.java\n@@ -6,7 +6,6 @@ import com.mysema.query.jpa.impl.JPAQuery;\n import com.mysema.query.types.query.DateTimeSubQuery;\n import org.zalando.catwatch.backend.model.Project;\n import org.zalando.catwatch.backend.model.QProject;\n-\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import java.util.Collections;\n@@ -14,52 +13,39 @@ import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n \n-class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n \n+class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n     @PersistenceContext\n     private EntityManager entityManager;\n-\n     private final QProject project = QProject.project;\n \n     @Override\n     public List<Project> findProjects(String organization, Optional<String> query, Optional<String> language) {\n-        DateTimeSubQuery<Date> lastSnapshot = new JPASubQuery().from(project)\n-            .where(project.organizationName.eq(organization))\n-            .unique(project.snapshotDate.max());\n-\n-        BooleanBuilder q = new BooleanBuilder()\n-            .and(project.organizationName.eq(organization))\n-            .and(project.snapshotDate.eq(lastSnapshot));\n-\n+        DateTimeSubQuery<Date> lastSnapshot = new JPASubQuery().from(project).where(project.organizationName.eq(organization)).unique(project.snapshotDate.max());\n+        BooleanBuilder q = new BooleanBuilder().and(project.organizationName.eq(organization)).and(project.snapshotDate.eq(lastSnapshot));\n         if (query.isPresent()) {\n             q.and(project.name.startsWith(query.get()));\n         }\n-\n         if (language.isPresent()) {\n             q.and(project.primaryLanguage.eq(language.get()));\n         }\n-\n         return queryProject().where(q).list(project);\n     }\n \n     @Override\n     public List<Project> findProjects(String organization, Date snapshotDate, Optional<String> query, Optional<String> language) {\n         BooleanBuilder q = new BooleanBuilder(project.organizationName.eq(organization));\n-\n         Optional<Date> snapshotDateMatch = getSnapshotDateMatch(snapshotDate, organization);\n         if (!snapshotDateMatch.isPresent()) {\n             return Collections.emptyList();\n         }\n-\n         q.and(project.snapshotDate.eq(snapshotDateMatch.get()));\n         if (query.isPresent()) {\n             q.and(project.name.startsWith(query.get()));\n         }\n-\n         if (language.isPresent()) {\n             q.and(project.primaryLanguage.eq(language.get()));\n         }\n-\n         return queryProject().where(q).list(project);\n     }\n \n@@ -69,21 +55,13 @@ class ProjectRepositoryImpl implements ProjectRepositoryCustom {\n      * @return date that is closest in the past. If there is no earlier date in\n      * the past, nothing is returned\n      */\n+\n     private Optional<Date> getSnapshotDateMatch(Date snapshot, String organization) {\n-        return queryProject()\n-            .where(\n-                project.organizationName.eq(organization)\n-                .and(project.snapshotDate.loe(snapshot))\n-            )\n-            .orderBy(project.snapshotDate.desc())\n-            .limit(1)\n-            .list(project)\n-            .stream()\n-            .findFirst()\n-            .map(Project::getSnapshotDate);\n+        return queryProject().where(project.organizationName.eq(organization).and(project.snapshotDate.loe(snapshot))).orderBy(project.snapshotDate.desc()).limit(1).list(project).stream().findFirst().map(Project::getSnapshotDate);\n     }\n \n     private JPAQuery queryProject() {\n         return new JPAQuery(entityManager).from(project);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}