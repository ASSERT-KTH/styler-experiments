{
    "project_name": "wso2-attic-commons",
    "violation_id": "97",
    "information": {
        "violations": [
            {
                "line": "34",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 155).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @param sequenceCondition condition of the query\n     */\n    public SequenceQuery(String streamId, OutputDefinition outputDefinition, List<QueryInputStream> eventStreamList, SequenceCondition sequenceCondition) {\n        super(streamId, outputDefinition, sequenceCondition);\n        this.queryInputStreamList = eventStreamList;\n        this.inputEventStreams=new EventStream[queryInputStreamList.size()];",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/97/SequenceQuery.java\nindex 968e1bdbc13..88347388a09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/97/SequenceQuery.java\n@@ -31,8 +31,9 @@ public class SequenceQuery extends Query {\n      * @param eventStreamList     list of event streams\n      * @param sequenceCondition condition of the query\n      */\n-    public SequenceQuery(String streamId, OutputDefinition outputDefinition, List<QueryInputStream> eventStreamList, SequenceCondition sequenceCondition) {\n-        super(streamId, outputDefinition, sequenceCondition);\n+    public SequenceQuery(String streamId, OutputDefinition outputDefinition, List<QueryInputStream> eventStreamList,\n+    SequenceCondition sequenceCondition) {\n+         super(streamId, outputDefinition, sequenceCondition);\n         this.queryInputStreamList = eventStreamList;\n         this.inputEventStreams=new EventStream[queryInputStreamList.size()];\n         for (int i = 0, queryInputStreamListSize = queryInputStreamList.size(); i < queryInputStreamListSize; i++) {\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/97/SequenceQuery.java\nindex 968e1bdbc13..a5b170fb24a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/97/SequenceQuery.java\n@@ -2,9 +2,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -12,6 +12,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.wso2.siddhi.api.eventstream.query;\n \n import org.wso2.siddhi.api.OutputDefinition;\n@@ -24,29 +25,31 @@ import java.util.List;\n \n public class SequenceQuery extends Query {\n \n-    private List<QueryInputStream> queryInputStreamList = null;\n-    /**\n-     * @param streamId            id of the query\n-     * @param outputDefinition    definition of the output of the query\n-     * @param eventStreamList     list of event streams\n-     * @param sequenceCondition condition of the query\n-     */\n-    public SequenceQuery(String streamId, OutputDefinition outputDefinition, List<QueryInputStream> eventStreamList, SequenceCondition sequenceCondition) {\n-        super(streamId, outputDefinition, sequenceCondition);\n-        this.queryInputStreamList = eventStreamList;\n-        this.inputEventStreams=new EventStream[queryInputStreamList.size()];\n-        for (int i = 0, queryInputStreamListSize = queryInputStreamList.size(); i < queryInputStreamListSize; i++) {\n-            inputEventStreams[i]=queryInputStreamList.get(i).getEventStream();\n-        }\n-        setSchema(getAttributeNames(), QueryHelper.generateAttributeClasses(outputDefinition.getPropertyList(),this));\n-    }\n+  private List<QueryInputStream> queryInputStreamList = null;\n \n-    /**\n-     * get the list of input event streams\n-     *\n-     * @return the list of input event streams\n-     */\n-    public List<QueryInputStream> getQueryInputStreamList() {\n-        return queryInputStreamList;\n+  /**\n+   * @param streamId            id of the query\n+   * @param outputDefinition    definition of the output of the query\n+   * @param eventStreamList     list of event streams\n+   * @param sequenceCondition condition of the query\n+   */\n+  public SequenceQuery(String streamId, OutputDefinition outputDefinition, List<QueryInputStream> eventStreamList,\n+                       SequenceCondition sequenceCondition) {\n+    super(streamId, outputDefinition, sequenceCondition);\n+    this.queryInputStreamList = eventStreamList;\n+    this.inputEventStreams = new EventStream[queryInputStreamList.size()];\n+    for (int i = 0, queryInputStreamListSize = queryInputStreamList.size(); i < queryInputStreamListSize; i++) {\n+      inputEventStreams[i] = queryInputStreamList.get(i).getEventStream();\n     }\n+    setSchema(getAttributeNames(), QueryHelper.generateAttributeClasses(outputDefinition.getPropertyList(), this));\n+  }\n+\n+  /**\n+   * get the list of input event streams\n+   *\n+   * @return the list of input event streams\n+   */\n+  public List<QueryInputStream> getQueryInputStreamList() {\n+    return queryInputStreamList;\n+  }\n }\n",
            "diff_size": 43
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/97/SequenceQuery.java\nindex 968e1bdbc13..20069e2b9d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/97/SequenceQuery.java\n@@ -38,7 +38,7 @@ public class SequenceQuery extends Query {\n         for (int i = 0, queryInputStreamListSize = queryInputStreamList.size(); i < queryInputStreamListSize; i++) {\n             inputEventStreams[i]=queryInputStreamList.get(i).getEventStream();\n         }\n-        setSchema(getAttributeNames(), QueryHelper.generateAttributeClasses(outputDefinition.getPropertyList(),this));\n+        setSchema(getAttributeNames(), QueryHelper.generateAttributeClasses(outputDefinition.getPropertyList(), this));\n     }\n \n     /**\n@@ -49,4 +49,4 @@ public class SequenceQuery extends Query {\n     public List<QueryInputStream> getQueryInputStreamList() {\n         return queryInputStreamList;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/97/SequenceQuery.java\nindex 968e1bdbc13..88347388a09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/97/SequenceQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/97/SequenceQuery.java\n@@ -31,8 +31,9 @@ public class SequenceQuery extends Query {\n      * @param eventStreamList     list of event streams\n      * @param sequenceCondition condition of the query\n      */\n-    public SequenceQuery(String streamId, OutputDefinition outputDefinition, List<QueryInputStream> eventStreamList, SequenceCondition sequenceCondition) {\n-        super(streamId, outputDefinition, sequenceCondition);\n+    public SequenceQuery(String streamId, OutputDefinition outputDefinition, List<QueryInputStream> eventStreamList,\n+    SequenceCondition sequenceCondition) {\n+         super(streamId, outputDefinition, sequenceCondition);\n         this.queryInputStreamList = eventStreamList;\n         this.inputEventStreams=new EventStream[queryInputStreamList.size()];\n         for (int i = 0, queryInputStreamListSize = queryInputStreamList.size(); i < queryInputStreamListSize; i++) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}