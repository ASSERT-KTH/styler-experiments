{
    "project_name": "Angel-ML-angel",
    "violation_id": "777",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/777/CompLongIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/777/CompLongIntRowUpdateSplit.java\nindex 7d41bdbbd6b..42a501984c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/777/CompLongIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/777/CompLongIntRowUpdateSplit.java\n@@ -33,87 +33,87 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n  */\n public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n \n-  /**\n-   * Row update split\n-   */\n-  private final LongIntVector split;\n+    /**\n+     * Row update split\n+     */\n+    private final LongIntVector split;\n \n-  /**\n-   * Create a new CompLongIntRowUpdateSplit.\n-   *\n-   * @param rowIndex row index\n-   * @param split update split\n-   */\n-  public CompLongIntRowUpdateSplit(int rowIndex, LongIntVector split) {\n-    super(rowIndex, RowType.T_INT_SPARSE_LONGKEY_COMPONENT, -1, -1);\n-    this.split = split;\n-  }\n+    /**\n+     * Create a new CompLongIntRowUpdateSplit.\n+     *\n+     * @param rowIndex row index\n+     * @param split    update split\n+     */\n+    public CompLongIntRowUpdateSplit(int rowIndex, LongIntVector split) {\n+        super(rowIndex, RowType.T_INT_SPARSE_LONGKEY_COMPONENT, -1, -1);\n+        this.split = split;\n+    }\n \n-  /**\n-   * Create new empty CompLongIntRowUpdateSplit\n-   */\n-  public CompLongIntRowUpdateSplit() {\n-    this(-1, null);\n-  }\n+    /**\n+     * Create new empty CompLongIntRowUpdateSplit\n+     */\n+    public CompLongIntRowUpdateSplit() {\n+        this(-1, null);\n+    }\n \n-  /**\n-   * Get row update split vector\n-   *\n-   * @return row update split vector\n-   */\n-  public LongIntVector getSplit() {\n-    return split;\n-  }\n+    /**\n+     * Get row update split vector\n+     *\n+     * @return row update split vector\n+     */\n+    public LongIntVector getSplit() {\n+        return split;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    LongIntVectorStorage storage = split.getStorage();\n-    buf.writeInt(storage.size());\n-    if (storage instanceof LongIntSparseVectorStorage) {\n-      ObjectIterator<Long2IntMap.Entry> iter = storage.entryIterator();\n-      Long2IntMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeLong(entry.getLongKey());\n-        buf.writeInt(entry.getIntValue());\n-      }\n-    } else if (storage instanceof LongIntSortedVectorStorage) {\n-      long[] indices = storage.getIndices();\n-      int[] values = storage.getValues();\n-      for (int i = 0; i < indices.length; i++) {\n-        buf.writeLong(indices[i]);\n-        buf.writeInt(values[i]);\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\n-          \"unsupport split for storage \" + storage.getClass().getName());\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        LongIntVectorStorage storage = split.getStorage();\n+        buf.writeInt(storage.size());\n+        if (storage instanceof LongIntSparseVectorStorage) {\n+            ObjectIterator<Long2IntMap.Entry> iter = storage.entryIterator();\n+            Long2IntMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                buf.writeLong(entry.getLongKey());\n+                buf.writeInt(entry.getIntValue());\n+            }\n+        } else if (storage instanceof LongIntSortedVectorStorage) {\n+            long[] indices = storage.getIndices();\n+            int[] values = storage.getValues();\n+            for (int i = 0; i < indices.length; i++) {\n+                buf.writeLong(indices[i]);\n+                buf.writeInt(values[i]);\n+            }\n+        } else {\n+            throw new UnsupportedOperationException(\n+                    \"unsupport split for storage \" + storage.getClass().getName());\n+        }\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    int elemNum = buf.readInt();\n-    if (rowType == RowType.T_INT_SPARSE_LONGKEY_COMPONENT) {\n-      vector = VFactory.sparseLongKeyIntVector(\n-          splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(),\n-          elemNum);\n-      for (int i = 0; i < elemNum; i++) {\n-        ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n-      }\n-    } else {\n-      throw new UnsupportedOperationException(\"Unsupport rowtype \" + rowType);\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        int elemNum = buf.readInt();\n+        if (rowType == RowType.T_INT_SPARSE_LONGKEY_COMPONENT) {\n+            vector = VFactory.sparseLongKeyIntVector(\n+                    splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(),\n+                    elemNum);\n+            for (int i = 0; i < elemNum; i++) {\n+                ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n+            }\n+        } else {\n+            throw new UnsupportedOperationException(\"Unsupport rowtype \" + rowType);\n+        }\n     }\n-  }\n \n-  @Override\n-  public long size() {\n-    return split.size();\n-  }\n+    @Override\n+    public long size() {\n+        return split.size();\n+    }\n \n-  @Override\n-  public int bufferLen() {\n-    return 4 + super.bufferLen() + split.getStorage().size() * 12;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        return 4 + super.bufferLen() + split.getStorage().size() * 12;\n+    }\n }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/777/CompLongIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/777/CompLongIntRowUpdateSplit.java\nindex 7d41bdbbd6b..e2f7d9e25b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/777/CompLongIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/777/CompLongIntRowUpdateSplit.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.psagent.matrix.oplog.cache;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -86,8 +85,7 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n         buf.writeInt(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"unsupport split for storage \" + storage.getClass().getName());\n+      throw new UnsupportedOperationException(\"unsupport split for storage \" + storage.getClass().getName());\n     }\n   }\n \n@@ -96,8 +94,7 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n     super.deserialize(buf);\n     int elemNum = buf.readInt();\n     if (rowType == RowType.T_INT_SPARSE_LONGKEY_COMPONENT) {\n-      vector = VFactory.sparseLongKeyIntVector(\n-          splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(),\n+      vector = VFactory.sparseLongKeyIntVector(splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(),\n           elemNum);\n       for (int i = 0; i < elemNum; i++) {\n         ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n@@ -116,4 +113,4 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n   public int bufferLen() {\n     return 4 + super.bufferLen() + split.getStorage().size() * 12;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/777/CompLongIntRowUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/777/CompLongIntRowUpdateSplit.java\nindex 7d41bdbbd6b..4af7f49f912 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/777/CompLongIntRowUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/777/CompLongIntRowUpdateSplit.java\n@@ -31,11 +31,13 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * Component long key int value row update split\n  */\n+\n public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n \n   /**\n    * Row update split\n    */\n+\n   private final LongIntVector split;\n \n   /**\n@@ -44,6 +46,7 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n    * @param rowIndex row index\n    * @param split update split\n    */\n+\n   public CompLongIntRowUpdateSplit(int rowIndex, LongIntVector split) {\n     super(rowIndex, RowType.T_INT_SPARSE_LONGKEY_COMPONENT, -1, -1);\n     this.split = split;\n@@ -52,6 +55,7 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n   /**\n    * Create new empty CompLongIntRowUpdateSplit\n    */\n+\n   public CompLongIntRowUpdateSplit() {\n     this(-1, null);\n   }\n@@ -61,6 +65,7 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n    *\n    * @return row update split vector\n    */\n+\n   public LongIntVector getSplit() {\n     return split;\n   }\n@@ -86,19 +91,17 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n         buf.writeInt(values[i]);\n       }\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"unsupport split for storage \" + storage.getClass().getName());\n+      throw new UnsupportedOperationException(\"unsupport split for storage \" + storage.getClass().getName());\n     }\n   }\n \n   @Override\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n+\n     int elemNum = buf.readInt();\n     if (rowType == RowType.T_INT_SPARSE_LONGKEY_COMPONENT) {\n-      vector = VFactory.sparseLongKeyIntVector(\n-          splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(),\n-          elemNum);\n+      vector = VFactory.sparseLongKeyIntVector(splitContext.getPartKey().getEndCol() - splitContext.getPartKey().getStartCol(), elemNum);\n       for (int i = 0; i < elemNum; i++) {\n         ((LongIntVector) vector).set(buf.readLong(), buf.readInt());\n       }\n@@ -116,4 +119,4 @@ public class CompLongIntRowUpdateSplit extends RowUpdateSplit {\n   public int bufferLen() {\n     return 4 + super.bufferLen() + split.getStorage().size() * 12;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}