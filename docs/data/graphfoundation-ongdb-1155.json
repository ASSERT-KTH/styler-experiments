{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "1155",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1155/TokenCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1155/TokenCreator.java\nindex 58252779d95..5da0ac0bae6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1155/TokenCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1155/TokenCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import java.util.Collection;\n@@ -31,20 +32,20 @@ import static org.neo4j.kernel.impl.store.PropertyStore.encodeString;\n \n public class TokenCreator<R extends TokenRecord, T extends Token>\n {\n-    private final TokenStore<R, T> store;\n+  private final TokenStore<R, T> store;\n \n-    public TokenCreator( TokenStore<R, T> store )\n-    {\n-        this.store = store;\n-    }\n+  public TokenCreator(TokenStore<R, T> store)\n+  {\n+    this.store = store;\n+  }\n \n-    public void createToken( String name, int id, RecordAccess<R,Void> recordAccess )\n-    {\n-        R record = recordAccess.create( id, null ).forChangingData();\n-        record.setInUse( true );\n-        record.setCreated();\n-        Collection<DynamicRecord> nameRecords = store.allocateNameRecords( encodeString( name ) );\n-        record.setNameId( (int) Iterables.first( nameRecords ).getId() );\n-        record.addNameRecords( nameRecords );\n-    }\n+  public void createToken(String name, int id, RecordAccess<R, Void> recordAccess)\n+  {\n+    R record = recordAccess.create(id, null).forChangingData();\n+    record.setInUse(true);\n+    record.setCreated();\n+    Collection<DynamicRecord> nameRecords = store.allocateNameRecords(encodeString(name));\n+    record.setNameId((int) Iterables.first(nameRecords).getId());\n+    record.addNameRecords(nameRecords);\n+  }\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1155/TokenCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1155/TokenCreator.java\nindex 58252779d95..90714505be7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1155/TokenCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1155/TokenCreator.java\n@@ -31,9 +31,9 @@ import static org.neo4j.kernel.impl.store.PropertyStore.encodeString;\n \n public class TokenCreator<R extends TokenRecord, T extends Token>\n {\n-    private final TokenStore<R, T> store;\n+    private final TokenStore<R,T> store;\n \n-    public TokenCreator( TokenStore<R, T> store )\n+    public TokenCreator( TokenStore<R,T> store )\n     {\n         this.store = store;\n     }\n@@ -44,7 +44,7 @@ public class TokenCreator<R extends TokenRecord, T extends Token>\n         record.setInUse( true );\n         record.setCreated();\n         Collection<DynamicRecord> nameRecords = store.allocateNameRecords( encodeString( name ) );\n-        record.setNameId( (int) Iterables.first( nameRecords ).getId() );\n+        record.setNameId( ( int) Iterables.first( nameRecords ).getId() );\n         record.addNameRecords( nameRecords );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}