{
    "project_name": "Angel-ML-angel",
    "violation_id": "219",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/219/LongFloatSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/219/LongFloatSparseVectorStorage.java\nindex 5aa770d3ccb..8ff8869dd0e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/219/LongFloatSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/219/LongFloatSparseVectorStorage.java\n@@ -31,255 +31,255 @@ import java.util.Random;\n \n public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n \n-  private Long2FloatOpenHashMap map;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private long dim;\n-\n-  public LongFloatSparseVectorStorage() {\n-    super();\n-  }\n-\n-  public LongFloatSparseVectorStorage(long dim, Long2FloatOpenHashMap map) {\n-    this.flag = 2;\n-    this.dim = dim;\n-    this.map = map;\n-  }\n-\n-  public LongFloatSparseVectorStorage(long dim, int capacity) {\n-    this(dim, new Long2FloatOpenHashMap(capacity));\n-  }\n-\n-  public LongFloatSparseVectorStorage(long dim) {\n-    this(dim, (int) Math.min(64, Math.max(dim, 0)));\n-  }\n-\n-  public LongFloatSparseVectorStorage(long dim, long[] indices, float[] values) {\n-    this(dim, new Long2FloatOpenHashMap(indices, values));\n-  }\n-\n-  @Override\n-  public float get(long idx) {\n-    return map.get(idx);\n-  }\n-\n-  @Override\n-  public void set(long idx, float value) {\n-    map.put(idx, value);\n-  }\n-\n-  @Override\n-  public long[] getIndices() {\n-    return map.keySet().toLongArray();\n-  }\n-\n-  @Override\n-  public ObjectIterator<Long2FloatMap.Entry> entryIterator() {\n-    return map.long2FloatEntrySet().fastIterator();\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage clone() {\n-    return new LongFloatSparseVectorStorage(dim, map.clone());\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage copy() {\n-    return new LongFloatSparseVectorStorage(dim, map.clone());\n-  }\n-\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSparse() {\n-    int capacity = map.size();\n-    float[] oneLikeValues = new float[capacity];\n-\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongFloatSparseVectorStorage(dim, map.keySet().toLongArray(), oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSorted() {\n-    int capacity = map.size();\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = map.keySet().toLongArray();\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSorted(long dim, int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSparse(int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSorted(int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongFloatVectorStorage emptySparse() {\n-    return new LongFloatSparseVectorStorage(dim, map.size());\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySorted() {\n-    return new LongFloatSortedVectorStorage(dim, map.size());\n-  }\n-\n-\n-  @Override\n-  public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n-    return new LongFloatSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySorted(long dim, int capacity) {\n-    return new LongFloatSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySparse(int capacity) {\n-    return new LongFloatSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySorted(int capacity) {\n-    return new LongFloatSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongSet indexIterator() {\n-    return map.keySet();\n-  }\n-\n-  @Override\n-  public int size() {\n-    return map.size();\n-  }\n-\n-  public void setSize(int size) {\n-  }\n-\n-  @Override\n-  public boolean hasKey(long key) {\n-    return map.containsKey(key);\n-  }\n-\n-  @Override\n-  public RowType getType() {\n-    return RowType.T_FLOAT_SPARSE_LONGKEY;\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return flag == 1;\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return flag == 2;\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return flag == 4;\n-  }\n-\n-  @Override\n-  public void clear() {\n-    map.clear();\n-  }\n-\n-  @Override\n-  public FloatIterator valueIterator() {\n-    return map.values().iterator();\n-  }\n-\n-  @Override\n-  public float[] getValues() {\n-    return map.values().toFloatArray();\n-  }\n+    private Long2FloatOpenHashMap map;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private long dim;\n+\n+    public LongFloatSparseVectorStorage() {\n+        super();\n+    }\n+\n+    public LongFloatSparseVectorStorage(long dim, Long2FloatOpenHashMap map) {\n+        this.flag = 2;\n+        this.dim = dim;\n+        this.map = map;\n+    }\n+\n+    public LongFloatSparseVectorStorage(long dim, int capacity) {\n+        this(dim, new Long2FloatOpenHashMap(capacity));\n+    }\n+\n+    public LongFloatSparseVectorStorage(long dim) {\n+        this(dim, (int) Math.min(64, Math.max(dim, 0)));\n+    }\n+\n+    public LongFloatSparseVectorStorage(long dim, long[] indices, float[] values) {\n+        this(dim, new Long2FloatOpenHashMap(indices, values));\n+    }\n+\n+    @Override\n+    public float get(long idx) {\n+        return map.get(idx);\n+    }\n+\n+    @Override\n+    public void set(long idx, float value) {\n+        map.put(idx, value);\n+    }\n+\n+    @Override\n+    public long[] getIndices() {\n+        return map.keySet().toLongArray();\n+    }\n+\n+    @Override\n+    public ObjectIterator<Long2FloatMap.Entry> entryIterator() {\n+        return map.long2FloatEntrySet().fastIterator();\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage clone() {\n+        return new LongFloatSparseVectorStorage(dim, map.clone());\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage copy() {\n+        return new LongFloatSparseVectorStorage(dim, map.clone());\n+    }\n+\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSparse() {\n+        int capacity = map.size();\n+        float[] oneLikeValues = new float[capacity];\n+\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, map.keySet().toLongArray(), oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSorted() {\n+        int capacity = map.size();\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = map.keySet().toLongArray();\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            long idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSorted(long dim, int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            long idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSparse(int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSorted(int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+\n+    @Override\n+    public LongFloatVectorStorage emptySparse() {\n+        return new LongFloatSparseVectorStorage(dim, map.size());\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage emptySorted() {\n+        return new LongFloatSortedVectorStorage(dim, map.size());\n+    }\n+\n+\n+    @Override\n+    public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n+        return new LongFloatSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage emptySorted(long dim, int capacity) {\n+        return new LongFloatSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage emptySparse(int capacity) {\n+        return new LongFloatSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage emptySorted(int capacity) {\n+        return new LongFloatSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongSet indexIterator() {\n+        return map.keySet();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return map.size();\n+    }\n+\n+    public void setSize(int size) {\n+    }\n+\n+    @Override\n+    public boolean hasKey(long key) {\n+        return map.containsKey(key);\n+    }\n+\n+    @Override\n+    public RowType getType() {\n+        return RowType.T_FLOAT_SPARSE_LONGKEY;\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return flag == 1;\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return flag == 2;\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return flag == 4;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    @Override\n+    public FloatIterator valueIterator() {\n+        return map.values().iterator();\n+    }\n+\n+    @Override\n+    public float[] getValues() {\n+        return map.values().toFloatArray();\n+    }\n }\n",
            "diff_size": 251
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/219/LongFloatSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/219/LongFloatSparseVectorStorage.java\nindex 5aa770d3ccb..bdc6631d0fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/219/LongFloatSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/219/LongFloatSparseVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.matrix.RowType;\n@@ -87,8 +86,7 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, map.clone());\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     float[] oneLikeValues = new float[capacity];\n@@ -111,8 +109,7 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n     float[] oneLikeValues = new float[capacity];\n     long[] indices = new long[capacity];\n@@ -198,8 +195,7 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage emptySparse() {\n     return new LongFloatSparseVectorStorage(dim, map.size());\n   }\n@@ -209,8 +205,7 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSortedVectorStorage(dim, map.size());\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n     return new LongFloatSparseVectorStorage(dim, capacity);\n   }\n@@ -282,4 +277,4 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n   public float[] getValues() {\n     return map.values().toFloatArray();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/219/LongFloatSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/219/LongFloatSparseVectorStorage.java\nindex 5aa770d3ccb..41d45adc5f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/219/LongFloatSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/219/LongFloatSparseVectorStorage.java\n@@ -24,7 +24,6 @@ import it.unimi.dsi.fastutil.longs.Long2FloatMap;\n import it.unimi.dsi.fastutil.longs.Long2FloatOpenHashMap;\n import it.unimi.dsi.fastutil.longs.LongSet;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Random;\n@@ -87,12 +86,10 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, map.clone());\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     float[] oneLikeValues = new float[capacity];\n-\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -111,7 +108,6 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n     float[] oneLikeValues = new float[capacity];\n@@ -127,6 +123,7 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -170,6 +167,7 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -198,7 +196,6 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage emptySparse() {\n     return new LongFloatSparseVectorStorage(dim, map.size());\n@@ -209,7 +206,6 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSortedVectorStorage(dim, map.size());\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n     return new LongFloatSparseVectorStorage(dim, capacity);\n@@ -240,8 +236,7 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n     return map.size();\n   }\n \n-  public void setSize(int size) {\n-  }\n+  public void setSize(int size) {}\n \n   @Override\n   public boolean hasKey(long key) {\n@@ -282,4 +277,5 @@ public class LongFloatSparseVectorStorage implements LongFloatVectorStorage {\n   public float[] getValues() {\n     return map.values().toFloatArray();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}