{
    "project_name": "Activiti-Activiti",
    "violation_id": "558",
    "information": {
        "violations": [
            {
                "line": "18",
                "severity": "error",
                "message": "'package' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\npackage org.activiti.spring.process.conf;\n\nimport java.util.Date;\nimport java.util.HashMap;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/558/ProcessExtensionsAutoConfiguration.java\nindex 8729ee69851..aa31a87abe4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/558/ProcessExtensionsAutoConfiguration.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.spring.process.conf;\n \n import java.util.Date;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/558/ProcessExtensionsAutoConfiguration.java\nindex 8729ee69851..beeea0c20f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/558/ProcessExtensionsAutoConfiguration.java\n@@ -50,7 +50,7 @@ public class ProcessExtensionsAutoConfiguration {\n     @Bean\n     @ConditionalOnMissingBean\n     public ProcessExtensionResourceReader processExtensionResourceReader(ObjectMapper objectMapper,\n-                                                            Map<String, VariableType> variableTypeMap) {\n+                                                                         Map<String, VariableType> variableTypeMap) {\n         return new ProcessExtensionResourceReader(objectMapper, variableTypeMap);\n     }\n \n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "'package' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/558/ProcessExtensionsAutoConfiguration.java\nindex 8729ee69851..87d3fde48b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/558/ProcessExtensionsAutoConfiguration.java\n@@ -41,64 +41,67 @@ import org.springframework.context.annotation.Configuration;\n @Configuration\n public class ProcessExtensionsAutoConfiguration {\n \n-    @Bean\n-    @ConditionalOnMissingBean\n-    public DeploymentResourceLoader<ProcessExtensionModel> deploymentResourceLoader() {\n-        return new DeploymentResourceLoader<>();\n-    }\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public DeploymentResourceLoader<ProcessExtensionModel> deploymentResourceLoader() {\n+    return new DeploymentResourceLoader<>();\n+  }\n \n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ProcessExtensionResourceReader processExtensionResourceReader(ObjectMapper objectMapper,\n-                                                            Map<String, VariableType> variableTypeMap) {\n-        return new ProcessExtensionResourceReader(objectMapper, variableTypeMap);\n-    }\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public ProcessExtensionResourceReader processExtensionResourceReader(ObjectMapper objectMapper, Map<String, VariableType> variableTypeMap) {\n+    return new ProcessExtensionResourceReader(objectMapper, variableTypeMap);\n+  }\n \n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ProcessExtensionService processExtensionService(ProcessExtensionResourceReader processExtensionResourceReader,\n-                                                           DeploymentResourceLoader<ProcessExtensionModel> deploymentResourceLoader) {\n-        return new ProcessExtensionService(\n-                deploymentResourceLoader,\n-                processExtensionResourceReader);\n-    }\n+  @Bean\n+  @ConditionalOnMissingBean\n+  public ProcessExtensionService processExtensionService(ProcessExtensionResourceReader processExtensionResourceReader, DeploymentResourceLoader<ProcessExtensionModel> deploymentResourceLoader) {\n+    return new ProcessExtensionService(deploymentResourceLoader,\n+                                       processExtensionResourceReader);\n+  }\n \n-    @Bean\n-    InitializingBean initRepositoryServiceForProcessExtensionService(RepositoryService repositoryService,\n-                                                                     ProcessExtensionService processExtensionService) {\n-        return () -> processExtensionService.setRepositoryService(repositoryService);\n-    }\n+  @Bean\n+  InitializingBean initRepositoryServiceForProcessExtensionService(RepositoryService repositoryService, ProcessExtensionService processExtensionService) {\n+    return () -> processExtensionService.setRepositoryService(repositoryService);\n+  }\n \n-    @Bean\n-    InitializingBean initRepositoryServiceForDeploymentResourceLoader(RepositoryService repositoryService,\n-                                                                      DeploymentResourceLoader deploymentResourceLoader) {\n-        return () -> deploymentResourceLoader.setRepositoryService(repositoryService);\n-    }\n+  @Bean\n+  InitializingBean initRepositoryServiceForDeploymentResourceLoader(RepositoryService repositoryService, DeploymentResourceLoader deploymentResourceLoader) {\n+    return () -> deploymentResourceLoader.setRepositoryService(repositoryService);\n+  }\n \n-    @Bean\n-    @ConditionalOnMissingBean(name = \"variableTypeMap\")\n-    public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper,\n-                                                     DateFormatterProvider dateFormatterProvider) {\n-        Map<String, VariableType> variableTypeMap = new HashMap<>();\n-        variableTypeMap.put(\"boolean\", new JavaObjectVariableType(Boolean.class));\n-        variableTypeMap.put(\"string\", new JavaObjectVariableType(String.class));\n-        variableTypeMap.put(\"integer\", new JavaObjectVariableType(Integer.class));\n-        variableTypeMap.put(\"json\", new JsonObjectVariableType(objectMapper));\n-        variableTypeMap.put(\"file\", new JsonObjectVariableType(objectMapper));\n-        variableTypeMap.put(\"folder\", new JsonObjectVariableType(objectMapper));\n-        variableTypeMap.put(\"date\", new DateVariableType(Date.class, dateFormatterProvider));\n-        variableTypeMap.put(\"datetime\", new DateVariableType(Date.class, dateFormatterProvider));\n-        variableTypeMap.put(\"array\", new JsonObjectVariableType(objectMapper));\n-        return variableTypeMap;\n-    }\n+  @Bean\n+  @ConditionalOnMissingBean(name = \"variableTypeMap\")\n+  public Map<String, VariableType> variableTypeMap(ObjectMapper objectMapper, DateFormatterProvider dateFormatterProvider) {\n+    Map<String, VariableType> variableTypeMap = new HashMap<>();\n+    variableTypeMap.put(\"boolean\",\n+                        new JavaObjectVariableType(Boolean.class));\n+    variableTypeMap.put(\"string\",\n+                        new JavaObjectVariableType(String.class));\n+    variableTypeMap.put(\"integer\",\n+                        new JavaObjectVariableType(Integer.class));\n+    variableTypeMap.put(\"json\",\n+                        new JsonObjectVariableType(objectMapper));\n+    variableTypeMap.put(\"file\",\n+                        new JsonObjectVariableType(objectMapper));\n+    variableTypeMap.put(\"folder\",\n+                        new JsonObjectVariableType(objectMapper));\n+    variableTypeMap.put(\"date\",\n+                        new DateVariableType(Date.class, dateFormatterProvider));\n+    variableTypeMap.put(\"datetime\",\n+                        new DateVariableType(Date.class, dateFormatterProvider));\n+    variableTypeMap.put(\"array\",\n+                        new JsonObjectVariableType(objectMapper));\n+    return variableTypeMap;\n+  }\n \n-    @Bean\n-    public VariableValidationService variableValidationService(Map<String, VariableType> variableTypeMap) {\n-        return new VariableValidationService(variableTypeMap);\n-    }\n+  @Bean\n+  public VariableValidationService variableValidationService(Map<String, VariableType> variableTypeMap) {\n+    return new VariableValidationService(variableTypeMap);\n+  }\n \n-    @Bean\n-    public VariableParsingService variableParsingService(Map<String, VariableType> variableTypeMap) {\n-        return new VariableParsingService(variableTypeMap);\n-    }\n-}\n+  @Bean\n+  public VariableParsingService variableParsingService(Map<String, VariableType> variableTypeMap) {\n+    return new VariableParsingService(variableTypeMap);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/558/ProcessExtensionsAutoConfiguration.java\nindex 8729ee69851..aa31a87abe4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/558/ProcessExtensionsAutoConfiguration.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.spring.process.conf;\n \n import java.util.Date;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/558/ProcessExtensionsAutoConfiguration.java\nindex 8729ee69851..aa31a87abe4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/558/ProcessExtensionsAutoConfiguration.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/558/ProcessExtensionsAutoConfiguration.java\n@@ -14,7 +14,6 @@\n  * limitations under the License.\n  */\n \n-\n package org.activiti.spring.process.conf;\n \n import java.util.Date;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}