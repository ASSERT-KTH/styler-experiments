{
    "project_name": "Angel-ML-angel",
    "violation_id": "921",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/921/ErrorMetric.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/921/ErrorMetric.java\nindex e81c24cbc31..65bc8da588d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/921/ErrorMetric.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/921/ErrorMetric.java\n@@ -13,6 +13,7 @@\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.tencent.angel.ml.algorithm.metric;\n \n /**\n@@ -21,43 +22,43 @@ package com.tencent.angel.ml.algorithm.metric;\n \n public class ErrorMetric implements Metric {\n \n-  private static float threshold = 0.5f;\n+    private static float threshold = 0.5f;\n \n-  /**\n-   * return name of metric\n-   *\n-   * @return the name\n-   */\n-  @Override\n-  public String getName() {\n-    return \"error\";\n-  }\n+    /**\n+     * return name of metric\n+     *\n+     * @return the name\n+     */\n+    @Override\n+    public String getName() {\n+        return \"error\";\n+    }\n \n-  /**\n-   * evaluate a specific metric for instances\n-   *\n-   * @param preds the predictions\n-   * @param labels the labels\n-   * @return the eval metric\n-   */\n-  @Override\n-  public float eval(float[] preds, float[] labels) {\n-    float err = 0.0f;\n-    for (int i = 0; i < preds.length; i++) {\n-      err += evalOne(preds[i], labels[i]);\n+    /**\n+     * evaluate a specific metric for instances\n+     *\n+     * @param preds  the predictions\n+     * @param labels the labels\n+     * @return the eval metric\n+     */\n+    @Override\n+    public float eval(float[] preds, float[] labels) {\n+        float err = 0.0f;\n+        for (int i = 0; i < preds.length; i++) {\n+            err += evalOne(preds[i], labels[i]);\n+        }\n+        return err / preds.length;\n     }\n-    return err / preds.length;\n-  }\n \n-  /**\n-   * evaluate a specific metric for one instance\n-   *\n-   * @param pred the prediction\n-   * @param label the label\n-   * @return the eval metric\n-   */\n-  @Override\n-  public float evalOne(float pred, float label) {\n-    return pred > threshold ? 1.0f - label : label;\n-  }\n+    /**\n+     * evaluate a specific metric for one instance\n+     *\n+     * @param pred  the prediction\n+     * @param label the label\n+     * @return the eval metric\n+     */\n+    @Override\n+    public float evalOne(float pred, float label) {\n+        return pred > threshold ? 1.0f - label : label;\n+    }\n }\n",
            "diff_size": 38
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/921/ErrorMetric.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/921/ErrorMetric.java\nindex e81c24cbc31..38e26ec0e20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/921/ErrorMetric.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/921/ErrorMetric.java\n@@ -60,4 +60,4 @@ public class ErrorMetric implements Metric {\n   public float evalOne(float pred, float label) {\n     return pred > threshold ? 1.0f - label : label;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/921/ErrorMetric.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/921/ErrorMetric.java\nindex e81c24cbc31..5c654112743 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/921/ErrorMetric.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/921/ErrorMetric.java\n@@ -19,6 +19,8 @@ package com.tencent.angel.ml.algorithm.metric;\n  * Description: the metric of error ratio\n  */\n \n+\n+\n public class ErrorMetric implements Metric {\n \n   private static float threshold = 0.5f;\n@@ -28,6 +30,7 @@ public class ErrorMetric implements Metric {\n    *\n    * @return the name\n    */\n+\n   @Override\n   public String getName() {\n     return \"error\";\n@@ -40,6 +43,7 @@ public class ErrorMetric implements Metric {\n    * @param labels the labels\n    * @return the eval metric\n    */\n+\n   @Override\n   public float eval(float[] preds, float[] labels) {\n     float err = 0.0f;\n@@ -56,8 +60,10 @@ public class ErrorMetric implements Metric {\n    * @param label the label\n    * @return the eval metric\n    */\n+\n   @Override\n   public float evalOne(float pred, float label) {\n     return pred > threshold ? 1.0f - label : label;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}