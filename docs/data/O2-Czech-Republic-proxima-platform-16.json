{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "violation_id": "16",
    "information": {
        "violations": [
            {
                "line": "97",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 99).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      try {\n        current = observer.takeBlocking();\n        if (current == null || current.getStamp() >= startStamp && current.getStamp() < endStamp) {\n          // accept the taken element\n          break;\n        }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "98",
                    "column": "29",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/checkstyle_idea/16/BeamBatchLogReader.java\nindex 7ccb7f0a88b..f98ba20ee41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/checkstyle_idea/16/BeamBatchLogReader.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.beam.direct.io;\n \n import cz.o2.proxima.direct.batch.BatchLogReader;\n@@ -94,7 +95,8 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n     for (; ; ) {\n       try {\n         current = observer.takeBlocking();\n-        if (current == null || current.getStamp() >= startStamp && current.getStamp() < endStamp) {\n+        if (current == null ||\n+            current.getStamp() >= startStamp && current.getStamp() < endStamp) {\n           // accept the taken element\n           break;\n         }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "'ctor def' child has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/naturalize/16/BeamBatchLogReader.java\nindex 7ccb7f0a88b..cc123f599ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/naturalize/16/BeamBatchLogReader.java\n@@ -66,8 +66,7 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n       Partition split,\n       long startStamp,\n       long endStamp) {\n-\n-    this.source = Objects.requireNonNull(source);\n+  this.source = Objects.requireNonNull(source);\n     this.reader = Objects.requireNonNull(reader);\n     this.attrs = Objects.requireNonNull(attrs);\n     this.split = Objects.requireNonNull(split);\n@@ -82,16 +81,14 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n \n   @Override\n   public boolean start() throws IOException {\n-    this.observer =\n-        BlockingQueueLogObserver.createBatchLogObserver(\n-            \"Source(\" + split + \")\", LOWEST_INSTANT.getMillis());\n-    reader.observe(Arrays.asList(split), attrs, observer);\n+    this.observer = BlockingQueueLogObserver.createBatchLogObserver(\"Source(\" + split + \")\", LOWEST_INSTANT.getMillis());\n+reader.observe(Arrays.asList(split), attrs, observer);\n     return advance();\n   }\n \n   @Override\n   public boolean advance() throws IOException {\n-    for (; ; ) {\n+    for (; ;) {\n       try {\n         current = observer.takeBlocking();\n         if (current == null || current.getStamp() >= startStamp && current.getStamp() < endStamp) {\n@@ -137,4 +134,4 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n     }\n     return HIGHEST_INSTANT;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'DirectBatchSource' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "'BatchLogReader' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'Partition' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "'long' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "'DirectBatchSource' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "'BatchLogReader' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "'Partition' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "'long' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/codebuff/16/BeamBatchLogReader.java\nindex 7ccb7f0a88b..601ebcc6a93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/codebuff/16/BeamBatchLogReader.java\n@@ -31,6 +31,8 @@ import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n import org.joda.time.Instant;\n \n /** A {@link BoundedReader} reading from {@link BatchLogReader}. */\n+\n+\n @Slf4j\n class BeamBatchLogReader extends BoundedReader<StreamElement> {\n \n@@ -38,13 +40,11 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n   private static final Instant HIGHEST_INSTANT = BoundedWindow.TIMESTAMP_MAX_VALUE;\n \n   static BeamBatchLogReader of(\n-      DirectBatchSource source,\n-      BatchLogReader reader,\n-      List<AttributeDescriptor<?>> attrs,\n-      Partition split,\n-      long startStamp,\n-      long endStamp) {\n-\n+    DirectBatchSource source,\n+    BatchLogReader reader,\n+    List<AttributeDescriptor<?>> attrs,\n+    Partition split,\n+    long startStamp, long endStamp) {\n     return new BeamBatchLogReader(source, reader, attrs, split, startStamp, endStamp);\n   }\n \n@@ -54,19 +54,16 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n   private final Partition split;\n   private final long startStamp;\n   private final long endStamp;\n-\n   private StreamElement current;\n   private BlockingQueueLogObserver.BatchLogObserver observer;\n   private boolean finished = false;\n \n   private BeamBatchLogReader(\n-      DirectBatchSource source,\n-      BatchLogReader reader,\n-      List<AttributeDescriptor<?>> attrs,\n-      Partition split,\n-      long startStamp,\n-      long endStamp) {\n-\n+    DirectBatchSource source,\n+    BatchLogReader reader,\n+    List<AttributeDescriptor<?>> attrs,\n+    Partition split,\n+    long startStamp, long endStamp) {\n     this.source = Objects.requireNonNull(source);\n     this.reader = Objects.requireNonNull(reader);\n     this.attrs = Objects.requireNonNull(attrs);\n@@ -82,16 +79,14 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n \n   @Override\n   public boolean start() throws IOException {\n-    this.observer =\n-        BlockingQueueLogObserver.createBatchLogObserver(\n-            \"Source(\" + split + \")\", LOWEST_INSTANT.getMillis());\n+    this.observer = BlockingQueueLogObserver.createBatchLogObserver(\"Source(\" + split + \")\", LOWEST_INSTANT.getMillis());\n     reader.observe(Arrays.asList(split), attrs, observer);\n     return advance();\n   }\n \n   @Override\n   public boolean advance() throws IOException {\n-    for (; ; ) {\n+    for (;;) {\n       try {\n         current = observer.takeBlocking();\n         if (current == null || current.getStamp() >= startStamp && current.getStamp() < endStamp) {\n@@ -137,4 +132,4 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n     }\n     return HIGHEST_INSTANT;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "column": "11",
                    "severity": "error",
                    "message": "WhitespaceAround: 'if' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/three_grams/files-repaired/16/BeamBatchLogReader.java\nindex 7ccb7f0a88b..30a3e7a04a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/violations/16/BeamBatchLogReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/O2-Czech-Republic-proxima-platform/styler/05_predictions/three_grams/files-repaired/16/BeamBatchLogReader.java\n@@ -94,7 +94,7 @@ class BeamBatchLogReader extends BoundedReader<StreamElement> {\n     for (; ; ) {\n       try {\n         current = observer.takeBlocking();\n-        if (current == null || current.getStamp() >= startStamp && current.getStamp() < endStamp) {\n+        if(current == null || current.getStamp() >= startStamp && current.getStamp() < endStamp) {\n           // accept the taken element\n           break;\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}