{
    "project_name": "Angel-ML-angel",
    "violation_id": "578",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/578/IntIntSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/578/IntIntSortedVectorStorage.java\nindex d54db37da58..e9761b79790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/578/IntIntSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/578/IntIntSortedVectorStorage.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n@@ -24,321 +25,321 @@ import java.util.Random;\n \n public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n \n-  private int[] indices;\n-  private int[] values;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private int size;\n-  private int dim;\n-\n-  public IntIntSortedVectorStorage() {\n-    super();\n-  }\n-\n-  public IntIntSortedVectorStorage(int dim, int size, int[] indices, int[] values) {\n-    this.flag = 4;\n-    this.dim = dim;\n-    this.size = size;\n-    this.indices = indices;\n-    this.values = values;\n-  }\n-\n-  public IntIntSortedVectorStorage(int dim, int[] indices, int[] values) {\n-    this(dim, indices.length, indices, values);\n-  }\n-\n-  public IntIntSortedVectorStorage(int dim, int capacity) {\n-    this(dim, 0, new int[capacity], new int[capacity]);\n-  }\n-\n-  public IntIntSortedVectorStorage(int dim) {\n-    this(dim, Math.min(64, Math.max(dim, 0)));\n-  }\n-\n-  @Override\n-  public int get(int idx) {\n-    if (idx < 0 || idx > dim - 1) {\n-      throw new ArrayIndexOutOfBoundsException();\n-    } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n-      return 0;\n-    } else {\n-      int i = Arrays.binarySearch(indices, idx);\n-      return i >= 0 ? values[i] : 0;\n-    }\n-  }\n-\n-  @Override\n-  public void set(int idx, int value) {\n-    if (idx < 0 || idx > dim - 1) {\n-      throw new ArrayIndexOutOfBoundsException();\n-    }\n-\n-    // 1. find the insert point\n-    int point;\n-    if (size == 0 || idx < indices[0]) {\n-      point = 0;\n-    } else if (idx > indices[size - 1]) {\n-      point = size;\n-    } else {\n-      point = Arrays.binarySearch(indices, idx);\n-      if (point >= 0) {\n-        values[point] = value;\n-        return;\n-      } else {\n-        point = -(point + 1);\n-      }\n-    }\n-\n-    // 2. check the capacity and insert\n-    if (size == indices.length) {\n-      int[] newIdxs = new int[(int) (indices.length * 1.5)];\n-      int[] newValues = new int[(int) (indices.length * 1.5)];\n-      if (point == 0) {\n-        System.arraycopy(indices, 0, newIdxs, 1, size);\n-        System.arraycopy(values, 0, newValues, 1, size);\n-      } else if (point == size) {\n-        System.arraycopy(indices, 0, newIdxs, 0, size);\n-        System.arraycopy(values, 0, newValues, 0, size);\n-      } else {\n-        System.arraycopy(indices, 0, newIdxs, 0, point);\n-        System.arraycopy(values, 0, newValues, 0, point);\n-        System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n-        System.arraycopy(values, point, newValues, point + 1, size - point);\n-      }\n-      newIdxs[point] = idx;\n-      newValues[point] = value;\n-      indices = newIdxs;\n-      values = newValues;\n-    } else {\n-      if (point != size) {\n-        System.arraycopy(indices, point, indices, point + 1, size - point);\n-        System.arraycopy(values, point, values, point + 1, size - point);\n-      }\n-      indices[point] = idx;\n-      values[point] = value;\n-    }\n-\n-    // 3. increase size\n-    size++;\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage clone() {\n-    return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage copy() {\n-    return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeDense() {\n-    int[] oneLikeValues = new int[dim];\n-    for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntDenseVectorStorage(oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeSparse() {\n-    int[] oneLikeValues = new int[size];\n-    for (int i = 0; i < size; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeSorted() {\n-    int[] oneLikeValues = new int[size];\n-    for (int i = 0; i < size; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeDense(int dim) {\n-    int[] oneLikeValues = new int[dim];\n-    for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntDenseVectorStorage(oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeSparse(int dim, int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeSorted(int dim, int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeSparse(int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage oneLikeSorted(int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptyDense() {\n-    return new IntIntDenseVectorStorage(dim);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptySparse() {\n-    return new IntIntSparseVectorStorage(dim, indices.length);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptySorted() {\n-    return new IntIntSortedVectorStorage(dim, indices.length);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptyDense(int length) {\n-    return new IntIntDenseVectorStorage(length);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptySparse(int dim, int capacity) {\n-    return new IntIntSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptySorted(int dim, int capacity) {\n-    return new IntIntSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptySparse(int capacity) {\n-    return new IntIntSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage emptySorted(int capacity) {\n-    return new IntIntSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public int[] getIndices() {\n-    return indices;\n-  }\n-\n-  @Override\n-  public int size() {\n-    return size;\n-  }\n-\n-  @Override\n-  public boolean hasKey(int key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n-  }\n-\n-  @Override\n-  public RowType getType() {\n-    return RowType.T_INT_SPARSE;\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return flag == 1;\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return flag == 2;\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return flag == 4;\n-  }\n-\n-  @Override\n-  public void clear() {\n-    Arrays.parallelSetAll(indices, (int value) -> 0);\n-    Arrays.parallelSetAll(values, (int value) -> 0);\n-  }\n-\n-  @Override\n-  public int[] getValues() {\n-    return values;\n-  }\n+    private int[] indices;\n+    private int[] values;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private int size;\n+    private int dim;\n+\n+    public IntIntSortedVectorStorage() {\n+        super();\n+    }\n+\n+    public IntIntSortedVectorStorage(int dim, int size, int[] indices, int[] values) {\n+        this.flag = 4;\n+        this.dim = dim;\n+        this.size = size;\n+        this.indices = indices;\n+        this.values = values;\n+    }\n+\n+    public IntIntSortedVectorStorage(int dim, int[] indices, int[] values) {\n+        this(dim, indices.length, indices, values);\n+    }\n+\n+    public IntIntSortedVectorStorage(int dim, int capacity) {\n+        this(dim, 0, new int[capacity], new int[capacity]);\n+    }\n+\n+    public IntIntSortedVectorStorage(int dim) {\n+        this(dim, Math.min(64, Math.max(dim, 0)));\n+    }\n+\n+    @Override\n+    public int get(int idx) {\n+        if (idx < 0 || idx > dim - 1) {\n+            throw new ArrayIndexOutOfBoundsException();\n+        } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n+            return 0;\n+        } else {\n+            int i = Arrays.binarySearch(indices, idx);\n+            return i >= 0 ? values[i] : 0;\n+        }\n+    }\n+\n+    @Override\n+    public void set(int idx, int value) {\n+        if (idx < 0 || idx > dim - 1) {\n+            throw new ArrayIndexOutOfBoundsException();\n+        }\n+\n+        // 1. find the insert point\n+        int point;\n+        if (size == 0 || idx < indices[0]) {\n+            point = 0;\n+        } else if (idx > indices[size - 1]) {\n+            point = size;\n+        } else {\n+            point = Arrays.binarySearch(indices, idx);\n+            if (point >= 0) {\n+                values[point] = value;\n+                return;\n+            } else {\n+                point = -(point + 1);\n+            }\n+        }\n+\n+        // 2. check the capacity and insert\n+        if (size == indices.length) {\n+            int[] newIdxs = new int[(int) (indices.length * 1.5)];\n+            int[] newValues = new int[(int) (indices.length * 1.5)];\n+            if (point == 0) {\n+                System.arraycopy(indices, 0, newIdxs, 1, size);\n+                System.arraycopy(values, 0, newValues, 1, size);\n+            } else if (point == size) {\n+                System.arraycopy(indices, 0, newIdxs, 0, size);\n+                System.arraycopy(values, 0, newValues, 0, size);\n+            } else {\n+                System.arraycopy(indices, 0, newIdxs, 0, point);\n+                System.arraycopy(values, 0, newValues, 0, point);\n+                System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n+                System.arraycopy(values, point, newValues, point + 1, size - point);\n+            }\n+            newIdxs[point] = idx;\n+            newValues[point] = value;\n+            indices = newIdxs;\n+            values = newValues;\n+        } else {\n+            if (point != size) {\n+                System.arraycopy(indices, point, indices, point + 1, size - point);\n+                System.arraycopy(values, point, values, point + 1, size - point);\n+            }\n+            indices[point] = idx;\n+            values[point] = value;\n+        }\n+\n+        // 3. increase size\n+        size++;\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage clone() {\n+        return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n+                ArrayCopy.copy(values));\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage copy() {\n+        return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n+                ArrayCopy.copy(values));\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeDense() {\n+        int[] oneLikeValues = new int[dim];\n+        for (int i = 0; i < dim; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntDenseVectorStorage(oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeSparse() {\n+        int[] oneLikeValues = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeSorted() {\n+        int[] oneLikeValues = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeDense(int dim) {\n+        int[] oneLikeValues = new int[dim];\n+        for (int i = 0; i < dim; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntDenseVectorStorage(oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeSparse(int dim, int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeSorted(int dim, int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeSparse(int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage oneLikeSorted(int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptyDense() {\n+        return new IntIntDenseVectorStorage(dim);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptySparse() {\n+        return new IntIntSparseVectorStorage(dim, indices.length);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptySorted() {\n+        return new IntIntSortedVectorStorage(dim, indices.length);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptyDense(int length) {\n+        return new IntIntDenseVectorStorage(length);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptySparse(int dim, int capacity) {\n+        return new IntIntSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptySorted(int dim, int capacity) {\n+        return new IntIntSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptySparse(int capacity) {\n+        return new IntIntSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage emptySorted(int capacity) {\n+        return new IntIntSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public int[] getIndices() {\n+        return indices;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean hasKey(int key) {\n+        return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n+                && Arrays.binarySearch(indices, key) > 0);\n+    }\n+\n+    @Override\n+    public RowType getType() {\n+        return RowType.T_INT_SPARSE;\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return flag == 1;\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return flag == 2;\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return flag == 4;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        Arrays.parallelSetAll(indices, (int value) -> 0);\n+        Arrays.parallelSetAll(values, (int value) -> 0);\n+    }\n+\n+    @Override\n+    public int[] getValues() {\n+        return values;\n+    }\n }\n",
            "diff_size": 318
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "310",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/578/IntIntSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/578/IntIntSortedVectorStorage.java\nindex d54db37da58..3f370ff98e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/578/IntIntSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/578/IntIntSortedVectorStorage.java\n@@ -307,8 +307,7 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n \n   @Override\n   public boolean hasKey(int key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, key) > 0);\n   }\n \n   @Override\n@@ -341,4 +340,4 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n   public int[] getValues() {\n     return values;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "312",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/578/IntIntSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/578/IntIntSortedVectorStorage.java\nindex d54db37da58..0b4699f236b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/578/IntIntSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/578/IntIntSortedVectorStorage.java\n@@ -59,7 +59,7 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n     if (idx < 0 || idx > dim - 1) {\n       throw new ArrayIndexOutOfBoundsException();\n     } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n-      return 0;\n+             return 0;\n     } else {\n       int i = Arrays.binarySearch(indices, idx);\n       return i >= 0 ? values[i] : 0;\n@@ -73,22 +73,24 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n     }\n \n     // 1. find the insert point\n+\n     int point;\n     if (size == 0 || idx < indices[0]) {\n       point = 0;\n     } else if (idx > indices[size - 1]) {\n-      point = size;\n+             point = size;\n     } else {\n-      point = Arrays.binarySearch(indices, idx);\n-      if (point >= 0) {\n-        values[point] = value;\n-        return;\n-      } else {\n-        point = -(point + 1);\n-      }\n+             point = Arrays.binarySearch(indices, idx);\n+             if (point >= 0) {\n+               values[point] = value;\n+               return;\n+             } else {\n+               point = -(point + 1);\n+             }\n     }\n \n     // 2. check the capacity and insert\n+\n     if (size == indices.length) {\n       int[] newIdxs = new int[(int) (indices.length * 1.5)];\n       int[] newValues = new int[(int) (indices.length * 1.5)];\n@@ -96,13 +98,13 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n         System.arraycopy(indices, 0, newIdxs, 1, size);\n         System.arraycopy(values, 0, newValues, 1, size);\n       } else if (point == size) {\n-        System.arraycopy(indices, 0, newIdxs, 0, size);\n-        System.arraycopy(values, 0, newValues, 0, size);\n+               System.arraycopy(indices, 0, newIdxs, 0, size);\n+               System.arraycopy(values, 0, newValues, 0, size);\n       } else {\n-        System.arraycopy(indices, 0, newIdxs, 0, point);\n-        System.arraycopy(values, 0, newValues, 0, point);\n-        System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n-        System.arraycopy(values, point, newValues, point + 1, size - point);\n+               System.arraycopy(indices, 0, newIdxs, 0, point);\n+               System.arraycopy(values, 0, newValues, 0, point);\n+               System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n+               System.arraycopy(values, point, newValues, point + 1, size - point);\n       }\n       newIdxs[point] = idx;\n       newValues[point] = value;\n@@ -123,14 +125,12 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n \n   @Override\n   public IntIntVectorStorage clone() {\n-    return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n   @Override\n   public IntIntVectorStorage copy() {\n-    return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new IntIntSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n   @Override\n@@ -184,6 +184,7 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -227,6 +228,7 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -307,8 +309,7 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n \n   @Override\n   public boolean hasKey(int key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, key) > 0);\n   }\n \n   @Override\n@@ -333,12 +334,13 @@ public class IntIntSortedVectorStorage implements IntIntVectorStorage {\n \n   @Override\n   public void clear() {\n-    Arrays.parallelSetAll(indices, (int value) -> 0);\n-    Arrays.parallelSetAll(values, (int value) -> 0);\n+    Arrays.parallelSetAll(indices, (int value)-> 0);\n+    Arrays.parallelSetAll(values, (int value)-> 0);\n   }\n \n   @Override\n   public int[] getValues() {\n     return values;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}