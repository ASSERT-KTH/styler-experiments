{
    "project_name": "griddynamics-jagger",
    "violation_id": "5",
    "information": {
        "violations": [
            {
                "line": "227",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 160).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                            // and it breaks statistics JFG-729\n                            if (++addedStatistics > 1)\n                                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles);\n                            currentCount = 0;\n                            extendedInterval = 0;\n                            windowStatisticsCalc.reset();",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/griddynamics-jagger/styler/05_predictions/final/files-repaired/5/DurationLogProcessor.java\nindex 8c6378afb4c..b62b11826b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/griddynamics-jagger/styler/05_predictions/final/files-repaired/5/DurationLogProcessor.java\n@@ -224,7 +224,8 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n                             // first point is removed because it's value very high due to the first invocation of invoker taking longer than the other\n                             // and it breaks statistics JFG-729\n                             if (++addedStatistics > 1)\n-                                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles);\n+                    addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles\n+                                );\n                             currentCount = 0;\n                             extendedInterval = 0;\n                             windowStatisticsCalc.reset();\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/5/DurationLogProcessor.java\nindex 8c6378afb4c..0ca0b24f50e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/5/DurationLogProcessor.java\n@@ -1,22 +1,22 @@\n /*\n-* Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved\n-* http://www.griddynamics.com\n-*\n-* This library is free software; you can redistribute it and/or modify it under the terms of\n-* the Apache License; either\n-* version 2.0 of the License, or any later version.\n-*\n-* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n-* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n-* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n-* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n-* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n-* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n-* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n-* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n-* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-*/\n+ * Copyright (c) 2010-2012 Grid Dynamics Consulting Services, Inc, All Rights Reserved\n+ * http://www.griddynamics.com\n+ *\n+ * This library is free software; you can redistribute it and/or modify it under the terms of\n+ * the Apache License; either\n+ * version 2.0 of the License, or any later version.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE\n+ * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n+ * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n+ * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n+ * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n \n package com.griddynamics.jagger.engine.e1.aggregator.workload;\n \n@@ -65,7 +65,7 @@ import static com.griddynamics.jagger.util.StandardMetricsNamesUtil.THROUGHPUT_T\n \n /**\n  * @author Alexey Kiselyov\n- *         Date: 20.07.11\n+ * Date: 20.07.11\n  */\n public class DurationLogProcessor extends LogProcessor implements DistributionListener {\n \n@@ -223,8 +223,10 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n                             long currentTime = time - extendedInterval / 2;\n                             // first point is removed because it's value very high due to the first invocation of invoker taking longer than the other\n                             // and it breaks statistics JFG-729\n-                            if (++addedStatistics > 1)\n-                                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles);\n+                            if (++addedStatistics > 1) {\n+                                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc,\n+                                        percentiles);\n+                            }\n                             currentCount = 0;\n                             extendedInterval = 0;\n                             windowStatisticsCalc.reset();\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "227",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "276",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 304).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/5/DurationLogProcessor.java\nindex 8c6378afb4c..8526af67027 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/5/DurationLogProcessor.java\n@@ -273,11 +273,8 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n             return percentileMap;\n         }\n \n-        private void addStatistics(long time, long currentTime, Double throughput, StatisticsCalculator windowStatisticCalculator,\n-                                   MetricDescriptionEntity throughputDesc, MetricDescriptionEntity latencyDesc,\n-                                   MetricDescriptionEntity latencyStdDevDesc, Map<Double, MetricDescriptionEntity> percentileMap) {\n-\n-            statistics.add(new MetricPointEntity(currentTime, throughput, throughputDesc));\n+        private void addStatistics(long time, long currentTime, Double throughput, StatisticsCalculator windowStatisticCalculator, MetricDescriptionEntity throughputDesc, MetricDescriptionEntity latencyDesc, MetricDescriptionEntity latencyStdDevDesc, Map<Double, MetricDescriptionEntity> percentileMap) {\n+    statistics.add(new MetricPointEntity(currentTime, throughput, throughputDesc));\n             statistics.add(new MetricPointEntity(currentTime, windowStatisticCalculator.getMean() / 1000, latencyDesc));\n             statistics.add(new MetricPointEntity(currentTime, windowStatisticCalculator.getStandardDeviation() / 1000, latencyStdDevDesc));\n             for (Double percentileKey : getTimeWindowPercentilesKeys()) {\n@@ -286,4 +283,4 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "141",
                    "severity": "warning",
                    "message": "'\"aggregated.dat\"' has incorrect indentation level 12, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "259",
                    "severity": "warning",
                    "message": "'time' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "260",
                    "severity": "warning",
                    "message": "'currentTime' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "261",
                    "severity": "warning",
                    "message": "'throughput' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "262",
                    "severity": "warning",
                    "message": "'windowStatisticsCalc' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "263",
                    "severity": "warning",
                    "message": "'throughputDesc' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "264",
                    "severity": "warning",
                    "message": "'latencyDesc' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "265",
                    "severity": "warning",
                    "message": "'latencyStdDevDesc' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "266",
                    "severity": "warning",
                    "message": "'percentiles' has incorrect indentation level 20, expected level should be 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "296",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 304).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/5/DurationLogProcessor.java\nindex 8c6378afb4c..aed38219c56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/5/DurationLogProcessor.java\n@@ -45,7 +45,6 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Required;\n import org.springframework.orm.hibernate3.HibernateCallback;\n-\n import java.io.File;\n import java.io.IOException;\n import java.sql.SQLException;\n@@ -67,18 +66,16 @@ import static com.griddynamics.jagger.util.StandardMetricsNamesUtil.THROUGHPUT_T\n  * @author Alexey Kiselyov\n  *         Date: 20.07.11\n  */\n+\n public class DurationLogProcessor extends LogProcessor implements DistributionListener {\n \n     private static final Logger log = LoggerFactory.getLogger(Master.class);\n-\n     private LogAggregator logAggregator;\n     private LogReader logReader;\n     private SessionIdProvider sessionIdProvider;\n     private IntervalSizeProvider intervalSizeProvider;\n-\n     private List<Double> timeWindowPercentilesKeys;\n     private List<Double> globalPercentilesKeys;\n-\n     private KeyValueStorage keyValueStorage;\n \n     @Required\n@@ -108,6 +105,7 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n     @Override\n     public void onDistributionStarted(String sessionId, String taskId, Task task, Collection<NodeId> capableNodes) {\n         // do nothing\n+\n     }\n \n     public List<Double> getTimeWindowPercentilesKeys() {\n@@ -138,14 +136,15 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n     private void processLog(String sessionId, String taskId) {\n         try {\n             String dir = sessionId + File.separatorChar + taskId + File.separatorChar + DurationCollector.DURATION_MARKER;\n-            String file = dir + File.separatorChar + \"aggregated.dat\";\n-            AggregationInfo aggregationInfo = logAggregator.chronology(dir, file);\n \n+            String file = dir + File.separatorChar +\n+            \"aggregated.dat\";\n+\n+            AggregationInfo aggregationInfo = logAggregator.chronology(dir, file);\n             if (aggregationInfo.getCount() == 0) {\n                 //no data collected\n                 return;\n             }\n-\n             int intervalSize = intervalSizeProvider.getIntervalSize(aggregationInfo.getMinTime(), aggregationInfo.getMaxTime());\n             if (intervalSize < 1) {\n                 intervalSize = 1;\n@@ -159,7 +158,6 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n \n             StatisticsGenerator statisticsGenerator = new StatisticsGenerator(file, aggregationInfo, intervalSize, taskData).generate();\n             final Collection<MetricPointEntity> statistics = statisticsGenerator.getStatistics();\n-\n             log.info(\"BEGIN: Save to data base \" + dir);\n             getHibernateTemplate().execute(new HibernateCallback<Void>() {\n                 @Override\n@@ -172,13 +170,13 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n                 }\n             });\n             log.info(\"END: Save to data base \" + dir);\n-\n         } catch (Exception e) {\n             log.error(\"Error during log processing\", e);\n         }\n     }\n \n     private class StatisticsGenerator {\n+\n         private String path;\n         private AggregationInfo aggregationInfo;\n         private int intervalSize;\n@@ -199,10 +197,15 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n \n         public StatisticsGenerator generate() throws IOException {\n             StatisticsCalculator windowStatisticsCalc = new StatisticsCalculator();\n+\n             StatisticsCalculator globalStatisticsCalc = new StatisticsCalculator();\n+\n             MetricDescriptionEntity throughputDesc = persistMetricDescription(THROUGHPUT_ID, THROUGHPUT_TPS, taskData);\n+\n             MetricDescriptionEntity latencyDesc = persistMetricDescription(LATENCY_ID, LATENCY_SEC, taskData);\n+\n             MetricDescriptionEntity latencyStdDevDesc = persistMetricDescription(LATENCY_STD_DEV_AGG_ID, LATENCY_STD_DEV_SEC, taskData);\n+\n             Map<Double, MetricDescriptionEntity> percentiles = initPercentileMap();\n \n             // starting point is aggregationInfo.getMinTime()\n@@ -224,7 +227,15 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n                             // first point is removed because it's value very high due to the first invocation of invoker taking longer than the other\n                             // and it breaks statistics JFG-729\n                             if (++addedStatistics > 1)\n-                                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles);\n+                                addStatistics(\n+                                    time,\n+                                    currentTime,\n+                                    throughput,\n+                                    windowStatisticsCalc,\n+                                    throughputDesc,\n+                                    latencyDesc,\n+                                    latencyStdDevDesc,\n+                                    percentiles);\n                             currentCount = 0;\n                             extendedInterval = 0;\n                             windowStatisticsCalc.reset();\n@@ -244,7 +255,15 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n             if (currentCount > 0 && ++addedStatistics > 1) {\n                 double throughput = (double) currentCount * 1000 / intervalSize;\n                 long currentTime = time - extendedInterval / 2;\n-                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles);\n+                addStatistics(\n+                    time,\n+                    currentTime,\n+                    throughput,\n+                    windowStatisticsCalc,\n+                    throughputDesc,\n+                    latencyDesc,\n+                    latencyStdDevDesc,\n+                    percentiles);\n             }\n \n             for (double percentileKey : getGlobalPercentilesKeys()) {\n@@ -255,11 +274,11 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n             persistAggregatedMetricValue(Math.rint(globalStatisticsCalc.getStandardDeviation()) / 1000D, latencyStdDevDesc);\n \n             Long startTime = aggregationInfo.getMinTime();\n+\n             Long endTime = aggregationInfo.getMaxTime();\n             double duration = (double) (endTime - startTime) / 1000;\n             double totalThroughput = Math.rint(totalCount / duration * 100) / 100;\n             persistAggregatedMetricValue(Math.rint(totalThroughput * 100) / 100, throughputDesc);\n-\n             return this;\n         }\n \n@@ -267,16 +286,14 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n             Map<Double, MetricDescriptionEntity> percentileMap = new HashMap<>(getTimeWindowPercentilesKeys().size());\n             for (Double percentileKey : getTimeWindowPercentilesKeys()) {\n                 String metricId = StandardMetricsNamesUtil.getLatencyMetricId(percentileKey);\n+\n                 String metricDisplayName = StandardMetricsNamesUtil.getLatencyMetricDisplayName(percentileKey);\n                 percentileMap.put(percentileKey, persistMetricDescription(metricId, metricDisplayName, taskData));\n             }\n             return percentileMap;\n         }\n \n-        private void addStatistics(long time, long currentTime, Double throughput, StatisticsCalculator windowStatisticCalculator,\n-                                   MetricDescriptionEntity throughputDesc, MetricDescriptionEntity latencyDesc,\n-                                   MetricDescriptionEntity latencyStdDevDesc, Map<Double, MetricDescriptionEntity> percentileMap) {\n-\n+        private void addStatistics(long time, long currentTime, Double throughput, StatisticsCalculator windowStatisticCalculator, MetricDescriptionEntity throughputDesc, MetricDescriptionEntity latencyDesc, MetricDescriptionEntity latencyStdDevDesc, Map<Double, MetricDescriptionEntity> percentileMap) {\n             statistics.add(new MetricPointEntity(currentTime, throughput, throughputDesc));\n             statistics.add(new MetricPointEntity(currentTime, windowStatisticCalculator.getMean() / 1000, latencyDesc));\n             statistics.add(new MetricPointEntity(currentTime, windowStatisticCalculator.getStandardDeviation() / 1000, latencyStdDevDesc));\n@@ -286,4 +303,4 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "227",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/random/files-repaired/5/DurationLogProcessor.java\nindex 8c6378afb4c..9acc4ec3626 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/random/files-repaired/5/DurationLogProcessor.java\n@@ -224,7 +224,8 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n                             // first point is removed because it's value very high due to the first invocation of invoker taking longer than the other\n                             // and it breaks statistics JFG-729\n                             if (++addedStatistics > 1)\n-                                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles);\n+                            addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc,percentiles\n+                            ) ;\n                             currentCount = 0;\n                             extendedInterval = 0;\n                             windowStatisticsCalc.reset();\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/5/DurationLogProcessor.java\nindex 8c6378afb4c..b62b11826b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/5/DurationLogProcessor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/5/DurationLogProcessor.java\n@@ -224,7 +224,8 @@ public class DurationLogProcessor extends LogProcessor implements DistributionLi\n                             // first point is removed because it's value very high due to the first invocation of invoker taking longer than the other\n                             // and it breaks statistics JFG-729\n                             if (++addedStatistics > 1)\n-                                addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles);\n+                    addStatistics(time, currentTime, throughput, windowStatisticsCalc, throughputDesc, latencyDesc, latencyStdDevDesc, percentiles\n+                                );\n                             currentCount = 0;\n                             extendedInterval = 0;\n                             windowStatisticsCalc.reset();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}