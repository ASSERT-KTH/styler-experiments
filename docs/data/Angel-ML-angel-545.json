{
    "project_name": "Angel-ML-angel",
    "violation_id": "545",
    "information": {
        "violations": [
            {
                "line": "97",
                "column": "13",
                "severity": "error",
                "message": "'(' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "\n        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\n            (ids), paramId));\n        paramId++;\n        i++;\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/545/IndexGetParam.java\nindex bf3d0830846..c7fe5ee7bff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/545/IndexGetParam.java\n@@ -93,8 +93,8 @@ public class IndexGetParam extends GetParam {\n         }\r\n \r\n \r\n-        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\r\n-            (ids), paramId));\r\n+        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray(\r\n+        ids), paramId));\r\n         paramId++;\r\n         i++;\r\n \r\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "99",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/545/IndexGetParam.java\nindex bf3d0830846..9f3958f7468 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/545/IndexGetParam.java\n@@ -31,83 +31,85 @@ import java.util.List;\n  * The GetParam of IndexGetFunc\r\n  */\r\n public class IndexGetParam extends GetParam {\r\n-  private int matId;\r\n-  private int rowId;\r\n-  private int[] indexs;\r\n-\r\n-  /**\r\n-   * @param matId matrixID\r\n-   * @param rowId rowID\r\n-   * @param indexs specified index\r\n-   */\r\n-  public IndexGetParam(int matId, int rowId, int[] indexs) {\r\n-    super(matId);\r\n-    this.rowId = rowId;\r\n-    this.indexs = indexs;\r\n-  }\r\n-\r\n-  /**\r\n-   * Find the used partition of the specifiex index array of this matrix this row\r\n-   * @return partition get param of specified index\r\n-   */\r\n-  @Override\r\n-  public List<PartitionGetParam> split() {\r\n-    List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter()\r\n-        .getPartitionKeyList(matrixId, rowId);\r\n-\r\n-    return usedParts(parts, indexs);\r\n-  }\r\n-\r\n-  /**\r\n-   * Find the used partition of the specifiex index array of this matrix this row\r\n-   * @param parts all partitions of this matrix and this row\r\n-   * @param indexs specified index array\r\n-   * @return the used partition of the specifiex index array of this matrix this row\r\n-   */\r\n-  public List<PartitionGetParam> usedParts(List<PartitionKey> parts, int[] indexs) {\r\n-    class AscAgeComparator implements Comparator<PartitionKey> {\r\n-\r\n-      @Override\r\n-      public int compare(PartitionKey p1, PartitionKey p2) {\r\n-        return p1.getPartitionId() - p2.getPartitionId();\r\n-      }\r\n+    private int matId;\r\n+    private int rowId;\r\n+    private int[] indexs;\r\n+\r\n+    /**\r\n+     * @param matId  matrixID\r\n+     * @param rowId  rowID\r\n+     * @param indexs specified index\r\n+     */\r\n+    public IndexGetParam(int matId, int rowId, int[] indexs) {\r\n+        super(matId);\r\n+        this.rowId = rowId;\r\n+        this.indexs = indexs;\r\n     }\r\n \r\n-    // Sort the parts by partitionId\r\n-    parts.sort(new AscAgeComparator());\r\n+    /**\r\n+     * Find the used partition of the specifiex index array of this matrix this row\r\n+     *\r\n+     * @return partition get param of specified index\r\n+     */\r\n+    @Override\r\n+    public List<PartitionGetParam> split() {\r\n+        List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter()\r\n+                .getPartitionKeyList(matrixId, rowId);\r\n+\r\n+        return usedParts(parts, indexs);\r\n+    }\r\n \r\n-    List<PartitionGetParam> usedParts = new ArrayList<PartitionGetParam>();\r\n-    int paramId = 0;\r\n-    int j = 0;\r\n-    for (int i = 0; i < parts.size() &&  j< indexs.length; ) {\r\n-      long startCol = parts.get(i).getStartCol();\r\n-      long endCol = parts.get(i).getEndCol();\r\n+    /**\r\n+     * Find the used partition of the specifiex index array of this matrix this row\r\n+     *\r\n+     * @param parts  all partitions of this matrix and this row\r\n+     * @param indexs specified index array\r\n+     * @return the used partition of the specifiex index array of this matrix this row\r\n+     */\r\n+    public List<PartitionGetParam> usedParts(List<PartitionKey> parts, int[] indexs) {\r\n+        class AscAgeComparator implements Comparator<PartitionKey> {\r\n+\r\n+            @Override\r\n+            public int compare(PartitionKey p1, PartitionKey p2) {\r\n+                return p1.getPartitionId() - p2.getPartitionId();\r\n+            }\r\n+        }\r\n \r\n-      if ( (long) indexs[j] >= startCol && (long) indexs[j] < endCol) {\r\n-        List<Integer> ids = new ArrayList<>();\r\n+        // Sort the parts by partitionId\r\n+        parts.sort(new AscAgeComparator());\r\n \r\n-        while ((long) indexs[j] < endCol) {\r\n-          ids.add(indexs[j]);\r\n-          j++;\r\n-          if (j == indexs.length) break;\r\n-        }\r\n+        List<PartitionGetParam> usedParts = new ArrayList<PartitionGetParam>();\r\n+        int paramId = 0;\r\n+        int j = 0;\r\n+        for (int i = 0; i < parts.size() && j < indexs.length; ) {\r\n+            long startCol = parts.get(i).getStartCol();\r\n+            long endCol = parts.get(i).getEndCol();\r\n \r\n+            if ((long) indexs[j] >= startCol && (long) indexs[j] < endCol) {\r\n+                List<Integer> ids = new ArrayList<>();\r\n \r\n-        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\r\n-            (ids), paramId));\r\n-        paramId++;\r\n-        i++;\r\n+                while ((long) indexs[j] < endCol) {\r\n+                    ids.add(indexs[j]);\r\n+                    j++;\r\n+                    if (j == indexs.length) break;\r\n+                }\r\n \r\n-      } else {\r\n-        i++;\r\n-      }\r\n \r\n-    }\r\n+                usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\r\n+                        (ids), paramId));\r\n+                paramId++;\r\n+                i++;\r\n \r\n-    return  usedParts;\r\n-  }\r\n+            } else {\r\n+                i++;\r\n+            }\r\n \r\n-  public int getRowId() {\r\n-    return rowId;\r\n-  }\r\n+        }\r\n+\r\n+        return usedParts;\r\n+    }\r\n+\r\n+    public int getRowId() {\r\n+        return rowId;\r\n+    }\r\n }\r\n",
            "diff_size": 100
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/545/IndexGetParam.java\nindex bf3d0830846..46d400431fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/545/IndexGetParam.java\n@@ -53,9 +53,8 @@ public class IndexGetParam extends GetParam {\n   @Override\r\n   public List<PartitionGetParam> split() {\r\n     List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter()\r\n-        .getPartitionKeyList(matrixId, rowId);\r\n-\r\n-    return usedParts(parts, indexs);\r\n+        .getPartitionKeyList(matrixId, rowId);\n+return usedParts(parts, indexs);\r\n   }\r\n \r\n   /**\r\n@@ -65,9 +64,8 @@ public class IndexGetParam extends GetParam {\n    * @return the used partition of the specifiex index array of this matrix this row\r\n    */\r\n   public List<PartitionGetParam> usedParts(List<PartitionKey> parts, int[] indexs) {\r\n-    class AscAgeComparator implements Comparator<PartitionKey> {\r\n-\r\n-      @Override\r\n+    class AscAgeComparator implements Comparator<PartitionKey> {\n+  @Override\r\n       public int compare(PartitionKey p1, PartitionKey p2) {\r\n         return p1.getPartitionId() - p2.getPartitionId();\r\n       }\r\n@@ -79,35 +77,32 @@ public class IndexGetParam extends GetParam {\n     List<PartitionGetParam> usedParts = new ArrayList<PartitionGetParam>();\r\n     int paramId = 0;\r\n     int j = 0;\r\n-    for (int i = 0; i < parts.size() &&  j< indexs.length; ) {\r\n+    for (int i = 0; i < parts.size() && j< indexs.length;) {\r\n       long startCol = parts.get(i).getStartCol();\r\n       long endCol = parts.get(i).getEndCol();\r\n \r\n-      if ( (long) indexs[j] >= startCol && (long) indexs[j] < endCol) {\r\n+      if ((long) indexs[j] >= startCol && (long) indexs[j] < endCol) {\r\n         List<Integer> ids = new ArrayList<>();\r\n \r\n         while ((long) indexs[j] < endCol) {\r\n           ids.add(indexs[j]);\r\n           j++;\r\n-          if (j == indexs.length) break;\r\n-        }\r\n-\r\n-\r\n-        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\r\n-            (ids), paramId));\r\n-        paramId++;\r\n-        i++;\r\n-\r\n-      } else {\r\n+          if (j == indexs.length)\n+  break;\r\n+        }\n+usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray(ids), paramId));\n+paramId++;\r\n+        i++;\n+  } else {\r\n         i++;\r\n       }\r\n \r\n     }\r\n \r\n-    return  usedParts;\r\n+    return usedParts;\r\n   }\r\n \r\n   public int getRowId() {\r\n     return rowId;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/545/IndexGetParam.java\nindex bf3d0830846..1ee9ddede77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/545/IndexGetParam.java\n@@ -15,47 +15,48 @@\n  *\r\n  */\r\n \r\n-package com.tencent.angel.ml.matrix.psf.get.enhance.indexed;\r\n-\r\n-import com.google.common.primitives.Ints;\r\n-import com.tencent.angel.PartitionKey;\r\n-import com.tencent.angel.ml.matrix.psf.get.base.GetParam;\r\n-import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetParam;\r\n-import com.tencent.angel.psagent.PSAgentContext;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.Comparator;\r\n+package com.tencent.angel.ml.matrix.psf.get.enhance.indexed;\n+\n+import com.google.common.primitives.Ints;\n+import com.tencent.angel.PartitionKey;\n+import com.tencent.angel.ml.matrix.psf.get.base.GetParam;\n+import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetParam;\n+import com.tencent.angel.psagent.PSAgentContext;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\r\n \r\n /**\r\n  * The GetParam of IndexGetFunc\r\n- */\r\n-public class IndexGetParam extends GetParam {\r\n-  private int matId;\r\n-  private int rowId;\r\n+ */\n+\n+public class IndexGetParam extends GetParam {\n+\n+  private int matId;\n+  private int rowId;\n   private int[] indexs;\r\n \r\n   /**\r\n    * @param matId matrixID\r\n    * @param rowId rowID\r\n    * @param indexs specified index\r\n-   */\r\n-  public IndexGetParam(int matId, int rowId, int[] indexs) {\r\n-    super(matId);\r\n-    this.rowId = rowId;\r\n-    this.indexs = indexs;\r\n+   */\n+\n+  public IndexGetParam(int matId, int rowId, int[] indexs) {\n+    super(matId);\n+    this.rowId = rowId;\n+    this.indexs = indexs;\n   }\r\n \r\n   /**\r\n    * Find the used partition of the specifiex index array of this matrix this row\r\n    * @return partition get param of specified index\r\n-   */\r\n-  @Override\r\n-  public List<PartitionGetParam> split() {\r\n-    List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter()\r\n-        .getPartitionKeyList(matrixId, rowId);\r\n-\r\n-    return usedParts(parts, indexs);\r\n+   */\n+\n+  @Override\n+  public List<PartitionGetParam> split() {\n+    List<PartitionKey> parts = PSAgentContext.get().getMatrixPartitionRouter().getPartitionKeyList(matrixId, rowId);\n+    return usedParts(parts, indexs);\n   }\r\n \r\n   /**\r\n@@ -63,51 +64,46 @@ public class IndexGetParam extends GetParam {\n    * @param parts all partitions of this matrix and this row\r\n    * @param indexs specified index array\r\n    * @return the used partition of the specifiex index array of this matrix this row\r\n-   */\r\n-  public List<PartitionGetParam> usedParts(List<PartitionKey> parts, int[] indexs) {\r\n-    class AscAgeComparator implements Comparator<PartitionKey> {\r\n-\r\n-      @Override\r\n-      public int compare(PartitionKey p1, PartitionKey p2) {\r\n-        return p1.getPartitionId() - p2.getPartitionId();\r\n-      }\r\n+   */\n+\n+  public List<PartitionGetParam> usedParts(List<PartitionKey> parts, int[] indexs) {\n+    class AscAgeComparator implements Comparator<PartitionKey> {\n+\n+\n+      @Override\n+      public int compare(PartitionKey p1, PartitionKey p2) {\n+        return p1.getPartitionId() - p2.getPartitionId();\n+      }\n+\n     }\r\n \r\n-    // Sort the parts by partitionId\r\n-    parts.sort(new AscAgeComparator());\r\n-\r\n-    List<PartitionGetParam> usedParts = new ArrayList<PartitionGetParam>();\r\n-    int paramId = 0;\r\n-    int j = 0;\r\n-    for (int i = 0; i < parts.size() &&  j< indexs.length; ) {\r\n-      long startCol = parts.get(i).getStartCol();\r\n-      long endCol = parts.get(i).getEndCol();\r\n-\r\n-      if ( (long) indexs[j] >= startCol && (long) indexs[j] < endCol) {\r\n-        List<Integer> ids = new ArrayList<>();\r\n-\r\n-        while ((long) indexs[j] < endCol) {\r\n-          ids.add(indexs[j]);\r\n-          j++;\r\n-          if (j == indexs.length) break;\r\n-        }\r\n-\r\n-\r\n-        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\r\n-            (ids), paramId));\r\n-        paramId++;\r\n-        i++;\r\n-\r\n-      } else {\r\n-        i++;\r\n-      }\r\n-\r\n-    }\r\n-\r\n-    return  usedParts;\r\n-  }\r\n-\r\n-  public int getRowId() {\r\n-    return rowId;\r\n-  }\r\n-}\r\n+    // Sort the parts by partitionId\n+    parts.sort(new AscAgeComparator());\n+    List<PartitionGetParam> usedParts = new ArrayList<PartitionGetParam>();\n+    int paramId = 0;\n+    int j = 0;\n+    for (int i = 0; i < parts.size() && j < indexs.length;) {\n+      long startCol = parts.get(i).getStartCol();\n+      long endCol = parts.get(i).getEndCol();\n+      if ((long) indexs[j] >= startCol && (long) indexs[j] < endCol) {\n+        List<Integer> ids = new ArrayList<>();\n+        while ((long) indexs[j] < endCol) {\n+          ids.add(indexs[j]);\n+          j++;\n+          if (j == indexs.length) break;\n+        }\n+        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray(ids), paramId));\n+        paramId++;\n+        i++;\n+      } else {\n+        i++;\n+      }\n+    }\n+    return usedParts;\n+  }\n+\n+  public int getRowId() {\n+    return rowId;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 78
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/545/IndexGetParam.java\nindex bf3d0830846..c7fe5ee7bff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/545/IndexGetParam.java\n@@ -93,8 +93,8 @@ public class IndexGetParam extends GetParam {\n         }\r\n \r\n \r\n-        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\r\n-            (ids), paramId));\r\n+        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray(\r\n+        ids), paramId));\r\n         paramId++;\r\n         i++;\r\n \r\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/545/IndexGetParam.java\nindex bf3d0830846..a8543b72560 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/545/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/545/IndexGetParam.java\n@@ -93,8 +93,8 @@ public class IndexGetParam extends GetParam {\n         }\r\n \r\n \r\n-        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray\r\n-            (ids), paramId));\r\n+        usedParts.add(new IndexPartGetParam(matrixId, rowId, parts.get(i), Ints.toArray(\r\n+      ids), paramId));\r\n         paramId++;\r\n         i++;\r\n \r\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ]
}