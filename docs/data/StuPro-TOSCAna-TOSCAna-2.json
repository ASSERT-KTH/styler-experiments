{
    "project_name": "StuPro-TOSCAna-TOSCAna",
    "violation_id": "2",
    "information": {
        "violations": [
            {
                "line": "36",
                "column": "30",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    public LogImpl(File logFile) {\n        persistentAppender = new PersistentAppender(logFile);\n        if (logFile.exists()){\n            readLogFromFile(logFile);\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/StuPro-TOSCAna-TOSCAna/styler/05_predictions/final/files-repaired/2/LogImpl.java\nindex aba022add5d..16ba840877c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/StuPro-TOSCAna-TOSCAna/styler/05_predictions/final/files-repaired/2/LogImpl.java\n@@ -33,7 +33,7 @@ public class LogImpl implements Log {\n      */\n     public LogImpl(File logFile) {\n         persistentAppender = new PersistentAppender(logFile);\n-        if (logFile.exists()){\n+        if (logFile.exists()) {\n             readLogFromFile(logFile);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/checkstyle_idea/2/LogImpl.java\nindex aba022add5d..ccac7ec53f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/checkstyle_idea/2/LogImpl.java\n@@ -16,24 +16,27 @@ import ch.qos.logback.classic.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- The logs of a specific transformation.\n+ * The logs of a specific transformation.\n  */\n public class LogImpl implements Log {\n \n-    private final static org.slf4j.Logger exceptionHandlingLogger = LoggerFactory.getLogger(LogImpl.class);\n+    private final static org.slf4j.Logger exceptionHandlingLogger =\n+        LoggerFactory.getLogger(LogImpl.class);\n \n     private final List<LogEntry> logEntries = Collections.synchronizedList(new LinkedList<>());\n+\n     private final AtomicLong index = new AtomicLong(0);\n \n     private final MemoryAppender memoryAppender = new MemoryAppender(this);\n+\n     private final PersistentAppender persistentAppender;\n \n     /**\n-     @param logFile the logFile to which the Logger will write to\n+     * @param logFile the logFile to which the Logger will write to\n      */\n     public LogImpl(File logFile) {\n         persistentAppender = new PersistentAppender(logFile);\n-        if (logFile.exists()){\n+        if (logFile.exists()) {\n             readLogFromFile(logFile);\n         }\n     }\n@@ -48,7 +51,8 @@ public class LogImpl implements Log {\n                     addLogEntry(entry);\n                     predecessor = entry;\n                 } catch (LogParserException e) {\n-                    exceptionHandlingLogger.error(\"Failed to parse log line from file '{}'\", file, e);\n+                    exceptionHandlingLogger.error(\"Failed to parse log line from file '{}'\", file,\n+                        e);\n                 }\n             }\n         } catch (FileNotFoundException e) {\n@@ -69,7 +73,8 @@ public class LogImpl implements Log {\n \n     private List<LogEntry> getLogEntries(int first, int last, boolean checkUpperBound) {\n         if (0 > first || (last < first && checkUpperBound)) {\n-            throw new IllegalArgumentException(\"Given indices are not within the bound 0 <= first <= last\");\n+            throw new IllegalArgumentException(\n+                \"Given indices are not within the bound 0 <= first <= last\");\n         } else if (first >= logEntries.size()) {\n             return Collections.unmodifiableList(new ArrayList<>());\n         }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/naturalize/2/LogImpl.java\nindex aba022add5d..dbc98e8403f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/naturalize/2/LogImpl.java\n@@ -33,7 +33,7 @@ public class LogImpl implements Log {\n      */\n     public LogImpl(File logFile) {\n         persistentAppender = new PersistentAppender(logFile);\n-        if (logFile.exists()){\n+        if (logFile.exists()) {\n             readLogFromFile(logFile);\n         }\n     }\n@@ -103,4 +103,4 @@ public class LogImpl implements Log {\n         memoryAppender.stop();\n         persistentAppender.stop();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/codebuff/2/LogImpl.java\nindex aba022add5d..c5e8cc6acc3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/codebuff/2/LogImpl.java\n@@ -10,7 +10,6 @@ import java.util.LinkedList;\n import java.util.List;\n import java.util.Scanner;\n import java.util.concurrent.atomic.AtomicLong;\n-\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import org.slf4j.LoggerFactory;\n@@ -18,22 +17,22 @@ import org.slf4j.LoggerFactory;\n /**\n  The logs of a specific transformation.\n  */\n+\n public class LogImpl implements Log {\n \n     private final static org.slf4j.Logger exceptionHandlingLogger = LoggerFactory.getLogger(LogImpl.class);\n-\n     private final List<LogEntry> logEntries = Collections.synchronizedList(new LinkedList<>());\n     private final AtomicLong index = new AtomicLong(0);\n-\n     private final MemoryAppender memoryAppender = new MemoryAppender(this);\n     private final PersistentAppender persistentAppender;\n \n     /**\n      @param logFile the logFile to which the Logger will write to\n      */\n+\n     public LogImpl(File logFile) {\n         persistentAppender = new PersistentAppender(logFile);\n-        if (logFile.exists()){\n+        if (logFile.exists()) {\n             readLogFromFile(logFile);\n         }\n     }\n@@ -43,6 +42,7 @@ public class LogImpl implements Log {\n             LogEntry predecessor = null;\n             while (scanner.hasNextLine()) {\n                 String line = scanner.nextLine();\n+\n                 try {\n                     LogEntry entry = new LogEntry(line, predecessor);\n                     addLogEntry(entry);\n@@ -53,6 +53,7 @@ public class LogImpl implements Log {\n             }\n         } catch (FileNotFoundException e) {\n             // noop\n+\n         }\n     }\n \n@@ -84,7 +85,6 @@ public class LogImpl implements Log {\n     @Override\n     public Logger getLogger(String context) {\n         Logger logger = (Logger) LoggerFactory.getLogger(context);\n-\n         logger.addAppender(memoryAppender);\n         logger.addAppender(persistentAppender);\n         logger.setLevel(Level.DEBUG);\n@@ -103,4 +103,4 @@ public class LogImpl implements Log {\n         memoryAppender.stop();\n         persistentAppender.stop();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/styler/05_predictions/random/files-repaired/2/LogImpl.java\nindex aba022add5d..16ba840877c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/styler/05_predictions/random/files-repaired/2/LogImpl.java\n@@ -33,7 +33,7 @@ public class LogImpl implements Log {\n      */\n     public LogImpl(File logFile) {\n         persistentAppender = new PersistentAppender(logFile);\n-        if (logFile.exists()){\n+        if (logFile.exists()) {\n             readLogFromFile(logFile);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/styler/05_predictions/three_grams/files-repaired/2/LogImpl.java\nindex aba022add5d..16ba840877c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/violations/2/LogImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/StuPro-TOSCAna-TOSCAna/styler/05_predictions/three_grams/files-repaired/2/LogImpl.java\n@@ -33,7 +33,7 @@ public class LogImpl implements Log {\n      */\n     public LogImpl(File logFile) {\n         persistentAppender = new PersistentAppender(logFile);\n-        if (logFile.exists()){\n+        if (logFile.exists()) {\n             readLogFromFile(logFile);\n         }\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}