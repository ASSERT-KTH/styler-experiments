{
    "project_name": "Angel-ML-angel",
    "violation_id": "947",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/947/TMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/947/TMatrix.java\nindex 54e26cb746d..9ef12513cdc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/947/TMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/947/TMatrix.java\n@@ -21,100 +21,100 @@ package com.tencent.angel.ml.math;\n  * The base matrix,represented a multidimensional values.\n  */\n public abstract class TMatrix extends TUpdate {\n-  /**\n-   * The Matrix id.\n-   */\n-  protected int matrixId;\n-  /**\n-   * The Row.\n-   */\n-  protected int row;\n-  /**\n-   * The Col.\n-   */\n-  protected int col;\n+    /**\n+     * The Matrix id.\n+     */\n+    protected int matrixId;\n+    /**\n+     * The Row.\n+     */\n+    protected int row;\n+    /**\n+     * The Col.\n+     */\n+    protected int col;\n \n-  /**\n-   * Instantiates a new matrix.\n-   */\n-  public TMatrix() {\n-    this.matrixId = -1;\n-    this.row = -1;\n-    this.col = -1;\n-  }\n+    /**\n+     * Instantiates a new matrix.\n+     */\n+    public TMatrix() {\n+        this.matrixId = -1;\n+        this.row = -1;\n+        this.col = -1;\n+    }\n \n-  /**\n-   * Instantiates a new matrix.\n-   *\n-   * @param row the row\n-   * @param col the col\n-   */\n-  public TMatrix(int row, int col) {\n-    this.matrixId = -1;\n-    this.row = row;\n-    this.col = col;\n-  }\n+    /**\n+     * Instantiates a new matrix.\n+     *\n+     * @param row the row\n+     * @param col the col\n+     */\n+    public TMatrix(int row, int col) {\n+        this.matrixId = -1;\n+        this.row = row;\n+        this.col = col;\n+    }\n \n-  @Override\n-  public TMatrix setMatrixId(int matrixId) {\n-    this.matrixId = matrixId;\n-    return this;\n-  }\n+    @Override\n+    public TMatrix setMatrixId(int matrixId) {\n+        this.matrixId = matrixId;\n+        return this;\n+    }\n \n-  /**\n-   * Gets row num.\n-   *\n-   * @return the row num\n-   */\n-  public int getRowNum() {\n-    return row;\n-  }\n+    /**\n+     * Gets row num.\n+     *\n+     * @return the row num\n+     */\n+    public int getRowNum() {\n+        return row;\n+    }\n \n-  /**\n-   * Gets col num.\n-   *\n-   * @return the col num\n-   */\n-  public int getColNum() {\n-    return col;\n-  }\n+    /**\n+     * Gets col num.\n+     *\n+     * @return the col num\n+     */\n+    public int getColNum() {\n+        return col;\n+    }\n \n-  @Override\n-  public int getMatrixId() {\n-    return matrixId;\n-  }\n+    @Override\n+    public int getMatrixId() {\n+        return matrixId;\n+    }\n \n-  /**\n-   * Gets sparsity factor.\n-   *\n-   * @return the sparsity\n-   */\n-  public abstract double sparsity();\n+    /**\n+     * Gets sparsity factor.\n+     *\n+     * @return the sparsity\n+     */\n+    public abstract double sparsity();\n \n-  /**\n-   * Size of matrix,normally <code>rows * columns</code>.\n-   *\n-   * @return the size\n-   */\n-  public abstract int size();\n+    /**\n+     * Size of matrix,normally <code>rows * columns</code>.\n+     *\n+     * @return the size\n+     */\n+    public abstract int size();\n \n-  /**\n-   * Clear.\n-   */\n-  public abstract void clear();\n+    /**\n+     * Clear.\n+     */\n+    public abstract void clear();\n \n-  /**\n-   * Gets non zero num of matrix\n-   *\n-   * @return the result\n-   */\n-  public abstract int nonZeroNum();\n+    /**\n+     * Gets non zero num of matrix\n+     *\n+     * @return the result\n+     */\n+    public abstract int nonZeroNum();\n \n-  /**\n-   * Gets specified vector.\n-   *\n-   * @param rowId the row id\n-   * @return the vector if exists\n-   */\n-  public abstract TVector getTVector(int rowId);\n+    /**\n+     * Gets specified vector.\n+     *\n+     * @param rowId the row id\n+     * @return the vector if exists\n+     */\n+    public abstract TVector getTVector(int rowId);\n }\n",
            "diff_size": 85
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/947/TMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/947/TMatrix.java\nindex 54e26cb746d..054b8f05ba5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/947/TMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/947/TMatrix.java\n@@ -117,4 +117,4 @@ public abstract class TMatrix extends TUpdate {\n    * @return the vector if exists\n    */\n   public abstract TVector getTVector(int rowId);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/947/TMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/947/TMatrix.java\nindex 54e26cb746d..b4b0e165adb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/947/TMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/947/TMatrix.java\n@@ -20,23 +20,30 @@ package com.tencent.angel.ml.math;\n /**\n  * The base matrix,represented a multidimensional values.\n  */\n+\n+\n+\n public abstract class TMatrix extends TUpdate {\n   /**\n    * The Matrix id.\n    */\n+\n   protected int matrixId;\n   /**\n    * The Row.\n    */\n+\n   protected int row;\n   /**\n    * The Col.\n    */\n+\n   protected int col;\n \n   /**\n    * Instantiates a new matrix.\n    */\n+\n   public TMatrix() {\n     this.matrixId = -1;\n     this.row = -1;\n@@ -49,6 +56,7 @@ public abstract class TMatrix extends TUpdate {\n    * @param row the row\n    * @param col the col\n    */\n+\n   public TMatrix(int row, int col) {\n     this.matrixId = -1;\n     this.row = row;\n@@ -66,6 +74,7 @@ public abstract class TMatrix extends TUpdate {\n    *\n    * @return the row num\n    */\n+\n   public int getRowNum() {\n     return row;\n   }\n@@ -75,6 +84,7 @@ public abstract class TMatrix extends TUpdate {\n    *\n    * @return the col num\n    */\n+\n   public int getColNum() {\n     return col;\n   }\n@@ -89,6 +99,7 @@ public abstract class TMatrix extends TUpdate {\n    *\n    * @return the sparsity\n    */\n+\n   public abstract double sparsity();\n \n   /**\n@@ -96,11 +107,13 @@ public abstract class TMatrix extends TUpdate {\n    *\n    * @return the size\n    */\n+\n   public abstract int size();\n \n   /**\n    * Clear.\n    */\n+\n   public abstract void clear();\n \n   /**\n@@ -108,6 +121,7 @@ public abstract class TMatrix extends TUpdate {\n    *\n    * @return the result\n    */\n+\n   public abstract int nonZeroNum();\n \n   /**\n@@ -116,5 +130,7 @@ public abstract class TMatrix extends TUpdate {\n    * @param rowId the row id\n    * @return the vector if exists\n    */\n+\n   public abstract TVector getTVector(int rowId);\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}