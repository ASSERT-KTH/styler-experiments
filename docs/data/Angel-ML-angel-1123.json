{
    "project_name": "Angel-ML-angel",
    "violation_id": "1123",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1123/RangePartitioner.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1123/RangePartitioner.java\nindex 8818ca63848..e810b6944b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1123/RangePartitioner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1123/RangePartitioner.java\n@@ -34,193 +34,199 @@ import java.util.List;\n  */\n public class RangePartitioner implements Partitioner {\n \n-  private static final Log LOG = LogFactory.getLog(RangePartitioner.class);\n-  /**\n-   * Matrix context\n-   */\n-  protected MatrixContext mContext;\n-\n-  /**\n-   * Application configuration\n-   */\n-  protected Configuration conf;\n-  protected long DEFAULT_PARTITION_SIZE;\n-  protected int maxPartNum;\n-\n-  @Override\n-  public void init(MatrixContext mContext, Configuration conf) {\n-    this.mContext = mContext;\n-    this.conf = conf;\n-\n-    long defaultPartSize = conf.getLong(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE,\n-        AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_PARTITION_SIZE);\n-    int maxPartNumTotal = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM,\n-        AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM);\n-    int psNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n-    int partNumPerServer =\n-        conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_NUM_PERSERVER, -1);\n-\n-    if (partNumPerServer > 0) {\n-      maxPartNum = Math.min(maxPartNumTotal, psNum * partNumPerServer);\n-    } else {\n-      maxPartNum = maxPartNumTotal;\n-    }\n-    DEFAULT_PARTITION_SIZE = defaultPartSize;\n-  }\n-\n-  @Override\n-  public List<PartitionMeta> getPartitions() {\n-    List<PartitionMeta> partitions = new ArrayList<PartitionMeta>();\n-    int id = 0;\n-    int matrixId = mContext.getMatrixId();\n-    int row = mContext.getRowNum();\n-    long col = mContext.getColNum();\n-    long start = mContext.getIndexStart();\n-    long end = mContext.getIndexEnd();\n-    if(end > start) {\n-      col = end - start;\n+    private static final Log LOG = LogFactory.getLog(RangePartitioner.class);\n+    /**\n+     * Matrix context\n+     */\n+    protected MatrixContext mContext;\n+\n+    /**\n+     * Application configuration\n+     */\n+    protected Configuration conf;\n+    protected long DEFAULT_PARTITION_SIZE;\n+    protected int maxPartNum;\n+\n+    @Override\n+    public void init(MatrixContext mContext, Configuration conf) {\n+        this.mContext = mContext;\n+        this.conf = conf;\n+\n+        long defaultPartSize = conf.getLong(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE,\n+                AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_PARTITION_SIZE);\n+        int maxPartNumTotal = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM,\n+                AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM);\n+        int psNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n+        int partNumPerServer =\n+                conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_NUM_PERSERVER, -1);\n+\n+        if (partNumPerServer > 0) {\n+            maxPartNum = Math.min(maxPartNumTotal, psNum * partNumPerServer);\n+        } else {\n+            maxPartNum = maxPartNumTotal;\n+        }\n+        DEFAULT_PARTITION_SIZE = defaultPartSize;\n     }\n \n-    long validIndexNum = mContext.getValidIndexNum();\n-    if (col > 0 && validIndexNum > col) {\n-      validIndexNum = col;\n-    }\n-    int blockRow = mContext.getMaxRowNumInBlock();\n-    long blockCol = mContext.getMaxColNumInBlock();\n-    int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n-\n-    LOG.info(\"start to split matrix \" + mContext);\n-\n-    if (col < 0) {\n-      long partSize = DEFAULT_PARTITION_SIZE;\n-      if (validIndexNum > 0) {\n-        partSize =\n-            (long) (DEFAULT_PARTITION_SIZE * ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n-      }\n-\n-      if (blockRow < 0) {\n-        if (row > serverNum) {\n-          blockRow = (int) Math.min(row / serverNum,\n-              Math.max(row / maxPartNum,\n-                  Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n+    @Override\n+    public List<PartitionMeta> getPartitions() {\n+        List<PartitionMeta> partitions = new ArrayList<PartitionMeta>();\n+        int id = 0;\n+        int matrixId = mContext.getMatrixId();\n+        int row = mContext.getRowNum();\n+        long col = mContext.getColNum();\n+        long start = mContext.getIndexStart();\n+        long end = mContext.getIndexEnd();\n+        if (end > start) {\n+            col = end - start;\n+        }\n+\n+        long validIndexNum = mContext.getValidIndexNum();\n+        if (col > 0 && validIndexNum > col) {\n+            validIndexNum = col;\n+        }\n+        int blockRow = mContext.getMaxRowNumInBlock();\n+        long blockCol = mContext.getMaxColNumInBlock();\n+        int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n+\n+        LOG.info(\"start to split matrix \" + mContext);\n+\n+        if (col < 0) {\n+            long partSize = DEFAULT_PARTITION_SIZE;\n+            if (validIndexNum > 0) {\n+                partSize =\n+                        (long) (DEFAULT_PARTITION_SIZE *\n+                                ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n+            }\n+\n+            if (blockRow < 0) {\n+                if (row > serverNum) {\n+                    blockRow = (int) Math.min(row / serverNum,\n+                            Math.max(row / maxPartNum,\n+                                    Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n+                } else {\n+                    blockRow = row;\n+                }\n+            }\n+\n+            if (blockCol < 0) {\n+                blockCol = Math\n+                        .min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)),\n+                                Math\n+                                        .max(partSize / blockRow,\n+                                                (long) (row * ((double) getMaxIndex(mContext) * 2 /\n+                                                        maxPartNum / blockRow))));\n+            }\n         } else {\n-          blockRow = row;\n+            long partSize = DEFAULT_PARTITION_SIZE;\n+            if (validIndexNum > 0) {\n+                partSize = (long) (DEFAULT_PARTITION_SIZE * ((double) col / validIndexNum));\n+            }\n+\n+            if (blockRow < 0) {\n+                if (row > serverNum) {\n+                    blockRow = (int) Math\n+                            .min(row / serverNum,\n+                                    Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n+                } else {\n+                    blockRow = row;\n+                }\n+            }\n+\n+            if (blockCol < 0) {\n+                blockCol = Math.min(Math.max(100, col / serverNum),\n+                        Math.max(partSize / blockRow,\n+                                (long) (row * ((double) col / maxPartNum / blockRow))));\n+            }\n         }\n-      }\n-\n-      if (blockCol < 0) {\n-        blockCol = Math\n-            .min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math\n-                .max(partSize / blockRow,\n-                    (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n-      }\n-    } else {\n-      long partSize = DEFAULT_PARTITION_SIZE;\n-      if (validIndexNum > 0) {\n-        partSize = (long) (DEFAULT_PARTITION_SIZE * ((double) col / validIndexNum));\n-      }\n-\n-      if (blockRow < 0) {\n-        if (row > serverNum) {\n-          blockRow = (int) Math\n-              .min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n+\n+        LOG.info(\"blockRow = \" + blockRow + \", blockCol=\" + blockCol);\n+        mContext.setMaxRowNumInBlock(blockRow);\n+        mContext.setMaxColNumInBlock(blockCol);\n+\n+        long minValue;\n+        long maxValue;\n+        if (end - start > 0) {\n+            minValue = start;\n+            maxValue = end;\n         } else {\n-          blockRow = row;\n+            if (col == -1) {\n+                minValue = getMinIndex(mContext);\n+                maxValue = getMaxIndex(mContext);\n+            } else {\n+                minValue = 0;\n+                maxValue = col;\n+            }\n         }\n-      }\n \n-      if (blockCol < 0) {\n-        blockCol = Math.min(Math.max(100, col / serverNum),\n-            Math.max(partSize / blockRow, (long) (row * ((double) col / maxPartNum / blockRow))));\n-      }\n-    }\n+        int startRow;\n+        int endRow;\n+        long startCol;\n+        long endCol;\n+        for (int i = 0; i < row; ) {\n+            for (long j = minValue; j < maxValue; ) {\n+                startRow = i;\n+                startCol = j;\n+                endRow = (i <= (row - blockRow)) ? (i + blockRow) : row;\n+                endCol = (j <= (maxValue - blockCol)) ? (j + blockCol) : maxValue;\n+                partitions.add(\n+                        new PartitionMeta(matrixId, id++, startRow, endRow, startCol, endCol));\n+                j = (j <= (maxValue - blockCol)) ? (j + blockCol) : maxValue;\n+            }\n+            i = (i <= (row - blockRow)) ? (i + blockRow) : row;\n+        }\n \n-    LOG.info(\"blockRow = \" + blockRow + \", blockCol=\" + blockCol);\n-    mContext.setMaxRowNumInBlock(blockRow);\n-    mContext.setMaxColNumInBlock(blockCol);\n-\n-    long minValue;\n-    long maxValue;\n-    if(end - start > 0) {\n-      minValue = start;\n-      maxValue = end;\n-    } else {\n-      if (col == -1) {\n-        minValue = getMinIndex(mContext);\n-        maxValue = getMaxIndex(mContext);\n-      } else {\n-        minValue = 0;\n-        maxValue = col;\n-      }\n+        LOG.info(\"partition count: \" + partitions.size());\n+        return partitions;\n     }\n \n-    int startRow;\n-    int endRow;\n-    long startCol;\n-    long endCol;\n-    for (int i = 0; i < row; ) {\n-      for (long j = minValue; j < maxValue; ) {\n-        startRow = i;\n-        startCol = j;\n-        endRow = (i <= (row - blockRow)) ? (i + blockRow) : row;\n-        endCol = (j <= (maxValue - blockCol)) ? (j + blockCol) : maxValue;\n-        partitions.add(new PartitionMeta(matrixId, id++, startRow, endRow, startCol, endCol));\n-        j = (j <= (maxValue - blockCol)) ? (j + blockCol) : maxValue;\n-      }\n-      i = (i <= (row - blockRow)) ? (i + blockRow) : row;\n+    protected long getMaxIndex(MatrixContext mContext) {\n+        if (isIntIndex(mContext.getRowType())) {\n+            return Integer.MAX_VALUE;\n+        } else {\n+            return Long.MAX_VALUE;\n+        }\n     }\n \n-    LOG.info(\"partition count: \" + partitions.size());\n-    return partitions;\n-  }\n-\n-  protected long getMaxIndex(MatrixContext mContext) {\n-    if (isIntIndex(mContext.getRowType())) {\n-      return Integer.MAX_VALUE;\n-    } else {\n-      return Long.MAX_VALUE;\n+    protected long getMinIndex(MatrixContext mContext) {\n+        if (isIntIndex(mContext.getRowType())) {\n+            return Integer.MIN_VALUE;\n+        } else {\n+            return Long.MIN_VALUE;\n+        }\n     }\n-  }\n \n-  protected long getMinIndex(MatrixContext mContext) {\n-    if (isIntIndex(mContext.getRowType())) {\n-      return Integer.MIN_VALUE;\n-    } else {\n-      return Long.MIN_VALUE;\n-    }\n-  }\n-\n-  private boolean isIntIndex(RowType type) {\n-    switch (type) {\n-      case T_DOUBLE_DENSE:\n-      case T_DOUBLE_DENSE_COMPONENT:\n-      case T_DOUBLE_SPARSE:\n-      case T_DOUBLE_SPARSE_COMPONENT:\n-\n-      case T_FLOAT_DENSE:\n-      case T_FLOAT_DENSE_COMPONENT:\n-      case T_FLOAT_SPARSE:\n-      case T_FLOAT_SPARSE_COMPONENT:\n-\n-      case T_LONG_DENSE:\n-      case T_LONG_DENSE_COMPONENT:\n-      case T_LONG_SPARSE:\n-      case T_LONG_SPARSE_COMPONENT:\n-\n-      case T_INT_DENSE:\n-      case T_INT_DENSE_COMPONENT:\n-      case T_INT_SPARSE:\n-      case T_INT_SPARSE_COMPONENT:\n-        return true;\n-\n-      default:\n-        return false;\n+    private boolean isIntIndex(RowType type) {\n+        switch (type) {\n+            case T_DOUBLE_DENSE:\n+            case T_DOUBLE_DENSE_COMPONENT:\n+            case T_DOUBLE_SPARSE:\n+            case T_DOUBLE_SPARSE_COMPONENT:\n+\n+            case T_FLOAT_DENSE:\n+            case T_FLOAT_DENSE_COMPONENT:\n+            case T_FLOAT_SPARSE:\n+            case T_FLOAT_SPARSE_COMPONENT:\n+\n+            case T_LONG_DENSE:\n+            case T_LONG_DENSE_COMPONENT:\n+            case T_LONG_SPARSE:\n+            case T_LONG_SPARSE_COMPONENT:\n+\n+            case T_INT_DENSE:\n+            case T_INT_DENSE_COMPONENT:\n+            case T_INT_SPARSE:\n+            case T_INT_SPARSE_COMPONENT:\n+                return true;\n+\n+            default:\n+                return false;\n+        }\n     }\n-  }\n \n-  @Override\n-  public int assignPartToServer(int partId) {\n-    int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n-    return partId % serverNum;\n-  }\n+    @Override\n+    public int assignPartToServer(int partId) {\n+        int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n+        return partId % serverNum;\n+    }\n }\n",
            "diff_size": 236
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1123/RangePartitioner.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1123/RangePartitioner.java\nindex 8818ca63848..b574c8284a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1123/RangePartitioner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1123/RangePartitioner.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.partitioner;\n \n import com.tencent.angel.conf.AngelConf;\n@@ -77,7 +76,7 @@ public class RangePartitioner implements Partitioner {\n     long col = mContext.getColNum();\n     long start = mContext.getIndexStart();\n     long end = mContext.getIndexEnd();\n-    if(end > start) {\n+    if (end > start) {\n       col = end - start;\n     }\n \n@@ -96,24 +95,22 @@ public class RangePartitioner implements Partitioner {\n       if (validIndexNum > 0) {\n         partSize =\n             (long) (DEFAULT_PARTITION_SIZE * ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n-      }\n+  }\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n           blockRow = (int) Math.min(row / serverNum,\n               Math.max(row / maxPartNum,\n                   Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n-        } else {\n+  } else {\n           blockRow = row;\n         }\n       }\n \n       if (blockCol < 0) {\n-        blockCol = Math\n-            .min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math\n-                .max(partSize / blockRow,\n-                    (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n-      }\n+        blockCol = Math.min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math\n+                .max(partSize / blockRow, (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n+  }\n     } else {\n       long partSize = DEFAULT_PARTITION_SIZE;\n       if (validIndexNum > 0) {\n@@ -122,9 +119,8 @@ public class RangePartitioner implements Partitioner {\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n-          blockRow = (int) Math\n-              .min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n-        } else {\n+          blockRow = (int) Math.min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n+  } else {\n           blockRow = row;\n         }\n       }\n@@ -141,7 +137,7 @@ public class RangePartitioner implements Partitioner {\n \n     long minValue;\n     long maxValue;\n-    if(end - start > 0) {\n+    if (end - start > 0) {\n       minValue = start;\n       maxValue = end;\n     } else {\n@@ -158,8 +154,8 @@ public class RangePartitioner implements Partitioner {\n     int endRow;\n     long startCol;\n     long endCol;\n-    for (int i = 0; i < row; ) {\n-      for (long j = minValue; j < maxValue; ) {\n+    for (int i = 0; i < row;) {\n+      for (long j = minValue; j < maxValue;) {\n         startRow = i;\n         startCol = j;\n         endRow = (i <= (row - blockRow)) ? (i + blockRow) : row;\n@@ -196,24 +192,20 @@ public class RangePartitioner implements Partitioner {\n       case T_DOUBLE_DENSE_COMPONENT:\n       case T_DOUBLE_SPARSE:\n       case T_DOUBLE_SPARSE_COMPONENT:\n-\n-      case T_FLOAT_DENSE:\n+case T_FLOAT_DENSE:\n       case T_FLOAT_DENSE_COMPONENT:\n       case T_FLOAT_SPARSE:\n       case T_FLOAT_SPARSE_COMPONENT:\n-\n-      case T_LONG_DENSE:\n+case T_LONG_DENSE:\n       case T_LONG_DENSE_COMPONENT:\n       case T_LONG_SPARSE:\n       case T_LONG_SPARSE_COMPONENT:\n-\n-      case T_INT_DENSE:\n+case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n       case T_INT_SPARSE:\n       case T_INT_SPARSE_COMPONENT:\n         return true;\n-\n-      default:\n+  default:\n         return false;\n     }\n   }\n@@ -223,4 +215,4 @@ public class RangePartitioner implements Partitioner {\n     int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n     return partId % serverNum;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1123/RangePartitioner.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1123/RangePartitioner.java\nindex 8818ca63848..daef8b7ad18 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1123/RangePartitioner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1123/RangePartitioner.java\n@@ -25,26 +25,30 @@ import com.tencent.angel.ml.matrix.RowType;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n  * Base class of range partitioner\n  */\n+\n public class RangePartitioner implements Partitioner {\n \n   private static final Log LOG = LogFactory.getLog(RangePartitioner.class);\n   /**\n    * Matrix context\n    */\n+\n   protected MatrixContext mContext;\n \n   /**\n    * Application configuration\n    */\n+\n   protected Configuration conf;\n+\n   protected long DEFAULT_PARTITION_SIZE;\n+\n   protected int maxPartNum;\n \n   @Override\n@@ -52,14 +56,10 @@ public class RangePartitioner implements Partitioner {\n     this.mContext = mContext;\n     this.conf = conf;\n \n-    long defaultPartSize = conf.getLong(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE,\n-        AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_PARTITION_SIZE);\n-    int maxPartNumTotal = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM,\n-        AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM);\n+    long defaultPartSize = conf.getLong(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_SIZE, AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_PARTITION_SIZE);\n+    int maxPartNumTotal = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM, AngelConf.DEFAULT_ANGEL_MODEL_PARTITIONER_MAX_PARTITION_NUM);\n     int psNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n-    int partNumPerServer =\n-        conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_NUM_PERSERVER, -1);\n-\n+    int partNumPerServer = conf.getInt(AngelConf.ANGEL_MODEL_PARTITIONER_PARTITION_NUM_PERSERVER, -1);\n     if (partNumPerServer > 0) {\n       maxPartNum = Math.min(maxPartNumTotal, psNum * partNumPerServer);\n     } else {\n@@ -77,7 +77,7 @@ public class RangePartitioner implements Partitioner {\n     long col = mContext.getColNum();\n     long start = mContext.getIndexStart();\n     long end = mContext.getIndexEnd();\n-    if(end > start) {\n+    if (end > start) {\n       col = end - start;\n     }\n \n@@ -85,34 +85,27 @@ public class RangePartitioner implements Partitioner {\n     if (col > 0 && validIndexNum > col) {\n       validIndexNum = col;\n     }\n+\n     int blockRow = mContext.getMaxRowNumInBlock();\n     long blockCol = mContext.getMaxColNumInBlock();\n     int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n-\n     LOG.info(\"start to split matrix \" + mContext);\n-\n     if (col < 0) {\n       long partSize = DEFAULT_PARTITION_SIZE;\n       if (validIndexNum > 0) {\n-        partSize =\n-            (long) (DEFAULT_PARTITION_SIZE * ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n+        partSize = (long) (DEFAULT_PARTITION_SIZE * ((double) getMaxIndex(mContext) * 2 / validIndexNum));\n       }\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n-          blockRow = (int) Math.min(row / serverNum,\n-              Math.max(row / maxPartNum,\n-                  Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n+          blockRow = (int) Math.min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / ((double) getMaxIndex(mContext) * 2))));\n         } else {\n           blockRow = row;\n         }\n       }\n \n       if (blockCol < 0) {\n-        blockCol = Math\n-            .min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math\n-                .max(partSize / blockRow,\n-                    (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n+        blockCol = Math.min(Math.max(100, (long) ((double) getMaxIndex(mContext) * 2 / serverNum)), Math.max(partSize / blockRow, (long) (row * ((double) getMaxIndex(mContext) * 2 / maxPartNum / blockRow))));\n       }\n     } else {\n       long partSize = DEFAULT_PARTITION_SIZE;\n@@ -122,26 +115,23 @@ public class RangePartitioner implements Partitioner {\n \n       if (blockRow < 0) {\n         if (row > serverNum) {\n-          blockRow = (int) Math\n-              .min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n+          blockRow = (int) Math.min(row / serverNum, Math.max(row / maxPartNum, Math.max(1, partSize / col)));\n         } else {\n           blockRow = row;\n         }\n       }\n \n       if (blockCol < 0) {\n-        blockCol = Math.min(Math.max(100, col / serverNum),\n-            Math.max(partSize / blockRow, (long) (row * ((double) col / maxPartNum / blockRow))));\n+        blockCol = Math.min(Math.max(100, col / serverNum), Math.max(partSize / blockRow, (long) (row * ((double) col / maxPartNum / blockRow))));\n       }\n     }\n-\n     LOG.info(\"blockRow = \" + blockRow + \", blockCol=\" + blockCol);\n     mContext.setMaxRowNumInBlock(blockRow);\n     mContext.setMaxColNumInBlock(blockCol);\n \n     long minValue;\n     long maxValue;\n-    if(end - start > 0) {\n+    if (end - start > 0) {\n       minValue = start;\n       maxValue = end;\n     } else {\n@@ -158,8 +148,8 @@ public class RangePartitioner implements Partitioner {\n     int endRow;\n     long startCol;\n     long endCol;\n-    for (int i = 0; i < row; ) {\n-      for (long j = minValue; j < maxValue; ) {\n+    for (int i = 0; i < row;) {\n+      for (long j = minValue; j < maxValue;) {\n         startRow = i;\n         startCol = j;\n         endRow = (i <= (row - blockRow)) ? (i + blockRow) : row;\n@@ -169,7 +159,6 @@ public class RangePartitioner implements Partitioner {\n       }\n       i = (i <= (row - blockRow)) ? (i + blockRow) : row;\n     }\n-\n     LOG.info(\"partition count: \" + partitions.size());\n     return partitions;\n   }\n@@ -196,23 +185,19 @@ public class RangePartitioner implements Partitioner {\n       case T_DOUBLE_DENSE_COMPONENT:\n       case T_DOUBLE_SPARSE:\n       case T_DOUBLE_SPARSE_COMPONENT:\n-\n       case T_FLOAT_DENSE:\n       case T_FLOAT_DENSE_COMPONENT:\n       case T_FLOAT_SPARSE:\n       case T_FLOAT_SPARSE_COMPONENT:\n-\n       case T_LONG_DENSE:\n       case T_LONG_DENSE_COMPONENT:\n       case T_LONG_SPARSE:\n       case T_LONG_SPARSE_COMPONENT:\n-\n       case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n       case T_INT_SPARSE:\n       case T_INT_SPARSE_COMPONENT:\n         return true;\n-\n       default:\n         return false;\n     }\n@@ -223,4 +208,5 @@ public class RangePartitioner implements Partitioner {\n     int serverNum = conf.getInt(AngelConf.ANGEL_PS_NUMBER, AngelConf.DEFAULT_ANGEL_PS_NUMBER);\n     return partId % serverNum;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}