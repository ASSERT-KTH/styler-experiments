{
    "project_name": "TIBCOSoftware-genxdm",
    "violation_id": "320",
    "information": {
        "violations": [
            {
                "line": "253",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    public void setSchema(Schema schema)\n    {\n    \tthis.schema = PreCondition.assertNotNull(schema);\n    }\n    \n    @Override",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/320/NamespaceFixupSequenceFilter.java\nindex 5ca4c0ffe2d..316b72f49fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/320/NamespaceFixupSequenceFilter.java\n@@ -250,7 +250,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(Schema schema)\n     {\n-    \tthis.schema = PreCondition.assertNotNull(schema);\n+    this.schema = PreCondition.assertNotNull(schema);\n     }\n     \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/320/NamespaceFixupSequenceFilter.java\nindex 5ca4c0ffe2d..ac7e74281c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/320/NamespaceFixupSequenceFilter.java\n@@ -26,52 +26,52 @@ import org.genxdm.xs.enums.DerivationMethod;\n import org.genxdm.xs.types.Type;\n \n public class NamespaceFixupSequenceFilter<A>\n-    implements SequenceFilter<A>\n-{\n+    implements SequenceFilter<A> {\n \n-    public NamespaceFixupSequenceFilter()\n-    {\n+    public NamespaceFixupSequenceFilter() {\n         methods.add(DerivationMethod.Extension);\n         methods.add(DerivationMethod.Restriction);\n         methods.add(DerivationMethod.List);\n         // we prolly ought to allow the union, right?\n         //methods.add(DerivationMethod.Union);\n     }\n-    \n+\n     @Override\n-    public void attribute(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n-        throws GenXDMException\n-    {\n+    public void attribute(String namespaceURI, String localName, String prefix,\n+                          List<? extends A> data, QName type)\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n-        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")) )\n-        {\n+        if (localName.equalsIgnoreCase(\"xmlns\") ||\n+            ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\"))) {\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n-            if (atoms != null)\n-                namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName, atoms.getC14NString(data));\n+            if (atoms != null) {\n+                namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName,\n+                    atoms.getC14NString(data));\n+            }\n             return;\n         }\n-        if (localName.toLowerCase().startsWith(\"xml\"))\n+        if (localName.toLowerCase().startsWith(\"xml\")) {\n             throw new GenXDMException(\"Invalid attribute name: \" + localName);\n+        }\n         // first, make sure that we're not sending going to try to\n         // generate an attribute with default prefix in non-default namespace\n         String ns = namespaceURI == null ? \"\" : namespaceURI;\n         String p = prefix == null ? \"\" : prefix;\n-        if (ns.trim().length() > 0)\n-        {\n-            if (p.trim().length() == 0)\n-            {\n+        if (ns.trim().length() > 0) {\n+            if (p.trim().length() == 0) {\n                 Set<String> prefixes = getPrefixesForURI(ns);\n-                if (prefixes != null)\n+                if (prefixes != null) {\n                     p = prefixes.iterator().next();\n-                else\n+                } else {\n                     p = randomPrefix(ns);\n+                }\n             }\n             required.add(new DefaultNamespaceBinding(p, ns));\n         }\n-        Type t = (type == null) ? BuiltInSchema.SINGLETON.UNTYPED_ATOMIC : schema.getComponentProvider().getTypeDefinition(type);\n+        Type t = (type == null) ? BuiltInSchema.SINGLETON.UNTYPED_ATOMIC :\n+            schema.getComponentProvider().getTypeDefinition(type);\n         // i'm not sure about this test\n-        if ( (type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods) )\n-        {\n+        if ((type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods)) {\n             // TODO: finish the job\n             // we need to check for qnames in content, here, and insure\n             // that any bindings that they require are also declared.\n@@ -81,8 +81,7 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void startElement(String namespaceURI, String localName, String prefix, QName type)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.startElement(namespaceURI, localName, prefix, type);\n@@ -92,39 +91,38 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void text(List<? extends A> data)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.text(data);\n     }\n \n     @Override\n-    public void attribute(String namespaceURI, String localName, String prefix, String value, DtdAttributeKind type)\n-        throws GenXDMException\n-    {\n+    public void attribute(String namespaceURI, String localName, String prefix, String value,\n+                          DtdAttributeKind type)\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n-        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")) )\n-        {\n+        if (localName.equalsIgnoreCase(\"xmlns\") ||\n+            ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\"))) {\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n             namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName, value);\n             return;\n         }\n-        if (localName.toLowerCase().startsWith(\"xml\"))\n+        if (localName.toLowerCase().startsWith(\"xml\")) {\n             throw new GenXDMException(\"Invalid attribute name: \" + localName);\n+        }\n         // first, make sure that we're not sending going to try to\n         // generate an attribute with default prefix in non-default namespace\n         String ns = namespaceURI == null ? \"\" : namespaceURI;\n         String p = prefix == null ? \"\" : prefix;\n-        if (ns.trim().length() > 0)\n-        {\n-            if (p.trim().length() == 0)\n-            {\n+        if (ns.trim().length() > 0) {\n+            if (p.trim().length() == 0) {\n                 Set<String> prefixes = getPrefixesForURI(ns);\n-                if (prefixes != null)\n+                if (prefixes != null) {\n                     p = prefixes.iterator().next();\n-                else\n+                } else {\n                     p = randomPrefix(ns);\n+                }\n             }\n             required.add(new DefaultNamespaceBinding(p, ns));\n         }\n@@ -133,8 +131,7 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void comment(String value)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.comment(value);\n@@ -142,16 +139,14 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void endDocument()\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         output.endDocument();\n     }\n \n     @Override\n     public void endElement()\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.endElement();\n@@ -160,27 +155,31 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void namespace(String prefix, String namespaceURI)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n-        if (prefix == null)\n+        if (prefix == null) {\n             prefix = XMLConstants.DEFAULT_NS_PREFIX;\n-        if (namespaceURI == null)\n+        }\n+        if (namespaceURI == null) {\n             namespaceURI = XMLConstants.NULL_NS_URI;\n+        }\n         // check reserved namespaces\n         if (prefix.equals(XMLConstants.XML_NS_PREFIX) &&\n-            !namespaceURI.equals(XMLConstants.XML_NS_URI) )\n+            !namespaceURI.equals(XMLConstants.XML_NS_URI)) {\n             return; // silently drop it.\n+        }\n         if (prefix.equals(XMLConstants.XMLNS_ATTRIBUTE) &&\n-            !namespaceURI.equals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI) )\n+            !namespaceURI.equals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI)) {\n             return; // silently drop it.\n-        if (namespaceURI.equals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI))\n+        }\n+        if (namespaceURI.equals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI)) {\n             return;\n+        }\n         // make sure that the prefix isn't already declared in this scope\n         String boundTo = getDeclaredURI(prefix);\n-        if ( (boundTo != null) && !boundTo.equals(namespaceURI) )\n-        {\n-            throw new GenXDMException(\"The prefix '\" + prefix + \"' is already bound to \" + boundTo + \"and cannot also be bound to \" + namespaceURI + \".\");\n+        if ((boundTo != null) && !boundTo.equals(namespaceURI)) {\n+            throw new GenXDMException(\"The prefix '\" + prefix + \"' is already bound to \" + boundTo +\n+                \"and cannot also be bound to \" + namespaceURI + \".\");\n         }\n         // queue the namespaces\n         namespaces.add(new DefaultNamespaceBinding(prefix, namespaceURI));\n@@ -190,8 +189,7 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void processingInstruction(String target, String data)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.processingInstruction(target, data);\n@@ -199,16 +197,14 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void startDocument(URI documentURI, String docTypeDecl)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         output.startDocument(documentURI, docTypeDecl);\n     }\n \n     @Override\n     public void startElement(String namespaceURI, String localName, String prefix)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.startElement(namespaceURI, localName, prefix);\n@@ -218,8 +214,7 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void text(String data)\n-        throws GenXDMException\n-    {\n+        throws GenXDMException {\n         PreCondition.assertNotNull(output);\n         reconcile();\n         output.text(data);\n@@ -227,40 +222,34 @@ public class NamespaceFixupSequenceFilter<A>\n \n     @Override\n     public void close()\n-        throws IOException\n-    {\n+        throws IOException {\n         PreCondition.assertNotNull(output);\n         output.close();\n     }\n \n     @Override\n     public void flush()\n-        throws IOException\n-    {\n+        throws IOException {\n         PreCondition.assertNotNull(output);\n         output.flush();\n     }\n \n     @Override\n-    public void setOutputSequenceHandler(SequenceHandler<A> output)\n-    {\n+    public void setOutputSequenceHandler(SequenceHandler<A> output) {\n         this.output = PreCondition.assertNotNull(output);\n     }\n-    \n+\n     @Override\n-    public void setSchema(Schema schema)\n-    {\n-    \tthis.schema = PreCondition.assertNotNull(schema);\n+    public void setSchema(Schema schema) {\n+        this.schema = PreCondition.assertNotNull(schema);\n     }\n-    \n+\n     @Override\n-    public void setAtomBridge(AtomBridge<A> bridge)\n-    {\n+    public void setAtomBridge(AtomBridge<A> bridge) {\n         this.atoms = PreCondition.assertNotNull(bridge);\n     }\n-    \n-    private void newScope()\n-    {\n+\n+    private void newScope() {\n         depth++;\n         Map<String, String> scope = new HashMap<String, String>();\n         if (depth == 0) // initialize\n@@ -268,24 +257,20 @@ public class NamespaceFixupSequenceFilter<A>\n             scope.put(XMLConstants.DEFAULT_NS_PREFIX, XMLConstants.NULL_NS_URI);\n             scope.put(XMLConstants.XML_NS_PREFIX, XMLConstants.XML_NS_URI);\n             scope.put(XMLConstants.XMLNS_ATTRIBUTE, XMLConstants.XMLNS_ATTRIBUTE_NS_URI);\n-        }\n-        else // copy parent to initialize\n+        } else // copy parent to initialize\n         {\n             scope.putAll(scopes.get(depth - 1));\n         }\n         scopes.add(scope);\n     }\n-    \n-    private void endScope()\n-    {\n+\n+    private void endScope() {\n         scopes.remove(depth);\n         depth--;\n     }\n-    \n-    private void reconcile()\n-    {\n-        for (NamespaceBinding want : required)\n-        {\n+\n+    private void reconcile() {\n+        for (NamespaceBinding want : required) {\n             if (!inScope(want.getPrefix(), want.getNamespaceURI())) // needed, not present\n             {\n                 // note: instead of checking here, we're just going to declare\n@@ -301,119 +286,130 @@ public class NamespaceFixupSequenceFilter<A>\n         // been added.\n         required.clear();\n         // now emit all the namespace events at once\n-        for (NamespaceBinding namespace : namespaces)\n-        {\n+        for (NamespaceBinding namespace : namespaces) {\n             output.namespace(namespace.getPrefix(), namespace.getNamespaceURI());\n         }\n         // clear the bindings; we're done with them.\n         namespaces.clear();\n         // emit all the attribute events.  we've already insured that all the\n         // attributes in namespaces have prefixes, and that the bindings are in scope\n-        for (Attr a : attributes)\n-        {\n-            if (a.data != null)\n+        for (Attr a : attributes) {\n+            if (a.data != null) {\n                 output.attribute(a.namespace, a.name, a.prefix, a.data, a.typeName);\n-            else\n+            } else {\n                 output.attribute(a.namespace, a.name, a.prefix, a.value, a.type);\n+            }\n         }\n         // done, clear that set\n         attributes.clear();\n     }\n-    \n-    private boolean inScope(String prefix, String uri)\n-    {\n+\n+    private boolean inScope(String prefix, String uri) {\n         Map<String, String> scope = scopes.get(depth);\n         String bound = scope.get(prefix);\n-        if (bound != null)\n-        {\n-            if (uri.equals(bound))\n+        if (bound != null) {\n+            if (uri.equals(bound)) {\n                 return true;\n+            }\n         }\n         return false;\n     }\n-    \n-    private String getDeclaredURI(String prefix)\n-    {\n-        for (NamespaceBinding namespace : namespaces)\n-        {\n-            if (namespace.getPrefix().equals(prefix))\n+\n+    private String getDeclaredURI(String prefix) {\n+        for (NamespaceBinding namespace : namespaces) {\n+            if (namespace.getPrefix().equals(prefix)) {\n                 return namespace.getNamespaceURI();\n+            }\n         }\n         return null;\n     }\n-    \n-    private Set<String> getPrefixesForURI(String ns)\n-    {\n+\n+    private Set<String> getPrefixesForURI(String ns) {\n         Set<String> results = new HashSet<String>();\n         Map<String, String> scope = scopes.get(depth);\n         boolean found = false;\n-        for (Map.Entry<String, String> binding : scope.entrySet())\n-        {\n-            if (binding.getValue().equals(ns))\n-            {\n+        for (Map.Entry<String, String> binding : scope.entrySet()) {\n+            if (binding.getValue().equals(ns)) {\n                 results.add(binding.getKey());\n                 found = true;\n             }\n         }\n-        if (found)\n+        if (found) {\n             return results;\n+        }\n         return null;\n     }\n-    \n-    private String randomPrefix(String uri)\n-    {\n+\n+    private String randomPrefix(String uri) {\n         // we can think about extracting something from the uri that isn't in scope\n         return \"ns\" + counter++;\n     }\n-    \n-    private class Attr\n-    {\n-        Attr(String namespaceURI, String localName, String prefix, String value, DtdAttributeKind type)\n-        {\n+\n+    private class Attr {\n+        Attr(String namespaceURI, String localName, String prefix, String value,\n+             DtdAttributeKind type) {\n             this.namespace = namespaceURI;\n             this.name = localName;\n             this.prefix = prefix;\n             this.value = value;\n             this.type = type;\n         }\n-        Attr(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n-        {\n+\n+        Attr(String namespaceURI, String localName, String prefix, List<? extends A> data,\n+             QName type) {\n             this.namespace = namespaceURI;\n             this.name = localName;\n             this.prefix = prefix;\n             this.data = data;\n             this.typeName = type;\n         }\n+\n         String namespace;\n+\n         String name;\n+\n         String prefix;\n+\n         String value;\n+\n         DtdAttributeKind type;\n+\n         List<? extends A> data;\n+\n         QName typeName;\n+\n         @Override\n-        public int hashCode()\n-        {\n+        public int hashCode() {\n             return (\"{\" + namespace + \"}\" + name).hashCode();\n         }\n+\n         @Override\n-        public boolean equals(Object other)\n-        {\n-            if (other instanceof NamespaceFixupSequenceFilter.Attr)\n+        public boolean equals(Object other) {\n+            if (other instanceof NamespaceFixupSequenceFilter.Attr) {\n                 return hashCode() == other.hashCode();\n+            }\n             return false;\n         }\n     }\n \n     private Set<NamespaceBinding> namespaces = new HashSet<NamespaceBinding>();\n+\n     private Set<NamespaceBinding> required = new HashSet<NamespaceBinding>();\n+\n     private Set<Attr> attributes = new HashSet<Attr>();\n+\n     private List<Map<String, String>> scopes = new ArrayList<Map<String, String>>();\n+\n     private int depth = -1;\n+\n     private int counter = 0;\n+\n     private SequenceHandler<A> output;\n+\n     private AtomBridge<A> atoms;\n+\n     private Schema schema;\n+\n     private Set<DerivationMethod> methods = new HashSet<DerivationMethod>(3);\n-    \n+\n }\n",
            "diff_size": 166
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/320/NamespaceFixupSequenceFilter.java\nindex 5ca4c0ffe2d..9f8fb8f731e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/320/NamespaceFixupSequenceFilter.java\n@@ -48,7 +48,7 @@ public class NamespaceFixupSequenceFilter<A>\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n             if (atoms != null)\n                 namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName, atoms.getC14NString(data));\n-            return;\n+return;\n         }\n         if (localName.toLowerCase().startsWith(\"xml\"))\n             throw new GenXDMException(\"Invalid attribute name: \" + localName);\n@@ -250,7 +250,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(Schema schema)\n     {\n-    \tthis.schema = PreCondition.assertNotNull(schema);\n+    this.schema = PreCondition.assertNotNull(schema);\n     }\n     \n     @Override\n@@ -416,4 +416,4 @@ public class NamespaceFixupSequenceFilter<A>\n     private Schema schema;\n     private Set<DerivationMethod> methods = new HashSet<DerivationMethod>(3);\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/320/NamespaceFixupSequenceFilter.java\nindex 5ca4c0ffe2d..fb0c05ed41e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/320/NamespaceFixupSequenceFilter.java\n@@ -8,10 +8,8 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import javax.xml.XMLConstants;\n import javax.xml.namespace.QName;\n-\n import org.genxdm.bridgekit.names.DefaultNamespaceBinding;\n import org.genxdm.bridgekit.xs.BuiltInSchema;\n import org.genxdm.exceptions.GenXDMException;\n@@ -25,10 +23,8 @@ import org.genxdm.xs.Schema;\n import org.genxdm.xs.enums.DerivationMethod;\n import org.genxdm.xs.types.Type;\n \n-public class NamespaceFixupSequenceFilter<A>\n-    implements SequenceFilter<A>\n+public class NamespaceFixupSequenceFilter<A> implements SequenceFilter<A>\n {\n-\n     public NamespaceFixupSequenceFilter()\n     {\n         methods.add(DerivationMethod.Extension);\n@@ -37,13 +33,13 @@ public class NamespaceFixupSequenceFilter<A>\n         // we prolly ought to allow the union, right?\n         //methods.add(DerivationMethod.Union);\n     }\n-    \n+\n     @Override\n     public void attribute(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n         throws GenXDMException\n     {\n         PreCondition.assertNotNull(output);\n-        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")) )\n+        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")))\n         {\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n             if (atoms != null)\n@@ -70,11 +66,12 @@ public class NamespaceFixupSequenceFilter<A>\n         }\n         Type t = (type == null) ? BuiltInSchema.SINGLETON.UNTYPED_ATOMIC : schema.getComponentProvider().getTypeDefinition(type);\n         // i'm not sure about this test\n-        if ( (type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods) )\n+        if ( (type != null) && t.derivedFromType(BuiltInSchema.SINGLETON.QNAME, methods))\n         {\n             // TODO: finish the job\n             // we need to check for qnames in content, here, and insure\n             // that any bindings that they require are also declared.\n+\n         }\n         attributes.add(new Attr(ns, localName, p, data, type));\n     }\n@@ -104,7 +101,7 @@ public class NamespaceFixupSequenceFilter<A>\n         throws GenXDMException\n     {\n         PreCondition.assertNotNull(output);\n-        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")) )\n+        if (localName.equalsIgnoreCase(\"xmlns\") || ((prefix != null) && prefix.equalsIgnoreCase(\"xmlns\")))\n         {\n             // treat it as a mistaken attempt to declare a namespace using the wrong method.\n             namespace(localName.equalsIgnoreCase(\"xmlns\") ? \"\" : localName, value);\n@@ -168,17 +165,15 @@ public class NamespaceFixupSequenceFilter<A>\n         if (namespaceURI == null)\n             namespaceURI = XMLConstants.NULL_NS_URI;\n         // check reserved namespaces\n-        if (prefix.equals(XMLConstants.XML_NS_PREFIX) &&\n-            !namespaceURI.equals(XMLConstants.XML_NS_URI) )\n+        if (prefix.equals(XMLConstants.XML_NS_PREFIX) && !namespaceURI.equals(XMLConstants.XML_NS_URI))\n             return; // silently drop it.\n-        if (prefix.equals(XMLConstants.XMLNS_ATTRIBUTE) &&\n-            !namespaceURI.equals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI) )\n+        if (prefix.equals(XMLConstants.XMLNS_ATTRIBUTE) && !namespaceURI.equals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI))\n             return; // silently drop it.\n         if (namespaceURI.equals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI))\n             return;\n         // make sure that the prefix isn't already declared in this scope\n         String boundTo = getDeclaredURI(prefix);\n-        if ( (boundTo != null) && !boundTo.equals(namespaceURI) )\n+        if ( (boundTo != null) && !boundTo.equals(namespaceURI))\n         {\n             throw new GenXDMException(\"The prefix '\" + prefix + \"' is already bound to \" + boundTo + \"and cannot also be bound to \" + namespaceURI + \".\");\n         }\n@@ -246,19 +241,19 @@ public class NamespaceFixupSequenceFilter<A>\n     {\n         this.output = PreCondition.assertNotNull(output);\n     }\n-    \n+\n     @Override\n     public void setSchema(Schema schema)\n     {\n-    \tthis.schema = PreCondition.assertNotNull(schema);\n+        this.schema = PreCondition.assertNotNull(schema);\n     }\n-    \n+\n     @Override\n     public void setAtomBridge(AtomBridge<A> bridge)\n     {\n         this.atoms = PreCondition.assertNotNull(bridge);\n     }\n-    \n+\n     private void newScope()\n     {\n         depth++;\n@@ -275,13 +270,13 @@ public class NamespaceFixupSequenceFilter<A>\n         }\n         scopes.add(scope);\n     }\n-    \n+\n     private void endScope()\n     {\n         scopes.remove(depth);\n         depth--;\n     }\n-    \n+\n     private void reconcile()\n     {\n         for (NamespaceBinding want : required)\n@@ -319,7 +314,7 @@ public class NamespaceFixupSequenceFilter<A>\n         // done, clear that set\n         attributes.clear();\n     }\n-    \n+\n     private boolean inScope(String prefix, String uri)\n     {\n         Map<String, String> scope = scopes.get(depth);\n@@ -331,7 +326,7 @@ public class NamespaceFixupSequenceFilter<A>\n         }\n         return false;\n     }\n-    \n+\n     private String getDeclaredURI(String prefix)\n     {\n         for (NamespaceBinding namespace : namespaces)\n@@ -341,7 +336,7 @@ public class NamespaceFixupSequenceFilter<A>\n         }\n         return null;\n     }\n-    \n+\n     private Set<String> getPrefixesForURI(String ns)\n     {\n         Set<String> results = new HashSet<String>();\n@@ -359,15 +354,16 @@ public class NamespaceFixupSequenceFilter<A>\n             return results;\n         return null;\n     }\n-    \n+\n     private String randomPrefix(String uri)\n     {\n         // we can think about extracting something from the uri that isn't in scope\n         return \"ns\" + counter++;\n     }\n-    \n+\n     private class Attr\n     {\n+\n         Attr(String namespaceURI, String localName, String prefix, String value, DtdAttributeKind type)\n         {\n             this.namespace = namespaceURI;\n@@ -376,6 +372,7 @@ public class NamespaceFixupSequenceFilter<A>\n             this.value = value;\n             this.type = type;\n         }\n+\n         Attr(String namespaceURI, String localName, String prefix, List<? extends A> data, QName type)\n         {\n             this.namespace = namespaceURI;\n@@ -384,6 +381,7 @@ public class NamespaceFixupSequenceFilter<A>\n             this.data = data;\n             this.typeName = type;\n         }\n+\n         String namespace;\n         String name;\n         String prefix;\n@@ -391,11 +389,13 @@ public class NamespaceFixupSequenceFilter<A>\n         DtdAttributeKind type;\n         List<? extends A> data;\n         QName typeName;\n+\n         @Override\n         public int hashCode()\n         {\n             return (\"{\" + namespace + \"}\" + name).hashCode();\n         }\n+\n         @Override\n         public boolean equals(Object other)\n         {\n@@ -415,5 +415,4 @@ public class NamespaceFixupSequenceFilter<A>\n     private AtomBridge<A> atoms;\n     private Schema schema;\n     private Set<DerivationMethod> methods = new HashSet<DerivationMethod>(3);\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/320/NamespaceFixupSequenceFilter.java\nindex 5ca4c0ffe2d..316b72f49fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/320/NamespaceFixupSequenceFilter.java\n@@ -250,7 +250,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(Schema schema)\n     {\n-    \tthis.schema = PreCondition.assertNotNull(schema);\n+    this.schema = PreCondition.assertNotNull(schema);\n     }\n     \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/320/NamespaceFixupSequenceFilter.java\nindex 5ca4c0ffe2d..396471bc445 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/320/NamespaceFixupSequenceFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/320/NamespaceFixupSequenceFilter.java\n@@ -250,7 +250,7 @@ public class NamespaceFixupSequenceFilter<A>\n     @Override\n     public void setSchema(Schema schema)\n     {\n-    \tthis.schema = PreCondition.assertNotNull(schema);\n+        this.schema = PreCondition.assertNotNull(schema);\n     }\n     \n     @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}