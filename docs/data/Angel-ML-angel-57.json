{
    "project_name": "Angel-ML-angel",
    "violation_id": "57",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/57/IntIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/57/IntIntVector.java\nindex 097dccd52d8..8705e805609 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/57/IntIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/57/IntIntVector.java\n@@ -26,376 +26,376 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n import org.apache.commons.lang.ArrayUtils;\n \n public class IntIntVector extends IntVector implements IntKeyVector, SimpleVector {\n-  private int dim;\n-\n-  public IntIntVector() {\n-    super();\n-  }\n-\n-  public IntIntVector(int matrixId, int rowId, int clock, int dim, IntIntVectorStorage storage) {\n-    this.matrixId = matrixId;\n-    this.rowId = rowId;\n-    this.clock = clock;\n-    this.dim = dim;\n-    this.storage = storage;\n-  }\n-\n-  public IntIntVector(int dim, IntIntVectorStorage storage) {\n-    this(0, 0, 0, dim, storage);\n-  }\n-\n-  public int getDim() {\n-    return dim;\n-  }\n-\n-  public void setDim(int dim) {\n-    this.dim = dim;\n-  }\n-\n-  public long dim() {\n-    return (long) getDim();\n-  }\n-\n-  public int get(int idx) {\n-    return ((IntIntVectorStorage) storage).get(idx);\n-  }\n-\n-  public int[] get(int[] idxs) {\n-    return ((IntIntVectorStorage) storage).get(idxs);\n-  }\n-\n-  public void set(int idx, int value) {\n-    ((IntIntVectorStorage) storage).set(idx, value);\n-  }\n-\n-  public int max() {\n-    IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n-    int maxval = Integer.MIN_VALUE;\n-    if (idstorage.isSparse()) {\n-      IntIterator iter = idstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        int val = iter.nextInt();\n-        if (val > maxval) {\n-          maxval = val;\n-        }\n-      }\n-    } else {\n-      for (int val : idstorage.getValues()) {\n-        if (val > maxval) {\n-          maxval = val;\n-        }\n-      }\n+    private int dim;\n+\n+    public IntIntVector() {\n+        super();\n     }\n-    return maxval;\n-  }\n-\n-  public int min() {\n-    IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n-    int minval = Integer.MAX_VALUE;\n-    if (idstorage.isSparse()) {\n-      IntIterator iter = idstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        int val = iter.nextInt();\n-        if (val < minval) {\n-          minval = val;\n-        }\n-      }\n-    } else {\n-      for (int val : idstorage.getValues()) {\n-        if (val < minval) {\n-          minval = val;\n-        }\n-      }\n+\n+    public IntIntVector(int matrixId, int rowId, int clock, int dim, IntIntVectorStorage storage) {\n+        this.matrixId = matrixId;\n+        this.rowId = rowId;\n+        this.clock = clock;\n+        this.dim = dim;\n+        this.storage = storage;\n     }\n-    return minval;\n-  }\n-\n-  public int argmax() {\n-    IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n-    int maxval = Integer.MIN_VALUE;\n-    int maxidx = -1;\n-    if (idstorage.isDense()) {\n-      int[] val = idstorage.getValues();\n-      int length = val.length;\n-      for (int idx = 0; idx < length; idx++) {\n-        if (val[idx] > maxval) {\n-          maxval = val[idx];\n-          maxidx = idx;\n-        }\n-      }\n-    } else if (idstorage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int idx = entry.getIntKey();\n-        int val = entry.getIntValue();\n-        if (val > maxval) {\n-          maxval = val;\n-          maxidx = idx;\n-        }\n-      }\n-    } else {\n-      int[] indices = idstorage.getIndices();\n-      int[] val = idstorage.getValues();\n-      int size = idstorage.size();\n-      for (int i = 0; i < size; i++) {\n-        int idx = indices[i];\n-        if (val[i] > maxval) {\n-          maxval = val[i];\n-          maxidx = idx;\n-        }\n-      }\n+\n+    public IntIntVector(int dim, IntIntVectorStorage storage) {\n+        this(0, 0, 0, dim, storage);\n     }\n-    return maxidx;\n-  }\n-\n-  public int argmin() {\n-    IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n-    int minval = Integer.MAX_VALUE;\n-    int minidx = -1;\n-    if (idstorage.isDense()) {\n-      int[] val = idstorage.getValues();\n-      int length = val.length;\n-      for (int idx = 0; idx < length; idx++) {\n-        if (val[idx] < minval) {\n-          minval = val[idx];\n-          minidx = idx;\n-        }\n-      }\n-    } else if (idstorage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int idx = entry.getIntKey();\n-        int val = entry.getIntValue();\n-        if (val < minval) {\n-          minval = val;\n-          minidx = idx;\n-        }\n-      }\n-    } else {\n-      int[] indices = idstorage.getIndices();\n-      int[] val = idstorage.getValues();\n-      int size = idstorage.size();\n-      for (int i = 0; i < size; i++) {\n-        int idx = indices[i];\n-        if (val[i] < minval) {\n-          minval = val[i];\n-          minidx = idx;\n-        }\n-      }\n+\n+    public int getDim() {\n+        return dim;\n     }\n-    return minidx;\n-  }\n-\n-  public double std() {\n-    IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n-    double sumval = 0.0;\n-    double sumval2 = 0.0;\n-    if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        double val = iter.nextInt();\n-        sumval += val;\n-        sumval2 += val * val;\n-      }\n-    } else {\n-      for (double val : dstorage.getValues()) {\n-        sumval += val;\n-        sumval2 += val * val;\n-      }\n+\n+    public void setDim(int dim) {\n+        this.dim = dim;\n     }\n-    sumval /= getDim();\n-    sumval2 /= getDim();\n-    return Math.sqrt(sumval2 - sumval * sumval);\n-  }\n-\n-  public double average() {\n-    IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n-    double sumval = 0.0;\n-    if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        sumval += iter.nextInt();\n-      }\n-    } else {\n-      for (double val : dstorage.getValues()) {\n-        sumval += val;\n-      }\n+\n+    public long dim() {\n+        return (long) getDim();\n     }\n \n-    sumval /= getDim();\n-    return sumval;\n-  }\n-\n-  public int size() {\n-    return ((IntIntVectorStorage) storage).size();\n-  }\n-\n-  public int numZeros() {\n-    IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (int) dim;\n-    int numZero = 0;\n-    if (dstorage.isSparse()) {\n-      IntIterator iter = dstorage.valueIterator();\n-      while (iter.hasNext()) {\n-        if (iter.nextInt() != 0) {\n-          numZero += 1;\n-        }\n-      }\n-    } else {\n-      for (int val : dstorage.getValues()) {\n-        if (val != 0) {\n-          numZero += 1;\n-        }\n-      }\n+    public int get(int idx) {\n+        return ((IntIntVectorStorage) storage).get(idx);\n     }\n-    return (int) getDim() - numZero;\n-  }\n-\n-  public IntIntVector clone() {\n-    return new IntIntVector(matrixId, rowId, clock, dim,\n-        ((IntIntVectorStorage) storage).clone());\n-  }\n-\n-  @Override\n-  public IntIntVector copy() {\n-    return new IntIntVector(matrixId, rowId, clock, dim,\n-        ((IntIntVectorStorage) storage).copy());\n-  }\n-\n-  @Override\n-  public IntIntVector emptyLike() {\n-    if (storage.isDense()) {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptyDense());\n-    } else if (storage.isSparse()) {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptySparse());\n-    } else {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptySorted());\n+\n+    public int[] get(int[] idxs) {\n+        return ((IntIntVectorStorage) storage).get(idxs);\n     }\n-  }\n-\n-  @Override\n-  public IntIntVectorStorage getStorage() {\n-    return (IntIntVectorStorage) storage;\n-  }\n-\n-  @Override\n-  public boolean hasKey(int idx) {\n-    return getStorage().hasKey(idx);\n-  }\n-\n-  @Override\n-  public Vector filter(double threshold) {\n-    IntIntSparseVectorStorage newStorage = new IntIntSparseVectorStorage(size());\n-\n-    if (storage.isDense()) {\n-      int[] values = ((IntIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (Math.abs(values[i]) >= threshold) {\n-          newStorage.set(i, values[i]);\n-        }\n-      }\n-    } else if (storage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) >= threshold) {\n-          newStorage.set(entry.getIntKey(), value);\n+\n+    public void set(int idx, int value) {\n+        ((IntIntVectorStorage) storage).set(idx, value);\n+    }\n+\n+    public int max() {\n+        IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return 0;\n+        int maxval = Integer.MIN_VALUE;\n+        if (idstorage.isSparse()) {\n+            IntIterator iter = idstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                int val = iter.nextInt();\n+                if (val > maxval) {\n+                    maxval = val;\n+                }\n+            }\n+        } else {\n+            for (int val : idstorage.getValues()) {\n+                if (val > maxval) {\n+                    maxval = val;\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      int[] indices = ((IntIntVectorStorage) storage).getIndices();\n-      int[] values = ((IntIntVectorStorage) storage).getValues();\n-\n-      int size = ((IntIntVectorStorage) storage).size();\n-      for (int k = 0; k < size; k++) {\n-        if (Math.abs(values[k]) >= threshold) {\n-          newStorage.set(indices[k], values[k]);\n+        return maxval;\n+    }\n+\n+    public int min() {\n+        IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return 0;\n+        int minval = Integer.MAX_VALUE;\n+        if (idstorage.isSparse()) {\n+            IntIterator iter = idstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                int val = iter.nextInt();\n+                if (val < minval) {\n+                    minval = val;\n+                }\n+            }\n+        } else {\n+            for (int val : idstorage.getValues()) {\n+                if (val < minval) {\n+                    minval = val;\n+                }\n+            }\n         }\n-      }\n+        return minval;\n     }\n \n-    return new IntIntVector(matrixId, rowId, clock, getDim(), newStorage);\n-  }\n+    public int argmax() {\n+        IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return -1;\n+        int maxval = Integer.MIN_VALUE;\n+        int maxidx = -1;\n+        if (idstorage.isDense()) {\n+            int[] val = idstorage.getValues();\n+            int length = val.length;\n+            for (int idx = 0; idx < length; idx++) {\n+                if (val[idx] > maxval) {\n+                    maxval = val[idx];\n+                    maxidx = idx;\n+                }\n+            }\n+        } else if (idstorage.isSparse()) {\n+            ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n+            while (iter.hasNext()) {\n+                Int2IntMap.Entry entry = iter.next();\n+                int idx = entry.getIntKey();\n+                int val = entry.getIntValue();\n+                if (val > maxval) {\n+                    maxval = val;\n+                    maxidx = idx;\n+                }\n+            }\n+        } else {\n+            int[] indices = idstorage.getIndices();\n+            int[] val = idstorage.getValues();\n+            int size = idstorage.size();\n+            for (int i = 0; i < size; i++) {\n+                int idx = indices[i];\n+                if (val[i] > maxval) {\n+                    maxval = val[i];\n+                    maxidx = idx;\n+                }\n+            }\n+        }\n+        return maxidx;\n+    }\n \n-  @Override\n-  public Vector ifilter(double threshold) {\n+    public int argmin() {\n+        IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n+        if (idstorage.size() == 0) return -1;\n+        int minval = Integer.MAX_VALUE;\n+        int minidx = -1;\n+        if (idstorage.isDense()) {\n+            int[] val = idstorage.getValues();\n+            int length = val.length;\n+            for (int idx = 0; idx < length; idx++) {\n+                if (val[idx] < minval) {\n+                    minval = val[idx];\n+                    minidx = idx;\n+                }\n+            }\n+        } else if (idstorage.isSparse()) {\n+            ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n+            while (iter.hasNext()) {\n+                Int2IntMap.Entry entry = iter.next();\n+                int idx = entry.getIntKey();\n+                int val = entry.getIntValue();\n+                if (val < minval) {\n+                    minval = val;\n+                    minidx = idx;\n+                }\n+            }\n+        } else {\n+            int[] indices = idstorage.getIndices();\n+            int[] val = idstorage.getValues();\n+            int size = idstorage.size();\n+            for (int i = 0; i < size; i++) {\n+                int idx = indices[i];\n+                if (val[i] < minval) {\n+                    minval = val[i];\n+                    minidx = idx;\n+                }\n+            }\n+        }\n+        return minidx;\n+    }\n \n-    if (storage.isDense()) {\n-      int[] values = ((IntIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (Math.abs(values[i]) <= threshold) {\n-          values[i] = 0;\n+    public double std() {\n+        IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n+        if (dstorage.size() == 0) return 0;\n+        double sumval = 0.0;\n+        double sumval2 = 0.0;\n+        if (dstorage.isSparse()) {\n+            IntIterator iter = dstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                double val = iter.nextInt();\n+                sumval += val;\n+                sumval2 += val * val;\n+            }\n+        } else {\n+            for (double val : dstorage.getValues()) {\n+                sumval += val;\n+                sumval2 += val * val;\n+            }\n         }\n-      }\n-    } else if (storage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) <= threshold) {\n-          iter.remove();\n+        sumval /= getDim();\n+        sumval2 /= getDim();\n+        return Math.sqrt(sumval2 - sumval * sumval);\n+    }\n+\n+    public double average() {\n+        IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n+        if (dstorage.size() == 0) return 0;\n+        double sumval = 0.0;\n+        if (dstorage.isSparse()) {\n+            IntIterator iter = dstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                sumval += iter.nextInt();\n+            }\n+        } else {\n+            for (double val : dstorage.getValues()) {\n+                sumval += val;\n+            }\n         }\n-      }\n-    } else {\n-      int[] indices = ((IntIntVectorStorage) storage).getIndices();\n-      int[] values = ((IntIntVectorStorage) storage).getValues();\n-\n-      int size = ((IntIntVectorStorage) storage).size();\n-      for (int k = 0; k < size; k++) {\n-        if (Math.abs(values[k]) <= threshold) {\n-          values = ArrayUtils.remove(values, k);\n-          indices = ArrayUtils.remove(indices, k);\n+\n+        sumval /= getDim();\n+        return sumval;\n+    }\n+\n+    public int size() {\n+        return ((IntIntVectorStorage) storage).size();\n+    }\n+\n+    public int numZeros() {\n+        IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n+        if (dstorage.size() == 0) return (int) dim;\n+        int numZero = 0;\n+        if (dstorage.isSparse()) {\n+            IntIterator iter = dstorage.valueIterator();\n+            while (iter.hasNext()) {\n+                if (iter.nextInt() != 0) {\n+                    numZero += 1;\n+                }\n+            }\n+        } else {\n+            for (int val : dstorage.getValues()) {\n+                if (val != 0) {\n+                    numZero += 1;\n+                }\n+            }\n         }\n-      }\n+        return (int) getDim() - numZero;\n     }\n \n-    return new IntIntVector(matrixId, rowId, clock, getDim(), (IntIntVectorStorage) storage);\n-  }\n+    public IntIntVector clone() {\n+        return new IntIntVector(matrixId, rowId, clock, dim,\n+                ((IntIntVectorStorage) storage).clone());\n+    }\n \n-  @Override\n-  public Vector filterUp(double threshold) {\n-    IntIntSparseVectorStorage newStorage = new IntIntSparseVectorStorage(size());\n+    @Override\n+    public IntIntVector copy() {\n+        return new IntIntVector(matrixId, rowId, clock, dim,\n+                ((IntIntVectorStorage) storage).copy());\n+    }\n \n-    if (storage.isDense()) {\n-      int[] values = ((IntIntVectorStorage) storage).getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        if (values[i] >= threshold) {\n-          newStorage.set(i, values[i]);\n+    @Override\n+    public IntIntVector emptyLike() {\n+        if (storage.isDense()) {\n+            return new IntIntVector(matrixId, rowId, clock, dim,\n+                    ((IntIntVectorStorage) storage).emptyDense());\n+        } else if (storage.isSparse()) {\n+            return new IntIntVector(matrixId, rowId, clock, dim,\n+                    ((IntIntVectorStorage) storage).emptySparse());\n+        } else {\n+            return new IntIntVector(matrixId, rowId, clock, dim,\n+                    ((IntIntVectorStorage) storage).emptySorted());\n         }\n-      }\n-    } else if (storage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (value >= threshold) {\n-          newStorage.set(entry.getIntKey(), value);\n+    }\n+\n+    @Override\n+    public IntIntVectorStorage getStorage() {\n+        return (IntIntVectorStorage) storage;\n+    }\n+\n+    @Override\n+    public boolean hasKey(int idx) {\n+        return getStorage().hasKey(idx);\n+    }\n+\n+    @Override\n+    public Vector filter(double threshold) {\n+        IntIntSparseVectorStorage newStorage = new IntIntSparseVectorStorage(size());\n+\n+        if (storage.isDense()) {\n+            int[] values = ((IntIntVectorStorage) storage).getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                if (Math.abs(values[i]) >= threshold) {\n+                    newStorage.set(i, values[i]);\n+                }\n+            }\n+        } else if (storage.isSparse()) {\n+            ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n+            while (iter.hasNext()) {\n+                Int2IntMap.Entry entry = iter.next();\n+                int value = entry.getIntValue();\n+                if (Math.abs(value) >= threshold) {\n+                    newStorage.set(entry.getIntKey(), value);\n+                }\n+            }\n+        } else {\n+            int[] indices = ((IntIntVectorStorage) storage).getIndices();\n+            int[] values = ((IntIntVectorStorage) storage).getValues();\n+\n+            int size = ((IntIntVectorStorage) storage).size();\n+            for (int k = 0; k < size; k++) {\n+                if (Math.abs(values[k]) >= threshold) {\n+                    newStorage.set(indices[k], values[k]);\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      int[] indices = ((IntIntVectorStorage) storage).getIndices();\n-      int[] values = ((IntIntVectorStorage) storage).getValues();\n-\n-      int size = ((IntIntVectorStorage) storage).size();\n-      for (int k = 0; k < size; k++) {\n-        if (values[k] >= threshold) {\n-          newStorage.set(indices[k], values[k]);\n+\n+        return new IntIntVector(matrixId, rowId, clock, getDim(), newStorage);\n+    }\n+\n+    @Override\n+    public Vector ifilter(double threshold) {\n+\n+        if (storage.isDense()) {\n+            int[] values = ((IntIntVectorStorage) storage).getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                if (Math.abs(values[i]) <= threshold) {\n+                    values[i] = 0;\n+                }\n+            }\n+        } else if (storage.isSparse()) {\n+            ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n+            while (iter.hasNext()) {\n+                Int2IntMap.Entry entry = iter.next();\n+                int value = entry.getIntValue();\n+                if (Math.abs(value) <= threshold) {\n+                    iter.remove();\n+                }\n+            }\n+        } else {\n+            int[] indices = ((IntIntVectorStorage) storage).getIndices();\n+            int[] values = ((IntIntVectorStorage) storage).getValues();\n+\n+            int size = ((IntIntVectorStorage) storage).size();\n+            for (int k = 0; k < size; k++) {\n+                if (Math.abs(values[k]) <= threshold) {\n+                    values = ArrayUtils.remove(values, k);\n+                    indices = ArrayUtils.remove(indices, k);\n+                }\n+            }\n         }\n-      }\n+\n+        return new IntIntVector(matrixId, rowId, clock, getDim(), (IntIntVectorStorage) storage);\n     }\n \n-    return new IntIntVector(matrixId, rowId, clock, getDim(), newStorage);\n-  }\n+    @Override\n+    public Vector filterUp(double threshold) {\n+        IntIntSparseVectorStorage newStorage = new IntIntSparseVectorStorage(size());\n+\n+        if (storage.isDense()) {\n+            int[] values = ((IntIntVectorStorage) storage).getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                if (values[i] >= threshold) {\n+                    newStorage.set(i, values[i]);\n+                }\n+            }\n+        } else if (storage.isSparse()) {\n+            ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n+            while (iter.hasNext()) {\n+                Int2IntMap.Entry entry = iter.next();\n+                int value = entry.getIntValue();\n+                if (value >= threshold) {\n+                    newStorage.set(entry.getIntKey(), value);\n+                }\n+            }\n+        } else {\n+            int[] indices = ((IntIntVectorStorage) storage).getIndices();\n+            int[] values = ((IntIntVectorStorage) storage).getValues();\n+\n+            int size = ((IntIntVectorStorage) storage).size();\n+            for (int k = 0; k < size; k++) {\n+                if (values[k] >= threshold) {\n+                    newStorage.set(indices[k], values[k]);\n+                }\n+            }\n+        }\n+\n+        return new IntIntVector(matrixId, rowId, clock, getDim(), newStorage);\n+    }\n }\n",
            "diff_size": 571
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "280",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "282",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/57/IntIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/57/IntIntVector.java\nindex 097dccd52d8..23b47e772fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/57/IntIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/57/IntIntVector.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.vector;\n \n import com.tencent.angel.ml.math2.storage.IntIntSparseVectorStorage;\n@@ -70,7 +69,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int max() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+  return 0;\n     int maxval = Integer.MIN_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -92,7 +92,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int min() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+  return 0;\n     int minval = Integer.MAX_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -114,7 +115,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int argmax() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+  return -1;\n     int maxval = Integer.MIN_VALUE;\n     int maxidx = -1;\n     if (idstorage.isDense()) {\n@@ -154,7 +156,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int argmin() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+  return -1;\n     int minval = Integer.MAX_VALUE;\n     int minidx = -1;\n     if (idstorage.isDense()) {\n@@ -194,7 +197,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public double std() {\n     IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+  return 0;\n     double sumval = 0.0;\n     double sumval2 = 0.0;\n     if (dstorage.isSparse()) {\n@@ -217,7 +221,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public double average() {\n     IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+  return 0;\n     double sumval = 0.0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -240,7 +245,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int numZeros() {\n     IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (int) dim;\n+    if (dstorage.size() == 0)\n+  return (int) dim;\n     int numZero = 0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -260,27 +266,22 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n   }\n \n   public IntIntVector clone() {\n-    return new IntIntVector(matrixId, rowId, clock, dim,\n-        ((IntIntVectorStorage) storage).clone());\n+    return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).clone());\n   }\n \n   @Override\n   public IntIntVector copy() {\n-    return new IntIntVector(matrixId, rowId, clock, dim,\n-        ((IntIntVectorStorage) storage).copy());\n+    return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).copy());\n   }\n \n   @Override\n   public IntIntVector emptyLike() {\n     if (storage.isDense()) {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptyDense());\n-    } else if (storage.isSparse()) {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptySparse());\n-    } else {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptySorted());\n+      return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).emptyDense());\n+  } else if (storage.isSparse()) {\n+      return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).emptySparse());\n+  } else {\n+      return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).emptySorted());\n     }\n   }\n \n@@ -331,8 +332,7 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   @Override\n   public Vector ifilter(double threshold) {\n-\n-    if (storage.isDense()) {\n+  if (storage.isDense()) {\n       int[] values = ((IntIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n         if (Math.abs(values[i]) <= threshold) {\n@@ -398,4 +398,4 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n     return new IntIntVector(matrixId, rowId, clock, getDim(), newStorage);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "288",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "290",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "315",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "346",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "379",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/57/IntIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/57/IntIntVector.java\nindex 097dccd52d8..bca9fdfb114 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/57/IntIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/57/IntIntVector.java\n@@ -26,6 +26,7 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n import org.apache.commons.lang.ArrayUtils;\n \n public class IntIntVector extends IntVector implements IntKeyVector, SimpleVector {\n+\n   private int dim;\n \n   public IntIntVector() {\n@@ -70,7 +71,9 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int max() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+      return 0;\n+\n     int maxval = Integer.MIN_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -92,7 +95,9 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int min() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+      return 0;\n+\n     int minval = Integer.MAX_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -114,7 +119,9 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int argmax() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+      return -1;\n+\n     int maxval = Integer.MIN_VALUE;\n     int maxidx = -1;\n     if (idstorage.isDense()) {\n@@ -127,16 +134,16 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     } else if (idstorage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int idx = entry.getIntKey();\n-        int val = entry.getIntValue();\n-        if (val > maxval) {\n-          maxval = val;\n-          maxidx = idx;\n-        }\n-      }\n+             ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n+             while (iter.hasNext()) {\n+               Int2IntMap.Entry entry = iter.next();\n+               int idx = entry.getIntKey();\n+               int val = entry.getIntValue();\n+               if (val > maxval) {\n+                 maxval = val;\n+                 maxidx = idx;\n+               }\n+             }\n     } else {\n       int[] indices = idstorage.getIndices();\n       int[] val = idstorage.getValues();\n@@ -154,7 +161,9 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int argmin() {\n     IntIntVectorStorage idstorage = (IntIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+      return -1;\n+\n     int minval = Integer.MAX_VALUE;\n     int minidx = -1;\n     if (idstorage.isDense()) {\n@@ -167,16 +176,16 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     } else if (idstorage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int idx = entry.getIntKey();\n-        int val = entry.getIntValue();\n-        if (val < minval) {\n-          minval = val;\n-          minidx = idx;\n-        }\n-      }\n+             ObjectIterator<Int2IntMap.Entry> iter = idstorage.entryIterator();\n+             while (iter.hasNext()) {\n+               Int2IntMap.Entry entry = iter.next();\n+               int idx = entry.getIntKey();\n+               int val = entry.getIntValue();\n+               if (val < minval) {\n+                 minval = val;\n+                 minidx = idx;\n+               }\n+             }\n     } else {\n       int[] indices = idstorage.getIndices();\n       int[] val = idstorage.getValues();\n@@ -194,7 +203,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public double std() {\n     IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+      return 0;\n     double sumval = 0.0;\n     double sumval2 = 0.0;\n     if (dstorage.isSparse()) {\n@@ -217,7 +227,8 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public double average() {\n     IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+      return 0;\n     double sumval = 0.0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -229,7 +240,6 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         sumval += val;\n       }\n     }\n-\n     sumval /= getDim();\n     return sumval;\n   }\n@@ -240,7 +250,9 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n \n   public int numZeros() {\n     IntIntVectorStorage dstorage = (IntIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (int) dim;\n+    if (dstorage.size() == 0)\n+      return (int) dim;\n+\n     int numZero = 0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -260,27 +272,22 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n   }\n \n   public IntIntVector clone() {\n-    return new IntIntVector(matrixId, rowId, clock, dim,\n-        ((IntIntVectorStorage) storage).clone());\n+    return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).clone());\n   }\n \n   @Override\n   public IntIntVector copy() {\n-    return new IntIntVector(matrixId, rowId, clock, dim,\n-        ((IntIntVectorStorage) storage).copy());\n+    return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).copy());\n   }\n \n   @Override\n   public IntIntVector emptyLike() {\n     if (storage.isDense()) {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptyDense());\n+      return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).emptyDense());\n     } else if (storage.isSparse()) {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptySparse());\n+             return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).emptySparse());\n     } else {\n-      return new IntIntVector(matrixId, rowId, clock, dim,\n-          ((IntIntVectorStorage) storage).emptySorted());\n+      return new IntIntVector(matrixId, rowId, clock, dim, ((IntIntVectorStorage) storage).emptySorted());\n     }\n   }\n \n@@ -297,7 +304,6 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n   @Override\n   public Vector filter(double threshold) {\n     IntIntSparseVectorStorage newStorage = new IntIntSparseVectorStorage(size());\n-\n     if (storage.isDense()) {\n       int[] values = ((IntIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -306,18 +312,17 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) >= threshold) {\n-          newStorage.set(entry.getIntKey(), value);\n-        }\n-      }\n+             ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n+             while (iter.hasNext()) {\n+               Int2IntMap.Entry entry = iter.next();\n+               int value = entry.getIntValue();\n+               if (Math.abs(value) >= threshold) {\n+                 newStorage.set(entry.getIntKey(), value);\n+               }\n+             }\n     } else {\n       int[] indices = ((IntIntVectorStorage) storage).getIndices();\n       int[] values = ((IntIntVectorStorage) storage).getValues();\n-\n       int size = ((IntIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n         if (Math.abs(values[k]) >= threshold) {\n@@ -325,13 +330,11 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     }\n-\n     return new IntIntVector(matrixId, rowId, clock, getDim(), newStorage);\n   }\n \n   @Override\n   public Vector ifilter(double threshold) {\n-\n     if (storage.isDense()) {\n       int[] values = ((IntIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -340,18 +343,17 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) <= threshold) {\n-          iter.remove();\n-        }\n-      }\n+             ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n+             while (iter.hasNext()) {\n+               Int2IntMap.Entry entry = iter.next();\n+               int value = entry.getIntValue();\n+               if (Math.abs(value) <= threshold) {\n+                 iter.remove();\n+               }\n+             }\n     } else {\n       int[] indices = ((IntIntVectorStorage) storage).getIndices();\n       int[] values = ((IntIntVectorStorage) storage).getValues();\n-\n       int size = ((IntIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n         if (Math.abs(values[k]) <= threshold) {\n@@ -360,14 +362,12 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     }\n-\n     return new IntIntVector(matrixId, rowId, clock, getDim(), (IntIntVectorStorage) storage);\n   }\n \n   @Override\n   public Vector filterUp(double threshold) {\n     IntIntSparseVectorStorage newStorage = new IntIntSparseVectorStorage(size());\n-\n     if (storage.isDense()) {\n       int[] values = ((IntIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -376,18 +376,17 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Int2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (value >= threshold) {\n-          newStorage.set(entry.getIntKey(), value);\n-        }\n-      }\n+             ObjectIterator<Int2IntMap.Entry> iter = ((IntIntVectorStorage) storage).entryIterator();\n+             while (iter.hasNext()) {\n+               Int2IntMap.Entry entry = iter.next();\n+               int value = entry.getIntValue();\n+               if (value >= threshold) {\n+                 newStorage.set(entry.getIntKey(), value);\n+               }\n+             }\n     } else {\n       int[] indices = ((IntIntVectorStorage) storage).getIndices();\n       int[] values = ((IntIntVectorStorage) storage).getValues();\n-\n       int size = ((IntIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n         if (values[k] >= threshold) {\n@@ -395,7 +394,7 @@ public class IntIntVector extends IntVector implements IntKeyVector, SimpleVecto\n         }\n       }\n     }\n-\n     return new IntIntVector(matrixId, rowId, clock, getDim(), newStorage);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 86
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}