{
    "project_name": "wso2-attic-commons",
    "violation_id": "63",
    "information": {
        "violations": [
            {
                "line": "61",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                        passToNextStreamProcessor(complexEvent);\n                        if (currentLength == lengthToKeep) {\n                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(), System.currentTimeMillis());\n                            oldEventIndex++;\n                        } else {\n                            currentLength++;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/63/LengthWindowHandler.java\nindex 63d48dc22ca..8733db5770c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/63/LengthWindowHandler.java\n@@ -58,7 +58,8 @@ public class LengthWindowHandler extends WindowHandler {\n                         queue.put(event);\n                         passToNextStreamProcessor(complexEvent);\n                         if (currentLength == lengthToKeep) {\n-                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(), System.currentTimeMillis());\n+                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()\n+                            );\n                             oldEventIndex++;\n                         } else {\n                             currentLength++;\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/63/LengthWindowHandler.java\nindex 63d48dc22ca..0c56717a08a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/63/LengthWindowHandler.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2010, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.stream.handler.window;\n \n import org.wso2.siddhi.core.event.ComplexEvent;\n@@ -27,55 +28,55 @@ import org.wso2.siddhi.core.util.SchedulerQueue;\n \n public class LengthWindowHandler extends WindowHandler {\n \n-    int lengthToKeep;\n-    private volatile int currentLength = 0;\n+  int lengthToKeep;\n+  private volatile int currentLength = 0;\n \n-    @Override\n-    public void setParameters(Object[] parameters) {\n-        lengthToKeep = (Integer) parameters[0];\n-    }\n+  @Override\n+  public void setParameters(Object[] parameters) {\n+    lengthToKeep = (Integer) parameters[0];\n+  }\n \n-    @Override\n-    public void process(ComplexEvent complexEvent) {\n+  @Override\n+  public void process(ComplexEvent complexEvent) {\n //        try {\n-            if (complexEvent instanceof Event) {\n-                SchedulerQueue<StreamEvent> queue = getWindow();\n-                queue.put((StreamEvent) complexEvent);\n-                passToNextStreamProcessor(complexEvent);\n-                if (currentLength == lengthToKeep) {\n-                    passToNextStreamProcessor(new RemoveEvent((Event) queue.poll(), System.currentTimeMillis()));\n-                } else {\n-                    currentLength++;\n-                }\n-            } else if (complexEvent instanceof ListEvent) {\n-                SchedulerQueue<StreamEvent> queue = getWindow();\n-                Event[] inEvents = ((ListEvent) complexEvent).getEvents();\n-                int oldEventLength = inEvents.length - (lengthToKeep - currentLength);\n-                if (oldEventLength > 0) {\n-                    Event[] oldEvents = new Event[inEvents.length - (lengthToKeep - currentLength)];\n-                    int oldEventIndex = 0;\n-                    for (Event event : inEvents) {\n-                        queue.put(event);\n-                        passToNextStreamProcessor(complexEvent);\n-                        if (currentLength == lengthToKeep) {\n-                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(), System.currentTimeMillis());\n-                            oldEventIndex++;\n-                        } else {\n-                            currentLength++;\n-                        }\n-                    }\n-                    passToNextStreamProcessor(new RemoveListEvent(oldEvents, System.currentTimeMillis()));\n-                } else {\n-                    for (Event event : inEvents) {\n-                        queue.put(event);\n-                        passToNextStreamProcessor(complexEvent);\n-                        currentLength++;\n-                    }\n-                }\n-            }\n+    if (complexEvent instanceof Event) {\n+      SchedulerQueue<StreamEvent> queue = getWindow();\n+      queue.put((StreamEvent) complexEvent);\n+      passToNextStreamProcessor(complexEvent);\n+      if (currentLength == lengthToKeep) {\n+        passToNextStreamProcessor(new RemoveEvent((Event) queue.poll(), System.currentTimeMillis()));\n+      } else {\n+        currentLength++;\n+      }\n+    } else if (complexEvent instanceof ListEvent) {\n+      SchedulerQueue<StreamEvent> queue = getWindow();\n+      Event[] inEvents = ((ListEvent) complexEvent).getEvents();\n+      int oldEventLength = inEvents.length - (lengthToKeep - currentLength);\n+      if (oldEventLength > 0) {\n+        Event[] oldEvents = new Event[inEvents.length - (lengthToKeep - currentLength)];\n+        int oldEventIndex = 0;\n+        for (Event event : inEvents) {\n+          queue.put(event);\n+          passToNextStreamProcessor(complexEvent);\n+          if (currentLength == lengthToKeep) {\n+            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(), System.currentTimeMillis());\n+            oldEventIndex++;\n+          } else {\n+            currentLength++;\n+          }\n+        }\n+        passToNextStreamProcessor(new RemoveListEvent(oldEvents, System.currentTimeMillis()));\n+      } else {\n+        for (Event event : inEvents) {\n+          queue.put(event);\n+          passToNextStreamProcessor(complexEvent);\n+          currentLength++;\n+        }\n+      }\n+    }\n //        } catch (InterruptedException e) {\n //            e.printStackTrace();\n //        }\n-    }\n+  }\n \n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/63/LengthWindowHandler.java\nindex 63d48dc22ca..8733db5770c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/63/LengthWindowHandler.java\n@@ -58,7 +58,8 @@ public class LengthWindowHandler extends WindowHandler {\n                         queue.put(event);\n                         passToNextStreamProcessor(complexEvent);\n                         if (currentLength == lengthToKeep) {\n-                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(), System.currentTimeMillis());\n+                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(),System.currentTimeMillis()\n+                            );\n                             oldEventIndex++;\n                         } else {\n                             currentLength++;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/63/LengthWindowHandler.java\nindex 63d48dc22ca..d05497f58d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/63/LengthWindowHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/63/LengthWindowHandler.java\n@@ -58,7 +58,8 @@ public class LengthWindowHandler extends WindowHandler {\n                         queue.put(event);\n                         passToNextStreamProcessor(complexEvent);\n                         if (currentLength == lengthToKeep) {\n-                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.poll(), System.currentTimeMillis());\n+                            oldEvents[oldEventIndex] = new RemoveEvent((Event) queue.\n+                                    poll(), System.currentTimeMillis());\n                             oldEventIndex++;\n                         } else {\n                             currentLength++;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}