{
    "project_name": "neo4j-neo4j",
    "violation_id": "3328",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/3328/MapIterable.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/3328/MapIterable.java\nindex 114b1765bbe..de6ec6e9ba9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/3328/MapIterable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/3328/MapIterable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.helpers.collection;\n \n import java.util.Iterator;\n@@ -25,9 +26,9 @@ import java.util.function.Function;\n class MapIterable<FROM, TO> implements Iterable<TO>\n {\n     private final Iterable<FROM> from;\n-    private final Function<? super FROM,? extends TO> function;\n+    private final Function<? super FROM, ? extends TO> function;\n \n-    MapIterable( Iterable<FROM> from, Function<? super FROM,? extends TO> function )\n+    MapIterable(Iterable<FROM> from, Function<? super FROM, ? extends TO> function)\n     {\n         this.from = from;\n         this.function = function;\n@@ -36,16 +37,16 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n     @Override\n     public Iterator<TO> iterator()\n     {\n-        return new MapIterator<>( from.iterator(), function );\n+        return new MapIterator<>(from.iterator(), function);\n     }\n \n     static class MapIterator<FROM, TO>\n-            implements Iterator<TO>\n+      implements Iterator<TO>\n     {\n         private final Iterator<FROM> fromIterator;\n-        private final Function<? super FROM,? extends TO> function;\n+        private final Function<? super FROM, ? extends TO> function;\n \n-        MapIterator( Iterator<FROM> fromIterator, Function<? super FROM,? extends TO> function )\n+        MapIterator(Iterator<FROM> fromIterator, Function<? super FROM, ? extends TO> function)\n         {\n             this.fromIterator = fromIterator;\n             this.function = function;\n@@ -62,7 +63,7 @@ class MapIterable<FROM, TO> implements Iterable<TO>\n         {\n             FROM from = fromIterator.next();\n \n-            return function.apply( from );\n+            return function.apply(from);\n         }\n \n         @Override\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}