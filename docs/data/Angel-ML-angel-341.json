{
    "project_name": "Angel-ML-angel",
    "violation_id": "341",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/341/LINENode.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/341/LINENode.java\nindex 8a32e5f9c15..49f64696efb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/341/LINENode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/341/LINENode.java\n@@ -31,114 +31,114 @@ import java.io.IOException;\n  */\n public class LINENode implements IElement {\n \n-  private float[] inputFeats;\n-  private float[] outputFeats;\n-\n-  // Use by line with weight\n-  private transient int[] neighbors;\n-  private transient float[] weights;\n-\n-  public LINENode(float[] inputFeats, float[] outputFeats) {\n-    this.inputFeats = inputFeats;\n-    this.outputFeats = outputFeats;\n-  }\n-\n-  public LINENode() {\n-    this(null, null);\n-  }\n-\n-  public float[] getInputFeats() {\n-    return inputFeats;\n-  }\n-\n-  public void setInputFeats(float[] inputFeats) {\n-    this.inputFeats = inputFeats;\n-  }\n-\n-  public float[] getOutputFeats() {\n-    return outputFeats;\n-  }\n-\n-  public void setOutputFeats(float[] outputFeats) {\n-    this.outputFeats = outputFeats;\n-  }\n-\n-  public int[] getNeighbors() {\n-    return neighbors;\n-  }\n-\n-  public void setNeighbors(int[] neighbors) {\n-    this.neighbors = neighbors;\n-  }\n-\n-  public float[] getWeights() {\n-    return weights;\n-  }\n-\n-  public void setWeights(float[] weights) {\n-    this.weights = weights;\n-  }\n-\n-  @Override\n-  public Object deepClone() {\n-    float[] cloneInputFeats = new float[inputFeats.length];\n-    System.arraycopy(inputFeats, 0, cloneInputFeats, 0, inputFeats.length);\n-\n-    float[] cloneOutputFeats;\n-    if (outputFeats != null) {\n-      cloneOutputFeats = new float[outputFeats.length];\n-      System.arraycopy(outputFeats, 0, cloneOutputFeats, 0, outputFeats.length);\n-    }\n-    return new LINENode(inputFeats, outputFeats);\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf output) {\n-    ByteBufSerdeUtils.serializeFloats(output, inputFeats);\n-    if (outputFeats != null) {\n-      ByteBufSerdeUtils.serializeFloats(output, outputFeats);\n-    } else {\n-      ByteBufSerdeUtils.serializeEmptyFloats(output);\n-    }\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    inputFeats = ByteBufSerdeUtils.deserializeFloats(input);\n-    outputFeats = ByteBufSerdeUtils.deserializeFloats(input);\n-    if (outputFeats.length == 0) {\n-      outputFeats = null;\n-    }\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    return ByteBufSerdeUtils.serializedFloatsLen(inputFeats)\n-        + (outputFeats != null ? ByteBufSerdeUtils.serializedFloatsLen(outputFeats)\n-        : ByteBufSerdeUtils.serializedEmptyFloatsLen());\n-  }\n-\n-  @Override\n-  public void serialize(DataOutputStream output) throws IOException {\n-    StreamSerdeUtils.serializeFloats(output, inputFeats);\n-    if (outputFeats != null) {\n-      StreamSerdeUtils.serializeFloats(output, outputFeats);\n-    } else {\n-      StreamSerdeUtils.serializeEmptyFloats(output);\n-    }\n-  }\n-\n-  @Override\n-  public void deserialize(DataInputStream input) throws IOException {\n-    inputFeats = StreamSerdeUtils.deserializeFloats(input);\n-    outputFeats = StreamSerdeUtils.deserializeFloats(input);\n-    if (outputFeats.length == 0) {\n-      outputFeats = null;\n-    }\n-  }\n-\n-  @Override\n-  public int dataLen() {\n-    return bufferLen();\n-  }\n+    private float[] inputFeats;\n+    private float[] outputFeats;\n+\n+    // Use by line with weight\n+    private transient int[] neighbors;\n+    private transient float[] weights;\n+\n+    public LINENode(float[] inputFeats, float[] outputFeats) {\n+        this.inputFeats = inputFeats;\n+        this.outputFeats = outputFeats;\n+    }\n+\n+    public LINENode() {\n+        this(null, null);\n+    }\n+\n+    public float[] getInputFeats() {\n+        return inputFeats;\n+    }\n+\n+    public void setInputFeats(float[] inputFeats) {\n+        this.inputFeats = inputFeats;\n+    }\n+\n+    public float[] getOutputFeats() {\n+        return outputFeats;\n+    }\n+\n+    public void setOutputFeats(float[] outputFeats) {\n+        this.outputFeats = outputFeats;\n+    }\n+\n+    public int[] getNeighbors() {\n+        return neighbors;\n+    }\n+\n+    public void setNeighbors(int[] neighbors) {\n+        this.neighbors = neighbors;\n+    }\n+\n+    public float[] getWeights() {\n+        return weights;\n+    }\n+\n+    public void setWeights(float[] weights) {\n+        this.weights = weights;\n+    }\n+\n+    @Override\n+    public Object deepClone() {\n+        float[] cloneInputFeats = new float[inputFeats.length];\n+        System.arraycopy(inputFeats, 0, cloneInputFeats, 0, inputFeats.length);\n+\n+        float[] cloneOutputFeats;\n+        if (outputFeats != null) {\n+            cloneOutputFeats = new float[outputFeats.length];\n+            System.arraycopy(outputFeats, 0, cloneOutputFeats, 0, outputFeats.length);\n+        }\n+        return new LINENode(inputFeats, outputFeats);\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        ByteBufSerdeUtils.serializeFloats(output, inputFeats);\n+        if (outputFeats != null) {\n+            ByteBufSerdeUtils.serializeFloats(output, outputFeats);\n+        } else {\n+            ByteBufSerdeUtils.serializeEmptyFloats(output);\n+        }\n+    }\n+\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        inputFeats = ByteBufSerdeUtils.deserializeFloats(input);\n+        outputFeats = ByteBufSerdeUtils.deserializeFloats(input);\n+        if (outputFeats.length == 0) {\n+            outputFeats = null;\n+        }\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+        return ByteBufSerdeUtils.serializedFloatsLen(inputFeats)\n+                + (outputFeats != null ? ByteBufSerdeUtils.serializedFloatsLen(outputFeats)\n+                : ByteBufSerdeUtils.serializedEmptyFloatsLen());\n+    }\n+\n+    @Override\n+    public void serialize(DataOutputStream output) throws IOException {\n+        StreamSerdeUtils.serializeFloats(output, inputFeats);\n+        if (outputFeats != null) {\n+            StreamSerdeUtils.serializeFloats(output, outputFeats);\n+        } else {\n+            StreamSerdeUtils.serializeEmptyFloats(output);\n+        }\n+    }\n+\n+    @Override\n+    public void deserialize(DataInputStream input) throws IOException {\n+        inputFeats = StreamSerdeUtils.deserializeFloats(input);\n+        outputFeats = StreamSerdeUtils.deserializeFloats(input);\n+        if (outputFeats.length == 0) {\n+            outputFeats = null;\n+        }\n+    }\n+\n+    @Override\n+    public int dataLen() {\n+        return bufferLen();\n+    }\n }\n",
            "diff_size": 110
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/341/LINENode.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/341/LINENode.java\nindex 8a32e5f9c15..8502d0a0e30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/341/LINENode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/341/LINENode.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.graph.embedding.line;\n \n import com.tencent.angel.common.ByteBufSerdeUtils;\n@@ -114,8 +113,7 @@ public class LINENode implements IElement {\n   @Override\n   public int bufferLen() {\n     return ByteBufSerdeUtils.serializedFloatsLen(inputFeats)\n-        + (outputFeats != null ? ByteBufSerdeUtils.serializedFloatsLen(outputFeats)\n-        : ByteBufSerdeUtils.serializedEmptyFloatsLen());\n+        + (outputFeats != null ? ByteBufSerdeUtils.serializedFloatsLen(outputFeats) : ByteBufSerdeUtils.serializedEmptyFloatsLen());\n   }\n \n   @Override\n@@ -141,4 +139,4 @@ public class LINENode implements IElement {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/341/LINENode.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/341/LINENode.java\nindex 8a32e5f9c15..b8b539bbacb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/341/LINENode.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/341/LINENode.java\n@@ -29,6 +29,7 @@ import java.io.IOException;\n /**\n  * A user-define data type that store node information on PS\n  */\n+\n public class LINENode implements IElement {\n \n   private float[] inputFeats;\n@@ -83,7 +84,6 @@ public class LINENode implements IElement {\n   public Object deepClone() {\n     float[] cloneInputFeats = new float[inputFeats.length];\n     System.arraycopy(inputFeats, 0, cloneInputFeats, 0, inputFeats.length);\n-\n     float[] cloneOutputFeats;\n     if (outputFeats != null) {\n       cloneOutputFeats = new float[outputFeats.length];\n@@ -113,9 +113,7 @@ public class LINENode implements IElement {\n \n   @Override\n   public int bufferLen() {\n-    return ByteBufSerdeUtils.serializedFloatsLen(inputFeats)\n-        + (outputFeats != null ? ByteBufSerdeUtils.serializedFloatsLen(outputFeats)\n-        : ByteBufSerdeUtils.serializedEmptyFloatsLen());\n+    return ByteBufSerdeUtils.serializedFloatsLen(inputFeats) + (outputFeats != null ? ByteBufSerdeUtils.serializedFloatsLen(outputFeats) : ByteBufSerdeUtils.serializedEmptyFloatsLen());\n   }\n \n   @Override\n@@ -141,4 +139,5 @@ public class LINENode implements IElement {\n   public int dataLen() {\n     return bufferLen();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}