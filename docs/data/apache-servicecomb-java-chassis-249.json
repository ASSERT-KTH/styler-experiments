{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "249",
    "information": {
        "violations": [
            {
                "line": "192",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      dataCenterInfo.setName(dataCenterName);\n      dataCenterInfo\n          .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n      dataCenterInfo.setAvailableZone(\n          DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.availableZone\", null).get());\n      microserviceInstance.setDataCenterInfo(dataCenterInfo);",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/249/MicroserviceInstance.java\nindex 8d4d7f769b3..f9cb6ce4989 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/249/MicroserviceInstance.java\n@@ -188,9 +188,9 @@ public class MicroserviceInstance {\n     if (StringUtils.isNotEmpty(dataCenterName)) {\n       DataCenterInfo dataCenterInfo = new DataCenterInfo();\n       dataCenterInfo.setName(dataCenterName);\n-      dataCenterInfo\n-          .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n-      dataCenterInfo.setAvailableZone(\n+      dataCenterInfo.setRegion(DynamicPropertyFactory\n+          .getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n+  dataCenterInfo.setAvailableZone(\n           DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.availableZone\", null).get());\n       microserviceInstance.setDataCenterInfo(dataCenterInfo);\n     }\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/249/MicroserviceInstance.java\nindex 8d4d7f769b3..b2361051f82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/249/MicroserviceInstance.java\n@@ -189,7 +189,8 @@ public class MicroserviceInstance {\n       DataCenterInfo dataCenterInfo = new DataCenterInfo();\n       dataCenterInfo.setName(dataCenterName);\n       dataCenterInfo\n-          .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n+          .setRegion(\n+              DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n       dataCenterInfo.setAvailableZone(\n           DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.availableZone\", null).get());\n       microserviceInstance.setDataCenterInfo(dataCenterInfo);\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/249/MicroserviceInstance.java\nindex 8d4d7f769b3..3941e1e0ef5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/249/MicroserviceInstance.java\n@@ -51,7 +51,8 @@ public class MicroserviceInstance {\n \n   private MicroserviceInstanceStatus status = MicroserviceInstanceStatus.UP;\n \n-  private Map<String, String> properties = new HashMap<>(); // reserved key list: region|az|stage|group\n+  private Map<String, String> properties = new HashMap<>();\n+// reserved key list: region|az|stage|group\n \n   private HealthCheck healthCheck;\n \n@@ -195,4 +196,4 @@ public class MicroserviceInstance {\n       microserviceInstance.setDataCenterInfo(dataCenterInfo);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "169",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/249/MicroserviceInstance.java\nindex 8d4d7f769b3..01a1701b0b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/249/MicroserviceInstance.java\n@@ -25,17 +25,16 @@ import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.lang.StringUtils;\n import org.apache.servicecomb.serviceregistry.config.InstancePropertiesLoader;\n-\n import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n import com.netflix.config.DynamicPropertyFactory;\n \n /**\n  * Created by   on 2016/12/5.\n  */\n+\n @JsonIgnoreProperties(ignoreUnknown = true)\n public class MicroserviceInstance {\n   // even disconnected from service center\n@@ -58,6 +57,7 @@ public class MicroserviceInstance {\n   /**\n    * Will be abandoned, use {@link Microservice#environment} instead\n    */\n+\n   @Deprecated\n   private String environment;\n \n@@ -161,18 +161,19 @@ public class MicroserviceInstance {\n   }\n \n   // Some properties of microservice instance are dynamic changed, not cover them all now.\n+\n   public static MicroserviceInstance createFromDefinition(Configuration configuration) {\n     MicroserviceInstance microserviceInstance = new MicroserviceInstance();\n     // default hard coded values\n     microserviceInstance.setStage(DEFAULT_STAGE);\n-    microserviceInstance\n-        .setEnvironment(\n-            configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n+    microserviceInstance.setEnvironment(configuration.getString(CONFIG_QUALIFIED_INSTANCE_ENVIRONMENT_KEY, DEFAULT_INSTANCE_ENVIRONMENT));\n+\n     HealthCheck healthCheck = new HealthCheck();\n     healthCheck.setMode(HealthCheckMode.HEARTBEAT);\n     microserviceInstance.setHealthCheck(healthCheck);\n \n     // load properties\n+\n     Map<String, String> propertiesMap = InstancePropertiesLoader.INSTANCE.loadProperties(configuration);\n     microserviceInstance.setProperties(propertiesMap);\n \n@@ -182,17 +183,16 @@ public class MicroserviceInstance {\n   }\n \n   private static void loadDataCenterInfo(MicroserviceInstance microserviceInstance) {\n-    String dataCenterName = DynamicPropertyFactory.getInstance()\n-        .getStringProperty(\"servicecomb.datacenter.name\", null)\n-        .get();\n+    String dataCenterName = DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.name\", null)\n+                                                                .get();\n     if (StringUtils.isNotEmpty(dataCenterName)) {\n       DataCenterInfo dataCenterInfo = new DataCenterInfo();\n       dataCenterInfo.setName(dataCenterName);\n-      dataCenterInfo\n-          .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n-      dataCenterInfo.setAvailableZone(\n-          DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.availableZone\", null).get());\n+      dataCenterInfo.setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null)\n+                                                                   .get());\n+      dataCenterInfo.setAvailableZone(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.availableZone\", null)\n+                                                                          .get());\n       microserviceInstance.setDataCenterInfo(dataCenterInfo);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "193",
                    "column": "59",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/249/MicroserviceInstance.java\nindex 8d4d7f769b3..e2e667a79ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/249/MicroserviceInstance.java\n@@ -189,7 +189,8 @@ public class MicroserviceInstance {\n       DataCenterInfo dataCenterInfo = new DataCenterInfo();\n       dataCenterInfo.setName(dataCenterName);\n       dataCenterInfo\n-          .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n+      .setRegion(DynamicPropertyFactory.getInstance(\n+      ).getStringProperty(\"servicecomb.datacenter.region\",null).get());\n       dataCenterInfo.setAvailableZone(\n           DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.availableZone\", null).get());\n       microserviceInstance.setDataCenterInfo(dataCenterInfo);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/249/MicroserviceInstance.java\nindex 8d4d7f769b3..f9cb6ce4989 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/249/MicroserviceInstance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/249/MicroserviceInstance.java\n@@ -188,9 +188,9 @@ public class MicroserviceInstance {\n     if (StringUtils.isNotEmpty(dataCenterName)) {\n       DataCenterInfo dataCenterInfo = new DataCenterInfo();\n       dataCenterInfo.setName(dataCenterName);\n-      dataCenterInfo\n-          .setRegion(DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n-      dataCenterInfo.setAvailableZone(\n+      dataCenterInfo.setRegion(DynamicPropertyFactory\n+          .getInstance().getStringProperty(\"servicecomb.datacenter.region\", null).get());\n+  dataCenterInfo.setAvailableZone(\n           DynamicPropertyFactory.getInstance().getStringProperty(\"servicecomb.datacenter.availableZone\", null).get());\n       microserviceInstance.setDataCenterInfo(dataCenterInfo);\n     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}