{
    "project_name": "TIBCOSoftware-genxdm",
    "violation_id": "244",
    "information": {
        "violations": [
            {
                "line": "11",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class TestSerialize extends BaseBareDomPerfTest {\n\n\tLSSerializer mi_writer;\n\t\n\t@Override\n\tpublic String getTestName() {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "12",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/244/TestSerialize.java\nindex 63e668d6576..09ecace1e1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/244/TestSerialize.java\n@@ -8,7 +8,7 @@ import org.w3c.dom.ls.LSSerializer;\n \r\n public class TestSerialize extends BaseBareDomPerfTest {\r\n \r\n-\tLSSerializer mi_writer;\r\n+LSSerializer mi_writer;\r\n \t\r\n \t@Override\r\n \tpublic String getTestName() {\r\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/244/TestSerialize.java\nindex 63e668d6576..472dca47dbc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/244/TestSerialize.java\n@@ -8,46 +8,54 @@ import org.w3c.dom.ls.LSSerializer;\n \r\n public class TestSerialize extends BaseBareDomPerfTest {\r\n \r\n-\tLSSerializer mi_writer;\r\n-\t\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\treturn getDocFile();\r\n-\t}\r\n-\t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\t{\r\n-\t\tsuper.initialSetup(props);\r\n-        System.setProperty(DOMImplementationRegistry.PROPERTY, \"org.apache.xerces.dom.DOMImplementationSourceImpl\");\r\n-\t\tDOMImplementationRegistry registry;\r\n-\t\ttry {\r\n-\t\t\tregistry = DOMImplementationRegistry.newInstance();\r\n-\t\t} catch (ClassCastException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (InstantiationException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (IllegalAccessException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t\tDOMImplementationLS impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\r\n-\t\tmi_writer = impl.createLSSerializer();\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void iterativeSetup() {\r\n-\t\tif(m_testNode == null)\r\n-\t\t{\r\n-\t\t\tsetupTestNode();\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic void execute() {\r\n+    LSSerializer mi_writer;\r\n+\r\n+    @Override\r\n+    public String getTestName() {\r\n+        return getDocFile();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialSetup(Map<String, Object> props) {\r\n+        super.initialSetup(props);\r\n+        System.setProperty(DOMImplementationRegistry.PROPERTY,\r\n+            \"org.apache.xerces.dom.DOMImplementationSourceImpl\");\r\n+        DOMImplementationRegistry registry;\r\n+        try {\r\n+            registry = DOMImplementationRegistry.newInstance();\r\n+        } catch (ClassCastException e) {\r\n+            throw new RuntimeException(e);\r\n+        } catch (ClassNotFoundException e) {\r\n+            throw new RuntimeException(e);\r\n+        } catch (InstantiationException e) {\r\n+            throw new RuntimeException(e);\r\n+        } catch (IllegalAccessException e) {\r\n+            throw new RuntimeException(e);\r\n+        }\r\n+        DOMImplementationLS impl = (DOMImplementationLS) registry.getDOMImplementation(\"LS\");\r\n+        mi_writer = impl.createLSSerializer();\r\n+    }\r\n+\r\n+    @Override\r\n+    public void iterativeSetup() {\r\n+        if (m_testNode == null) {\r\n+            setupTestNode();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void execute() {\r\n         mi_writer.writeToString(m_testNode);\r\n-\t}\r\n-\t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n-\t\r\n-\t@Override\r\n-\tpublic void finalTeardown() {};\r\n+    }\r\n+\r\n+    @Override\r\n+    public Iterable<String> iterativeTeardown() {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void finalTeardown() {\r\n+    }\r\n+\r\n+    ;\r\n }\r\n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "17",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/244/TestSerialize.java\nindex 63e668d6576..f55ad8c8b05 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/244/TestSerialize.java\n@@ -6,48 +6,49 @@ import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n import org.w3c.dom.ls.DOMImplementationLS;\r\n import org.w3c.dom.ls.LSSerializer;\r\n \r\n-public class TestSerialize extends BaseBareDomPerfTest {\r\n-\r\n-\tLSSerializer mi_writer;\r\n-\t\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\treturn getDocFile();\r\n-\t}\r\n+public class TestSerialize extends BaseBareDomPerfTest {\n+\n+    LSSerializer mi_writer;\n+\n+@Override\n+public String getTestName() {\n+    return getDocFile();\n+    }\r\n \t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\t{\r\n-\t\tsuper.initialSetup(props);\r\n-        System.setProperty(DOMImplementationRegistry.PROPERTY, \"org.apache.xerces.dom.DOMImplementationSourceImpl\");\r\n-\t\tDOMImplementationRegistry registry;\r\n-\t\ttry {\r\n-\t\t\tregistry = DOMImplementationRegistry.newInstance();\r\n-\t\t} catch (ClassCastException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (InstantiationException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (IllegalAccessException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n+\tpublic void initialSetup(Map<String,Object> props)\n+{\n+    super.initialSetup(props);\n+System.setProperty(DOMImplementationRegistry.PROPERTY, \"org.apache.xerces.dom.DOMImplementationSourceImpl\");\n+DOMImplementationRegistry registry;\r\n+\t\ttry { registry = DOMImplementationRegistry.newInstance();\n+    } catch (ClassCastException e) {\n+    throw new RuntimeException(e);\n+    } catch (ClassNotFoundException e) {\n+    throw new RuntimeException(e);\n+    } catch (InstantiationException e) {\n+    throw new RuntimeException(e);\n+    } catch (IllegalAccessException e) {\n+    throw new RuntimeException(e);\n+    }\r\n \t\tDOMImplementationLS impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\r\n-\t\tmi_writer = impl.createLSSerializer();\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void iterativeSetup() {\r\n-\t\tif(m_testNode == null)\r\n-\t\t{\r\n-\t\t\tsetupTestNode();\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic void execute() {\r\n-        mi_writer.writeToString(m_testNode);\r\n-\t}\r\n+\t\tmi_writer = impl.createLSSerializer();\n+    }\n+\n+@Override\n+public void iterativeSetup() {\n+                if (m_testNode == null)\r\n+\t\t{\n+    setupTestNode();\n+    }\n+    }\r\n \t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n-\t\r\n+\tpublic void execute() {\n+    mi_writer.writeToString(m_testNode);\n+    }\r\n \t@Override\r\n-\tpublic void finalTeardown() {};\r\n-}\r\n+\tpublic Iterable<String> iterativeTeardown() { return null;\n+    }\n+\n+        @Override\n+public void finalTeardown() {};\n+    }\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/244/TestSerialize.java\nindex 63e668d6576..79317f46071 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/244/TestSerialize.java\n@@ -1,53 +1,77 @@\n-package org.genxdm.samples.performance.dom;\r\n-\r\n-import java.util.Map;\r\n-\r\n-import org.w3c.dom.bootstrap.DOMImplementationRegistry;\r\n-import org.w3c.dom.ls.DOMImplementationLS;\r\n-import org.w3c.dom.ls.LSSerializer;\r\n-\r\n-public class TestSerialize extends BaseBareDomPerfTest {\r\n-\r\n-\tLSSerializer mi_writer;\r\n-\t\r\n-\t@Override\r\n-\tpublic String getTestName() {\r\n-\t\treturn getDocFile();\r\n-\t}\r\n-\t@Override\r\n-\tpublic void initialSetup(Map<String,Object> props)\t{\r\n-\t\tsuper.initialSetup(props);\r\n-        System.setProperty(DOMImplementationRegistry.PROPERTY, \"org.apache.xerces.dom.DOMImplementationSourceImpl\");\r\n-\t\tDOMImplementationRegistry registry;\r\n-\t\ttry {\r\n-\t\t\tregistry = DOMImplementationRegistry.newInstance();\r\n-\t\t} catch (ClassCastException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (InstantiationException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t} catch (IllegalAccessException e) {\r\n-\t\t\tthrow new RuntimeException(e);\r\n-\t\t}\r\n-\t\tDOMImplementationLS impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\r\n-\t\tmi_writer = impl.createLSSerializer();\r\n-\t}\r\n-\t\r\n-\t@Override\r\n-\tpublic void iterativeSetup() {\r\n-\t\tif(m_testNode == null)\r\n-\t\t{\r\n-\t\t\tsetupTestNode();\r\n-\t\t}\r\n-\t}\r\n-\t@Override\r\n-\tpublic void execute() {\r\n-        mi_writer.writeToString(m_testNode);\r\n-\t}\r\n-\t@Override\r\n-\tpublic Iterable<String> iterativeTeardown() { return null; }\r\n-\t\r\n-\t@Override\r\n-\tpublic void finalTeardown() {};\r\n-}\r\n+package org.genxdm.samples.performance.dom;\n+\n+import java.util.Map;\n+import org.w3c.dom.bootstrap.DOMImplementationRegistry;\n+import org.w3c.dom.ls.DOMImplementationLS;\n+import org.w3c.dom.ls.LSSerializer;\n+\n+public class TestSerialize extends BaseBareDomPerfTest\n+{\n+    LSSerializer mi_writer;\n+\n+    @Override\n+    public String getTestName()\n+    {\n+        return getDocFile();\n+    }\n+\n+    @Override\n+    public void initialSetup(Map<String, Object> props)\n+    {\n+        super.initialSetup(props);\n+        System.setProperty(DOMImplementationRegistry.PROPERTY, \"org.apache.xerces.dom.DOMImplementationSourceImpl\");\n+        DOMImplementationRegistry registry;\n+        try\n+        {\n+            registry = DOMImplementationRegistry.newInstance();\n+        }\n+        catch (ClassCastException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+        catch (ClassNotFoundException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+        catch (InstantiationException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+        catch (IllegalAccessException e)\n+        {\n+            throw new RuntimeException(e);\n+        }\n+        DOMImplementationLS impl = (DOMImplementationLS)registry.getDOMImplementation(\"LS\");\n+        mi_writer = impl.createLSSerializer();\n+    }\n+\n+    @Override\n+    public void iterativeSetup()\n+    {\n+        if (m_testNode == null)\n+        {\n+            setupTestNode();\n+        }\n+    }\n+\n+    @Override\n+    public void execute()\n+    {\n+        mi_writer.writeToString(m_testNode);\n+    }\n+\n+    @Override\n+    public Iterable<String> iterativeTeardown()\n+    {\n+        return null;\n+    }\n+\n+    @Override\n+    public void finalTeardown()\n+    {\n+\n+\n+    }\n+\n+    ;\n+}\n\\ No newline at end of file\n",
            "diff_size": 77
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "12",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/244/TestSerialize.java\nindex 63e668d6576..09ecace1e1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/244/TestSerialize.java\n@@ -8,7 +8,7 @@ import org.w3c.dom.ls.LSSerializer;\n \r\n public class TestSerialize extends BaseBareDomPerfTest {\r\n \r\n-\tLSSerializer mi_writer;\r\n+LSSerializer mi_writer;\r\n \t\r\n \t@Override\r\n \tpublic String getTestName() {\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "12",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/244/TestSerialize.java\nindex 63e668d6576..eabc6c8253b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/244/TestSerialize.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/244/TestSerialize.java\n@@ -8,7 +8,7 @@ import org.w3c.dom.ls.LSSerializer;\n \r\n public class TestSerialize extends BaseBareDomPerfTest {\r\n \r\n-\tLSSerializer mi_writer;\r\n+    LSSerializer mi_writer;\r\n \t\r\n \t@Override\r\n \tpublic String getTestName() {\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}