{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "294",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.callback.cxf;\n\nimport org.opensaml.saml2.core.Assertion;\nimport org.opensaml.xml.validation.ValidationException;",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/294/Saml2AllowNoSubjectAssertionSpecValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/294/Saml2AllowNoSubjectAssertionSpecValidator.java\nindex dc4fe9fb26e..0acf15ea36f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/294/Saml2AllowNoSubjectAssertionSpecValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/294/Saml2AllowNoSubjectAssertionSpecValidator.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.callback.cxf;\n \n import org.opensaml.saml2.core.Assertion;\n@@ -36,39 +37,39 @@ import org.opensaml.xml.validation.ValidationException;\n  */\n public class Saml2AllowNoSubjectAssertionSpecValidator extends Saml2ExchangeAuthFrameworkValidator {\n \n-    /**\n-     * Instantiates a new saml2 allow no subject assertion spec validator.\n-     */\n-    public Saml2AllowNoSubjectAssertionSpecValidator() {\n-        super();\n-    }\n+  /**\n+   * Instantiates a new saml2 allow no subject assertion spec validator.\n+   */\n+  public Saml2AllowNoSubjectAssertionSpecValidator() {\n+    super();\n+  }\n \n-    /**\n-     * Checks that the Subject element is present when required, but does not check for the existence of Subject when\n-     * the Assertion contains AttributeStatements.\n-     *\n-     * @param assertion the assertion\n-     * @throws ValidationException the validation exception\n-     */\n-    @Override\n-    protected void validateSubject(Assertion assertion) throws ValidationException {\n-        if ((assertion.getStatements() == null || assertion.getStatements().isEmpty())\n-                && (assertion.getAuthnStatements() == null || assertion.getAuthnStatements().isEmpty())\n-                && (assertion.getAttributeStatements() == null || assertion.getAttributeStatements().isEmpty())\n-                && (assertion.getAuthzDecisionStatements() == null || assertion.getAuthzDecisionStatements().isEmpty())\n-                && assertion.getSubject() == null) {\n-            throw new ValidationException(\"Subject is required when Statements are absent\");\n-        }\n+  /**\n+   * Checks that the Subject element is present when required, but does not check for the existence of Subject when\n+   * the Assertion contains AttributeStatements.\n+   *\n+   * @param assertion the assertion\n+   * @throws ValidationException the validation exception\n+   */\n+  @Override\n+  protected void validateSubject(Assertion assertion) throws ValidationException {\n+    if ((assertion.getStatements() == null || assertion.getStatements().isEmpty())\n+        && (assertion.getAuthnStatements() == null || assertion.getAuthnStatements().isEmpty())\n+        && (assertion.getAttributeStatements() == null || assertion.getAttributeStatements().isEmpty())\n+        && (assertion.getAuthzDecisionStatements() == null || assertion.getAuthzDecisionStatements().isEmpty())\n+        && assertion.getSubject() == null) {\n+      throw new ValidationException(\"Subject is required when Statements are absent\");\n+    }\n \n-        if (assertion.getAuthnStatements().size() > 0 && assertion.getSubject() == null) {\n-            throw new ValidationException(\"Assertions containing AuthnStatements require a Subject\");\n-        }\n-        if (assertion.getAuthzDecisionStatements().size() > 0 && assertion.getSubject() == null) {\n-            throw new ValidationException(\"Assertions containing AuthzDecisionStatements require a Subject\");\n-        }\n+    if (assertion.getAuthnStatements().size() > 0 && assertion.getSubject() == null) {\n+      throw new ValidationException(\"Assertions containing AuthnStatements require a Subject\");\n+    }\n+    if (assertion.getAuthzDecisionStatements().size() > 0 && assertion.getSubject() == null) {\n+      throw new ValidationException(\"Assertions containing AuthzDecisionStatements require a Subject\");\n+    }\n \n-        if (assertion.getSubject() != null) {\n-            validateSubject(assertion.getSubject());\n-        }\n+    if (assertion.getSubject() != null) {\n+      validateSubject(assertion.getSubject());\n     }\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "62",
                    "column": "47",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "62",
                    "column": "47",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "63",
                    "column": "54",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "63",
                    "column": "96",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "63",
                    "column": "96",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "column": "103",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "64",
                    "column": "149",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "64",
                    "column": "149",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "column": "156",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "65",
                    "column": "206",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "65",
                    "column": "206",
                    "severity": "error",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "column": "213",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "69",
                    "column": "50",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "72",
                    "column": "58",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/294/Saml2AllowNoSubjectAssertionSpecValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/294/Saml2AllowNoSubjectAssertionSpecValidator.java\nindex dc4fe9fb26e..1a9bf20bcf5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/294/Saml2AllowNoSubjectAssertionSpecValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/294/Saml2AllowNoSubjectAssertionSpecValidator.java\n@@ -34,14 +34,19 @@ import org.opensaml.xml.validation.ValidationException;\n  * checking for the existence of Subject when the Assertion contains AttributeStatements. This is required for\n  * interoperability with previous CONNECT gateways.\n  */\n-public class Saml2AllowNoSubjectAssertionSpecValidator extends Saml2ExchangeAuthFrameworkValidator {\n+\n+\n+public class Saml2AllowNoSubjectAssertionSpecValidator extends\n+    Saml2ExchangeAuthFrameworkValidator {\n \n     /**\n      * Instantiates a new saml2 allow no subject assertion spec validator.\n      */\n+\n+\n     public Saml2AllowNoSubjectAssertionSpecValidator() {\n-        super();\n-    }\n+                                                       super();\n+                                        }\n \n     /**\n      * Checks that the Subject element is present when required, but does not check for the existence of Subject when\n@@ -50,25 +55,26 @@ public class Saml2AllowNoSubjectAssertionSpecValidator extends Saml2ExchangeAuth\n      * @param assertion the assertion\n      * @throws ValidationException the validation exception\n      */\n+\n+\n     @Override\n     protected void validateSubject(Assertion assertion) throws ValidationException {\n-        if ((assertion.getStatements() == null || assertion.getStatements().isEmpty())\n-                && (assertion.getAuthnStatements() == null || assertion.getAuthnStatements().isEmpty())\n-                && (assertion.getAttributeStatements() == null || assertion.getAttributeStatements().isEmpty())\n-                && (assertion.getAuthzDecisionStatements() == null || assertion.getAuthzDecisionStatements().isEmpty())\n-                && assertion.getSubject() == null) {\n+        if ((assertion.getStatements() == null||\n+                 assertion.getStatements().isEmpty())&& (assertion.getAuthnStatements() == null||\n+                                                             assertion.getAuthnStatements().isEmpty())&& (assertion.getAttributeStatements() == null||\n+                                                                                                              assertion.getAttributeStatements().isEmpty())&& (assertion.getAuthzDecisionStatements() == null||\n+                                                                                                                                                                   assertion.getAuthzDecisionStatements().isEmpty())&& assertion.getSubject() == null) {\n             throw new ValidationException(\"Subject is required when Statements are absent\");\n         }\n-\n-        if (assertion.getAuthnStatements().size() > 0 && assertion.getSubject() == null) {\n+        if (assertion.getAuthnStatements().size()> 0 && assertion.getSubject() == null) {\n             throw new ValidationException(\"Assertions containing AuthnStatements require a Subject\");\n         }\n-        if (assertion.getAuthzDecisionStatements().size() > 0 && assertion.getSubject() == null) {\n+        if (assertion.getAuthzDecisionStatements().size()> 0 && assertion.getSubject() == null) {\n             throw new ValidationException(\"Assertions containing AuthzDecisionStatements require a Subject\");\n         }\n-\n         if (assertion.getSubject() != null) {\n             validateSubject(assertion.getSubject());\n         }\n     }\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}