{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "377",
    "information": {
        "violations": [
            {
                "line": "112",
                "column": "8",
                "severity": "warning",
                "message": "',' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "\n    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase()\n        , defaultPrimitiveValue(body, type));\n    response.setHeaders(header.toMultiMap());\n\n    return response;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/377/HighwayCodec.java\nindex 937a62bb40a..edd0246e330 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/377/HighwayCodec.java\n@@ -108,8 +108,8 @@ public final class HighwayCodec {\n     Object body = bodySchema\n         .deserialize(tcpData.getBodyBuffer().getBytes(), type);\n \n-    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase()\n-        , defaultPrimitiveValue(body, type));\n+    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase(),\n+        defaultPrimitiveValue(body, type));\n     response.setHeaders(header.toMultiMap());\n \n     return response;\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "112",
                    "column": "8",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/377/HighwayCodec.java\nindex 937a62bb40a..79053a10c68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/377/HighwayCodec.java\n@@ -43,7 +43,7 @@ public final class HighwayCodec {\n   }\n \n   public static TcpOutputStream encodeRequest(long msgId, Invocation invocation,\n-      OperationProtobuf operationProtobuf) throws Exception {\n+                                              OperationProtobuf operationProtobuf) throws Exception {\n     // \u5199header\n     RequestHeader header = new RequestHeader();\n     header.setMsgType(MsgType.REQUEST);\n@@ -59,7 +59,7 @@ public final class HighwayCodec {\n   }\n \n   private static Map<String, Object> addPrimitiveTypeDefaultValues(Invocation invocation,\n-      Map<String, Object> swaggerArguments) {\n+                                                                   Map<String, Object> swaggerArguments) {\n     // proto buffer never serialize default values, put it back in provider\n     if (invocation.getOperationMeta().getSwaggerProducerOperation() != null && !invocation.isEdge()) {\n       List<Parameter> swaggerParameters = invocation.getOperationMeta().getSwaggerOperation()\n@@ -76,7 +76,7 @@ public final class HighwayCodec {\n   }\n \n   public static void decodeRequest(Invocation invocation, RequestHeader header, OperationProtobuf operationProtobuf,\n-      Buffer bodyBuffer) throws Exception {\n+                                   Buffer bodyBuffer) throws Exception {\n     RequestRootDeserializer<Object> requestDeserializer = operationProtobuf.getRequestRootDeserializer();\n     Map<String, Object> swaggerArguments = requestDeserializer.deserialize(bodyBuffer.getBytes());\n     addPrimitiveTypeDefaultValues(invocation, swaggerArguments);\n@@ -88,7 +88,7 @@ public final class HighwayCodec {\n   }\n \n   public static Buffer encodeResponse(long msgId, ResponseHeader header, ResponseRootSerializer bodySchema,\n-      Object body) throws Exception {\n+                                      Object body) throws Exception {\n     try (HighwayOutputStream os = new HighwayOutputStream(msgId)) {\n       os.write(header, bodySchema, body);\n       return os.getBuffer();\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "111",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/377/HighwayCodec.java\nindex 937a62bb40a..7c83f06ec89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/377/HighwayCodec.java\n@@ -60,7 +60,7 @@ public final class HighwayCodec {\n \n   private static Map<String, Object> addPrimitiveTypeDefaultValues(Invocation invocation,\n       Map<String, Object> swaggerArguments) {\n-    // proto buffer never serialize default values, put it back in provider\n+  // proto buffer never serialize default values, put it back in provider\n     if (invocation.getOperationMeta().getSwaggerProducerOperation() != null && !invocation.isEdge()) {\n       List<Parameter> swaggerParameters = invocation.getOperationMeta().getSwaggerOperation()\n           .getParameters();\n@@ -108,8 +108,7 @@ public final class HighwayCodec {\n     Object body = bodySchema\n         .deserialize(tcpData.getBodyBuffer().getBytes(), type);\n \n-    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase()\n-        , defaultPrimitiveValue(body, type));\n+    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase(), defaultPrimitiveValue(body, type));\n     response.setHeaders(header.toMultiMap());\n \n     return response;\n@@ -126,4 +125,4 @@ public final class HighwayCodec {\n     }\n     return body;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/377/HighwayCodec.java\nindex 937a62bb40a..49d21dc67b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/377/HighwayCodec.java\n@@ -20,7 +20,6 @@ package org.apache.servicecomb.transport.highway;\n import java.lang.reflect.Type;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.servicecomb.codec.protobuf.definition.OperationProtobuf;\n import org.apache.servicecomb.codec.protobuf.definition.RequestRootDeserializer;\n import org.apache.servicecomb.codec.protobuf.definition.ResponseRootDeserializer;\n@@ -31,10 +30,8 @@ import org.apache.servicecomb.foundation.vertx.tcp.TcpOutputStream;\n import org.apache.servicecomb.swagger.invocation.Response;\n import org.apache.servicecomb.transport.highway.message.RequestHeader;\n import org.apache.servicecomb.transport.highway.message.ResponseHeader;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.google.common.base.Defaults;\n-\n import io.swagger.models.parameters.Parameter;\n import io.vertx.core.buffer.Buffer;\n \n@@ -42,8 +39,7 @@ public final class HighwayCodec {\n   private HighwayCodec() {\n   }\n \n-  public static TcpOutputStream encodeRequest(long msgId, Invocation invocation,\n-      OperationProtobuf operationProtobuf) throws Exception {\n+  public static TcpOutputStream encodeRequest(long msgId, Invocation invocation, OperationProtobuf operationProtobuf) throws Exception {\n     // \u5199header\n     RequestHeader header = new RequestHeader();\n     header.setMsgType(MsgType.REQUEST);\n@@ -54,20 +50,21 @@ public final class HighwayCodec {\n     header.setContext(invocation.getContext());\n \n     HighwayOutputStream os = new HighwayOutputStream(msgId);\n-    os.write(header, operationProtobuf.getRequestRootSerializer(), invocation.getSwaggerArguments());\n+    os.write(header,\n+operationProtobuf.getRequestRootSerializer(),\n+invocation.getSwaggerArguments());\n     return os;\n   }\n \n-  private static Map<String, Object> addPrimitiveTypeDefaultValues(Invocation invocation,\n-      Map<String, Object> swaggerArguments) {\n+  private static Map<String, Object> addPrimitiveTypeDefaultValues(Invocation invocation, Map<String, Object> swaggerArguments) {\n     // proto buffer never serialize default values, put it back in provider\n     if (invocation.getOperationMeta().getSwaggerProducerOperation() != null && !invocation.isEdge()) {\n       List<Parameter> swaggerParameters = invocation.getOperationMeta().getSwaggerOperation()\n-          .getParameters();\n+                                                                       .getParameters();\n       for (Parameter parameter : swaggerParameters) {\n         if (swaggerArguments.get(parameter.getName()) == null) {\n           Type type = invocation.getOperationMeta().getSwaggerProducerOperation()\n-              .getSwaggerParameterType(parameter.getName());\n+                                                   .getSwaggerParameterType(parameter.getName());\n           swaggerArguments.put(parameter.getName(), defaultPrimitiveValue(null, type));\n         }\n       }\n@@ -75,8 +72,7 @@ public final class HighwayCodec {\n     return swaggerArguments;\n   }\n \n-  public static void decodeRequest(Invocation invocation, RequestHeader header, OperationProtobuf operationProtobuf,\n-      Buffer bodyBuffer) throws Exception {\n+  public static void decodeRequest(Invocation invocation, RequestHeader header, OperationProtobuf operationProtobuf, Buffer bodyBuffer) throws Exception {\n     RequestRootDeserializer<Object> requestDeserializer = operationProtobuf.getRequestRootDeserializer();\n     Map<String, Object> swaggerArguments = requestDeserializer.deserialize(bodyBuffer.getBytes());\n     addPrimitiveTypeDefaultValues(invocation, swaggerArguments);\n@@ -87,31 +83,28 @@ public final class HighwayCodec {\n     return RequestHeader.readObject(headerBuffer);\n   }\n \n-  public static Buffer encodeResponse(long msgId, ResponseHeader header, ResponseRootSerializer bodySchema,\n-      Object body) throws Exception {\n+  public static Buffer encodeResponse(long msgId,\n+    ResponseHeader header,\n+      ResponseRootSerializer bodySchema, Object body) throws Exception {\n     try (HighwayOutputStream os = new HighwayOutputStream(msgId)) {\n       os.write(header, bodySchema, body);\n       return os.getBuffer();\n     }\n   }\n \n-  public static Response decodeResponse(Invocation invocation, OperationProtobuf operationProtobuf, TcpData tcpData)\n-      throws Exception {\n+  public static Response decodeResponse(Invocation invocation, OperationProtobuf operationProtobuf, TcpData tcpData) throws Exception {\n     ResponseHeader header = ResponseHeader.readObject(tcpData.getHeaderBuffer());\n     if (header.getContext() != null) {\n       invocation.getContext().putAll(header.getContext());\n     }\n \n-    ResponseRootDeserializer<Object> bodySchema = operationProtobuf\n-        .findResponseRootDeserializer(header.getStatusCode());\n+    ResponseRootDeserializer<Object> bodySchema = operationProtobuf.findResponseRootDeserializer(header.getStatusCode());\n     JavaType type = invocation.findResponseType(header.getStatusCode());\n-    Object body = bodySchema\n-        .deserialize(tcpData.getBodyBuffer().getBytes(), type);\n-\n-    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase()\n-        , defaultPrimitiveValue(body, type));\n+    Object body = bodySchema.deserialize(tcpData.getBodyBuffer().getBytes(), type);\n+    Response response = Response.create(header.getStatusCode(),\n+header.getReasonPhrase(),\n+defaultPrimitiveValue(body, type));\n     response.setHeaders(header.toMultiMap());\n-\n     return response;\n   }\n \n@@ -120,10 +113,11 @@ public final class HighwayCodec {\n       if (type instanceof Class<?> && ((Class<?>) type).isPrimitive()) {\n         return Defaults.defaultValue((Class<?>) type);\n       }\n+\n       if (type instanceof JavaType && ((JavaType) type).isPrimitive()) {\n         return Defaults.defaultValue(((JavaType) type).getRawClass());\n       }\n     }\n     return body;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/377/HighwayCodec.java\nindex 937a62bb40a..edd0246e330 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/377/HighwayCodec.java\n@@ -108,8 +108,8 @@ public final class HighwayCodec {\n     Object body = bodySchema\n         .deserialize(tcpData.getBodyBuffer().getBytes(), type);\n \n-    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase()\n-        , defaultPrimitiveValue(body, type));\n+    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase(),\n+        defaultPrimitiveValue(body, type));\n     response.setHeaders(header.toMultiMap());\n \n     return response;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/377/HighwayCodec.java\nindex 937a62bb40a..edd0246e330 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/377/HighwayCodec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/377/HighwayCodec.java\n@@ -108,8 +108,8 @@ public final class HighwayCodec {\n     Object body = bodySchema\n         .deserialize(tcpData.getBodyBuffer().getBytes(), type);\n \n-    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase()\n-        , defaultPrimitiveValue(body, type));\n+    Response response = Response.create(header.getStatusCode(), header.getReasonPhrase(),\n+        defaultPrimitiveValue(body, type));\n     response.setHeaders(header.toMultiMap());\n \n     return response;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}