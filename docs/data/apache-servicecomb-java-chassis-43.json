{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "43",
    "information": {
        "violations": [
            {
                "line": "47",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  public static class HeaderProcessor extends AbstractParamProcessor {\n    // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n    private boolean ignoreRequiredCheck = DynamicPropertyFactory.getInstance()\n        .getBooleanProperty(\"servicecomb.rest.parameter.header.ignoreRequiredCheck\", false).get();\n",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/43/HeaderProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/43/HeaderProcessorCreator.java\nindex 7e33183e116..26a7157085a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/43/HeaderProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/43/HeaderProcessorCreator.java\n@@ -108,4 +108,4 @@ public class HeaderProcessorCreator implements ParamValueProcessorCreator {\n         genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n     return new HeaderProcessor((HeaderParameter) parameter, targetType);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/43/HeaderProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/43/HeaderProcessorCreator.java\nindex 7e33183e116..70a6d6f0316 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/43/HeaderProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/43/HeaderProcessorCreator.java\n@@ -20,20 +20,16 @@ package org.apache.servicecomb.common.rest.codec.param;\n import java.lang.reflect.Type;\n import java.util.Collections;\n import java.util.Enumeration;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response.Status;\n-\n import org.apache.servicecomb.common.rest.codec.RestClientRequest;\n import org.apache.servicecomb.common.rest.codec.RestObjectMapperFactory;\n import org.apache.servicecomb.swagger.invocation.exception.InvocationException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.swagger.models.parameters.HeaderParameter;\n import io.swagger.models.parameters.Parameter;\n import io.swagger.models.properties.ArrayProperty;\n@@ -45,14 +41,16 @@ public class HeaderProcessorCreator implements ParamValueProcessorCreator {\n \n   public static class HeaderProcessor extends AbstractParamProcessor {\n     // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n-    private boolean ignoreRequiredCheck = DynamicPropertyFactory.getInstance()\n-        .getBooleanProperty(\"servicecomb.rest.parameter.header.ignoreRequiredCheck\", false).get();\n+    private boolean ignoreRequiredCheck = DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.rest.parameter.header.ignoreRequiredCheck\", false)\n+                                                                              .get();\n \n     private boolean repeatedType;\n \n     public HeaderProcessor(HeaderParameter headerParameter, JavaType targetType) {\n-      super(headerParameter.getName(), targetType, headerParameter.getDefaultValue(), headerParameter.getRequired());\n-\n+      super(headerParameter.getName(),\n+        targetType,\n+          headerParameter.getDefaultValue(),\n+            headerParameter.getRequired());\n       this.repeatedType = ArrayProperty.isType(headerParameter.getType());\n     }\n \n@@ -85,11 +83,13 @@ public class HeaderProcessorCreator implements ParamValueProcessorCreator {\n     public void setValue(RestClientRequest clientRequest, Object arg) throws Exception {\n       if (null == arg) {\n         // null header should not be set to clientRequest to avoid NullPointerException in Netty.\n-        LOGGER.debug(\"Header arg is null, will not be set into clientRequest. paramPath = [{}]\", paramPath);\n+        LOGGER.debug(\"Header arg is null, will not be set into clientRequest. paramPath = [{}]\",\n+paramPath);\n         return;\n       }\n+\n       clientRequest.putHeader(paramPath,\n-          RestObjectMapperFactory.getConsumerWriterMapper().convertToString(arg));\n+RestObjectMapperFactory.getConsumerWriterMapper().convertToString(arg));\n     }\n \n     @Override\n@@ -104,8 +104,7 @@ public class HeaderProcessorCreator implements ParamValueProcessorCreator {\n \n   @Override\n   public ParamValueProcessor create(Parameter parameter, Type genericParamType) {\n-    JavaType targetType =\n-        genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n+    JavaType targetType = genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n     return new HeaderProcessor((HeaderParameter) parameter, targetType);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}