{
    "project_name": "neo4j-neo4j",
    "violation_id": "531",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/531/QueryContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/531/QueryContext.java\nindex 1d7b870abde..468d8330c03 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/531/QueryContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/531/QueryContext.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import org.neo4j.io.pagecache.tracing.cursor.PageCursorTracer;\n@@ -28,7 +29,7 @@ import static org.neo4j.memory.EmptyMemoryTracker.INSTANCE;\n \n /**\n  * Represents the specific transactional context in which an index query is executed.\n- *\n+ * <p>\n  * Some index implementations, such as the fulltext schema indexes, prefer to take the transaction state into account themselves, rather than relying on\n  * the index cursor implementations to do the transaction state filtering.\n  */\n@@ -39,13 +40,13 @@ public interface QueryContext\n         @Override\n         public Read getRead()\n         {\n-            throw new UnsupportedOperationException( \"The NULL_CONTEXT QueryContext has no Read instance.\" );\n+            throw new UnsupportedOperationException(\"The NULL_CONTEXT QueryContext has no Read instance.\");\n         }\n \n         @Override\n         public CursorFactory cursors()\n         {\n-            throw new UnsupportedOperationException( \"The NULL_CONTEXT QueryContext has no CursorFactory instance.\" );\n+            throw new UnsupportedOperationException(\"The NULL_CONTEXT QueryContext has no CursorFactory instance.\");\n         }\n \n         @Override\n@@ -69,8 +70,9 @@ public interface QueryContext\n \n     /**\n      * Get the {@link Read} interface to the kernel, which is a view of the store as seen from within the current transaction.\n-     *\n+     * <p>\n      * This means that store reads through this interface are filtered through the transaction state, if any, of the current transaction.\n+     *\n      * @return a {@link Read} instance in the context of the current transaction.\n      */\n     Read getRead();\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}