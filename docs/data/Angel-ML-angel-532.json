{
    "project_name": "Angel-ML-angel",
    "violation_id": "532",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/532/SampleNeighborPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/532/SampleNeighborPartResult.java\nindex cb5a6482ecf..bbccd7c9b52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/532/SampleNeighborPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/532/SampleNeighborPartResult.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.sampleneighbor4;\n \n import com.tencent.angel.common.ByteBufSerdeUtils;\n@@ -25,169 +26,169 @@ import java.util.Random;\n \n public class SampleNeighborPartResult extends PartitionGetResult {\n \n-  private int partId;\n-  private int[] indptr;\n-  private int[] types;\n-  private long[] neighbors;\n-\n-  ServerLongAnyRow row;\n-  long[] keys;\n-  int numSample;\n-  boolean sampleTypes;\n-\n-  public SampleNeighborPartResult(int partId, ServerLongAnyRow row,\n-      long[] keys, int numSample,\n-      boolean sampleTypes) {\n-    this.partId = partId;\n-    this.keys = keys;\n-    this.numSample = numSample;\n-    this.row = row;\n-    this.sampleTypes = sampleTypes;\n-  }\n-\n-  public SampleNeighborPartResult() {\n-\n-  }\n-\n-  public int[] getIndptr() {\n-    return indptr;\n-  }\n-\n-  public long[] getNeighbors() {\n-    return neighbors;\n-  }\n-\n-  public int[] getTypes() {\n-    return types;\n-  }\n-\n-  public int getPartId() {\n-    return partId;\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    // sample happens here to avoid memory copy on servers\n-    Random rand = new Random(System.currentTimeMillis());\n-\n-    buf.writeInt(partId); // write partition id first\n-    buf.writeBoolean(sampleTypes);\n-    buf.writeInt(keys.length);\n-    int writeIndex = buf.writerIndex();\n-    buf.writeInt(0);\n-\n-    int length = 0;\n-    for (int i = 0; i < keys.length; i++) {\n-      Node node = (Node) row.get(keys[i]);\n-      if (node == null) {\n-        buf.writeInt(0); // size for this node\n-        continue;\n-      }\n-\n-      long[] neighbor = node.getNeighbors();\n-      int[] types = node.getTypes();\n-      if (neighbor == null || neighbor.length == 0) {\n-        buf.writeInt(0);\n-        continue;\n-      }\n-\n-      int size = numSample;\n-      if (numSample <= 0 || numSample >= neighbor.length) {\n-        size = neighbor.length;\n-      }\n-\n-      length += size; // # neighbors/types\n-      buf.writeInt(size);\n-\n-      int start = rand.nextInt(neighbor.length);\n-      if (sampleTypes) {\n-        for (int j = 0; j < size; j++) {\n-          int idx = (start + j) % neighbor.length;\n-          buf.writeLong(neighbor[idx]);\n-          buf.writeInt(types[idx]);\n-        }\n-      } else {\n-        for (int j = 0; j < size; j++) {\n-          int idx = (start + j) % neighbor.length;\n-          buf.writeLong(neighbor[idx]);\n-        }\n-      }\n+    private int partId;\n+    private int[] indptr;\n+    private int[] types;\n+    private long[] neighbors;\n+\n+    ServerLongAnyRow row;\n+    long[] keys;\n+    int numSample;\n+    boolean sampleTypes;\n+\n+    public SampleNeighborPartResult(int partId, ServerLongAnyRow row,\n+                                    long[] keys, int numSample,\n+                                    boolean sampleTypes) {\n+        this.partId = partId;\n+        this.keys = keys;\n+        this.numSample = numSample;\n+        this.row = row;\n+        this.sampleTypes = sampleTypes;\n     }\n \n-    buf.setInt(writeIndex, length);\n-  }\n+    public SampleNeighborPartResult() {\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    partId = buf.readInt();\n-    sampleTypes = buf.readBoolean();\n-    int keysLen = buf.readInt();\n-    int neighborLen = buf.readInt();\n+    }\n \n-    indptr = new int[keysLen + 1];\n-    neighbors = new long[neighborLen];\n-    if (sampleTypes) {\n-      types = new int[neighborLen];\n+    public int[] getIndptr() {\n+        return indptr;\n     }\n \n-    int idx1 = 0, idx2 = 0;\n-    indptr[idx1++] = 0;\n-    if (!sampleTypes) {\n-      for (int i = 0; i < keysLen; i++) {\n-        int size = buf.readInt();\n-        for (int j = 0; j < size; j++) {\n-          neighbors[idx2++] = buf.readLong();\n-        }\n-        indptr[idx1++] = idx2;\n-      }\n-    } else {\n-      for (int i = 0; i < keysLen; i++) {\n-        int size = buf.readInt();\n-        for (int j = 0; j < size; j++) {\n-          neighbors[idx2] = buf.readLong();\n-          types[idx2++] = buf.readInt();\n+    public long[] getNeighbors() {\n+        return neighbors;\n+    }\n+\n+    public int[] getTypes() {\n+        return types;\n+    }\n+\n+    public int getPartId() {\n+        return partId;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        // sample happens here to avoid memory copy on servers\n+        Random rand = new Random(System.currentTimeMillis());\n+\n+        buf.writeInt(partId); // write partition id first\n+        buf.writeBoolean(sampleTypes);\n+        buf.writeInt(keys.length);\n+        int writeIndex = buf.writerIndex();\n+        buf.writeInt(0);\n+\n+        int length = 0;\n+        for (int i = 0; i < keys.length; i++) {\n+            Node node = (Node) row.get(keys[i]);\n+            if (node == null) {\n+                buf.writeInt(0); // size for this node\n+                continue;\n+            }\n+\n+            long[] neighbor = node.getNeighbors();\n+            int[] types = node.getTypes();\n+            if (neighbor == null || neighbor.length == 0) {\n+                buf.writeInt(0);\n+                continue;\n+            }\n+\n+            int size = numSample;\n+            if (numSample <= 0 || numSample >= neighbor.length) {\n+                size = neighbor.length;\n+            }\n+\n+            length += size; // # neighbors/types\n+            buf.writeInt(size);\n+\n+            int start = rand.nextInt(neighbor.length);\n+            if (sampleTypes) {\n+                for (int j = 0; j < size; j++) {\n+                    int idx = (start + j) % neighbor.length;\n+                    buf.writeLong(neighbor[idx]);\n+                    buf.writeInt(types[idx]);\n+                }\n+            } else {\n+                for (int j = 0; j < size; j++) {\n+                    int idx = (start + j) % neighbor.length;\n+                    buf.writeLong(neighbor[idx]);\n+                }\n+            }\n         }\n-        indptr[idx1++] = idx2;\n-      }\n+\n+        buf.setInt(writeIndex, length);\n     }\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    int len = 4 + 4 + 4 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes);\n-\n-    for (int i = 0; i < keys.length; i++) {\n-      Node node = (Node) row.get(keys[i]);\n-      if (node == null) {\n-        len += 4;\n-        continue;\n-      }\n-\n-      long[] neighbor = node.getNeighbors();\n-      if (neighbor == null || neighbor.length == 0) {\n-        len += 4;\n-        continue;\n-      }\n-\n-      int size = numSample;\n-      if (numSample <= 0 || numSample >= neighbor.length) {\n-        size = neighbor.length;\n-      }\n-\n-      len += 4;\n-\n-      if (sampleTypes) {\n-        for (int j = 0; j < size; j++) {\n-          len += 8 + 4;\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        partId = buf.readInt();\n+        sampleTypes = buf.readBoolean();\n+        int keysLen = buf.readInt();\n+        int neighborLen = buf.readInt();\n+\n+        indptr = new int[keysLen + 1];\n+        neighbors = new long[neighborLen];\n+        if (sampleTypes) {\n+            types = new int[neighborLen];\n+        }\n+\n+        int idx1 = 0, idx2 = 0;\n+        indptr[idx1++] = 0;\n+        if (!sampleTypes) {\n+            for (int i = 0; i < keysLen; i++) {\n+                int size = buf.readInt();\n+                for (int j = 0; j < size; j++) {\n+                    neighbors[idx2++] = buf.readLong();\n+                }\n+                indptr[idx1++] = idx2;\n+            }\n+        } else {\n+            for (int i = 0; i < keysLen; i++) {\n+                int size = buf.readInt();\n+                for (int j = 0; j < size; j++) {\n+                    neighbors[idx2] = buf.readLong();\n+                    types[idx2++] = buf.readInt();\n+                }\n+                indptr[idx1++] = idx2;\n+            }\n         }\n-      } else {\n-        for (int j = 0; j < size; j++) {\n-          len += 8;\n+    }\n+\n+    @Override\n+    public int bufferLen() {\n+        int len = 4 + 4 + 4 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes);\n+\n+        for (int i = 0; i < keys.length; i++) {\n+            Node node = (Node) row.get(keys[i]);\n+            if (node == null) {\n+                len += 4;\n+                continue;\n+            }\n+\n+            long[] neighbor = node.getNeighbors();\n+            if (neighbor == null || neighbor.length == 0) {\n+                len += 4;\n+                continue;\n+            }\n+\n+            int size = numSample;\n+            if (numSample <= 0 || numSample >= neighbor.length) {\n+                size = neighbor.length;\n+            }\n+\n+            len += 4;\n+\n+            if (sampleTypes) {\n+                for (int j = 0; j < size; j++) {\n+                    len += 8 + 4;\n+                }\n+            } else {\n+                for (int j = 0; j < size; j++) {\n+                    len += 8;\n+                }\n+            }\n         }\n-      }\n+        return len;\n     }\n-    return len;\n-  }\n \n \n }\n",
            "diff_size": 232
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/532/SampleNeighborPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/532/SampleNeighborPartResult.java\nindex cb5a6482ecf..c623179760d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/532/SampleNeighborPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/532/SampleNeighborPartResult.java\n@@ -36,8 +36,7 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   boolean sampleTypes;\n \n   public SampleNeighborPartResult(int partId, ServerLongAnyRow row,\n-      long[] keys, int numSample,\n-      boolean sampleTypes) {\n+long[] keys, int numSample, boolean sampleTypes) {\n     this.partId = partId;\n     this.keys = keys;\n     this.numSample = numSample;\n@@ -190,4 +189,4 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/532/SampleNeighborPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/532/SampleNeighborPartResult.java\nindex cb5a6482ecf..b87b1a9174e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/532/SampleNeighborPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/532/SampleNeighborPartResult.java\n@@ -29,15 +29,15 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   private int[] indptr;\n   private int[] types;\n   private long[] neighbors;\n-\n   ServerLongAnyRow row;\n   long[] keys;\n+\n+\n   int numSample;\n+\n   boolean sampleTypes;\n \n-  public SampleNeighborPartResult(int partId, ServerLongAnyRow row,\n-      long[] keys, int numSample,\n-      boolean sampleTypes) {\n+  public SampleNeighborPartResult(int partId, ServerLongAnyRow row, long[] keys, int numSample, boolean sampleTypes) {\n     this.partId = partId;\n     this.keys = keys;\n     this.numSample = numSample;\n@@ -45,9 +45,7 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n     this.sampleTypes = sampleTypes;\n   }\n \n-  public SampleNeighborPartResult() {\n-\n-  }\n+  public SampleNeighborPartResult() {}\n \n   public int[] getIndptr() {\n     return indptr;\n@@ -69,10 +67,10 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   public void serialize(ByteBuf buf) {\n     // sample happens here to avoid memory copy on servers\n     Random rand = new Random(System.currentTimeMillis());\n-\n     buf.writeInt(partId); // write partition id first\n     buf.writeBoolean(sampleTypes);\n     buf.writeInt(keys.length);\n+\n     int writeIndex = buf.writerIndex();\n     buf.writeInt(0);\n \n@@ -95,7 +93,6 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n       if (numSample <= 0 || numSample >= neighbor.length) {\n         size = neighbor.length;\n       }\n-\n       length += size; // # neighbors/types\n       buf.writeInt(size);\n \n@@ -113,7 +110,6 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n         }\n       }\n     }\n-\n     buf.setInt(writeIndex, length);\n   }\n \n@@ -121,9 +117,9 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   public void deserialize(ByteBuf buf) {\n     partId = buf.readInt();\n     sampleTypes = buf.readBoolean();\n+\n     int keysLen = buf.readInt();\n     int neighborLen = buf.readInt();\n-\n     indptr = new int[keysLen + 1];\n     neighbors = new long[neighborLen];\n     if (sampleTypes) {\n@@ -155,7 +151,6 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n   @Override\n   public int bufferLen() {\n     int len = 4 + 4 + 4 + ByteBufSerdeUtils.serializedBooleanLen(sampleTypes);\n-\n     for (int i = 0; i < keys.length; i++) {\n       Node node = (Node) row.get(keys[i]);\n       if (node == null) {\n@@ -173,9 +168,7 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n       if (numSample <= 0 || numSample >= neighbor.length) {\n         size = neighbor.length;\n       }\n-\n       len += 4;\n-\n       if (sampleTypes) {\n         for (int j = 0; j < size; j++) {\n           len += 8 + 4;\n@@ -189,5 +182,4 @@ public class SampleNeighborPartResult extends PartitionGetResult {\n     return len;\n   }\n \n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}