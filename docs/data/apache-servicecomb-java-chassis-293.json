{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "293",
    "information": {
        "violations": [
            {
                "line": "156",
                "column": "52",
                "severity": "warning",
                "message": "';' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
            }
        ]
    },
    "source_code": "    FieldSchema<T> fieldSchema = null;\n    try {\n      for (int n = input.readFieldNumber(); n != 0; ) {\n        fieldSchema = fieldMap.getFieldByNumber(n);\n        if (fieldSchema != null) {\n          n = fieldSchema.mergeFrom(input, message);",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/293/MessageReadSchema.java\nindex 48771926305..df13cf80dc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/293/MessageReadSchema.java\n@@ -153,7 +153,7 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   public void mergeFrom(InputEx input, T message) throws IOException {\n     FieldSchema<T> fieldSchema = null;\n     try {\n-      for (int n = input.readFieldNumber(); n != 0; ) {\n+      for (int n = input.readFieldNumber(); n != 0;) {\n         fieldSchema = fieldMap.getFieldByNumber(n);\n         if (fieldSchema != null) {\n           n = fieldSchema.mergeFrom(input, message);\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "156",
                    "column": "52",
                    "severity": "warning",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "156",
                    "column": "52",
                    "severity": "warning",
                    "message": "';' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForIteratorPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/293/MessageReadSchema.java\nindex 48771926305..12bdd0ec5b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/293/MessageReadSchema.java\n@@ -133,13 +133,13 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n         LOGGER.info(\"java field {}:{} not exist in proto message {}, ignore it.\",\n             beanDescriptor.getJavaType().getRawClass().getName(),\n             propertyDescriptor.getName(), message.getCanonicalName());\n-        continue;\n+continue;\n       }\n       if (propertyDescriptor.getSetter() == null) {\n         LOGGER.info(\"no setter for java field {}:{} in proto message {}, ignore it.\",\n             beanDescriptor.getJavaType().getRawClass().getName(),\n             propertyDescriptor.getName(), message.getCanonicalName());\n-        continue;\n+continue;\n       }\n \n       FieldSchema<T> fieldSchema = deserializerSchemaManager.createSchemaField(protoField, propertyDescriptor);\n@@ -178,4 +178,4 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   public void writeTo(OutputEx output, Object value) throws IOException {\n     throw new UnsupportedOperationException();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "131",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/293/MessageReadSchema.java\nindex 48771926305..662033dfa4a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/293/MessageReadSchema.java\n@@ -22,16 +22,13 @@ import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.servicecomb.foundation.protobuf.ProtoMapper;\n import org.apache.servicecomb.foundation.protobuf.internal.ProtoConst;\n import org.apache.servicecomb.foundation.protobuf.internal.bean.BeanDescriptor;\n import org.apache.servicecomb.foundation.protobuf.internal.bean.PropertyDescriptor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.fasterxml.jackson.databind.JavaType;\n-\n import io.protostuff.InputEx;\n import io.protostuff.OutputEx;\n import io.protostuff.SchemaEx;\n@@ -49,7 +46,9 @@ import io.protostuff.runtime.RuntimeEnv.Instantiator;\n  * so one schema should support dynamic and concrete logic at the same time\n  * </pre>\n  */\n-public class MessageReadSchema<T> implements SchemaEx<T> {\n+\n+public class MessageReadSchema<T>\n+  implements SchemaEx<T> {\n   private static final Logger LOGGER = LoggerFactory.getLogger(MessageReadSchema.class);\n \n   protected ProtoMapper protoMapper;\n@@ -73,6 +72,7 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n     if (javaType.isJavaLangObject() || Map.class.isAssignableFrom(javaType.getRawClass())) {\n       javaType = ProtoConst.MAP_TYPE;\n     }\n+\n     this.instantiator = RuntimeEnv.newInstantiator((Class<T>) javaType.getRawClass());\n   }\n \n@@ -84,6 +84,7 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n     if (javaType.isJavaLangObject() || Map.class.isAssignableFrom(javaType.getRawClass())) {\n       javaType = ProtoConst.MAP_TYPE;\n     }\n+\n     this.instantiator = RuntimeEnv.newInstantiator((Class<T>) javaType.getRawClass());\n   }\n \n@@ -110,11 +111,9 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   public void init() {\n     if (Map.class.isAssignableFrom(javaType.getRawClass())) {\n       if (this.method == null) {\n-        this.fieldMap = (FieldMapEx<T>) protoMapper.getDeserializerSchemaManager()\n-            .createMapFields(message);\n+        this.fieldMap = (FieldMapEx<T>) protoMapper.getDeserializerSchemaManager().createMapFields(message);\n       } else {\n-        this.fieldMap = (FieldMapEx<T>) protoMapper.getDeserializerSchemaManager()\n-            .createMapFields(message, method);\n+        this.fieldMap = (FieldMapEx<T>) protoMapper.getDeserializerSchemaManager().createMapFields(message, method);\n       }\n       return;\n     }\n@@ -125,20 +124,18 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   private void createFieldMap() {\n     DeserializerSchemaManager deserializerSchemaManager = protoMapper.getDeserializerSchemaManager();\n     BeanDescriptor beanDescriptor = protoMapper.getBeanDescriptorManager().getOrCreateBeanDescriptor(javaType);\n-\n     List<FieldSchema<T>> fieldSchemas = new ArrayList<>();\n     for (PropertyDescriptor propertyDescriptor : beanDescriptor.getPropertyDescriptors().values()) {\n       Field protoField = message.getField(propertyDescriptor.getName());\n       if (protoField == null) {\n-        LOGGER.info(\"java field {}:{} not exist in proto message {}, ignore it.\",\n-            beanDescriptor.getJavaType().getRawClass().getName(),\n-            propertyDescriptor.getName(), message.getCanonicalName());\n+        LOGGER.info(\"java field {}:{} not exist in proto message {}, ignore it.\", beanDescriptor.getJavaType().getRawClass()\n+                                                                                                              .getName(), propertyDescriptor.getName(), message.getCanonicalName());\n         continue;\n       }\n+\n       if (propertyDescriptor.getSetter() == null) {\n-        LOGGER.info(\"no setter for java field {}:{} in proto message {}, ignore it.\",\n-            beanDescriptor.getJavaType().getRawClass().getName(),\n-            propertyDescriptor.getName(), message.getCanonicalName());\n+        LOGGER.info(\"no setter for java field {}:{} in proto message {}, ignore it.\", beanDescriptor.getJavaType().getRawClass()\n+                                                                                                                  .getName(), propertyDescriptor.getName(), message.getCanonicalName());\n         continue;\n       }\n \n@@ -153,7 +150,7 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   public void mergeFrom(InputEx input, T message) throws IOException {\n     FieldSchema<T> fieldSchema = null;\n     try {\n-      for (int n = input.readFieldNumber(); n != 0; ) {\n+      for (int n = input.readFieldNumber(); n != 0;) {\n         fieldSchema = fieldMap.getFieldByNumber(n);\n         if (fieldSchema != null) {\n           n = fieldSchema.mergeFrom(input, message);\n@@ -166,10 +163,10 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n     } catch (Throwable e) {\n       Field protoField = fieldSchema.getProtoField();\n       LOGGER.error(\"Failed to mergeFrom, field={}:{}, type={}\",\n-          protoField.getType().getCanonicalName(),\n-          protoField.getName(),\n-          protoField.getTypeName(),\n-          e.getMessage());\n+protoField.getType().getCanonicalName(),\n+protoField.getName(),\n+protoField.getTypeName(),\n+e.getMessage());\n       throw e;\n     }\n   }\n@@ -178,4 +175,4 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   public void writeTo(OutputEx output, Object value) throws IOException {\n     throw new UnsupportedOperationException();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/293/MessageReadSchema.java\nindex 48771926305..df13cf80dc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/293/MessageReadSchema.java\n@@ -153,7 +153,7 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   public void mergeFrom(InputEx input, T message) throws IOException {\n     FieldSchema<T> fieldSchema = null;\n     try {\n-      for (int n = input.readFieldNumber(); n != 0; ) {\n+      for (int n = input.readFieldNumber(); n != 0;) {\n         fieldSchema = fieldMap.getFieldByNumber(n);\n         if (fieldSchema != null) {\n           n = fieldSchema.mergeFrom(input, message);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/293/MessageReadSchema.java\nindex 48771926305..df13cf80dc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/293/MessageReadSchema.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/293/MessageReadSchema.java\n@@ -153,7 +153,7 @@ public class MessageReadSchema<T> implements SchemaEx<T> {\n   public void mergeFrom(InputEx input, T message) throws IOException {\n     FieldSchema<T> fieldSchema = null;\n     try {\n-      for (int n = input.readFieldNumber(); n != 0; ) {\n+      for (int n = input.readFieldNumber(); n != 0;) {\n         fieldSchema = fieldMap.getFieldByNumber(n);\n         if (fieldSchema != null) {\n           n = fieldSchema.mergeFrom(input, message);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}