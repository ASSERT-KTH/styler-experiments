{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "172",
    "information": {
        "violations": [
            {
                "line": "198",
                "column": "80",
                "severity": "warning",
                "message": "'>' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n  private boolean isInQueueTimeout() {\n    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/172/AbstractRestInvocation.java\nindex 15a717fece0..7567b30bec9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/172/AbstractRestInvocation.java\n@@ -195,8 +195,8 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "198",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "198",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/172/AbstractRestInvocation.java\nindex 15a717fece0..ed08902fdd7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/172/AbstractRestInvocation.java\n@@ -195,8 +195,7 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n@@ -331,4 +330,4 @@ public abstract class AbstractRestInvocation {\n   private String getMicroserviceQualifiedName() {\n     return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 174).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "198",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "322",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/172/AbstractRestInvocation.java\nindex 15a717fece0..40bac563b7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/172/AbstractRestInvocation.java\n@@ -25,10 +25,8 @@ import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.CompletableFuture;\n-\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response.Status;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.common.rest.codec.produce.ProduceProcessor;\n import org.apache.servicecomb.common.rest.codec.produce.ProduceProcessorManager;\n@@ -81,7 +79,9 @@ public abstract class AbstractRestInvocation {\n   protected void findRestOperation(MicroserviceMeta microserviceMeta) {\n     ServicePathManager servicePathManager = ServicePathManager.getServicePathManager(microserviceMeta);\n     if (servicePathManager == null) {\n-      LOGGER.error(\"No schema defined for {}:{}.\", microserviceMeta.getAppId(), microserviceMeta.getMicroserviceName());\n+      LOGGER.error(\"No schema defined for {}:{}.\",\n+microserviceMeta.getAppId(),\n+microserviceMeta.getMicroserviceName());\n       throw new InvocationException(Status.NOT_FOUND, Status.NOT_FOUND.getReasonPhrase());\n     }\n \n@@ -93,8 +93,8 @@ public abstract class AbstractRestInvocation {\n   protected void initProduceProcessor() {\n     produceProcessor = restOperationMeta.ensureFindProduceProcessor(requestEx);\n     if (produceProcessor == null) {\n-      LOGGER.error(\"Accept {} is not supported, operation={}.\", requestEx.getHeader(HttpHeaders.ACCEPT),\n-          restOperationMeta.getOperationMeta().getMicroserviceQualifiedName());\n+      LOGGER.error(\"Accept {} is not supported, operation={}.\", requestEx.getHeader(HttpHeaders.ACCEPT), restOperationMeta.getOperationMeta().getMicroserviceQualifiedName());\n+\n       String msg = String.format(\"Accept %s is not supported\", requestEx.getHeader(HttpHeaders.ACCEPT));\n       throw new InvocationException(Status.NOT_ACCEPTABLE, msg);\n     }\n@@ -107,8 +107,7 @@ public abstract class AbstractRestInvocation {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    Map<String, String> cseContext =\n-        JsonUtils.readValue(strCseContext.getBytes(StandardCharsets.UTF_8), Map.class);\n+    Map<String, String> cseContext = JsonUtils.readValue(strCseContext.getBytes(StandardCharsets.UTF_8), Map.class);\n     invocation.mergeContext(cseContext);\n   }\n \n@@ -116,7 +115,6 @@ public abstract class AbstractRestInvocation {\n     if (null == invocation || null == invocation.getContext()) {\n       return null;\n     }\n-\n     return invocation.getContext(key);\n   }\n \n@@ -130,8 +128,8 @@ public abstract class AbstractRestInvocation {\n \n     invocation.onStart(requestEx, start);\n     invocation.getInvocationStageTrace().startSchedule();\n-    OperationMeta operationMeta = restOperationMeta.getOperationMeta();\n \n+    OperationMeta operationMeta = restOperationMeta.getOperationMeta();\n     try {\n       this.setContext();\n     } catch (Exception e) {\n@@ -152,12 +150,11 @@ public abstract class AbstractRestInvocation {\n             if (isInQueueTimeout()) {\n               throw new InvocationException(Status.INTERNAL_SERVER_ERROR, \"Timeout when processing the request.\");\n             }\n+\n             if (requestEx.getAttribute(RestConst.REST_REQUEST) != requestEx) {\n               // already timeout\n               // in this time, request maybe recycled and reused by web container, do not use requestEx\n-              LOGGER.error(\"Rest request already timeout, abandon execute, method {}, operation {}.\",\n-                  operationMeta.getHttpMethod(),\n-                  operationMeta.getMicroserviceQualifiedName());\n+              LOGGER.error(\"Rest request already timeout, abandon execute, method {}, operation {}.\", operationMeta.getHttpMethod(), operationMeta.getMicroserviceQualifiedName());\n               return;\n             }\n \n@@ -169,7 +166,9 @@ public abstract class AbstractRestInvocation {\n         }\n       });\n     } catch (Throwable e) {\n-      LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\", e.getMessage(), e.getClass().getName());\n+      LOGGER.error(\"failed to schedule invocation, message={}, executor={}.\",\n+e.getMessage(),\n+e.getClass().getName());\n       sendFailResponse(e);\n     }\n   }\n@@ -195,19 +194,19 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() > invocation.getOperationMeta().getConfig()\n+                                                                                                              .getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n     invocation.onExecuteStart();\n-\n     invoke();\n   }\n \n   protected abstract OperationLocator locateOperation(ServicePathManager servicePathManager);\n \n   // create a invocation without args setted\n+\n   protected abstract void createInvocation();\n \n   public void invoke() {\n@@ -228,7 +227,6 @@ public abstract class AbstractRestInvocation {\n   protected Response prepareInvoke() throws Throwable {\n     this.initProduceProcessor();\n     invocation.getHandlerContext().put(RestConst.REST_REQUEST, requestEx);\n-\n     invocation.getInvocationStageTrace().startServerFiltersRequest();\n     for (HttpServerFilter filter : httpServerFilters) {\n       if (filter.enabled()) {\n@@ -238,7 +236,6 @@ public abstract class AbstractRestInvocation {\n         }\n       }\n     }\n-\n     return null;\n   }\n \n@@ -249,8 +246,7 @@ public abstract class AbstractRestInvocation {\n \n   public void sendFailResponse(Throwable throwable) {\n     if (produceProcessor == null) {\n-      produceProcessor = ProduceProcessorManager.INSTANCE.getDefaultProcessorMap()\n-          .get(DEFAULT_SERIAL_CLASS);\n+      produceProcessor = ProduceProcessorManager.INSTANCE.getDefaultProcessorMap().get(DEFAULT_SERIAL_CLASS);\n     }\n \n     Response response = Response.createProducerFail(throwable);\n@@ -261,36 +257,38 @@ public abstract class AbstractRestInvocation {\n     if (invocation != null) {\n       invocation.getInvocationStageTrace().finishHandlersResponse();\n     }\n+\n     try {\n       sendResponse(response);\n     } catch (Throwable e) {\n       LOGGER.error(\"Failed to send rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+getMicroserviceQualifiedName(),\n+requestEx.getRequestURI(),\n+e);\n     }\n   }\n \n   @SuppressWarnings(\"deprecation\")\n   protected void sendResponse(Response response) {\n     if (response.getHeaders().getHeaderMap() != null) {\n-      for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap().entrySet()) {\n+      for (Entry<String, List<Object>> entry : response.getHeaders().getHeaderMap()\n+                                                                    .entrySet()) {\n         for (Object value : entry.getValue()) {\n-          if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH)\n-              && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n+          if (!entry.getKey().equalsIgnoreCase(HttpHeaders.CONTENT_LENGTH) && !entry.getKey().equalsIgnoreCase(\"Transfer-Encoding\")) {\n             responseEx.addHeader(entry.getKey(), String.valueOf(value));\n           }\n         }\n       }\n     }\n+\n     responseEx.setStatus(response.getStatusCode(), response.getReasonPhrase());\n     responseEx.setAttribute(RestConst.INVOCATION_HANDLER_RESPONSE, response);\n     responseEx.setAttribute(RestConst.INVOCATION_HANDLER_PROCESSOR, produceProcessor);\n-\n     executeHttpServerFilters(response);\n   }\n \n   protected void executeHttpServerFilters(Response response) {\n-    HttpServerFilterBeforeSendResponseExecutor exec =\n-        new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n+    HttpServerFilterBeforeSendResponseExecutor exec = new HttpServerFilterBeforeSendResponseExecutor(httpServerFilters, invocation, responseEx);\n     CompletableFuture<Void> future = exec.run();\n     future.whenComplete((v, e) -> {\n       if (invocation != null) {\n@@ -304,25 +302,29 @@ public abstract class AbstractRestInvocation {\n   protected void onExecuteHttpServerFiltersFinish(Response response, Throwable e) {\n     if (e != null) {\n       LOGGER.error(\"Failed to execute HttpServerFilters, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), e);\n+getMicroserviceQualifiedName(),\n+requestEx.getRequestURI(),\n+e);\n     }\n \n     try {\n       responseEx.flushBuffer();\n     } catch (Throwable flushException) {\n       LOGGER.error(\"Failed to flush rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), flushException);\n+getMicroserviceQualifiedName(),\n+requestEx.getRequestURI(),\n+flushException);\n     }\n \n     try {\n       requestEx.getAsyncContext().complete();\n     } catch (Throwable completeException) {\n-      LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\",\n-          getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n+      LOGGER.error(\"Failed to complete async rest response, operation:{}, request uri:{}\", getMicroserviceQualifiedName(), requestEx.getRequestURI(), completeException);\n     }\n \n     // if failed to locate path, then will not create invocation\n     // TODO: statistics this case\n+\n     if (invocation != null) {\n       invocation.onFinish(response);\n     }\n@@ -331,4 +333,4 @@ public abstract class AbstractRestInvocation {\n   private String getMicroserviceQualifiedName() {\n     return null == invocation ? UNKNOWN_OPERATION_ID : invocation.getMicroserviceQualifiedName();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/172/AbstractRestInvocation.java\nindex 15a717fece0..7567b30bec9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/172/AbstractRestInvocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/172/AbstractRestInvocation.java\n@@ -195,8 +195,8 @@ public abstract class AbstractRestInvocation {\n   }\n \n   private boolean isInQueueTimeout() {\n-    return System.nanoTime() - invocation.getInvocationStageTrace().getStart() >\n-        invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n+    return System.nanoTime() - invocation.getInvocationStageTrace().getStart()\n+        > invocation.getOperationMeta().getConfig().getNanoRestRequestWaitInPoolTimeout();\n   }\n \n   protected void runOnExecutor() {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "198",
                    "column": "80",
                    "severity": "warning",
                    "message": "'>' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}