{
    "project_name": "wso2-attic-commons",
    "violation_id": "373",
    "information": {
        "violations": [
            {
                "line": "37",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public abstract class OdeCommandsBase extends OsgiCommandSupport {\n\n    protected static String COMPONENT_NAME = \"org.apache.servicemix:Type=Component,Name=OdeBpelEngine,SubType=Management\";\n\n    protected static final String LIST_ALL_PROCESSES = \"listAllProcesses\";\n    protected static final String LIST_ALL_INSTANCES = \"listAllInstances\";",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/373/OdeCommandsBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/373/OdeCommandsBase.java\nindex 06c32487816..c31b339c4ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/373/OdeCommandsBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/373/OdeCommandsBase.java\n@@ -34,71 +34,71 @@ import org.apache.ode.jbi.OdeContext;\n \n public abstract class OdeCommandsBase extends OsgiCommandSupport {\n \n-    protected static String COMPONENT_NAME = \"org.apache.servicemix:Type=Component,Name=OdeBpelEngine,SubType=Management\";\n+  protected static String COMPONENT_NAME = \"org.apache.servicemix:Type=Component,Name=OdeBpelEngine,SubType=Management\";\n \n-    protected static final String LIST_ALL_PROCESSES = \"listAllProcesses\";\n-    protected static final String LIST_ALL_INSTANCES = \"listAllInstances\";\n-    protected static final String TERMINATE = \"terminate\";\n+  protected static final String LIST_ALL_PROCESSES = \"listAllProcesses\";\n+  protected static final String LIST_ALL_INSTANCES = \"listAllInstances\";\n+  protected static final String TERMINATE = \"terminate\";\n \n-    protected MBeanServer getMBeanServer() {\n-        OdeContext ode = OdeContext.getInstance();\n-        if (ode != null) {\n-            return ode.getContext().getMBeanServer();\n-        }\n-        return null;\n-    }\n-\n-    /**\n-     * Invokes an operation on the ODE MBean server\n-     *\n-     * @param <T>\n-     * @param operationName\n-     * @param args\n-     * @param T\n-     * @return\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    protected <T> T invoke(final String operationName, final Object[] params,\n-            final String[] signature, Class<?> T, long timeoutInSeconds)\n-            throws Exception {\n-        ExecutorService executor = Executors.newSingleThreadExecutor();\n-        Callable<T> callable = new Callable<T>() {\n-            public T call() throws Exception {\n-                MBeanServer server = getMBeanServer();\n-                if (server != null) {\n-                    return (T) server.invoke(new ObjectName(COMPONENT_NAME),\n-                            operationName, params, signature);\n-                }\n-                return null;\n-            }\n-        };\n-        Future<T> future = executor.submit(callable);\n-        executor.shutdown();\n-        return future.get(timeoutInSeconds, TimeUnit.SECONDS);\n+  protected MBeanServer getMBeanServer() {\n+    OdeContext ode = OdeContext.getInstance();\n+    if (ode != null) {\n+      return ode.getContext().getMBeanServer();\n     }\n+    return null;\n+  }\n \n-    protected List<TProcessInfo> getProcesses(long timeoutInSeconds)\n-            throws Exception {\n-        ProcessInfoListDocument result = invoke(LIST_ALL_PROCESSES, null, null,\n-                ProcessInfoListDocument.class, timeoutInSeconds);\n-        if (result != null) {\n-            return result.getProcessInfoList().getProcessInfoList();\n+  /**\n+   * Invokes an operation on the ODE MBean server\n+   *\n+   * @param <T>\n+   * @param operationName\n+   * @param args\n+   * @param T\n+   * @return\n+   */\n+  @SuppressWarnings(\"unchecked\")\n+  protected <T> T invoke(final String operationName, final Object[] params,\n+                         final String[] signature, Class<?> T, long timeoutInSeconds)\n+    throws Exception {\n+    ExecutorService executor = Executors.newSingleThreadExecutor();\n+    Callable<T> callable = new Callable<T>() {\n+      public T call() throws Exception {\n+        MBeanServer server = getMBeanServer();\n+        if (server != null) {\n+          return (T) server.invoke(new ObjectName(COMPONENT_NAME),\n+            operationName, params, signature);\n         }\n         return null;\n-    }\n+      }\n+    };\n+    Future<T> future = executor.submit(callable);\n+    executor.shutdown();\n+    return future.get(timeoutInSeconds, TimeUnit.SECONDS);\n+  }\n \n-    protected List<TInstanceInfo> getActiveInstances(long timeoutInSeconds)\n-            throws Exception {\n-        InstanceInfoListDocument instances = invoke(LIST_ALL_INSTANCES, null,\n-                null, InstanceInfoListDocument.class, timeoutInSeconds);\n-        if (instances != null) {\n-            return instances.getInstanceInfoList().getInstanceInfoList();\n-        }\n-        return null;\n+  protected List<TProcessInfo> getProcesses(long timeoutInSeconds)\n+    throws Exception {\n+    ProcessInfoListDocument result = invoke(LIST_ALL_PROCESSES, null, null,\n+      ProcessInfoListDocument.class, timeoutInSeconds);\n+    if (result != null) {\n+      return result.getProcessInfoList().getProcessInfoList();\n     }\n+    return null;\n+  }\n \n-    protected void terminate(Long iid, long timeoutInSeconds) throws Exception {\n-        invoke(TERMINATE, new Long[] { iid }, new String[] { Long.class\n-                .getName() }, InstanceInfoDocument.class, timeoutInSeconds);\n+  protected List<TInstanceInfo> getActiveInstances(long timeoutInSeconds)\n+    throws Exception {\n+    InstanceInfoListDocument instances = invoke(LIST_ALL_INSTANCES, null,\n+      null, InstanceInfoListDocument.class, timeoutInSeconds);\n+    if (instances != null) {\n+      return instances.getInstanceInfoList().getInstanceInfoList();\n     }\n+    return null;\n+  }\n+\n+  protected void terminate(Long iid, long timeoutInSeconds) throws Exception {\n+    invoke(TERMINATE, new Long[] {iid}, new String[] {Long.class\n+      .getName()}, InstanceInfoDocument.class, timeoutInSeconds);\n+  }\n }\n",
            "diff_size": 90
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/373/OdeCommandsBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/373/OdeCommandsBase.java\nindex 06c32487816..f444f9dfabe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/373/OdeCommandsBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/373/OdeCommandsBase.java\n@@ -58,8 +58,7 @@ public abstract class OdeCommandsBase extends OsgiCommandSupport {\n      * @return\n      */\n     @SuppressWarnings(\"unchecked\")\n-    protected <T> T invoke(final String operationName, final Object[] params,\n-            final String[] signature, Class<?> T, long timeoutInSeconds)\n+    protected <T> T invoke(final String operationName, final Object[] params, final String[] signature, Class<?> T, long timeoutInSeconds)\n             throws Exception {\n         ExecutorService executor = Executors.newSingleThreadExecutor();\n         Callable<T> callable = new Callable<T>() {\n@@ -101,4 +100,4 @@ public abstract class OdeCommandsBase extends OsgiCommandSupport {\n         invoke(TERMINATE, new Long[] { iid }, new String[] { Long.class\n                 .getName() }, InstanceInfoDocument.class, timeoutInSeconds);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}