{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "727",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport ihe.iti.xds_b._2007.RetrieveDocumentSetRequestType;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/727/AdapterRedactionEngineProxyNoOpImpl.java\nindex e96448df8e9..97df36632df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/727/AdapterRedactionEngineProxyNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/727/AdapterRedactionEngineProxyNoOpImpl.java\nindex e96448df8e9..2455b6f770b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/727/AdapterRedactionEngineProxyNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -40,21 +41,21 @@ import org.slf4j.LoggerFactory;\n  * @author Neil Webb\n  */\n public class AdapterRedactionEngineProxyNoOpImpl implements AdapterRedactionEngineProxy {\n-    private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyNoOpImpl.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyNoOpImpl.class);\n \n-    @Override\n-    public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n-            AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n-        LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n-        return adhocQueryResponse;\n-    }\n+  @Override\n+  public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n+                                                    AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n+    LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n+    return adhocQueryResponse;\n+  }\n \n-    @Override\n-    public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n-            RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n-            RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n-        LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n-        return retrieveDocumentSetResponse;\n-    }\n+  @Override\n+  public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n+      RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n+      RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n+    LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n+    return retrieveDocumentSetResponse;\n+  }\n \n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/727/AdapterRedactionEngineProxyNoOpImpl.java\nindex e96448df8e9..84ddce673ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/727/AdapterRedactionEngineProxyNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -43,18 +44,18 @@ public class AdapterRedactionEngineProxyNoOpImpl implements AdapterRedactionEngi\n     private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyNoOpImpl.class);\n \n     @Override\n-    public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n-            AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n+    public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest, AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n         LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n-        return adhocQueryResponse;\n+\n+return adhocQueryResponse;\n     }\n \n     @Override\n     public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n-            RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n-            RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n+            RetrieveDocumentSetRequestType retrieveDocumentSetRequest, RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n         LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n-        return retrieveDocumentSetResponse;\n+\n+return retrieveDocumentSetResponse;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/727/AdapterRedactionEngineProxyNoOpImpl.java\nindex e96448df8e9..489c0652ee2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/727/AdapterRedactionEngineProxyNoOpImpl.java\n@@ -39,22 +39,26 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Neil Webb\n  */\n+\n+\n public class AdapterRedactionEngineProxyNoOpImpl implements AdapterRedactionEngineProxy {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyNoOpImpl.class);\n \n+\n     @Override\n     public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n-            AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n+        AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n         LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n         return adhocQueryResponse;\n     }\n \n+\n     @Override\n-    public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n-            RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n-            RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n+    public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n+        RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n         LOG.trace(\"Using NoOp Implementation for Adapter Redaction Engine Service\");\n         return retrieveDocumentSetResponse;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/727/AdapterRedactionEngineProxyNoOpImpl.java\nindex e96448df8e9..97df36632df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/727/AdapterRedactionEngineProxyNoOpImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/727/AdapterRedactionEngineProxyNoOpImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}