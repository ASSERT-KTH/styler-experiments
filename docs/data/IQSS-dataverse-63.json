{
    "project_name": "IQSS-dataverse",
    "violation_id": "63",
    "information": {
        "violations": [
            {
                "line": "99",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "        }\n        if (theDataset.getStorageIdentifier() == null) {\n        \tString driverId = theDataset.getEffectiveStorageDriverId();\n        \ttheDataset.setStorageIdentifier(driverId  + \"://\" + theDataset.getAuthorityForFileStorage() + \"/\" + theDataset.getIdentifierForFileStorage());\n        }\n        if (theDataset.getIdentifier()==null) {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/IQSS-dataverse/styler/05_predictions/final/files-repaired/63/AbstractCreateDatasetCommand.java\nindex 2046e4b107e..96a702f6cd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/IQSS-dataverse/styler/05_predictions/final/files-repaired/63/AbstractCreateDatasetCommand.java\n@@ -96,7 +96,7 @@ public abstract class AbstractCreateDatasetCommand extends AbstractDatasetComman\n             theDataset.setAuthority(ctxt.settings().getValueForKey(SettingsServiceBean.Key.Authority, nonNullDefaultIfKeyNotFound));\n         }\n         if (theDataset.getStorageIdentifier() == null) {\n-        \tString driverId = theDataset.getEffectiveStorageDriverId();\n+        String driverId = theDataset.getEffectiveStorageDriverId();\n         \ttheDataset.setStorageIdentifier(driverId  + \"://\" + theDataset.getAuthorityForFileStorage() + \"/\" + theDataset.getIdentifierForFileStorage());\n         }\n         if (theDataset.getIdentifier()==null) {\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/63/AbstractCreateDatasetCommand.java\nindex 2046e4b107e..18662eed534 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/63/AbstractCreateDatasetCommand.java\n@@ -20,143 +20,150 @@ import java.util.logging.Level;\n import java.util.logging.Logger;\n import org.apache.solr.client.solrj.SolrServerException;\n \n-/**;\n+/**\n+ * ;\n  * An abstract base class for commands that creates {@link Dataset}s.\n  *\n  * @author michael\n  */\n @RequiredPermissions(Permission.AddDataset)\n public abstract class AbstractCreateDatasetCommand extends AbstractDatasetCommand<Dataset> {\n-    \n-    private static final Logger logger = Logger.getLogger(AbstractCreateDatasetCommand.class.getCanonicalName());\n-    \n-    final protected boolean registrationRequired;\n-    \n-    public AbstractCreateDatasetCommand(Dataset theDataset, DataverseRequest aRequest) {\n-        this(theDataset, aRequest, false);\n+\n+  private static final Logger logger = Logger.getLogger(AbstractCreateDatasetCommand.class.getCanonicalName());\n+\n+  final protected boolean registrationRequired;\n+\n+  public AbstractCreateDatasetCommand(Dataset theDataset, DataverseRequest aRequest) {\n+    this(theDataset, aRequest, false);\n+  }\n+\n+  public AbstractCreateDatasetCommand(Dataset theDataset, DataverseRequest aRequest, boolean isRegistrationRequired) {\n+    super(aRequest, theDataset);\n+    registrationRequired = isRegistrationRequired;\n+  }\n+\n+  protected void additionalParameterTests(CommandContext ctxt) throws CommandException {\n+    // base class - do nothing.\n+  }\n+\n+  protected DatasetVersion getVersionToPersist(Dataset theDataset) {\n+    return theDataset.getLatestVersion();\n+  }\n+\n+  /**\n+   * Called after the dataset has been persisted, but before the persistence context\n+   * has been flushed.\n+   *\n+   * @param theDataset The em-managed dataset.\n+   * @param ctxt\n+   * @throws edu.harvard.iq.dataverse.engine.command.exception.CommandException\n+   */\n+  protected void postPersist(Dataset theDataset, CommandContext ctxt) throws CommandException {\n+    // base class - default to nothing.\n+  }\n+\n+  protected abstract void handlePid(Dataset theDataset, CommandContext ctxt) throws CommandException;\n+\n+  @Override\n+  public Dataset execute(CommandContext ctxt) throws CommandException {\n+\n+    additionalParameterTests(ctxt);\n+\n+    Dataset theDataset = getDataset();\n+    GlobalIdServiceBean idServiceBean = GlobalIdServiceBean.getBean(ctxt);\n+    if (isEmpty(theDataset.getIdentifier())) {\n+      theDataset.setIdentifier(ctxt.datasets().generateDatasetIdentifier(theDataset, idServiceBean));\n     }\n \n-    public AbstractCreateDatasetCommand(Dataset theDataset, DataverseRequest aRequest, boolean isRegistrationRequired) {\n-        super(aRequest, theDataset);\n-        registrationRequired = isRegistrationRequired;\n+    DatasetVersion dsv = getVersionToPersist(theDataset);\n+    // This re-uses the state setup logic of CreateDatasetVersionCommand, but\n+    // without persisting the new version, or altering its files.\n+    new CreateDatasetVersionCommand(getRequest(), theDataset, dsv).prepareDatasetAndVersion();\n+\n+    theDataset.setCreator((AuthenticatedUser) getRequest().getUser());\n+\n+    theDataset.setCreateDate(getTimestamp());\n+\n+    theDataset.setModificationTime(getTimestamp());\n+    for (DataFile dataFile : theDataset.getFiles()) {\n+      dataFile.setCreator((AuthenticatedUser) getRequest().getUser());\n+      dataFile.setCreateDate(theDataset.getCreateDate());\n     }\n-   \n-    protected void additionalParameterTests(CommandContext ctxt) throws CommandException {\n-        // base class - do nothing.\n+\n+    String nonNullDefaultIfKeyNotFound = \"\";\n+    if (theDataset.getProtocol() == null) {\n+      theDataset.setProtocol(\n+        ctxt.settings().getValueForKey(SettingsServiceBean.Key.Protocol, nonNullDefaultIfKeyNotFound));\n     }\n-    \n-    protected DatasetVersion getVersionToPersist( Dataset theDataset ) {\n-        return theDataset.getLatestVersion();\n+    if (theDataset.getAuthority() == null) {\n+      theDataset.setAuthority(\n+        ctxt.settings().getValueForKey(SettingsServiceBean.Key.Authority, nonNullDefaultIfKeyNotFound));\n     }\n-    \n-    /**\n-     * Called after the dataset has been persisted, but before the persistence context\n-     * has been flushed. \n-     * @param theDataset The em-managed dataset.\n-     * @param ctxt \n-     * @throws edu.harvard.iq.dataverse.engine.command.exception.CommandException \n-     */\n-    protected void postPersist( Dataset theDataset, CommandContext ctxt ) throws CommandException {\n-        // base class - default to nothing.\n+    if (theDataset.getStorageIdentifier() == null) {\n+      String driverId = theDataset.getEffectiveStorageDriverId();\n+      theDataset.setStorageIdentifier(\n+        driverId + \"://\" + theDataset.getAuthorityForFileStorage() + \"/\" + theDataset.getIdentifierForFileStorage());\n     }\n-    \n-    protected abstract void handlePid( Dataset theDataset, CommandContext ctxt ) throws CommandException ;\n-    \n-    @Override\n-    public Dataset execute(CommandContext ctxt) throws CommandException {\n-        \n-        additionalParameterTests(ctxt);\n-        \n-        Dataset theDataset = getDataset();\n-        GlobalIdServiceBean idServiceBean = GlobalIdServiceBean.getBean(ctxt);\n-        if ( isEmpty(theDataset.getIdentifier()) ) {\n-            theDataset.setIdentifier(ctxt.datasets().generateDatasetIdentifier(theDataset, idServiceBean));\n-        }\n-        \n-        DatasetVersion dsv = getVersionToPersist(theDataset);\n-        // This re-uses the state setup logic of CreateDatasetVersionCommand, but\n-        // without persisting the new version, or altering its files. \n-        new CreateDatasetVersionCommand(getRequest(), theDataset, dsv).prepareDatasetAndVersion();\n-        \n-        theDataset.setCreator((AuthenticatedUser) getRequest().getUser());\n-        \n-        theDataset.setCreateDate(getTimestamp());\n-\n-        theDataset.setModificationTime(getTimestamp());\n-        for (DataFile dataFile: theDataset.getFiles() ){\n-            dataFile.setCreator((AuthenticatedUser) getRequest().getUser());\n-            dataFile.setCreateDate(theDataset.getCreateDate());\n-        }\n-        \n-        String nonNullDefaultIfKeyNotFound = \"\";\n-        if (theDataset.getProtocol()==null) {\n-            theDataset.setProtocol(ctxt.settings().getValueForKey(SettingsServiceBean.Key.Protocol, nonNullDefaultIfKeyNotFound));\n-        }\n-        if (theDataset.getAuthority()==null) {\n-            theDataset.setAuthority(ctxt.settings().getValueForKey(SettingsServiceBean.Key.Authority, nonNullDefaultIfKeyNotFound));\n-        }\n-        if (theDataset.getStorageIdentifier() == null) {\n-        \tString driverId = theDataset.getEffectiveStorageDriverId();\n-        \ttheDataset.setStorageIdentifier(driverId  + \"://\" + theDataset.getAuthorityForFileStorage() + \"/\" + theDataset.getIdentifierForFileStorage());\n-        }\n-        if (theDataset.getIdentifier()==null) {\n-            theDataset.setIdentifier(ctxt.datasets().generateDatasetIdentifier(theDataset, idServiceBean));\n-        }\n-        \n-        // Attempt the registration if importing dataset through the API, or the app (but not harvest)\n-        handlePid(theDataset, ctxt);\n-                \n-        if (registrationRequired && (theDataset.getGlobalIdCreateTime() == null)) {\n-            throw new CommandExecutionException(\"Dataset could not be created.  Registration failed\", this);\n-        }\n-        \n-        ctxt.em().persist(theDataset);\n-        \n-        postPersist(theDataset, ctxt);\n-        \n-        createDatasetUser(ctxt);\n-        \n-        theDataset = ctxt.em().merge(theDataset); // store last updates\n-        \n-        // DB updates - done.\n-        \n-        // Now we need the acutal dataset id, so we can start indexing.\n-        ctxt.em().flush();\n-        \n-        // TODO: this needs to be moved in to an onSuccess method; not adding to this PR as its out of scope\n-        // TODO: switch to asynchronous version when JPA sync works\n-        // ctxt.index().asyncIndexDataset(theDataset.getId(), true); \n-        try{\n-              ctxt.index().indexDataset(theDataset, true);\n-        } catch (IOException | SolrServerException e) {\n-            String failureLogText = \"Post create dataset indexing failed. You can kickoff a re-index of this dataset with: \\r\\n curl http://localhost:8080/api/admin/index/datasets/\" + theDataset.getId().toString();\n-            failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n-            LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, theDataset);\n-        }\n-                 \n-        return theDataset;\n+    if (theDataset.getIdentifier() == null) {\n+      theDataset.setIdentifier(ctxt.datasets().generateDatasetIdentifier(theDataset, idServiceBean));\n     }\n \n-    @Override\n-    public int hashCode() {\n-        return 97 + Objects.hashCode(getDataset());\n+    // Attempt the registration if importing dataset through the API, or the app (but not harvest)\n+    handlePid(theDataset, ctxt);\n+\n+    if (registrationRequired && (theDataset.getGlobalIdCreateTime() == null)) {\n+      throw new CommandExecutionException(\"Dataset could not be created.  Registration failed\", this);\n     }\n \n-    @Override\n-    public boolean equals(Object obj) {\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (!(obj instanceof AbstractCreateDatasetCommand)) {\n-            return false;\n-        }\n-        final AbstractCreateDatasetCommand other = (AbstractCreateDatasetCommand) obj;\n-        return Objects.equals(getDataset(), other.getDataset());\n+    ctxt.em().persist(theDataset);\n+\n+    postPersist(theDataset, ctxt);\n+\n+    createDatasetUser(ctxt);\n+\n+    theDataset = ctxt.em().merge(theDataset); // store last updates\n+\n+    // DB updates - done.\n+\n+    // Now we need the acutal dataset id, so we can start indexing.\n+    ctxt.em().flush();\n+\n+    // TODO: this needs to be moved in to an onSuccess method; not adding to this PR as its out of scope\n+    // TODO: switch to asynchronous version when JPA sync works\n+    // ctxt.index().asyncIndexDataset(theDataset.getId(), true);\n+    try {\n+      ctxt.index().indexDataset(theDataset, true);\n+    } catch (IOException | SolrServerException e) {\n+      String failureLogText =\n+        \"Post create dataset indexing failed. You can kickoff a re-index of this dataset with: \\r\\n curl http://localhost:8080/api/admin/index/datasets/\" +\n+          theDataset.getId().toString();\n+      failureLogText += \"\\r\\n\" + e.getLocalizedMessage();\n+      LoggingUtil.writeOnSuccessFailureLog(null, failureLogText, theDataset);\n     }\n \n-    @Override\n-    public String toString() {\n-        return \"[DatasetCreate dataset:\" + getDataset().getId() + \"]\";\n+    return theDataset;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 97 + Objects.hashCode(getDataset());\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (obj == null) {\n+      return false;\n+    }\n+    if (!(obj instanceof AbstractCreateDatasetCommand)) {\n+      return false;\n     }\n+    final AbstractCreateDatasetCommand other = (AbstractCreateDatasetCommand) obj;\n+    return Objects.equals(getDataset(), other.getDataset());\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"[DatasetCreate dataset:\" + getDataset().getId() + \"]\";\n+  }\n \n }\n",
            "diff_size": 206
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/random/files-repaired/63/AbstractCreateDatasetCommand.java\nindex 2046e4b107e..96a702f6cd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/random/files-repaired/63/AbstractCreateDatasetCommand.java\n@@ -96,7 +96,7 @@ public abstract class AbstractCreateDatasetCommand extends AbstractDatasetComman\n             theDataset.setAuthority(ctxt.settings().getValueForKey(SettingsServiceBean.Key.Authority, nonNullDefaultIfKeyNotFound));\n         }\n         if (theDataset.getStorageIdentifier() == null) {\n-        \tString driverId = theDataset.getEffectiveStorageDriverId();\n+        String driverId = theDataset.getEffectiveStorageDriverId();\n         \ttheDataset.setStorageIdentifier(driverId  + \"://\" + theDataset.getAuthorityForFileStorage() + \"/\" + theDataset.getIdentifierForFileStorage());\n         }\n         if (theDataset.getIdentifier()==null) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "100",
                    "column": "9",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/three_grams/files-repaired/63/AbstractCreateDatasetCommand.java\nindex 2046e4b107e..204bbc55328 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/63/AbstractCreateDatasetCommand.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/three_grams/files-repaired/63/AbstractCreateDatasetCommand.java\n@@ -96,7 +96,7 @@ public abstract class AbstractCreateDatasetCommand extends AbstractDatasetComman\n             theDataset.setAuthority(ctxt.settings().getValueForKey(SettingsServiceBean.Key.Authority, nonNullDefaultIfKeyNotFound));\n         }\n         if (theDataset.getStorageIdentifier() == null) {\n-        \tString driverId = theDataset.getEffectiveStorageDriverId();\n+            String driverId = theDataset.getEffectiveStorageDriverId();\n         \ttheDataset.setStorageIdentifier(driverId  + \"://\" + theDataset.getAuthorityForFileStorage() + \"/\" + theDataset.getIdentifierForFileStorage());\n         }\n         if (theDataset.getIdentifier()==null) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}