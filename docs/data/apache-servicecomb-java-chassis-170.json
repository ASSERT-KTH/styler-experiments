{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "170",
    "information": {
        "violations": [
            {
                "line": "72",
                "column": "32",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n      config.setClassName(\n          \"gen.wrap.protobuf.\" +\n              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n      if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n        config.addField(\"field0\", javaType);",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/170/ScopedProtobufSchemaManager.java\nindex 002c009c95f..c482efbaa88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/170/ScopedProtobufSchemaManager.java\n@@ -69,8 +69,7 @@ public class ScopedProtobufSchemaManager {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n       if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "72",
                    "column": "32",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/170/ScopedProtobufSchemaManager.java\nindex 002c009c95f..27c9bd16fda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/170/ScopedProtobufSchemaManager.java\n@@ -69,9 +69,8 @@ public class ScopedProtobufSchemaManager {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n-      if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n \n@@ -101,8 +100,7 @@ public class ScopedProtobufSchemaManager {\n       Parameter[] params = method.getParameters();\n       for (int idx = 0; idx < params.length; idx++) {\n         Parameter param = params[idx];\n-        String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils\n-            .correctMethodParameterName(operationMeta.getParamName(idx));\n+        String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctMethodParameterName(operationMeta.getParamName(idx));\n         config.addField(paramName, param.getParameterizedType());\n       }\n \n@@ -111,4 +109,4 @@ public class ScopedProtobufSchemaManager {\n       return createWrapSchema(config);\n     });\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/170/ScopedProtobufSchemaManager.java\nindex 002c009c95f..ec518785018 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/170/ScopedProtobufSchemaManager.java\n@@ -21,16 +21,13 @@ import java.lang.reflect.Method;\n import java.lang.reflect.Parameter;\n import java.lang.reflect.Type;\n import java.util.Map;\n-\n import org.apache.servicecomb.codec.protobuf.utils.schema.WrapSchemaFactory;\n import org.apache.servicecomb.common.javassist.JavassistUtils;\n import org.apache.servicecomb.core.definition.OperationMeta;\n import org.apache.servicecomb.foundation.common.concurrent.ConcurrentHashMapEx;\n import org.apache.servicecomb.foundation.common.utils.JvmUtils;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-\n import io.protostuff.Schema;\n import io.protostuff.runtime.RuntimeSchema;\n \n@@ -44,6 +41,7 @@ public class ScopedProtobufSchemaManager {\n   }\n \n   // \u4e3a\u4e86\u652f\u6301method args\u7684\u573a\u666f\uff0c\u5168\u90e8\u5b9e\u73b0ProtobufMessageWrapper\u63a5\u53e3\uff0c\u6709\u7684\u573a\u666f\u6709\u70b9\u6d6a\u8d39\uff0c\u4e0d\u8fc7\u65e0\u5173\u7d27\u8981\n+\n   private WrapSchema createWrapSchema(WrapClassConfig config) {\n     Class<?> cls = JavassistUtils.createClass(classLoader, config);\n     Schema<?> schema = RuntimeSchema.createFrom(cls);\n@@ -52,63 +50,59 @@ public class ScopedProtobufSchemaManager {\n \n   // \u9002\u7528\u4e8e\u5c06\u5355\u4e2a\u7c7b\u578b\u5305\u88c5\u7684\u573a\u666f\n   // \u6bd4\u5982return\n+\n   public WrapSchema getOrCreateSchema(Type type) {\n     JavaType javaType = TypeFactory.defaultInstance().constructType(type);\n     // List<String> -> java.util.List<java.lang.String>\n     // List<List<String>> -> java.util.List<java.util.List<java.lang.String>>\n     String key = javaType.toCanonical();\n     return schemaCache.computeIfAbsent(key, k -> {\n-      if (!ProtobufSchemaUtils.isNeedWrap(javaType.getRawClass())) {\n+             if (!ProtobufSchemaUtils.isNeedWrap(javaType.getRawClass())) {\n         // \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\n-        Schema<?> schema = RuntimeSchema.createFrom(javaType.getRawClass());\n-        return WrapSchemaFactory.createSchema(schema, WrapType.NOT_WRAP);\n-      }\n+               Schema<?> schema = RuntimeSchema.createFrom(javaType.getRawClass());\n+               return WrapSchemaFactory.createSchema(schema, WrapType.NOT_WRAP);\n+             }\n \n       // \u9700\u8981\u5305\u88c5\n-      WrapClassConfig config = new WrapClassConfig();\n-      config.setType(WrapType.NORMAL_WRAP);\n-\n-      config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n-      if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n-        config.addField(\"field0\", javaType);\n-      }\n \n-      JavassistUtils.genSingleWrapperInterface(config);\n+             WrapClassConfig config = new WrapClassConfig();\n+             config.setType(WrapType.NORMAL_WRAP);\n+             config.setClassName(\"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+             if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n+               config.addField(\"field0\", javaType);\n+             }\n \n-      return createWrapSchema(config);\n+             JavassistUtils.genSingleWrapperInterface(config);\n+             return createWrapSchema(config);\n     });\n   }\n \n   public WrapSchema getOrCreateArgsSchema(OperationMeta operationMeta) {\n     Method method = operationMeta.getMethod();\n     String type = \"gen.\" + method.getDeclaringClass().getName() + \".\" + method.getName() + \".Args\";\n-\n     return schemaCache.computeIfAbsent(type, (t) -> {\n-      if (!ProtobufSchemaUtils.isArgsNeedWrap(method)) {\n+             if (!ProtobufSchemaUtils.isArgsNeedWrap(method)) {\n         // \u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\n-        Class<?> cls = method.getParameterTypes()[0];\n-        Schema<?> schema = RuntimeSchema.createFrom(cls);\n-        return WrapSchemaFactory.createSchema(schema, WrapType.ARGS_NOT_WRAP);\n-      }\n+               Class<?> cls = method.getParameterTypes()[0];\n+               Schema<?> schema = RuntimeSchema.createFrom(cls);\n+               return WrapSchemaFactory.createSchema(schema, WrapType.ARGS_NOT_WRAP);\n+             }\n \n       // \u9700\u8981\u5305\u88c5\n-      WrapClassConfig config = new WrapClassConfig();\n-      config.setType(WrapType.ARGS_WRAP);\n-      config.setClassName(type);\n \n-      Parameter[] params = method.getParameters();\n-      for (int idx = 0; idx < params.length; idx++) {\n-        Parameter param = params[idx];\n-        String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils\n-            .correctMethodParameterName(operationMeta.getParamName(idx));\n-        config.addField(paramName, param.getParameterizedType());\n-      }\n+             WrapClassConfig config = new WrapClassConfig();\n+             config.setType(WrapType.ARGS_WRAP);\n+             config.setClassName(type);\n \n-      JavassistUtils.genMultiWrapperInterface(config);\n+             Parameter[] params = method.getParameters();\n+             for (int idx = 0; idx < params.length; idx++) {\n+               Parameter param = params[idx];\n+               String paramName = org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctMethodParameterName(operationMeta.getParamName(idx));\n+               config.addField(paramName, param.getParameterizedType());\n+             }\n \n-      return createWrapSchema(config);\n+             JavassistUtils.genMultiWrapperInterface(config);\n+             return createWrapSchema(config);\n     });\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/170/ScopedProtobufSchemaManager.java\nindex 002c009c95f..c482efbaa88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/170/ScopedProtobufSchemaManager.java\n@@ -69,8 +69,7 @@ public class ScopedProtobufSchemaManager {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n       if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/170/ScopedProtobufSchemaManager.java\nindex 002c009c95f..c482efbaa88 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/170/ScopedProtobufSchemaManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/170/ScopedProtobufSchemaManager.java\n@@ -69,8 +69,7 @@ public class ScopedProtobufSchemaManager {\n       config.setType(WrapType.NORMAL_WRAP);\n \n       config.setClassName(\n-          \"gen.wrap.protobuf.\" +\n-              org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n+          \"gen.wrap.protobuf.\" + org.apache.servicecomb.swagger.generator.core.utils.ClassUtils.correctClassName(key));\n       if (!Void.TYPE.isAssignableFrom(javaType.getRawClass())) {\n         config.addField(\"field0\", javaType);\n       }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}