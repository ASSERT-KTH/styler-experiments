{
    "project_name": "neo4j-neo4j",
    "violation_id": "2002",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2002/NonUniqueLuceneIndexPopulatingUpdater.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2002/NonUniqueLuceneIndexPopulatingUpdater.java\nindex b3dc2f2858c..029acb5afb5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2002/NonUniqueLuceneIndexPopulatingUpdater.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2002/NonUniqueLuceneIndexPopulatingUpdater.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.schema.populator;\n \n import org.neo4j.kernel.api.impl.schema.LuceneDocumentStructure;\n@@ -31,34 +32,34 @@ public class NonUniqueLuceneIndexPopulatingUpdater extends LuceneIndexPopulating\n {\n     private final NonUniqueIndexSampler sampler;\n \n-    public NonUniqueLuceneIndexPopulatingUpdater( LuceneIndexWriter writer, NonUniqueIndexSampler sampler )\n+    public NonUniqueLuceneIndexPopulatingUpdater(LuceneIndexWriter writer, NonUniqueIndexSampler sampler)\n     {\n-        super( writer );\n+        super(writer);\n         this.sampler = sampler;\n     }\n \n     @Override\n-    protected void added( ValueIndexEntryUpdate<?> update )\n+    protected void added(ValueIndexEntryUpdate<?> update)\n     {\n-        String encodedValue = LuceneDocumentStructure.encodedStringValuesForSampling( update.values() );\n-        sampler.include( encodedValue );\n+        String encodedValue = LuceneDocumentStructure.encodedStringValuesForSampling(update.values());\n+        sampler.include(encodedValue);\n     }\n \n     @Override\n-    protected void changed( ValueIndexEntryUpdate<?> update )\n+    protected void changed(ValueIndexEntryUpdate<?> update)\n     {\n-        String encodedValueBefore = LuceneDocumentStructure.encodedStringValuesForSampling( update.beforeValues() );\n-        sampler.exclude( encodedValueBefore );\n+        String encodedValueBefore = LuceneDocumentStructure.encodedStringValuesForSampling(update.beforeValues());\n+        sampler.exclude(encodedValueBefore);\n \n-        String encodedValueAfter = LuceneDocumentStructure.encodedStringValuesForSampling( update.values() );\n-        sampler.include( encodedValueAfter );\n+        String encodedValueAfter = LuceneDocumentStructure.encodedStringValuesForSampling(update.values());\n+        sampler.include(encodedValueAfter);\n     }\n \n     @Override\n-    protected void removed( ValueIndexEntryUpdate<?> update )\n+    protected void removed(ValueIndexEntryUpdate<?> update)\n     {\n-        String removedValue = LuceneDocumentStructure.encodedStringValuesForSampling( update.values() );\n-        sampler.exclude( removedValue );\n+        String removedValue = LuceneDocumentStructure.encodedStringValuesForSampling(update.values());\n+        sampler.exclude(removedValue);\n     }\n \n     @Override\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}