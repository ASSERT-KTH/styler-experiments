{
    "project_name": "wso2-attic-commons",
    "violation_id": "437",
    "information": {
        "violations": [
            {
                "line": "45",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 284).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    public static AbstractAggregateAttributeGenerator loadAggregatorClass(String aggregationName) {\n        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" + aggregationName.substring(0, 1).toUpperCase() + aggregationName.substring(1) + \"AggregateAttributeGenerator\");\n    }\n\n    public static Aggregator createSumAggregator(Attribute.Type type) {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 352).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/437/AggregatorParser.java\nindex fe4e8b270ae..3243465aa9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/437/AggregatorParser.java\n@@ -42,10 +42,7 @@ public class AggregatorParser {\n \n \n     public static AbstractAggregateAttributeGenerator loadAggregatorClass(String aggregationName) {\n-        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" + aggregationName.substring(0, 1).toUpperCase() + aggregationName.substring(1) + \"AggregateAttributeGenerator\");\n-    }\n-\n-    public static Aggregator createSumAggregator(Attribute.Type type) {\n+        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" + aggregationName.substring(0,1).toUpperCase()+aggregationName. substring ( 1 )+\"AggregateAttributeGenerator\");} public static Aggregator createSumAggregator(Attribute.Type type) {\n         switch (type) {\n             case STRING:\n                 throw new OperationNotSupportedException(\"Sum not supported for string\");\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/437/AggregatorParser.java\nindex fe4e8b270ae..0bb25d04dd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/437/AggregatorParser.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.util.parser;\n \n import org.wso2.siddhi.core.exception.OperationNotSupportedException;\n@@ -41,80 +42,82 @@ import org.wso2.siddhi.query.api.definition.Attribute;\n public class AggregatorParser {\n \n \n-    public static AbstractAggregateAttributeGenerator loadAggregatorClass(String aggregationName) {\n-        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" + aggregationName.substring(0, 1).toUpperCase() + aggregationName.substring(1) + \"AggregateAttributeGenerator\");\n-    }\n+  public static AbstractAggregateAttributeGenerator loadAggregatorClass(String aggregationName) {\n+    return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(\n+      AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" +\n+        aggregationName.substring(0, 1).toUpperCase() + aggregationName.substring(1) + \"AggregateAttributeGenerator\");\n+  }\n \n-    public static Aggregator createSumAggregator(Attribute.Type type) {\n-        switch (type) {\n-            case STRING:\n-                throw new OperationNotSupportedException(\"Sum not supported for string\");\n-            case INT:\n-                return new SumAggregatorInt();\n-            case LONG:\n-                return new SumAggregatorLong();\n-            case FLOAT:\n-                return new SumAggregatorFloat();\n-            case DOUBLE:\n-                return new SumAggregatorDouble();\n-            case BOOL:\n-                throw new OperationNotSupportedException(\"Sum not supported for bool\");\n-        }\n-        throw new OperationNotSupportedException(\"Sum not supported for \" + type);\n+  public static Aggregator createSumAggregator(Attribute.Type type) {\n+    switch (type) {\n+    case STRING:\n+      throw new OperationNotSupportedException(\"Sum not supported for string\");\n+    case INT:\n+      return new SumAggregatorInt();\n+    case LONG:\n+      return new SumAggregatorLong();\n+    case FLOAT:\n+      return new SumAggregatorFloat();\n+    case DOUBLE:\n+      return new SumAggregatorDouble();\n+    case BOOL:\n+      throw new OperationNotSupportedException(\"Sum not supported for bool\");\n     }\n+    throw new OperationNotSupportedException(\"Sum not supported for \" + type);\n+  }\n \n-    public static Aggregator createAvgAggregator(Attribute.Type type) {\n-        switch (type) {\n-            case STRING:\n-                throw new OperationNotSupportedException(\"Avg not supported for string\");\n-            case INT:\n-                return new AvgAggregatorInt();\n-            case LONG:\n-                return new AvgAggregatorLong();\n-            case FLOAT:\n-                return new AvgAggregatorFloat();\n-            case DOUBLE:\n-                return new AvgAggregatorDouble();\n-            case BOOL:\n-                throw new OperationNotSupportedException(\"Avg not supported for bool\");\n-        }\n-        throw new OperationNotSupportedException(\"Avg not supported for \" + type);\n+  public static Aggregator createAvgAggregator(Attribute.Type type) {\n+    switch (type) {\n+    case STRING:\n+      throw new OperationNotSupportedException(\"Avg not supported for string\");\n+    case INT:\n+      return new AvgAggregatorInt();\n+    case LONG:\n+      return new AvgAggregatorLong();\n+    case FLOAT:\n+      return new AvgAggregatorFloat();\n+    case DOUBLE:\n+      return new AvgAggregatorDouble();\n+    case BOOL:\n+      throw new OperationNotSupportedException(\"Avg not supported for bool\");\n     }\n+    throw new OperationNotSupportedException(\"Avg not supported for \" + type);\n+  }\n \n-    public static Aggregator createMaxAggregator(Attribute.Type type) {\n-        switch (type) {\n-            case STRING:\n-                throw new OperationNotSupportedException(\"Max not supported for string\");\n-            case INT:\n-                return new MaxAggregatorInt();\n-            case LONG:\n-                return new MaxAggregatorLong();\n-            case FLOAT:\n-                return new MaxAggregatorFloat();\n-            case DOUBLE:\n-                return new MaxAggregatorDouble();\n-            case BOOL:\n-                throw new OperationNotSupportedException(\"Max not supported for bool\");\n-        }\n-        throw new OperationNotSupportedException(\"Max not supported for \" + type);\n+  public static Aggregator createMaxAggregator(Attribute.Type type) {\n+    switch (type) {\n+    case STRING:\n+      throw new OperationNotSupportedException(\"Max not supported for string\");\n+    case INT:\n+      return new MaxAggregatorInt();\n+    case LONG:\n+      return new MaxAggregatorLong();\n+    case FLOAT:\n+      return new MaxAggregatorFloat();\n+    case DOUBLE:\n+      return new MaxAggregatorDouble();\n+    case BOOL:\n+      throw new OperationNotSupportedException(\"Max not supported for bool\");\n     }\n+    throw new OperationNotSupportedException(\"Max not supported for \" + type);\n+  }\n \n \n-    public static Aggregator createMinAggregator(Attribute.Type type) {\n-        switch (type) {\n-            case STRING:\n-                throw new OperationNotSupportedException(\"Min not supported for string\");\n-            case INT:\n-                return new MinAggregatorInt();\n-            case LONG:\n-                return new MinAggregatorLong();\n-            case FLOAT:\n-                return new MinAggregatorFloat();\n-            case DOUBLE:\n-                return new MinAggregatorDouble();\n-            case BOOL:\n-                throw new OperationNotSupportedException(\"Min not supported for bool\");\n-        }\n-        throw new OperationNotSupportedException(\"Min not supported for \" + type);\n+  public static Aggregator createMinAggregator(Attribute.Type type) {\n+    switch (type) {\n+    case STRING:\n+      throw new OperationNotSupportedException(\"Min not supported for string\");\n+    case INT:\n+      return new MinAggregatorInt();\n+    case LONG:\n+      return new MinAggregatorLong();\n+    case FLOAT:\n+      return new MinAggregatorFloat();\n+    case DOUBLE:\n+      return new MinAggregatorDouble();\n+    case BOOL:\n+      throw new OperationNotSupportedException(\"Min not supported for bool\");\n     }\n+    throw new OperationNotSupportedException(\"Min not supported for \" + type);\n+  }\n }\n",
            "diff_size": 94
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 284).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/437/AggregatorParser.java\nindex fe4e8b270ae..20a9ad6c461 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/437/AggregatorParser.java\n@@ -117,4 +117,4 @@ public class AggregatorParser {\n         }\n         throw new OperationNotSupportedException(\"Min not supported for \" + type);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 352).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/437/AggregatorParser.java\nindex fe4e8b270ae..3243465aa9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/437/AggregatorParser.java\n@@ -42,10 +42,7 @@ public class AggregatorParser {\n \n \n     public static AbstractAggregateAttributeGenerator loadAggregatorClass(String aggregationName) {\n-        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" + aggregationName.substring(0, 1).toUpperCase() + aggregationName.substring(1) + \"AggregateAttributeGenerator\");\n-    }\n-\n-    public static Aggregator createSumAggregator(Attribute.Type type) {\n+        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" + aggregationName.substring(0,1).toUpperCase()+aggregationName. substring ( 1 )+\"AggregateAttributeGenerator\");} public static Aggregator createSumAggregator(Attribute.Type type) {\n         switch (type) {\n             case STRING:\n                 throw new OperationNotSupportedException(\"Sum not supported for string\");\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/437/AggregatorParser.java\nindex fe4e8b270ae..56122d01f78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/437/AggregatorParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/437/AggregatorParser.java\n@@ -42,7 +42,10 @@ public class AggregatorParser {\n \n \n     public static AbstractAggregateAttributeGenerator loadAggregatorClass(String aggregationName) {\n-        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\" + aggregationName.substring(0, 1).toUpperCase() + aggregationName.substring(1) + \"AggregateAttributeGenerator\");\n+        return (AbstractAggregateAttributeGenerator) org.wso2.siddhi.core.util.ClassLoader.loadClass(AbstractAggregateAttributeGenerator.class.getPackage().getName() + \".\"+aggregationName.substring( 0 ,1)\n+    .\n+\n+        toUpperCase() + aggregationName.substring(1) + \"AggregateAttributeGenerator\");\n     }\n \n     public static Aggregator createSumAggregator(Attribute.Type type) {\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}