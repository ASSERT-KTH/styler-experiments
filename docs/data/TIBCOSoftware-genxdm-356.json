{
    "project_name": "TIBCOSoftware-genxdm",
    "violation_id": "356",
    "information": {
        "violations": [
            {
                "line": "96",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "     * @return true is components are equals\n     */\n\t@Override\n    public boolean equals(Object obj)\n    {\n        if (obj instanceof RegExPair)",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "132",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/356/RegExPair.java\nindex 6555c0334b4..037889d59ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/356/RegExPair.java\n@@ -93,7 +93,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param obj\n      * @return true is components are equals\n      */\n-\t@Override\n+@Override\n     public boolean equals(Object obj)\n     {\n         if (obj instanceof RegExPair)\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/356/RegExPair.java\nindex 6555c0334b4..f782417b6a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/356/RegExPair.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.regex.impl.nfa;\n \n /**\n@@ -29,9 +30,9 @@ package org.genxdm.processor.w3c.xs.regex.impl.nfa;\n  * {@link Comparable} is supported by assuming members support it too;\n  * the first member has priority over the second.\n  */\n-final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n-{\n+final class RegExPair<L, R> implements Comparable<RegExPair<L, R>> {\n     protected final L m_first;\n+\n     protected final R m_second;\n \n     /**\n@@ -40,8 +41,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param first  the first object of the pair\n      * @param second the second object of the pair\n      */\n-    public RegExPair(final L first, final R second)\n-    {\n+    public RegExPair(final L first, final R second) {\n         m_first = first;\n         m_second = second;\n     }\n@@ -51,8 +51,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      *\n      * @return an Object\n      */\n-    public L getFirst()\n-    {\n+    public L getFirst() {\n         return m_first;\n     }\n \n@@ -61,8 +60,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      *\n      * @return an Object\n      */\n-    public R getSecond()\n-    {\n+    public R getSecond() {\n         return m_second;\n     }\n \n@@ -72,17 +70,18 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @return int hashcode\n      */\n     @Override\n-    public int hashCode()\n-    {\n+    public int hashCode() {\n         final int hash;\n-        if (m_first != null)\n+        if (m_first != null) {\n             hash = m_first.hashCode();\n-        else\n+        } else {\n             hash = 499;//a nice prime number for {null, *}\n-        if (m_second != null)\n+        }\n+        if (m_second != null) {\n             return (hash << 1) ^ m_second.hashCode();//assymetric\n-        else\n+        } else {\n             return hash;\n+        }\n     }\n \n     /**\n@@ -93,55 +92,41 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param obj\n      * @return true is components are equals\n      */\n-\t@Override\n-    public boolean equals(Object obj)\n-    {\n-        if (obj instanceof RegExPair)\n-        {\n-            RegExPair<?,?> other = (RegExPair<?,?>)obj;\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (obj instanceof RegExPair) {\n+            RegExPair<?, ?> other = (RegExPair<?, ?>) obj;\n             return (m_first == other.m_first\n-                    || (m_first != null && m_first.equals(other.m_first)))\n-                    && (m_second == other.m_second\n-                    || (m_second != null && m_second.equals(other.m_second)));\n-        }\n-        else\n+                || (m_first != null && m_first.equals(other.m_first)))\n+                && (m_second == other.m_second\n+                || (m_second != null && m_second.equals(other.m_second)));\n+        } else {\n             return false;\n+        }\n     }\n \n-    public int compareTo(final RegExPair<L, R> o)\n-    {\n-        if (o == this)\n-        {\n+    public int compareTo(final RegExPair<L, R> o) {\n+        if (o == this) {\n             return 0;\n-        }\n-        else\n-        {\n+        } else {\n             final int compare = nullSafeCompare(m_first, o.m_first);\n-            if (0 != compare)\n-            {\n+            if (0 != compare) {\n                 return compare;\n-            }\n-            else\n-            {\n+            } else {\n                 return nullSafeCompare(m_second, o.m_second);\n             }\n         }\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-\tprotected static <L,R> int nullSafeCompare(final L o1, R o2)\n-    {\n-        if (o1 == o2)\n-        {\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    protected static <L, R> int nullSafeCompare(final L o1, R o2) {\n+        if (o1 == o2) {\n             return 0;\n         }\n-        if (null == o1)\n-        {\n+        if (null == o1) {\n             return -1;//o2 is not null\n-        }\n-        else\n-        {\n-            return null == o2 ? 1 : ((Comparable)o1).compareTo(o2);\n+        } else {\n+            return null == o2 ? 1 : ((Comparable) o1).compareTo(o2);\n         }\n     }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/356/RegExPair.java\nindex 6555c0334b4..23805a7b3e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/356/RegExPair.java\n@@ -29,7 +29,7 @@ package org.genxdm.processor.w3c.xs.regex.impl.nfa;\n  * {@link Comparable} is supported by assuming members support it too;\n  * the first member has priority over the second.\n  */\n-final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n+final class RegExPair<L,R> implements Comparable<RegExPair<L, R>>\n {\n     protected final L m_first;\n     protected final R m_second;\n@@ -93,17 +93,14 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param obj\n      * @return true is components are equals\n      */\n-\t@Override\n-    public boolean equals(Object obj)\n+@Override\n+public boolean equals(Object obj)\n     {\n         if (obj instanceof RegExPair)\n         {\n-            RegExPair<?,?> other = (RegExPair<?,?>)obj;\n-            return (m_first == other.m_first\n-                    || (m_first != null && m_first.equals(other.m_first)))\n-                    && (m_second == other.m_second\n-                    || (m_second != null && m_second.equals(other.m_second)));\n-        }\n+            RegExPair<?, ?> other = (RegExPair<?, ?>)obj;\n+            return (m_first == other.m_first || (m_first != null && m_first.equals(other.m_first))) && (m_second == other.m_second || (m_second != null && m_second.equals(other.m_second)));\n+    }\n         else\n             return false;\n     }\n@@ -128,9 +125,9 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n         }\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-\tprotected static <L,R> int nullSafeCompare(final L o1, R o2)\n-    {\n+    @SuppressWarnings( { \"unchecked\", \"rawtypes\" })\n+protected static <L,R> int nullSafeCompare(final L o1, R o2)\n+{\n         if (o1 == o2)\n         {\n             return 0;\n@@ -144,4 +141,4 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n             return null == o2 ? 1 : ((Comparable)o1).compareTo(o2);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/356/RegExPair.java\nindex 6555c0334b4..7c55f4bd813 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/356/RegExPair.java\n@@ -29,7 +29,9 @@ package org.genxdm.processor.w3c.xs.regex.impl.nfa;\n  * {@link Comparable} is supported by assuming members support it too;\n  * the first member has priority over the second.\n  */\n-final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n+\n+\n+final class RegExPair<L, R> implements Comparable<RegExPair<L, R>>\n {\n     protected final L m_first;\n     protected final R m_second;\n@@ -40,6 +42,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param first  the first object of the pair\n      * @param second the second object of the pair\n      */\n+\n     public RegExPair(final L first, final R second)\n     {\n         m_first = first;\n@@ -51,6 +54,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      *\n      * @return an Object\n      */\n+\n     public L getFirst()\n     {\n         return m_first;\n@@ -61,6 +65,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      *\n      * @return an Object\n      */\n+\n     public R getSecond()\n     {\n         return m_second;\n@@ -71,6 +76,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      *\n      * @return int hashcode\n      */\n+\n     @Override\n     public int hashCode()\n     {\n@@ -80,9 +86,9 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n         else\n             hash = 499;//a nice prime number for {null, *}\n         if (m_second != null)\n-            return (hash << 1) ^ m_second.hashCode();//assymetric\n+        return (hash << 1) ^ m_second.hashCode();//assymetric\n         else\n-            return hash;\n+        return hash;\n     }\n \n     /**\n@@ -93,19 +99,17 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param obj\n      * @return true is components are equals\n      */\n-\t@Override\n+\n+    @Override\n     public boolean equals(Object obj)\n     {\n         if (obj instanceof RegExPair)\n         {\n-            RegExPair<?,?> other = (RegExPair<?,?>)obj;\n-            return (m_first == other.m_first\n-                    || (m_first != null && m_first.equals(other.m_first)))\n-                    && (m_second == other.m_second\n-                    || (m_second != null && m_second.equals(other.m_second)));\n+            RegExPair<?, ?> other = (RegExPair<?, ?>)obj;\n+            return (m_first == other.m_first || (m_first != null && m_first.equals(other.m_first))) && (m_second == other.m_second || (m_second != null && m_second.equals(other.m_second)));\n         }\n         else\n-            return false;\n+        return false;\n     }\n \n     public int compareTo(final RegExPair<L, R> o)\n@@ -128,8 +132,8 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n         }\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-\tprotected static <L,R> int nullSafeCompare(final L o1, R o2)\n+    @SuppressWarnings( {\"unchecked\", \"rawtypes\"})\n+    protected static <L, R> int nullSafeCompare(final L o1, R o2)\n     {\n         if (o1 == o2)\n         {\n@@ -144,4 +148,4 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n             return null == o2 ? 1 : ((Comparable)o1).compareTo(o2);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "132",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/356/RegExPair.java\nindex 6555c0334b4..037889d59ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/356/RegExPair.java\n@@ -93,7 +93,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param obj\n      * @return true is components are equals\n      */\n-\t@Override\n+@Override\n     public boolean equals(Object obj)\n     {\n         if (obj instanceof RegExPair)\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "132",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/356/RegExPair.java\nindex 6555c0334b4..027179fc7ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/356/RegExPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/356/RegExPair.java\n@@ -93,7 +93,7 @@ final class RegExPair<L,R> implements Comparable<RegExPair<L,R>>\n      * @param obj\n      * @return true is components are equals\n      */\n-\t@Override\n+    @Override\n     public boolean equals(Object obj)\n     {\n         if (obj instanceof RegExPair)\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}