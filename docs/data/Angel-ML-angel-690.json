{
    "project_name": "Angel-ML-angel",
    "violation_id": "690",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/690/CSRStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/690/CSRStorage.java\nindex 3c610cef7a0..5e767bf9f5c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/690/CSRStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/690/CSRStorage.java\n@@ -26,93 +26,93 @@ import io.netty.buffer.ByteBuf;\n  * Base class of CSR Storage\n  */\n public abstract class CSRStorage extends ServerPartitionStorage implements ICSRStorageOp {\n-  int [] rowOffsets;\n-  int [] columnIndices;\n-\n-  public CSRStorage(int rowIdOffset) {\n-    super(rowIdOffset);\n-  }\n-\n-  public void init(PartitionKey partKey) {\n-    rowOffsets = new int[(int)(partKey.getEndCol() - partKey.getStartCol() + 1)];\n-  }\n-\n-  @Override\n-  public void init() {\n-\n-  }\n-\n-  @Override\n-  public void reset() {\n-    rowOffsets = new int[0];\n-    columnIndices = new int[0];\n-  }\n-\n-  @Override\n-  public void update(ByteBuf buf, UpdateOp op) {\n-    // TODO\n-    throw new UnsupportedOperationException(\"CSR dose not support pipeline update now\");\n-  }\n-\n-  @Override\n-  public long getElemNum() {\n-    return columnIndices.length;\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf output) {\n-    super.serialize(output);\n-\n-    // Serialize row offsets\n-    output.writeInt(rowOffsets.length);\n-    for(int i = 0; i < rowOffsets.length; i++) {\n-      output.writeInt(rowOffsets[i]);\n+    int[] rowOffsets;\n+    int[] columnIndices;\n+\n+    public CSRStorage(int rowIdOffset) {\n+        super(rowIdOffset);\n+    }\n+\n+    public void init(PartitionKey partKey) {\n+        rowOffsets = new int[(int) (partKey.getEndCol() - partKey.getStartCol() + 1)];\n+    }\n+\n+    @Override\n+    public void init() {\n+\n+    }\n+\n+    @Override\n+    public void reset() {\n+        rowOffsets = new int[0];\n+        columnIndices = new int[0];\n     }\n \n-    // Serialize column offsets\n-    output.writeInt(columnIndices.length);\n-    for(int i = 0; i < columnIndices.length; i++) {\n-      output.writeInt(columnIndices[i]);\n+    @Override\n+    public void update(ByteBuf buf, UpdateOp op) {\n+        // TODO\n+        throw new UnsupportedOperationException(\"CSR dose not support pipeline update now\");\n     }\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf input) {\n-    super.deserialize(input);\n+    @Override\n+    public long getElemNum() {\n+        return columnIndices.length;\n+    }\n \n-    // Deserialize row offset\n-    int size = input.readInt();\n-    rowOffsets = new int[size];\n-    for(int i = 0; i < size; i++) {\n-      rowOffsets[i] = input.readInt();\n+    @Override\n+    public void serialize(ByteBuf output) {\n+        super.serialize(output);\n+\n+        // Serialize row offsets\n+        output.writeInt(rowOffsets.length);\n+        for (int i = 0; i < rowOffsets.length; i++) {\n+            output.writeInt(rowOffsets[i]);\n+        }\n+\n+        // Serialize column offsets\n+        output.writeInt(columnIndices.length);\n+        for (int i = 0; i < columnIndices.length; i++) {\n+            output.writeInt(columnIndices[i]);\n+        }\n     }\n \n-    // Deserialize row offset\n-    size = input.readInt();\n-    columnIndices = new int[size];\n-    for(int i = 0; i < size; i++) {\n-      columnIndices[i] = input.readInt();\n+    @Override\n+    public void deserialize(ByteBuf input) {\n+        super.deserialize(input);\n+\n+        // Deserialize row offset\n+        int size = input.readInt();\n+        rowOffsets = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            rowOffsets[i] = input.readInt();\n+        }\n+\n+        // Deserialize row offset\n+        size = input.readInt();\n+        columnIndices = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            columnIndices[i] = input.readInt();\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen() + 4 + rowOffsets.length * 4 + 4 + columnIndices.length * 4;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        return super.bufferLen() + 4 + rowOffsets.length * 4 + 4 + columnIndices.length * 4;\n+    }\n \n-  public int[] getRowOffsets() {\n-    return rowOffsets;\n-  }\n+    public int[] getRowOffsets() {\n+        return rowOffsets;\n+    }\n \n-  public void setRowOffsets(int[] rowOffsets) {\n-    this.rowOffsets = rowOffsets;\n-  }\n+    public void setRowOffsets(int[] rowOffsets) {\n+        this.rowOffsets = rowOffsets;\n+    }\n \n-  public int[] getColumnIndices() {\n-    return columnIndices;\n-  }\n+    public int[] getColumnIndices() {\n+        return columnIndices;\n+    }\n \n-  public void setColumnIndices(int[] columnIndices) {\n-    this.columnIndices = columnIndices;\n-  }\n+    public void setColumnIndices(int[] columnIndices) {\n+        this.columnIndices = columnIndices;\n+    }\n }\n",
            "diff_size": 99
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/690/CSRStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/690/CSRStorage.java\nindex 3c610cef7a0..72319614ae4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/690/CSRStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/690/CSRStorage.java\n@@ -26,15 +26,15 @@ import io.netty.buffer.ByteBuf;\n  * Base class of CSR Storage\n  */\n public abstract class CSRStorage extends ServerPartitionStorage implements ICSRStorageOp {\n-  int [] rowOffsets;\n-  int [] columnIndices;\n+  int[] rowOffsets;\n+  int[] columnIndices;\n \n   public CSRStorage(int rowIdOffset) {\n     super(rowIdOffset);\n   }\n \n   public void init(PartitionKey partKey) {\n-    rowOffsets = new int[(int)(partKey.getEndCol() - partKey.getStartCol() + 1)];\n+    rowOffsets = new int[(int) (partKey.getEndCol() - partKey.getStartCol() + 1)];\n   }\n \n   @Override\n@@ -65,13 +65,13 @@ public abstract class CSRStorage extends ServerPartitionStorage implements ICSRS\n \n     // Serialize row offsets\n     output.writeInt(rowOffsets.length);\n-    for(int i = 0; i < rowOffsets.length; i++) {\n+    for (int i = 0; i < rowOffsets.length; i++) {\n       output.writeInt(rowOffsets[i]);\n     }\n \n     // Serialize column offsets\n     output.writeInt(columnIndices.length);\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    for (int i = 0; i < columnIndices.length; i++) {\n       output.writeInt(columnIndices[i]);\n     }\n   }\n@@ -83,14 +83,14 @@ public abstract class CSRStorage extends ServerPartitionStorage implements ICSRS\n     // Deserialize row offset\n     int size = input.readInt();\n     rowOffsets = new int[size];\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       rowOffsets[i] = input.readInt();\n     }\n \n     // Deserialize row offset\n     size = input.readInt();\n     columnIndices = new int[size];\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       columnIndices[i] = input.readInt();\n     }\n   }\n@@ -115,4 +115,4 @@ public abstract class CSRStorage extends ServerPartitionStorage implements ICSRS\n   public void setColumnIndices(int[] columnIndices) {\n     this.columnIndices = columnIndices;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/690/CSRStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/690/CSRStorage.java\nindex 3c610cef7a0..84c31d85c08 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/690/CSRStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/690/CSRStorage.java\n@@ -25,22 +25,24 @@ import io.netty.buffer.ByteBuf;\n /**\n  * Base class of CSR Storage\n  */\n+\n public abstract class CSRStorage extends ServerPartitionStorage implements ICSRStorageOp {\n-  int [] rowOffsets;\n-  int [] columnIndices;\n+\n+  int[] rowOffsets;\n+\n+\n+  int[] columnIndices;\n \n   public CSRStorage(int rowIdOffset) {\n     super(rowIdOffset);\n   }\n \n   public void init(PartitionKey partKey) {\n-    rowOffsets = new int[(int)(partKey.getEndCol() - partKey.getStartCol() + 1)];\n+    rowOffsets = new int[(int) (partKey.getEndCol() - partKey.getStartCol() + 1)];\n   }\n \n   @Override\n-  public void init() {\n-\n-  }\n+  public void init() {}\n \n   @Override\n   public void reset() {\n@@ -65,13 +67,13 @@ public abstract class CSRStorage extends ServerPartitionStorage implements ICSRS\n \n     // Serialize row offsets\n     output.writeInt(rowOffsets.length);\n-    for(int i = 0; i < rowOffsets.length; i++) {\n+    for (int i = 0; i < rowOffsets.length; i++) {\n       output.writeInt(rowOffsets[i]);\n     }\n \n     // Serialize column offsets\n     output.writeInt(columnIndices.length);\n-    for(int i = 0; i < columnIndices.length; i++) {\n+    for (int i = 0; i < columnIndices.length; i++) {\n       output.writeInt(columnIndices[i]);\n     }\n   }\n@@ -81,16 +83,17 @@ public abstract class CSRStorage extends ServerPartitionStorage implements ICSRS\n     super.deserialize(input);\n \n     // Deserialize row offset\n+\n     int size = input.readInt();\n     rowOffsets = new int[size];\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       rowOffsets[i] = input.readInt();\n     }\n \n     // Deserialize row offset\n     size = input.readInt();\n     columnIndices = new int[size];\n-    for(int i = 0; i < size; i++) {\n+    for (int i = 0; i < size; i++) {\n       columnIndices[i] = input.readInt();\n     }\n   }\n@@ -115,4 +118,5 @@ public abstract class CSRStorage extends ServerPartitionStorage implements ICSRS\n   public void setColumnIndices(int[] columnIndices) {\n     this.columnIndices = columnIndices;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}