{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "187",
    "information": {
        "violations": [
            {
                "line": "120",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 136).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  }\n\n  public synchronized RequestRootSerializer createRequestRootSerializer(Message message, Map<String, Type> types, boolean noTypesInfo) {\n    return serializerSchemaManager.createRequestRootSerializer(message, types, noTypesInfo);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/187/ProtoMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/187/ProtoMapper.java\nindex 1bb21e69ff9..7683b6442f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/187/ProtoMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/187/ProtoMapper.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.foundation.protobuf;\n \n import java.lang.reflect.Type;\n@@ -117,7 +118,8 @@ public class ProtoMapper {\n     return createRootSerializer(message, type);\n   }\n \n-  public synchronized RequestRootSerializer createRequestRootSerializer(Message message, Map<String, Type> types, boolean noTypesInfo) {\n+  public synchronized RequestRootSerializer createRequestRootSerializer(Message message, Map<String, Type> types,\n+                                                                        boolean noTypesInfo) {\n     return serializerSchemaManager.createRequestRootSerializer(message, types, noTypesInfo);\n   }\n \n@@ -139,7 +141,7 @@ public class ProtoMapper {\n   }\n \n   public synchronized <T> RequestRootDeserializer<T> createRequestRootDeserializer(Message message,\n-      Map<String, Type> types) {\n+                                                                                   Map<String, Type> types) {\n     return deserializerSchemaManager.createRequestRootDeserializer(message, types);\n   }\n \n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/187/ProtoMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/187/ProtoMapper.java\nindex 1bb21e69ff9..c53eecdde24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/187/ProtoMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/187/ProtoMapper.java\n@@ -154,4 +154,4 @@ public class ProtoMapper {\n   public synchronized <T> RootDeserializer<T> createRootDeserializer(Message message, Type type) {\n     return deserializerSchemaManager.createRootDeserializer(message, type);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/187/ProtoMapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/187/ProtoMapper.java\nindex 1bb21e69ff9..d2d0eab1ccd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/187/ProtoMapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/187/ProtoMapper.java\n@@ -18,16 +18,13 @@ package org.apache.servicecomb.foundation.protobuf;\n \n import java.lang.reflect.Type;\n import java.util.Map;\n-\n import org.apache.servicecomb.foundation.common.concurrent.ConcurrentHashMapEx;\n import org.apache.servicecomb.foundation.protobuf.internal.bean.BeanDescriptorManager;\n import org.apache.servicecomb.foundation.protobuf.internal.schema.deserializer.DeserializerSchemaManager;\n import org.apache.servicecomb.foundation.protobuf.internal.schema.serializer.SerializerSchemaManager;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n-\n import io.protostuff.compiler.model.Message;\n import io.protostuff.compiler.model.Proto;\n import io.protostuff.compiler.model.Service;\n@@ -47,13 +44,14 @@ public class ProtoMapper {\n   // key is message canonical name\n   // this allowed developer to control any type deserializer\n   // otherwise any type will be deserialized to LinkedHashMap\n+\n   private final Map<String, JavaType> anyTypes = new ConcurrentHashMapEx<>();\n \n-  protected ProtoMapper(ObjectMapper jsonMapper, BeanDescriptorManager beanDescriptorManager, Proto proto) {\n+  protected ProtoMapper(ObjectMapper jsonMapper,\n+    BeanDescriptorManager beanDescriptorManager, Proto proto) {\n     this.jsonMapper = jsonMapper;\n     this.beanDescriptorManager = beanDescriptorManager;\n     this.proto = proto;\n-\n     serializerSchemaManager = new SerializerSchemaManager(this);\n     deserializerSchemaManager = new DeserializerSchemaManager(this);\n   }\n@@ -92,7 +90,6 @@ public class ProtoMapper {\n         return message;\n       }\n     }\n-\n     return null;\n   }\n \n@@ -113,7 +110,6 @@ public class ProtoMapper {\n     if (message == null) {\n       throw new IllegalStateException(\"can not find proto message to create serializer, name=\" + shortMessageName);\n     }\n-\n     return createRootSerializer(message, type);\n   }\n \n@@ -134,12 +130,10 @@ public class ProtoMapper {\n     if (message == null) {\n       throw new IllegalStateException(\"can not find proto message to create deserializer, name=\" + shortMessageName);\n     }\n-\n     return createRootDeserializer(message, type);\n   }\n \n-  public synchronized <T> RequestRootDeserializer<T> createRequestRootDeserializer(Message message,\n-      Map<String, Type> types) {\n+  public synchronized <T> RequestRootDeserializer<T> createRequestRootDeserializer(Message message, Map<String, Type> types) {\n     return deserializerSchemaManager.createRequestRootDeserializer(message, types);\n   }\n \n@@ -154,4 +148,4 @@ public class ProtoMapper {\n   public synchronized <T> RootDeserializer<T> createRootDeserializer(Message message, Type type) {\n     return deserializerSchemaManager.createRootDeserializer(message, type);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}