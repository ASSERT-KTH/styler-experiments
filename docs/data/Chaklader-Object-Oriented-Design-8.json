{
    "project_name": "Chaklader-Object-Oriented-Design",
    "violation_id": "8",
    "information": {
        "violations": [
            {
                "line": "29",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 160).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "//    @Test\n//    public void testBuildParkingWithPedestrianExitsAndDisabledSlots() {\n//        final Parking parking = new ParkingBuilder().withSquareSize(10).withPedestrianExit(8).withPedestrianExit(42).withPedestrianExit(85).withDisabledBay(2)\n//            .withDisabledBay(47).withDisabledBay(72).build();\n//        assertEquals(97, parking.getAvailableBays());\n//    }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Object-Oriented-Design/violations/8/ParkingBuilderTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Object-Oriented-Design/naturalize/8/ParkingBuilderTest.java\nindex 040033b6cfa..4dfb31267e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Object-Oriented-Design/violations/8/ParkingBuilderTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Chaklader-Object-Oriented-Design/naturalize/8/ParkingBuilderTest.java\n@@ -1,33 +1,3 @@\n //package com.nespresso.sofa.interview.parking;\n //\n-//import static org.junit.Assert.assertEquals;\n-//\n-//import org.junit.Test;\n-//\n-//public class ParkingBuilderTest {\n-//\n-//    @Test\n-//    public void testBuildBasicParking() {\n-//        final Parking parking = new ParkingBuilder().withSquareSize(4).build();\n-//        assertEquals(16, parking.getAvailableBays());\n-//    }\n-//\n-//    @Test\n-//    public void testBuildParkingWithPedestrianExit() {\n-//        final Parking parking = new ParkingBuilder().withSquareSize(3).withPedestrianExit(5).build();\n-//        assertEquals(8, parking.getAvailableBays());\n-//    }\n-//\n-//    @Test\n-//    public void testBuildParkingWithDisabledSlot() {\n-//        final Parking parking = new ParkingBuilder().withSquareSize(2).withDisabledBay(2).build();\n-//        assertEquals(4, parking.getAvailableBays());\n-//    }\n-//\n-//    @Test\n-//    public void testBuildParkingWithPedestrianExitsAndDisabledSlots() {\n-//        final Parking parking = new ParkingBuilder().withSquareSize(10).withPedestrianExit(8).withPedestrianExit(42).withPedestrianExit(85).withDisabledBay(2)\n-//            .withDisabledBay(47).withDisabledBay(72).build();\n-//        assertEquals(97, parking.getAvailableBays());\n-//    }\n-//}\n+//import stati\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}