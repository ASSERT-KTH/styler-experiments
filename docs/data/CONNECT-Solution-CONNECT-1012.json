{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "1012",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.auditrepository.nhinc.proxy;\n\nimport gov.hhs.fha.nhinc.auditrepository.nhinc.proxy.service.AuditRepositoryUnsecuredServicePortDescriptor;\nimport gov.hhs.fha.nhinc.common.auditlog.LogEventRequestType;",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\nindex 29316b5dc8b..6603d70310b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditrepository.nhinc.proxy;\n \n import gov.hhs.fha.nhinc.auditrepository.nhinc.proxy.service.AuditRepositoryUnsecuredServicePortDescriptor;\n@@ -41,45 +42,44 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author akong\n  */\n public class AuditRepositoryProxyWebServiceUnsecuredImpl implements AuditRepositoryProxy {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AuditRepositoryProxyWebServiceUnsecuredImpl.class);\n-    private final WebServiceProxyHelper oProxyHelper = new WebServiceProxyHelper();\n-    private final String invokeMethodName = \"logEvent\";\n+  private static final Logger LOG = LoggerFactory.getLogger(AuditRepositoryProxyWebServiceUnsecuredImpl.class);\n+  private final WebServiceProxyHelper oProxyHelper = new WebServiceProxyHelper();\n+  private final String invokeMethodName = \"logEvent\";\n \n-    @Override\n-    public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n-        AcknowledgementType result = new AcknowledgementType();\n+  @Override\n+  public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n+    AcknowledgementType result = new AcknowledgementType();\n \n-        if (request.getAuditMessage() == null) {\n-            LOG.error(\"Audit Request Message is null.\");\n-            return result;\n-        }\n+    if (request.getAuditMessage() == null) {\n+      LOG.error(\"Audit Request Message is null.\");\n+      return result;\n+    }\n \n-        try {\n-            String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SERVICE_NAME);\n+    try {\n+      String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SERVICE_NAME);\n \n-            if (NullChecker.isNotNullish(url)) {\n-                ServicePortDescriptor<AuditRepositoryManagerPortType> portDescriptor\n-                    = new AuditRepositoryUnsecuredServicePortDescriptor();\n+      if (NullChecker.isNotNullish(url)) {\n+        ServicePortDescriptor<AuditRepositoryManagerPortType> portDescriptor\n+            = new AuditRepositoryUnsecuredServicePortDescriptor();\n \n-                CONNECTClient<AuditRepositoryManagerPortType> client = CONNECTCXFClientFactory.getInstance()\n-                    .getCONNECTClientUnsecured(portDescriptor, url, assertion);\n+        CONNECTClient<AuditRepositoryManagerPortType> client = CONNECTCXFClientFactory.getInstance()\n+            .getCONNECTClientUnsecured(portDescriptor, url, assertion);\n \n-                result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerPortType.class,\n-                    invokeMethodName, request);\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"Failed to call the web service ({}).  An unexpected exception occurred. Exception: {}\",\n-                NhincConstants.AUDIT_REPO_SERVICE_NAME, e.getLocalizedMessage(), e);\n-        }\n+        result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerPortType.class,\n+            invokeMethodName, request);\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to call the web service ({}).  An unexpected exception occurred. Exception: {}\",\n+          NhincConstants.AUDIT_REPO_SERVICE_NAME, e.getLocalizedMessage(), e);\n+    }\n \n-        LOG.debug(\"In AuditRepositoryProxyWebServiceUnsecuredImpl.auditLog(...) - completed called to \"\n-            + \"ConnectionManager to retrieve endpoint.\");\n+    LOG.debug(\"In AuditRepositoryProxyWebServiceUnsecuredImpl.auditLog(...) - completed called to \"\n+        + \"ConnectionManager to retrieve endpoint.\");\n \n-        return result;\n-    }\n+    return result;\n+  }\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\nindex 29316b5dc8b..86ed3cad45e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditrepository.nhinc.proxy;\n \n import gov.hhs.fha.nhinc.auditrepository.nhinc.proxy.service.AuditRepositoryUnsecuredServicePortDescriptor;\n@@ -53,33 +54,26 @@ public class AuditRepositoryProxyWebServiceUnsecuredImpl implements AuditReposit\n     @Override\n     public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n         AcknowledgementType result = new AcknowledgementType();\n-\n-        if (request.getAuditMessage() == null) {\n+if (request.getAuditMessage() == null) {\n             LOG.error(\"Audit Request Message is null.\");\n-            return result;\n+\n+return result;\n         }\n \n         try {\n             String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SERVICE_NAME);\n-\n-            if (NullChecker.isNotNullish(url)) {\n-                ServicePortDescriptor<AuditRepositoryManagerPortType> portDescriptor\n-                    = new AuditRepositoryUnsecuredServicePortDescriptor();\n-\n-                CONNECTClient<AuditRepositoryManagerPortType> client = CONNECTCXFClientFactory.getInstance()\n-                    .getCONNECTClientUnsecured(portDescriptor, url, assertion);\n-\n-                result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerPortType.class,\n+if (NullChecker.isNotNullish(url)) {\n+                ServicePortDescriptor<AuditRepositoryManagerPortType> portDescriptor = new AuditRepositoryUnsecuredServicePortDescriptor();\n+CONNECTClient<AuditRepositoryManagerPortType> client = CONNECTCXFClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, url, assertion);\n+result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerPortType.class,\n                     invokeMethodName, request);\n-            }\n+    }\n         } catch (Exception e) {\n-            LOG.error(\"Failed to call the web service ({}).  An unexpected exception occurred. Exception: {}\",\n-                NhincConstants.AUDIT_REPO_SERVICE_NAME, e.getLocalizedMessage(), e);\n-        }\n+            LOG.error(\"Failed to call the web service ({}).  An unexpected exception occurred. Exception: {}\", NhincConstants.AUDIT_REPO_SERVICE_NAME, e.getLocalizedMessage(), e);\n+    }\n \n-        LOG.debug(\"In AuditRepositoryProxyWebServiceUnsecuredImpl.auditLog(...) - completed called to \"\n-            + \"ConnectionManager to retrieve endpoint.\");\n+        LOG.debug(\"In AuditRepositoryProxyWebServiceUnsecuredImpl.auditLog(...) - completed called to \" + \"ConnectionManager to retrieve endpoint.\");\n \n-        return result;\n+return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\nindex 29316b5dc8b..9cdd4b64fae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/1012/AuditRepositoryProxyWebServiceUnsecuredImpl.java\n@@ -44,42 +44,34 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author akong\n  */\n+\n+\n public class AuditRepositoryProxyWebServiceUnsecuredImpl implements AuditRepositoryProxy {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AuditRepositoryProxyWebServiceUnsecuredImpl.class);\n     private final WebServiceProxyHelper oProxyHelper = new WebServiceProxyHelper();\n     private final String invokeMethodName = \"logEvent\";\n \n+\n     @Override\n     public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n         AcknowledgementType result = new AcknowledgementType();\n-\n         if (request.getAuditMessage() == null) {\n             LOG.error(\"Audit Request Message is null.\");\n             return result;\n         }\n-\n         try {\n             String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SERVICE_NAME);\n-\n             if (NullChecker.isNotNullish(url)) {\n-                ServicePortDescriptor<AuditRepositoryManagerPortType> portDescriptor\n-                    = new AuditRepositoryUnsecuredServicePortDescriptor();\n-\n-                CONNECTClient<AuditRepositoryManagerPortType> client = CONNECTCXFClientFactory.getInstance()\n-                    .getCONNECTClientUnsecured(portDescriptor, url, assertion);\n-\n-                result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerPortType.class,\n-                    invokeMethodName, request);\n+                ServicePortDescriptor<AuditRepositoryManagerPortType> portDescriptor = new AuditRepositoryUnsecuredServicePortDescriptor();\n+                CONNECTClient<AuditRepositoryManagerPortType> client = CONNECTCXFClientFactory.getInstance().getCONNECTClientUnsecured(portDescriptor, url, assertion);\n+                result = (AcknowledgementType)\n+                             client.invokePort(AuditRepositoryManagerPortType.class, invokeMethodName, request);\n             }\n         } catch (Exception e) {\n-            LOG.error(\"Failed to call the web service ({}).  An unexpected exception occurred. Exception: {}\",\n-                NhincConstants.AUDIT_REPO_SERVICE_NAME, e.getLocalizedMessage(), e);\n+            LOG.error(\"Failed to call the web service ({}).  An unexpected exception occurred. Exception: {}\", NhincConstants.AUDIT_REPO_SERVICE_NAME, e.getLocalizedMessage(), e);\n         }\n-\n-        LOG.debug(\"In AuditRepositoryProxyWebServiceUnsecuredImpl.auditLog(...) - completed called to \"\n-            + \"ConnectionManager to retrieve endpoint.\");\n-\n+        LOG.debug(\"In AuditRepositoryProxyWebServiceUnsecuredImpl.auditLog(...) - completed called to \" + \"ConnectionManager to retrieve endpoint.\");\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}