{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "173",
    "information": {
        "violations": [
            {
                "line": "154",
                "column": "41",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    if (response != null) {\n      Model model = response.getResponseSchema();\n      return model instanceof ModelImpl &&\n          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n    }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/173/RestOperationMeta.java\nindex d559231605c..a1e4b330204 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/173/RestOperationMeta.java\n@@ -151,8 +151,8 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl\n+          && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "155",
                    "column": "41",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/173/RestOperationMeta.java\nindex d559231605c..42ad29900ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/173/RestOperationMeta.java\n@@ -122,8 +122,9 @@ public class RestOperationMeta {\n   /**\n    * EdgeService cannot recognize the map type form body whose value type is String,\n    * so there should be this additional setting.\n+   *\n    * @param parameter the swagger information of the parameter\n-   * @param type the resolved param type\n+   * @param type      the resolved param type\n    * @return the corrected param type\n    */\n   private Type correctFormBodyType(Parameter parameter, Type type) {\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "156",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "315",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "319",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "325",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/173/RestOperationMeta.java\nindex d559231605c..4a2ee436cb1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/173/RestOperationMeta.java\n@@ -130,11 +130,13 @@ public class RestOperationMeta {\n     if (null != type || !(parameter instanceof BodyParameter)) {\n       return type;\n     }\n-    final BodyParameter bodyParameter = (BodyParameter) parameter;\n+\n+final BodyParameter bodyParameter = (BodyParameter) parameter;\n     if (!(bodyParameter.getSchema() instanceof ModelImpl)) {\n       return type;\n     }\n-    final Property additionalProperties = ((ModelImpl) bodyParameter.getSchema()).getAdditionalProperties();\n+\n+final Property additionalProperties = ((ModelImpl) bodyParameter.getSchema()).getAdditionalProperties();\n     if (additionalProperties instanceof StringProperty) {\n       type = RestObjectMapperFactory.getRestObjectMapper().getTypeFactory()\n           .constructMapType(Map.class, String.class, String.class);\n@@ -151,8 +153,7 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n@@ -311,20 +312,17 @@ public class RestOperationMeta {\n       //when the produces of provider is application/json there will return the application/json processor\n       //so do not care what accept type the consumer will set.\n       return this.produceProcessorAcceptMap.get(MediaType.WILDCARD)\n-          .computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(\n-              acceptType, serialViewClass, produceProcessorAcceptMap.get(MediaType.WILDCARD)));\n+          .computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, produceProcessorAcceptMap.get(MediaType.WILDCARD)));\n     }\n     if (StringUtils.isEmpty(acceptType)) {\n       return defaultProcessorViewMap\n-          .computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(\n-              acceptType, serialViewClass, defaultProcessorViewMap));\n-    }\n+          .computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, defaultProcessorViewMap));\n+  }\n     List<String> mimeTypes = MimeTypesUtils.getSortedAcceptableMimeTypes(acceptType.toLowerCase(Locale.US));\n     for (String mime : mimeTypes) {\n       Map<String, ProduceProcessor> processorMap = this.produceProcessorAcceptMap.get(mime);\n       if (null != processorMap) {\n-        return processorMap.computeIfAbsent(serialViewKey, key ->\n-            ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, processorMap));\n+        return processorMap.computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, processorMap));\n       }\n     }\n \n@@ -342,4 +340,4 @@ public class RestOperationMeta {\n   public List<String> getProduces() {\n     return produces;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "321",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "327",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/173/RestOperationMeta.java\nindex d559231605c..d8d392f10f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/173/RestOperationMeta.java\n@@ -24,10 +24,8 @@ import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n-\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.common.rest.codec.RestObjectMapperFactory;\n import org.apache.servicecomb.common.rest.codec.param.FormProcessorCreator.PartProcessor;\n@@ -42,9 +40,7 @@ import org.apache.servicecomb.foundation.vertx.http.HttpServletRequestEx;\n import org.apache.servicecomb.swagger.engine.SwaggerProducerOperation;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.fasterxml.jackson.annotation.JsonView;\n-\n import io.swagger.models.Model;\n import io.swagger.models.ModelImpl;\n import io.swagger.models.Operation;\n@@ -66,19 +62,23 @@ public class RestOperationMeta {\n   protected boolean formData;\n \n   // make sure if response is file\n+\n   protected boolean downloadFile;\n \n   protected List<RestParam> paramList = new ArrayList<>();\n \n   // key\u4e3a\u53c2\u6570\u540d\n+\n   protected Map<String, RestParam> paramMap = new LinkedHashMap<>();\n \n   protected List<String> fileKeys = new ArrayList<>();\n \n   // key\u4e3a\u6570\u636e\u7c7b\u578b\uff0c\u6bd4\u5982json\u4e4b\u7c7b\n+\n   private Map<String, Map<String, ProduceProcessor>> produceProcessorAcceptMap = new LinkedHashMap<>();\n \n   // \u4e0d\u4e00\u5b9a\u7b49\u4e8emgr\u4e2d\u7684default\uff0c\u56e0\u4e3a\u672coperation\u53ef\u80fd\u4e0d\u652f\u6301mgr\u4e2d\u7684default\n+\n   private Map<String, ProduceProcessor> defaultProcessorViewMap;\n \n   protected String absolutePath;\n@@ -86,6 +86,7 @@ public class RestOperationMeta {\n   protected PathRegExp absolutePathRegExp;\n \n   // \u5feb\u901f\u6784\u5efaURL path\n+\n   private URLPathBuilder pathBuilder;\n \n   public void init(OperationMeta operationMeta) {\n@@ -93,6 +94,8 @@ public class RestOperationMeta {\n \n     Swagger swagger = operationMeta.getSchemaMeta().getSwagger();\n     Operation operation = operationMeta.getSwaggerOperation();\n+\n+\n     this.produces = operation.getProduces();\n     if (produces == null) {\n       this.produces = swagger.getProduces();\n@@ -104,14 +107,14 @@ public class RestOperationMeta {\n     // \u521d\u59cb\u5316\u6240\u6709rest param\n     for (int swaggerParameterIdx = 0; swaggerParameterIdx < operation.getParameters().size(); swaggerParameterIdx++) {\n       Parameter parameter = operation.getParameters().get(swaggerParameterIdx);\n-\n       if (\"formData\".equals(parameter.getIn())) {\n         formData = true;\n       }\n \n-      Type type = operationMeta.getSwaggerProducerOperation() != null ? operationMeta.getSwaggerProducerOperation()\n-          .getSwaggerParameterTypes().get(parameter.getName()) : null;\n+      Type type = operationMeta.getSwaggerProducerOperation() != null ? operationMeta.getSwaggerProducerOperation().getSwaggerParameterTypes()\n+                                                                                                                   .get(parameter.getName()) : null;\n       type = correctFormBodyType(parameter, type);\n+\n       RestParam param = new RestParam(parameter, type);\n       addParam(param);\n     }\n@@ -126,18 +129,21 @@ public class RestOperationMeta {\n    * @param type the resolved param type\n    * @return the corrected param type\n    */\n+\n   private Type correctFormBodyType(Parameter parameter, Type type) {\n     if (null != type || !(parameter instanceof BodyParameter)) {\n       return type;\n     }\n+\n     final BodyParameter bodyParameter = (BodyParameter) parameter;\n     if (!(bodyParameter.getSchema() instanceof ModelImpl)) {\n       return type;\n     }\n+\n     final Property additionalProperties = ((ModelImpl) bodyParameter.getSchema()).getAdditionalProperties();\n     if (additionalProperties instanceof StringProperty) {\n       type = RestObjectMapperFactory.getRestObjectMapper().getTypeFactory()\n-          .constructMapType(Map.class, String.class, String.class);\n+                                                          .constructMapType(Map.class, String.class, String.class);\n     }\n     return type;\n   }\n@@ -148,13 +154,12 @@ public class RestOperationMeta {\n \n   private boolean checkDownloadFileFlag() {\n     // todo: logic of find\n-    Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n+    Response response = operationMeta.getSwaggerOperation().getResponses()\n+                                                           .get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n-\n     return false;\n   }\n \n@@ -167,9 +172,9 @@ public class RestOperationMeta {\n   }\n \n   // \u8f93\u51fab/c/\u5f62\u5f0f\u7684url\n+\n   private String concatPath(String basePath, String operationPath) {\n-    return (\"/\" + nonNullify(basePath) + \"/\" + nonNullify(operationPath) + \"/\")\n-        .replaceAll(\"/{2,}\", \"/\");\n+    return (\"/\" + nonNullify(basePath) + \"/\" + nonNullify(operationPath) + \"/\").replaceAll(\"/{2,}\", \"/\");\n   }\n \n   private String nonNullify(String path) {\n@@ -198,6 +203,7 @@ public class RestOperationMeta {\n     if (path == null || path.equals(\"\")) {\n       throw new Error(\"null rest url is not supported\");\n     }\n+\n     try {\n       return new PathRegExp(path);\n     } catch (Exception e) {\n@@ -219,6 +225,7 @@ public class RestOperationMeta {\n   }\n \n   // \u4e3aoperation\u521b\u5efa\u652f\u6301\u7684\u591a\u79cdproduce processor\n+\n   protected void createProduceProcessors() {\n     if (null == produces || produces.isEmpty()) {\n       ProduceProcessorManager.INSTANCE.getObjMap().forEach((processorName, prodMap) -> {\n@@ -229,21 +236,25 @@ public class RestOperationMeta {\n         if (produce.contains(\";\")) {\n           produce = produce.substring(0, produce.indexOf(\";\"));\n         }\n+\n         Map<String, ProduceProcessor> processorMap = ProduceProcessorManager.INSTANCE.findValue(produce);\n         if (processorMap == null) {\n           LOGGER.error(\"produce {} is not supported\", produce);\n           continue;\n         }\n+\n         this.produceProcessorAcceptMap.put(produce, processorMap);\n       }\n \n       if (produceProcessorAcceptMap.isEmpty()) {\n-        produceProcessorAcceptMap\n-            .put(ProduceProcessorManager.DEFAULT_TYPE, ProduceProcessorManager.INSTANCE.getDefaultProcessorMap());\n+        produceProcessorAcceptMap.put(ProduceProcessorManager.DEFAULT_TYPE,\n+ProduceProcessorManager.INSTANCE.getDefaultProcessorMap());\n       }\n     }\n \n-    defaultProcessorViewMap = produceProcessorAcceptMap.values().stream().findFirst().get();\n+    defaultProcessorViewMap = produceProcessorAcceptMap.values().stream()\n+                                                                .findFirst()\n+                                                                .get();\n     produceProcessorAcceptMap.putIfAbsent(MediaType.WILDCARD, defaultProcessorViewMap);\n   }\n \n@@ -259,6 +270,7 @@ public class RestOperationMeta {\n     if (param.getParamProcessor() instanceof PartProcessor) {\n       fileKeys.add(param.getParamName());\n     }\n+\n     paramList.add(param);\n     paramMap.put(param.getParamName(), param);\n   }\n@@ -268,7 +280,8 @@ public class RestOperationMeta {\n       LOGGER.error(String.format(\"Unable to  find produce processor with type/%s\", type));\n       return null;\n     }\n-    return this.produceProcessorAcceptMap.get(type).get(serialView);\n+    return this.produceProcessorAcceptMap.get(type)\n+               .get(serialView);\n   }\n \n   public ProduceProcessor findProduceProcessor(String type) {\n@@ -276,6 +289,7 @@ public class RestOperationMeta {\n   }\n \n   // \u9009\u62e9\u4e0eaccept\u5339\u914d\u7684produce processor\u6216\u8005\u7f3a\u7701\u7684\n+\n   public ProduceProcessor ensureFindProduceProcessor(HttpServletRequestEx requestEx) {\n     String acceptType = requestEx.getHeader(HttpHeaders.ACCEPT);\n     SwaggerProducerOperation producerOperation = operationMeta.getExtData(Const.PRODUCER_OPERATION);\n@@ -290,12 +304,12 @@ public class RestOperationMeta {\n     if (annotations == null || annotations.length < 1) {\n       return doEnsureFindProduceProcessor(acceptType, null);\n     }\n+\n     for (Annotation annotation : annotations) {\n       if (annotation.annotationType() == JsonView.class) {\n         Class<?>[] value = ((JsonView) annotation).value();\n         if (value.length != 1) {\n-          throw new IllegalArgumentException(\n-              \"@JsonView only supported for exactly 1 class argument \");\n+          throw new IllegalArgumentException(\"@JsonView only supported for exactly 1 class argument \");\n         }\n         return doEnsureFindProduceProcessor(acceptType, value[0]);\n       }\n@@ -304,30 +318,28 @@ public class RestOperationMeta {\n   }\n \n   private ProduceProcessor doEnsureFindProduceProcessor(String acceptType, Class<?> serialViewClass) {\n-    String serialViewKey =\n-        (serialViewClass == null ? ProduceProcessorManager.DEFAULT_SERIAL_CLASS : serialViewClass.getCanonicalName());\n+    String serialViewKey = (serialViewClass == null ? ProduceProcessorManager.DEFAULT_SERIAL_CLASS : serialViewClass.getCanonicalName());\n     if (downloadFile) {\n       //do not check accept type, when the produces of provider is text/plain there will return text/plain processor\n       //when the produces of provider is application/json there will return the application/json processor\n       //so do not care what accept type the consumer will set.\n       return this.produceProcessorAcceptMap.get(MediaType.WILDCARD)\n-          .computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(\n-              acceptType, serialViewClass, produceProcessorAcceptMap.get(MediaType.WILDCARD)));\n+                 .computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, produceProcessorAcceptMap.get(MediaType.WILDCARD)));\n     }\n+\n     if (StringUtils.isEmpty(acceptType)) {\n-      return defaultProcessorViewMap\n-          .computeIfAbsent(serialViewKey, key -> ProduceProcessorManager.cloneNewProduceProcessor(\n-              acceptType, serialViewClass, defaultProcessorViewMap));\n+      return defaultProcessorViewMap.computeIfAbsent(serialViewKey,\n+key -> ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, defaultProcessorViewMap));\n     }\n+\n     List<String> mimeTypes = MimeTypesUtils.getSortedAcceptableMimeTypes(acceptType.toLowerCase(Locale.US));\n     for (String mime : mimeTypes) {\n       Map<String, ProduceProcessor> processorMap = this.produceProcessorAcceptMap.get(mime);\n       if (null != processorMap) {\n-        return processorMap.computeIfAbsent(serialViewKey, key ->\n-            ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, processorMap));\n+        return processorMap.computeIfAbsent(serialViewKey,\n+key -> ProduceProcessorManager.cloneNewProduceProcessor(acceptType, serialViewClass, processorMap));\n       }\n     }\n-\n     return null;\n   }\n \n@@ -342,4 +354,4 @@ public class RestOperationMeta {\n   public List<String> getProduces() {\n     return produces;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 56
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/173/RestOperationMeta.java\nindex d559231605c..a1e4b330204 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/173/RestOperationMeta.java\n@@ -151,8 +151,8 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl\n+          && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/173/RestOperationMeta.java\nindex d559231605c..a1e4b330204 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/173/RestOperationMeta.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/173/RestOperationMeta.java\n@@ -151,8 +151,8 @@ public class RestOperationMeta {\n     Response response = operationMeta.getSwaggerOperation().getResponses().get(\"200\");\n     if (response != null) {\n       Model model = response.getResponseSchema();\n-      return model instanceof ModelImpl &&\n-          FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n+      return model instanceof ModelImpl\n+          && FileProperty.isType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n \n     return false;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}