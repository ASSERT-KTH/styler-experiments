{
    "project_name": "Angel-ML-angel",
    "violation_id": "717",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/717/GeneralOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/717/GeneralOp.java\nindex a0af464af5f..cfbfc0ff2f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/717/GeneralOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/717/GeneralOp.java\n@@ -29,51 +29,52 @@ import io.netty.buffer.ByteBuf;\n  */\n public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n \n-  /**\n-   * Clear the storage\n-   */\n-  void clear();\n+    /**\n+     * Clear the storage\n+     */\n+    void clear();\n \n-  /**\n-   * Get the element number in the storage\n-   *\n-   * @return the element number in the storage\n-   */\n-  int size();\n+    /**\n+     * Get the element number in the storage\n+     *\n+     * @return the element number in the storage\n+     */\n+    int size();\n \n-  /**\n-   * Is the dense storage\n-   *\n-   * @return true means dense storage\n-   */\n-  boolean isDense();\n+    /**\n+     * Is the dense storage\n+     *\n+     * @return true means dense storage\n+     */\n+    boolean isDense();\n \n-  /**\n-   * Is the sparse storage\n-   *\n-   * @return true means sparse storage\n-   */\n-  boolean isSparse();\n+    /**\n+     * Is the sparse storage\n+     *\n+     * @return true means sparse storage\n+     */\n+    boolean isSparse();\n \n-  /**\n-   * Is the sorted storage\n-   *\n-   * @return true means sorted storage\n-   */\n-  boolean isSorted();\n+    /**\n+     * Is the sorted storage\n+     *\n+     * @return true means sorted storage\n+     */\n+    boolean isSorted();\n \n-  /**\n-   * Use different clone method as storage method\n-   * @return clone object\n-   */\n-  Object adaptiveClone();\n+    /**\n+     * Use different clone method as storage method\n+     *\n+     * @return clone object\n+     */\n+    Object adaptiveClone();\n \n-  /**\n-   * Pipeline update interface\n-   *\n-   * @param updateType update data storage method\n-   * @param buf un-deserialized update data\n-   * @param op update method\n-   */\n-  void update(RowType updateType, ByteBuf buf, UpdateOp op);\n+    /**\n+     * Pipeline update interface\n+     *\n+     * @param updateType update data storage method\n+     * @param buf        un-deserialized update data\n+     * @param op         update method\n+     */\n+    void update(RowType updateType, ByteBuf buf, UpdateOp op);\n }\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/717/GeneralOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/717/GeneralOp.java\nindex a0af464af5f..556773462c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/717/GeneralOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/717/GeneralOp.java\n@@ -76,4 +76,4 @@ public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n    * @param op update method\n    */\n   void update(RowType updateType, ByteBuf buf, UpdateOp op);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/717/GeneralOp.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/717/GeneralOp.java\nindex a0af464af5f..21d64c6977c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/717/GeneralOp.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/717/GeneralOp.java\n@@ -27,6 +27,8 @@ import io.netty.buffer.ByteBuf;\n /**\n  * General ps-row storage operations\n  */\n+\n+\n public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n \n   /**\n@@ -39,6 +41,7 @@ public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n    *\n    * @return the element number in the storage\n    */\n+\n   int size();\n \n   /**\n@@ -46,6 +49,7 @@ public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n    *\n    * @return true means dense storage\n    */\n+\n   boolean isDense();\n \n   /**\n@@ -53,6 +57,7 @@ public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n    *\n    * @return true means sparse storage\n    */\n+\n   boolean isSparse();\n \n   /**\n@@ -60,12 +65,15 @@ public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n    *\n    * @return true means sorted storage\n    */\n+\n   boolean isSorted();\n \n   /**\n    * Use different clone method as storage method\n    * @return clone object\n    */\n+\n+\n   Object adaptiveClone();\n \n   /**\n@@ -75,5 +83,8 @@ public interface GeneralOp extends DeepClone, Serialize, StreamSerialize {\n    * @param buf un-deserialized update data\n    * @param op update method\n    */\n-  void update(RowType updateType, ByteBuf buf, UpdateOp op);\n-}\n+\n+\n+  void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op);\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}