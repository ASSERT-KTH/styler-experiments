{
    "project_name": "wso2-attic-commons",
    "violation_id": "111",
    "information": {
        "violations": [
            {
                "line": "23",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\n    public HorizaontalPathGenerator(long level, long chilperNode,  String root , long numberofNodes, String resourceName) {\n        this.resourceName = resourceName;\n        this.level = level;\n        this.chilperNode = chilperNode;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/111/HorizaontalPathGenerator.java\nindex 36b5560b13e..0e2ff24cab8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/111/HorizaontalPathGenerator.java\n@@ -20,8 +20,9 @@ public class HorizaontalPathGenerator implements PathGeneratorInterface {\n     Object arrayObj[];\r\n \r\n \r\n-    public HorizaontalPathGenerator(long level, long chilperNode,  String root , long numberofNodes, String resourceName) {\r\n-        this.resourceName = resourceName;\r\n+    public HorizaontalPathGenerator(long level, long chilperNode,\r\n+                                    String root , long numberofNodes, String resourceName) {\r\n+    this.resourceName = resourceName;\r\n         this.level = level;\r\n         this.chilperNode = chilperNode;\r\n         this.numberofNodes = numberofNodes;\r\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/111/HorizaontalPathGenerator.java\nindex 36b5560b13e..0f5692736a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/111/HorizaontalPathGenerator.java\n@@ -10,101 +10,98 @@ import java.util.ArrayList;\n \r\n public class HorizaontalPathGenerator implements PathGeneratorInterface {\r\n \r\n-    private String resourceName;\r\n-    private String root;\r\n-    private long level;\r\n-    private long chilperNode;\r\n-    private long numberofNodes;\r\n-    private int counter;\r\n-    ArrayList pathlist = new ArrayList();\r\n-    Object arrayObj[];\r\n-\r\n-\r\n-    public HorizaontalPathGenerator(long level, long chilperNode,  String root , long numberofNodes, String resourceName) {\r\n-        this.resourceName = resourceName;\r\n-        this.level = level;\r\n-        this.chilperNode = chilperNode;\r\n-        this.numberofNodes = numberofNodes;\r\n-        this.root = root;\r\n-        counter = 0;\r\n-        arrayObj = null;\r\n+  private String resourceName;\r\n+  private String root;\r\n+  private long level;\r\n+  private long chilperNode;\r\n+  private long numberofNodes;\r\n+  private int counter;\r\n+  ArrayList pathlist = new ArrayList();\r\n+  Object arrayObj[];\r\n \r\n-    }\r\n \r\n-    public String getPath() throws Exception {\r\n+  public HorizaontalPathGenerator(long level, long chilperNode, String root, long numberofNodes, String resourceName) {\r\n+    this.resourceName = resourceName;\r\n+    this.level = level;\r\n+    this.chilperNode = chilperNode;\r\n+    this.numberofNodes = numberofNodes;\r\n+    this.root = root;\r\n+    counter = 0;\r\n+    arrayObj = null;\r\n \r\n-        String tempPath = null;\r\n-        //Object arrayObj[] = null;\r\n+  }\r\n \r\n-        if (counter == 0){\r\n+  public String getPath() throws Exception {\r\n \r\n-            pathlist = generateTree(level, chilperNode, root, numberofNodes);\r\n-            arrayObj = pathlist.toArray();\r\n-        }\r\n+    String tempPath = null;\r\n+    //Object arrayObj[] = null;\r\n \r\n-        if (counter < numberofNodes) {\r\n-            tempPath = arrayObj[counter].toString();\r\n-           // System.out.println(tempPath);\r\n-        }\r\n+    if (counter == 0) {\r\n \r\n-        counter++;\r\n-        tempPath = tempPath + \"/\" + resourceName;\r\n-        //System.out.println(tempPath);\r\n-        return tempPath;\r\n+      pathlist = generateTree(level, chilperNode, root, numberofNodes);\r\n+      arrayObj = pathlist.toArray();\r\n+    }\r\n \r\n+    if (counter < numberofNodes) {\r\n+      tempPath = arrayObj[counter].toString();\r\n+      // System.out.println(tempPath);\r\n     }\r\n \r\n-    public ArrayList generateTree(long level, long chilperNode,  String root , long numberofNodes) throws Exception{\r\n-            ArrayList list = new ArrayList();\r\n-            int count =0;\r\n-\r\n-            for (int i = 1; i <= level; i++) {\r\n-                for (int j = 1; j <= chilperNode; j++) {\r\n-                    Resource resource = new ResourceImpl();\r\n-                    resource.setContent(\"My Data\".getBytes());\r\n-                    String collectionPath = root + root + i + root + j;\r\n-                    //System.out.println(\"the path is:\"+ collectionPath);\r\n-                    list.add(collectionPath);\r\n-                    //registry.put(collectionPath,resource);\r\n-                    count ++;\r\n-                    //System.out.println (count);\r\n-                    if (count == numberofNodes) {\r\n-                        return list;\r\n-                    }\r\n-                }\r\n-            }\r\n-            return list;\r\n+    counter++;\r\n+    tempPath = tempPath + \"/\" + resourceName;\r\n+    //System.out.println(tempPath);\r\n+    return tempPath;\r\n+\r\n+  }\r\n+\r\n+  public ArrayList generateTree(long level, long chilperNode, String root, long numberofNodes) throws Exception {\r\n+    ArrayList list = new ArrayList();\r\n+    int count = 0;\r\n+\r\n+    for (int i = 1; i <= level; i++) {\r\n+      for (int j = 1; j <= chilperNode; j++) {\r\n+        Resource resource = new ResourceImpl();\r\n+        resource.setContent(\"My Data\".getBytes());\r\n+        String collectionPath = root + root + i + root + j;\r\n+        //System.out.println(\"the path is:\"+ collectionPath);\r\n+        list.add(collectionPath);\r\n+        //registry.put(collectionPath,resource);\r\n+        count++;\r\n+        //System.out.println (count);\r\n+        if (count == numberofNodes) {\r\n+          return list;\r\n         }\r\n+      }\r\n+    }\r\n+    return list;\r\n+  }\r\n \r\n-    //EmbeddedRegistry registry\r\n-\r\n-        public String[] pathSplitter(String path) {\r\n-\r\n-            String pathValue = null;\r\n-            String pathValue2 = null;\r\n-            String[] tokens = null;\r\n-            String splitPattern = \"/\";\r\n-            tokens = path.split(splitPattern);\r\n-\r\n-            for (int i=1;i<tokens.length;i++)\r\n-            {\r\n-                pathValue = tokens[i];\r\n-                pathValue2 = \"/\"+pathValue;\r\n-                tokens[i-1] = pathValue2;\r\n-            }\r\n-\r\n-            String yvalue = null;\r\n-            for (int j=0;j<tokens.length;j++)\r\n-            {\r\n-                if (j==0){\r\n-                    yvalue = tokens[j];\r\n-                }\r\n-                else{\r\n-                    yvalue = yvalue + tokens[j];\r\n-                }\r\n-            }\r\n-            return tokens;\r\n-        }\r\n+  //EmbeddedRegistry registry\r\n+\r\n+  public String[] pathSplitter(String path) {\r\n+\r\n+    String pathValue = null;\r\n+    String pathValue2 = null;\r\n+    String[] tokens = null;\r\n+    String splitPattern = \"/\";\r\n+    tokens = path.split(splitPattern);\r\n+\r\n+    for (int i = 1; i < tokens.length; i++) {\r\n+      pathValue = tokens[i];\r\n+      pathValue2 = \"/\" + pathValue;\r\n+      tokens[i - 1] = pathValue2;\r\n+    }\r\n+\r\n+    String yvalue = null;\r\n+    for (int j = 0; j < tokens.length; j++) {\r\n+      if (j == 0) {\r\n+        yvalue = tokens[j];\r\n+      } else {\r\n+        yvalue = yvalue + tokens[j];\r\n+      }\r\n+    }\r\n+    return tokens;\r\n+  }\r\n \r\n }\r\n \r\n",
            "diff_size": 100
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/111/HorizaontalPathGenerator.java\nindex 36b5560b13e..0e2ff24cab8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/111/HorizaontalPathGenerator.java\n@@ -20,8 +20,9 @@ public class HorizaontalPathGenerator implements PathGeneratorInterface {\n     Object arrayObj[];\r\n \r\n \r\n-    public HorizaontalPathGenerator(long level, long chilperNode,  String root , long numberofNodes, String resourceName) {\r\n-        this.resourceName = resourceName;\r\n+    public HorizaontalPathGenerator(long level, long chilperNode,\r\n+                                    String root , long numberofNodes, String resourceName) {\r\n+    this.resourceName = resourceName;\r\n         this.level = level;\r\n         this.chilperNode = chilperNode;\r\n         this.numberofNodes = numberofNodes;\r\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/111/HorizaontalPathGenerator.java\nindex 36b5560b13e..d872737f1c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/111/HorizaontalPathGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/111/HorizaontalPathGenerator.java\n@@ -19,9 +19,9 @@ public class HorizaontalPathGenerator implements PathGeneratorInterface {\n     ArrayList pathlist = new ArrayList();\r\n     Object arrayObj[];\r\n \r\n-\r\n-    public HorizaontalPathGenerator(long level, long chilperNode,  String root , long numberofNodes, String resourceName) {\r\n-        this.resourceName = resourceName;\r\n+    public HorizaontalPathGenerator(long level, long chilperNode,\r\n+\t\t\t\t\tString root, long numberofNodes, String resourceName) {\r\n+\t\t\t\t\tthis.resourceName = resourceName;\r\n         this.level = level;\r\n         this.chilperNode = chilperNode;\r\n         this.numberofNodes = numberofNodes;\r\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}