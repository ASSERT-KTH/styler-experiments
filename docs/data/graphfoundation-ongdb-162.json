{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "162",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "210",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/162/TransactionToApply.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/162/TransactionToApply.java\nindex feabdcb552e..c60ddee3540 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/162/TransactionToApply.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/162/TransactionToApply.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.io.IOException;\n@@ -43,10 +44,10 @@ import static org.neo4j.helpers.Format.date;\n  * written directly into each instance instead of creating another data structure which is then returned.\n  * This is an internal class so even if it mixes arguments with results it's easier to work with,\n  * requires less code... and less objects.\n- *\n+ * <p>\n  * State and methods are divided up into two parts, one part being the responsibility of the user to manage,\n  * the other part up to the commit process to manage.\n- *\n+ * <p>\n  * The access pattern looks like:\n  * <ol>\n  * <li>=== USER ===</li>\n@@ -63,153 +64,152 @@ import static org.neo4j.helpers.Format.date;\n  */\n public class TransactionToApply implements CommandsToApply, AutoCloseable\n {\n-    public static final long TRANSACTION_ID_NOT_SPECIFIED = 0;\n-\n-    // These fields are provided by user\n-    private final TransactionRepresentation transactionRepresentation;\n-    private long transactionId;\n-    private final VersionContext versionContext;\n-    private TransactionToApply nextTransactionInBatch;\n-\n-    // These fields are provided by commit process, storage engine, or recovery process\n-    private Commitment commitment;\n-    private LongConsumer closedCallback;\n-    private LogPosition logPosition;\n-\n-    /**\n-     * Used when committing a transaction that hasn't already gotten a transaction id assigned.\n-     */\n-    public TransactionToApply( TransactionRepresentation transactionRepresentation )\n-    {\n-        this( transactionRepresentation, EmptyVersionContext.EMPTY );\n-    }\n-\n-    /**\n-     * Used when committing a transaction that hasn't already gotten a transaction id assigned.\n-     */\n-    public TransactionToApply( TransactionRepresentation transactionRepresentation, VersionContext versionContext )\n-    {\n-        this( transactionRepresentation, TRANSACTION_ID_NOT_SPECIFIED, versionContext );\n-    }\n-\n-    public TransactionToApply( TransactionRepresentation transactionRepresentation, long transactionId )\n-    {\n-        this( transactionRepresentation, transactionId, EmptyVersionContext.EMPTY );\n-    }\n-\n-    public TransactionToApply( TransactionRepresentation transactionRepresentation, long transactionId,\n-            VersionContext versionContext )\n-    {\n-        this.transactionRepresentation = transactionRepresentation;\n-        this.transactionId = transactionId;\n-        this.versionContext = versionContext;\n-    }\n-\n-    // These methods are called by the user when building a batch\n-    public void next( TransactionToApply next )\n-    {\n-        nextTransactionInBatch = next;\n-    }\n-\n-    // These methods are called by the commit process\n-    public Commitment commitment()\n-    {\n-        return commitment;\n-    }\n-\n-    @Override\n-    public long transactionId()\n-    {\n-        return transactionId;\n-    }\n-\n-    @Override\n-    public boolean accept( Visitor<StorageCommand,IOException> visitor ) throws IOException\n-    {\n-        return transactionRepresentation.accept( visitor );\n-    }\n-\n-    public TransactionRepresentation transactionRepresentation()\n-    {\n-        return transactionRepresentation;\n-    }\n-\n-    @Override\n-    public boolean requiresApplicationOrdering()\n-    {\n-        return commitment.hasExplicitIndexChanges();\n-    }\n-\n-    public void commitment( Commitment commitment, long transactionId )\n-    {\n-        this.commitment = commitment;\n-        this.transactionId = transactionId;\n-        this.versionContext.initWrite( transactionId );\n-    }\n-\n-    public void logPosition( LogPosition position )\n-    {\n-        this.logPosition = position;\n-    }\n-\n-    @Override\n-    public TransactionToApply next()\n-    {\n-        return nextTransactionInBatch;\n-    }\n-\n-    public void onClose( LongConsumer closedCallback )\n-    {\n-        this.closedCallback = closedCallback;\n-    }\n-\n-    @Override\n-    public void close()\n-    {\n-        if ( closedCallback != null )\n-        {\n-            closedCallback.accept( transactionId );\n-        }\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        TransactionRepresentation tr = this.transactionRepresentation;\n-        return \"Transaction #\" + transactionId +\n-               (logPosition != null ? \" at log position \" + logPosition : \" (no log position)\") +\n-               \" {started \" + date( tr.getTimeStarted() ) +\n-               \", committed \" + date( tr.getTimeCommitted() ) +\n-               \", with \" + countCommands() + \" commands in this transaction\" +\n-               \", authored by \" + tr.getAuthorId() +\n-               \", with master id \" + tr.getMasterId() +\n-               \", lock session \" + tr.getLockSessionId() +\n-               \", latest committed transaction id when started was \" + tr.getLatestCommittedTxWhenStarted() +\n-               \", additional header bytes: \" + HexPrinter.hex( tr.additionalHeader(), Integer.MAX_VALUE, \"\" ) + \"}\";\n-    }\n-\n-    private String countCommands()\n-    {\n-        class Counter implements Visitor<StorageCommand,IOException>\n-        {\n-            private int count;\n-\n-            @Override\n-            public boolean visit( StorageCommand element )\n-            {\n-                count++;\n-                return false;\n-            }\n-        }\n-        try\n-        {\n-            Counter counter = new Counter();\n-            accept( counter );\n-            return String.valueOf( counter.count );\n-        }\n-        catch ( Throwable e )\n-        {\n-            return \"(unable to count: \" + e.getMessage() + \")\";\n-        }\n-    }\n+  public static final long TRANSACTION_ID_NOT_SPECIFIED = 0;\n+\n+  // These fields are provided by user\n+  private final TransactionRepresentation transactionRepresentation;\n+  private long transactionId;\n+  private final VersionContext versionContext;\n+  private TransactionToApply nextTransactionInBatch;\n+\n+  // These fields are provided by commit process, storage engine, or recovery process\n+  private Commitment commitment;\n+  private LongConsumer closedCallback;\n+  private LogPosition logPosition;\n+\n+  /**\n+   * Used when committing a transaction that hasn't already gotten a transaction id assigned.\n+   */\n+  public TransactionToApply(TransactionRepresentation transactionRepresentation)\n+  {\n+    this(transactionRepresentation, EmptyVersionContext.EMPTY);\n+  }\n+\n+  /**\n+   * Used when committing a transaction that hasn't already gotten a transaction id assigned.\n+   */\n+  public TransactionToApply(TransactionRepresentation transactionRepresentation, VersionContext versionContext)\n+  {\n+    this(transactionRepresentation, TRANSACTION_ID_NOT_SPECIFIED, versionContext);\n+  }\n+\n+  public TransactionToApply(TransactionRepresentation transactionRepresentation, long transactionId)\n+  {\n+    this(transactionRepresentation, transactionId, EmptyVersionContext.EMPTY);\n+  }\n+\n+  public TransactionToApply(TransactionRepresentation transactionRepresentation, long transactionId,\n+                            VersionContext versionContext)\n+  {\n+    this.transactionRepresentation = transactionRepresentation;\n+    this.transactionId = transactionId;\n+    this.versionContext = versionContext;\n+  }\n+\n+  // These methods are called by the user when building a batch\n+  public void next(TransactionToApply next)\n+  {\n+    nextTransactionInBatch = next;\n+  }\n+\n+  // These methods are called by the commit process\n+  public Commitment commitment()\n+  {\n+    return commitment;\n+  }\n+\n+  @Override\n+  public long transactionId()\n+  {\n+    return transactionId;\n+  }\n+\n+  @Override\n+  public boolean accept(Visitor<StorageCommand, IOException> visitor) throws IOException\n+  {\n+    return transactionRepresentation.accept(visitor);\n+  }\n+\n+  public TransactionRepresentation transactionRepresentation()\n+  {\n+    return transactionRepresentation;\n+  }\n+\n+  @Override\n+  public boolean requiresApplicationOrdering()\n+  {\n+    return commitment.hasExplicitIndexChanges();\n+  }\n+\n+  public void commitment(Commitment commitment, long transactionId)\n+  {\n+    this.commitment = commitment;\n+    this.transactionId = transactionId;\n+    this.versionContext.initWrite(transactionId);\n+  }\n+\n+  public void logPosition(LogPosition position)\n+  {\n+    this.logPosition = position;\n+  }\n+\n+  @Override\n+  public TransactionToApply next()\n+  {\n+    return nextTransactionInBatch;\n+  }\n+\n+  public void onClose(LongConsumer closedCallback)\n+  {\n+    this.closedCallback = closedCallback;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    if (closedCallback != null)\n+    {\n+      closedCallback.accept(transactionId);\n+    }\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    TransactionRepresentation tr = this.transactionRepresentation;\n+    return \"Transaction #\" + transactionId +\n+        (logPosition != null ? \" at log position \" + logPosition : \" (no log position)\") +\n+        \" {started \" + date(tr.getTimeStarted()) +\n+        \", committed \" + date(tr.getTimeCommitted()) +\n+        \", with \" + countCommands() + \" commands in this transaction\" +\n+        \", authored by \" + tr.getAuthorId() +\n+        \", with master id \" + tr.getMasterId() +\n+        \", lock session \" + tr.getLockSessionId() +\n+        \", latest committed transaction id when started was \" + tr.getLatestCommittedTxWhenStarted() +\n+        \", additional header bytes: \" + HexPrinter.hex(tr.additionalHeader(), Integer.MAX_VALUE, \"\") + \"}\";\n+  }\n+\n+  private String countCommands()\n+  {\n+    class Counter implements Visitor<StorageCommand, IOException>\n+    {\n+      private int count;\n+\n+      @Override\n+      public boolean visit(StorageCommand element)\n+      {\n+        count++;\n+        return false;\n+      }\n+    }\n+    try\n+    {\n+      Counter counter = new Counter();\n+      accept(counter);\n+      return String.valueOf(counter.count);\n+    } catch (Throwable e)\n+    {\n+      return \"(unable to count: \" + e.getMessage() + \")\";\n+    }\n+  }\n }\n",
            "diff_size": 152
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "179",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 610).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/162/TransactionToApply.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/162/TransactionToApply.java\nindex feabdcb552e..df7c61134d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/162/TransactionToApply.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/162/TransactionToApply.java\n@@ -176,16 +176,7 @@ public class TransactionToApply implements CommandsToApply, AutoCloseable\n     public String toString()\n     {\n         TransactionRepresentation tr = this.transactionRepresentation;\n-        return \"Transaction #\" + transactionId +\n-               (logPosition != null ? \" at log position \" + logPosition : \" (no log position)\") +\n-               \" {started \" + date( tr.getTimeStarted() ) +\n-               \", committed \" + date( tr.getTimeCommitted() ) +\n-               \", with \" + countCommands() + \" commands in this transaction\" +\n-               \", authored by \" + tr.getAuthorId() +\n-               \", with master id \" + tr.getMasterId() +\n-               \", lock session \" + tr.getLockSessionId() +\n-               \", latest committed transaction id when started was \" + tr.getLatestCommittedTxWhenStarted() +\n-               \", additional header bytes: \" + HexPrinter.hex( tr.additionalHeader(), Integer.MAX_VALUE, \"\" ) + \"}\";\n+        return \"Transaction #\" + transactionId + ( logPosition != null ? \" at log position \" + logPosition : \" (no log position)\") + \" {started \" + date( tr.getTimeStarted() ) + \", committed \" + date( tr.getTimeCommitted() ) + \", with \" + countCommands() + \" commands in this transaction\" + \", authored by \" + tr.getAuthorId() + \", with master id \" + tr.getMasterId() + \", lock session \" + tr.getLockSessionId() + \", latest committed transaction id when started was \" + tr.getLatestCommittedTxWhenStarted() + \", additional header bytes: \" + HexPrinter.hex( tr.additionalHeader(), Integer.MAX_VALUE, \"\" ) + \"}\";\n     }\n \n     private String countCommands()\n@@ -212,4 +203,4 @@ public class TransactionToApply implements CommandsToApply, AutoCloseable\n             return \"(unable to count: \" + e.getMessage() + \")\";\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}