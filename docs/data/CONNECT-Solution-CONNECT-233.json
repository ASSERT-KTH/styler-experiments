{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "233",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docsubmission.audit.transform;\n\nimport com.services.nhinc.schema.auditmessage.AuditMessageType;\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/233/DocSubmissionAuditTransforms.java\nindex 0ababb77633..f108125a3cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/233/DocSubmissionAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/233/DocSubmissionAuditTransforms.java\nindex 0ababb77633..13e378b708d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/233/DocSubmissionAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -39,24 +40,24 @@ import oasis.names.tc.ebxml_regrep.xsd.rs._3.RegistryResponseType;\n public class DocSubmissionAuditTransforms extends AbstractDocSubmissionAuditTransforms<\n     ProvideAndRegisterDocumentSetRequestType, RegistryResponseType> {\n \n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForRequest(\n-        ProvideAndRegisterDocumentSetRequestType request, AssertionType assertion, AuditMessageType auditMsg) {\n-        // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n-        //Request and Response in case of DS\n-        auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n-        auditMsg = getSubmissionSetParticipantObjectIdentification(request, auditMsg);\n-        return auditMsg;\n-    }\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForRequest(\n+      ProvideAndRegisterDocumentSetRequestType request, AssertionType assertion, AuditMessageType auditMsg) {\n+    // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n+    //Request and Response in case of DS\n+    auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n+    auditMsg = getSubmissionSetParticipantObjectIdentification(request, auditMsg);\n+    return auditMsg;\n+  }\n \n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForResponse(\n-        ProvideAndRegisterDocumentSetRequestType request, RegistryResponseType response, AssertionType assertion,\n-        AuditMessageType auditMsg) {\n-        // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n-        //Request and Response in case of DS\n-        auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n-        auditMsg = getSubmissionSetParticipantObjectIdentification(request, auditMsg);\n-        return auditMsg;\n-    }\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForResponse(\n+      ProvideAndRegisterDocumentSetRequestType request, RegistryResponseType response, AssertionType assertion,\n+      AuditMessageType auditMsg) {\n+    // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n+    //Request and Response in case of DS\n+    auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n+    auditMsg = getSubmissionSetParticipantObjectIdentification(request, auditMsg);\n+    return auditMsg;\n+  }\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/233/DocSubmissionAuditTransforms.java\nindex 0ababb77633..882872cea94 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/233/DocSubmissionAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -36,27 +37,25 @@ import oasis.names.tc.ebxml_regrep.xsd.rs._3.RegistryResponseType;\n  *\n  * @author tjafri\n  */\n-public class DocSubmissionAuditTransforms extends AbstractDocSubmissionAuditTransforms<\n-    ProvideAndRegisterDocumentSetRequestType, RegistryResponseType> {\n+public class DocSubmissionAuditTransforms extends AbstractDocSubmissionAuditTransforms<ProvideAndRegisterDocumentSetRequestType, RegistryResponseType> {\n \n     @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForRequest(\n-        ProvideAndRegisterDocumentSetRequestType request, AssertionType assertion, AuditMessageType auditMsg) {\n+    protected AuditMessageType getParticipantObjectIdentificationForRequest(ProvideAndRegisterDocumentSetRequestType request, AssertionType assertion, AuditMessageType auditMsg) {\n         // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n         //Request and Response in case of DS\n         auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n         auditMsg = getSubmissionSetParticipantObjectIdentification(request, auditMsg);\n-        return auditMsg;\n+\n+return auditMsg;\n     }\n \n     @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForResponse(\n-        ProvideAndRegisterDocumentSetRequestType request, RegistryResponseType response, AssertionType assertion,\n-        AuditMessageType auditMsg) {\n+    protected AuditMessageType getParticipantObjectIdentificationForResponse(ProvideAndRegisterDocumentSetRequestType request, RegistryResponseType response, AssertionType assertion, AuditMessageType auditMsg) {\n         // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n         //Request and Response in case of DS\n         auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n         auditMsg = getSubmissionSetParticipantObjectIdentification(request, auditMsg);\n-        return auditMsg;\n+\n+return auditMsg;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/233/DocSubmissionAuditTransforms.java\nindex 0ababb77633..068791fdbca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/233/DocSubmissionAuditTransforms.java\n@@ -36,12 +36,15 @@ import oasis.names.tc.ebxml_regrep.xsd.rs._3.RegistryResponseType;\n  *\n  * @author tjafri\n  */\n-public class DocSubmissionAuditTransforms extends AbstractDocSubmissionAuditTransforms<\n-    ProvideAndRegisterDocumentSetRequestType, RegistryResponseType> {\n+\n+\n+public class DocSubmissionAuditTransforms extends\n+    AbstractDocSubmissionAuditTransforms<ProvideAndRegisterDocumentSetRequestType, RegistryResponseType> {\n+\n \n     @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForRequest(\n-        ProvideAndRegisterDocumentSetRequestType request, AssertionType assertion, AuditMessageType auditMsg) {\n+    protected AuditMessageType getParticipantObjectIdentificationForRequest(ProvideAndRegisterDocumentSetRequestType request,\n+        AssertionType assertion, AuditMessageType auditMsg) {\n         // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n         //Request and Response in case of DS\n         auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n@@ -49,14 +52,16 @@ public class DocSubmissionAuditTransforms extends AbstractDocSubmissionAuditTran\n         return auditMsg;\n     }\n \n+\n     @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForResponse(\n-        ProvideAndRegisterDocumentSetRequestType request, RegistryResponseType response, AssertionType assertion,\n-        AuditMessageType auditMsg) {\n+    protected AuditMessageType getParticipantObjectIdentificationForResponse(ProvideAndRegisterDocumentSetRequestType request,\n+        RegistryResponseType response,\n+        AssertionType assertion, AuditMessageType auditMsg) {\n         // PatientParticipantObjectIdentification  and SubmissionSetParticipantObjectIdentification is same for both\n         //Request and Response in case of DS\n         auditMsg = getPatientParticipantObjectIdentification(request, auditMsg);\n         auditMsg = getSubmissionSetParticipantObjectIdentification(request, auditMsg);\n         return auditMsg;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/233/DocSubmissionAuditTransforms.java\nindex 0ababb77633..f108125a3cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/233/DocSubmissionAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/233/DocSubmissionAuditTransforms.java\nindex 0ababb77633..f108125a3cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/233/DocSubmissionAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/233/DocSubmissionAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docsubmission.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}