{
    "project_name": "junkdog-artemis-odb",
    "violation_id": "77",
    "information": {
        "violations": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 109).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .setUrls(ClasspathHelper.forClassLoader(classLoader))\n                .setScanners(new SubTypesScanner(true))\n                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n        );\n        return reflections.getSubTypesOf(Component.class);\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/77/ReflectionsComponentCollectStrategy.java\nindex 2a8da088930..1f84432bff6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/77/ReflectionsComponentCollectStrategy.java\n@@ -35,8 +35,8 @@ public class ReflectionsComponentCollectStrategy {\n         Reflections reflections = new Reflections(new ConfigurationBuilder()\n                 .setUrls(ClasspathHelper.forClassLoader(classLoader))\n                 .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n+                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().\n+                availableProcessors())));\n         return reflections.getSubTypesOf(Component.class);\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/77/ReflectionsComponentCollectStrategy.java\nindex 2a8da088930..6a225007fdb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/77/ReflectionsComponentCollectStrategy.java\n@@ -19,41 +19,45 @@ import java.util.concurrent.Executors;\n  */\n public class ReflectionsComponentCollectStrategy {\n \n-    /**\n-     * Collect all components on a classpath.\n-     * @param classLoader context.\n-     * @return Set of all components on classloader.\n-     */\n-    public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n-\n-        // Set the context ClassLoader for this Thread.\n-        // if we don't do this Reflections gets confused and fetches only a subset\n-        // of components. probably because duplicate entries of Component.class?\n-        Thread.currentThread().setContextClassLoader(classLoader);\n-\n-        // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(classLoader))\n-                .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n-        return reflections.getSubTypesOf(Component.class);\n-    }\n-\n-    /**\n-     * Collect all components within a set of URLs\n-     * @param urls context\n-     * @return Set of all components on classloader.\n-     */\n-    public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n-        return allComponents(asClassloader(urls));\n-    }\n-\n-    /** Create classloader for URLS */\n-    private ClassLoader asClassloader(Set<URL> urls) {\n-        return URLClassLoader.newInstance(\n-                urls.toArray(new URL[0]),\n-                Thread.currentThread().getContextClassLoader());\n-    }\n+  /**\n+   * Collect all components on a classpath.\n+   *\n+   * @param classLoader context.\n+   * @return Set of all components on classloader.\n+   */\n+  public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n+\n+    // Set the context ClassLoader for this Thread.\n+    // if we don't do this Reflections gets confused and fetches only a subset\n+    // of components. probably because duplicate entries of Component.class?\n+    Thread.currentThread().setContextClassLoader(classLoader);\n+\n+    // reflect over components.\n+    Reflections reflections = new Reflections(new ConfigurationBuilder()\n+        .setUrls(ClasspathHelper.forClassLoader(classLoader))\n+        .setScanners(new SubTypesScanner(true))\n+        .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n+    );\n+    return reflections.getSubTypesOf(Component.class);\n+  }\n+\n+  /**\n+   * Collect all components within a set of URLs\n+   *\n+   * @param urls context\n+   * @return Set of all components on classloader.\n+   */\n+  public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n+    return allComponents(asClassloader(urls));\n+  }\n+\n+  /**\n+   * Create classloader for URLS\n+   */\n+  private ClassLoader asClassloader(Set<URL> urls) {\n+    return URLClassLoader.newInstance(\n+        urls.toArray(new URL[0]),\n+        Thread.currentThread().getContextClassLoader());\n+  }\n \n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/77/ReflectionsComponentCollectStrategy.java\nindex 2a8da088930..be64be9f0e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/77/ReflectionsComponentCollectStrategy.java\n@@ -18,25 +18,21 @@ import java.util.concurrent.Executors;\n  * @author Daan van Yperen\n  */\n public class ReflectionsComponentCollectStrategy {\n-\n-    /**\n+\t/**\n      * Collect all components on a classpath.\n      * @param classLoader context.\n      * @return Set of all components on classloader.\n      */\n     public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n-\n-        // Set the context ClassLoader for this Thread.\n+\t// Set the context ClassLoader for this Thread.\n         // if we don't do this Reflections gets confused and fetches only a subset\n         // of components. probably because duplicate entries of Component.class?\n         Thread.currentThread().setContextClassLoader(classLoader);\n \n         // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(classLoader))\n+        Reflections reflections = new Reflections(new ConfigurationBuilder().setUrls(ClasspathHelper.forClassLoader(classLoader))\n                 .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n+                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())));\n         return reflections.getSubTypesOf(Component.class);\n     }\n \n@@ -46,14 +42,12 @@ public class ReflectionsComponentCollectStrategy {\n      * @return Set of all components on classloader.\n      */\n     public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n-        return allComponents(asClassloader(urls));\n+\treturn allComponents(asClassloader(urls));\n     }\n \n     /** Create classloader for URLS */\n     private ClassLoader asClassloader(Set<URL> urls) {\n-        return URLClassLoader.newInstance(\n-                urls.toArray(new URL[0]),\n+\treturn URLClassLoader.newInstance(urls.toArray(new URL[0]),\n                 Thread.currentThread().getContextClassLoader());\n-    }\n-\n-}\n+\t}\n+\t}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/77/ReflectionsComponentCollectStrategy.java\nindex 2a8da088930..07d089b6158 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/77/ReflectionsComponentCollectStrategy.java\n@@ -5,7 +5,6 @@ import org.reflections.Reflections;\n import org.reflections.scanners.SubTypesScanner;\n import org.reflections.util.ClasspathHelper;\n import org.reflections.util.ConfigurationBuilder;\n-\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.util.Collection;\n@@ -17,6 +16,7 @@ import java.util.concurrent.Executors;\n  *\n  * @author Daan van Yperen\n  */\n+\n public class ReflectionsComponentCollectStrategy {\n \n     /**\n@@ -24,36 +24,36 @@ public class ReflectionsComponentCollectStrategy {\n      * @param classLoader context.\n      * @return Set of all components on classloader.\n      */\n-    public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n+ public Set<Class<? extends Component>> allComponents(ClassLoader classLoader) {\n \n         // Set the context ClassLoader for this Thread.\n         // if we don't do this Reflections gets confused and fetches only a subset\n         // of components. probably because duplicate entries of Component.class?\n-        Thread.currentThread().setContextClassLoader(classLoader);\n+  Thread.currentThread().setContextClassLoader(classLoader);\n \n         // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(classLoader))\n-                .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n-        return reflections.getSubTypesOf(Component.class);\n-    }\n+\n+  Reflections reflections = new Reflections(new ConfigurationBuilder().setUrls(ClasspathHelper.forClassLoader(classLoader))\n+                                                                      .setScanners(new SubTypesScanner(true))\n+                                                                      .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors())));\n+  return reflections.getSubTypesOf(Component.class);\n+ }\n \n     /**\n      * Collect all components within a set of URLs\n      * @param urls context\n      * @return Set of all components on classloader.\n      */\n-    public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n-        return allComponents(asClassloader(urls));\n-    }\n+\n+\n+ public Collection<Class<? extends Component>> allComponents(Set<URL> urls) {\n+  return allComponents(asClassloader(urls));\n+ }\n \n     /** Create classloader for URLS */\n-    private ClassLoader asClassloader(Set<URL> urls) {\n-        return URLClassLoader.newInstance(\n-                urls.toArray(new URL[0]),\n-                Thread.currentThread().getContextClassLoader());\n-    }\n \n-}\n+ private ClassLoader asClassloader(Set<URL> urls) {\n+  return URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+   Thread.currentThread().getContextClassLoader());\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/77/ReflectionsComponentCollectStrategy.java\nindex 2a8da088930..1f84432bff6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/77/ReflectionsComponentCollectStrategy.java\n@@ -35,8 +35,8 @@ public class ReflectionsComponentCollectStrategy {\n         Reflections reflections = new Reflections(new ConfigurationBuilder()\n                 .setUrls(ClasspathHelper.forClassLoader(classLoader))\n                 .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n-        );\n+                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().\n+                availableProcessors())));\n         return reflections.getSubTypesOf(Component.class);\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/77/ReflectionsComponentCollectStrategy.java\nindex 2a8da088930..42fde1b7d7b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/77/ReflectionsComponentCollectStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/77/ReflectionsComponentCollectStrategy.java\n@@ -35,7 +35,8 @@ public class ReflectionsComponentCollectStrategy {\n         Reflections reflections = new Reflections(new ConfigurationBuilder()\n                 .setUrls(ClasspathHelper.forClassLoader(classLoader))\n                 .setScanners(new SubTypesScanner(true))\n-                .setExecutorService(Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t. setExecutorService(Executors .newFixedThreadPool(Runtime.getRuntime( ) .availableProcessors(\n+                ) ))\n         );\n         return reflections.getSubTypesOf(Component.class);\n     }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}