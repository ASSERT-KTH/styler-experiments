{
    "project_name": "Angel-ML-angel",
    "violation_id": "661",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/661/PartInitNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/661/PartInitNeighborParam.java\nindex 175d603dd4b..e64c69562b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/661/PartInitNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/661/PartInitNeighborParam.java\n@@ -25,93 +25,94 @@ import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n \n public class PartInitNeighborParam extends PartitionUpdateParam {\n \n-  /**\n-   * Node id to neighbors map\n-   */\n-  private Long2ObjectMap<long[]> nodeIdToNeighborIndices;\n+    /**\n+     * Node id to neighbors map\n+     */\n+    private Long2ObjectMap<long[]> nodeIdToNeighborIndices;\n \n-  private long[] nodeIds;\n-  private transient int startIndex;\n-  private transient int endIndex;\n+    private long[] nodeIds;\n+    private transient int startIndex;\n+    private transient int endIndex;\n \n-  public PartInitNeighborParam(int matrixId, PartitionKey partKey,\n-      Long2ObjectMap<long[]> nodeIdToNeighborIndices, long[] nodeIds, int startIndex,\n-      int endIndex) {\n-    super(matrixId, partKey);\n-    this.nodeIdToNeighborIndices = nodeIdToNeighborIndices;\n-    this.nodeIds = nodeIds;\n-    this.startIndex = startIndex;\n-    this.endIndex = endIndex;\n-  }\n-\n-  public PartInitNeighborParam() {\n-    this(0, null, null, null, 0, 0);\n-  }\n+    public PartInitNeighborParam(int matrixId, PartitionKey partKey,\n+                                 Long2ObjectMap<long[]> nodeIdToNeighborIndices, long[] nodeIds,\n+                                 int startIndex,\n+                                 int endIndex) {\n+        super(matrixId, partKey);\n+        this.nodeIdToNeighborIndices = nodeIdToNeighborIndices;\n+        this.nodeIds = nodeIds;\n+        this.startIndex = startIndex;\n+        this.endIndex = endIndex;\n+    }\n \n-  public Long2ObjectMap<long[]> getNodeIdToNeighborIndices() {\n-    return nodeIdToNeighborIndices;\n-  }\n+    public PartInitNeighborParam() {\n+        this(0, null, null, null, 0, 0);\n+    }\n \n-  private void clear() {\n-    nodeIdToNeighborIndices = null;\n-    nodeIds = null;\n-    startIndex = -1;\n-    endIndex = -1;\n-  }\n+    public Long2ObjectMap<long[]> getNodeIdToNeighborIndices() {\n+        return nodeIdToNeighborIndices;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    long nodeId;\n-    long[] neighbors;\n-    int writeIndex = buf.writerIndex();\n-    int writeNum = 0;\n-    buf.writeInt(0);\n-    for (int i = startIndex; i < endIndex; i++) {\n-      nodeId = nodeIds[i];\n-      neighbors = nodeIdToNeighborIndices.get(nodeId);\n-      if (neighbors == null || neighbors.length == 0) {\n-        continue;\n-      }\n-      buf.writeLong(nodeId);\n-      buf.writeInt(neighbors.length);\n-      for (long neighbor : neighbors) {\n-        buf.writeLong(neighbor);\n-      }\n-      writeNum++;\n+    private void clear() {\n+        nodeIdToNeighborIndices = null;\n+        nodeIds = null;\n+        startIndex = -1;\n+        endIndex = -1;\n     }\n-    buf.setInt(writeIndex, writeNum);\n \n-    clear();\n-  }\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        long nodeId;\n+        long[] neighbors;\n+        int writeIndex = buf.writerIndex();\n+        int writeNum = 0;\n+        buf.writeInt(0);\n+        for (int i = startIndex; i < endIndex; i++) {\n+            nodeId = nodeIds[i];\n+            neighbors = nodeIdToNeighborIndices.get(nodeId);\n+            if (neighbors == null || neighbors.length == 0) {\n+                continue;\n+            }\n+            buf.writeLong(nodeId);\n+            buf.writeInt(neighbors.length);\n+            for (long neighbor : neighbors) {\n+                buf.writeLong(neighbor);\n+            }\n+            writeNum++;\n+        }\n+        buf.setInt(writeIndex, writeNum);\n+\n+        clear();\n+    }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    int len = buf.readInt();\n-    nodeIdToNeighborIndices = new Long2ObjectArrayMap<>(len);\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        int len = buf.readInt();\n+        nodeIdToNeighborIndices = new Long2ObjectArrayMap<>(len);\n \n-    for (int i = 0; i < len; i++) {\n-      long nodeId = buf.readLong();\n-      int neighborNum = buf.readInt();\n-      long[] neighbor = new long[neighborNum];\n-      for (int j = 0; j < neighborNum; j++) {\n-        neighbor[j] = buf.readLong();\n-      }\n-      nodeIdToNeighborIndices.put(nodeId, neighbor);\n+        for (int i = 0; i < len; i++) {\n+            long nodeId = buf.readLong();\n+            int neighborNum = buf.readInt();\n+            long[] neighbor = new long[neighborNum];\n+            for (int j = 0; j < neighborNum; j++) {\n+                neighbor[j] = buf.readLong();\n+            }\n+            nodeIdToNeighborIndices.put(nodeId, neighbor);\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = super.bufferLen();\n-    len += 4;\n-    for (int i = startIndex; i < endIndex; i++) {\n-      if (nodeIdToNeighborIndices.get(nodeIds[i]) != null) {\n-        len += 8 * nodeIdToNeighborIndices.get(nodeIds[i]).length;\n-      }\n-      len += 12;\n+    @Override\n+    public int bufferLen() {\n+        int len = super.bufferLen();\n+        len += 4;\n+        for (int i = startIndex; i < endIndex; i++) {\n+            if (nodeIdToNeighborIndices.get(nodeIds[i]) != null) {\n+                len += 8 * nodeIdToNeighborIndices.get(nodeIds[i]).length;\n+            }\n+            len += 12;\n+        }\n+        return len;\n     }\n-    return len;\n-  }\n }\n",
            "diff_size": 103
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/661/PartInitNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/661/PartInitNeighborParam.java\nindex 175d603dd4b..c0b0c620754 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/661/PartInitNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/661/PartInitNeighborParam.java\n@@ -114,4 +114,4 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/661/PartInitNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/661/PartInitNeighborParam.java\nindex 175d603dd4b..d18f1db6dec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/661/PartInitNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/661/PartInitNeighborParam.java\n@@ -28,15 +28,16 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n   /**\n    * Node id to neighbors map\n    */\n-  private Long2ObjectMap<long[]> nodeIdToNeighborIndices;\n \n+  private Long2ObjectMap<long[]> nodeIdToNeighborIndices;\n   private long[] nodeIds;\n   private transient int startIndex;\n   private transient int endIndex;\n \n-  public PartInitNeighborParam(int matrixId, PartitionKey partKey,\n-      Long2ObjectMap<long[]> nodeIdToNeighborIndices, long[] nodeIds, int startIndex,\n-      int endIndex) {\n+  public PartInitNeighborParam(int matrixId,\n+                               PartitionKey partKey,\n+                               Long2ObjectMap<long[]> nodeIdToNeighborIndices,\n+                               long[] nodeIds, int startIndex, int endIndex) {\n     super(matrixId, partKey);\n     this.nodeIdToNeighborIndices = nodeIdToNeighborIndices;\n     this.nodeIds = nodeIds;\n@@ -62,6 +63,7 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n   @Override\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n+\n     long nodeId;\n     long[] neighbors;\n     int writeIndex = buf.writerIndex();\n@@ -81,16 +83,15 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n       writeNum++;\n     }\n     buf.setInt(writeIndex, writeNum);\n-\n     clear();\n   }\n \n   @Override\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n+\n     int len = buf.readInt();\n     nodeIdToNeighborIndices = new Long2ObjectArrayMap<>(len);\n-\n     for (int i = 0; i < len; i++) {\n       long nodeId = buf.readLong();\n       int neighborNum = buf.readInt();\n@@ -114,4 +115,5 @@ public class PartInitNeighborParam extends PartitionUpdateParam {\n     }\n     return len;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}