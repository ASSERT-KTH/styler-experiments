{
    "project_name": "Angel-ML-angel",
    "violation_id": "1011",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1011/ADMMState.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1011/ADMMState.java\nindex ecaf9b3d713..3c9497620a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1011/ADMMState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1011/ADMMState.java\n@@ -26,52 +26,52 @@ import java.util.List;\n \n public class ADMMState {\n \n-  List<LabeledData> instances;\n-  double[] x;\n-  double[] u;\n-  Int2IntOpenHashMap global2Local;\n-  int[] local2Global;\n-  int localFeatureNum;\n+    List<LabeledData> instances;\n+    double[] x;\n+    double[] u;\n+    Int2IntOpenHashMap global2Local;\n+    int[] local2Global;\n+    int localFeatureNum;\n \n-  public ADMMState(List<LabeledData> instances) {\n-    extractFeature(instances);\n-    x = new double[localFeatureNum];\n-    u = new double[localFeatureNum];\n-    this.instances = instances;\n-  }\n+    public ADMMState(List<LabeledData> instances) {\n+        extractFeature(instances);\n+        x = new double[localFeatureNum];\n+        u = new double[localFeatureNum];\n+        this.instances = instances;\n+    }\n \n-  private void extractFeature(List<LabeledData> instances) {\n-    global2Local = new Int2IntOpenHashMap();\n+    private void extractFeature(List<LabeledData> instances) {\n+        global2Local = new Int2IntOpenHashMap();\n \n-    Int2IntOpenHashMap tempLocal2Global = new Int2IntOpenHashMap();\n-    localFeatureNum = 0;\n+        Int2IntOpenHashMap tempLocal2Global = new Int2IntOpenHashMap();\n+        localFeatureNum = 0;\n \n-    for (LabeledData instance : instances) {\n-      SparseDummyVector vector = (SparseDummyVector) instance.getX();\n-      int length = vector.getNonzero();\n-      int[] indices = vector.getIndices();\n-      for (int i = 0; i < length; i++) {\n-        int globalId = indices[i];\n+        for (LabeledData instance : instances) {\n+            SparseDummyVector vector = (SparseDummyVector) instance.getX();\n+            int length = vector.getNonzero();\n+            int[] indices = vector.getIndices();\n+            for (int i = 0; i < length; i++) {\n+                int globalId = indices[i];\n \n-        if (!global2Local.containsKey(globalId)) {\n-          tempLocal2Global.put(localFeatureNum, globalId);\n-          global2Local.put(globalId, localFeatureNum);\n-          localFeatureNum++;\n-        }\n+                if (!global2Local.containsKey(globalId)) {\n+                    tempLocal2Global.put(localFeatureNum, globalId);\n+                    global2Local.put(globalId, localFeatureNum);\n+                    localFeatureNum++;\n+                }\n \n-        indices[i] = global2Local.get(globalId);\n-      }\n-    }\n+                indices[i] = global2Local.get(globalId);\n+            }\n+        }\n \n-    local2Global = new int[localFeatureNum];\n-    ObjectIterator<Int2IntMap.Entry> iter = tempLocal2Global.int2IntEntrySet().fastIterator();\n+        local2Global = new int[localFeatureNum];\n+        ObjectIterator<Int2IntMap.Entry> iter = tempLocal2Global.int2IntEntrySet().fastIterator();\n \n-    while (iter.hasNext()) {\n-      Int2IntMap.Entry entry = iter.next();\n-      int key = entry.getIntKey();\n-      int value = entry.getIntValue();\n-      local2Global[key] = value;\n+        while (iter.hasNext()) {\n+            Int2IntMap.Entry entry = iter.next();\n+            int key = entry.getIntKey();\n+            int value = entry.getIntValue();\n+            local2Global[key] = value;\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1011/ADMMState.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1011/ADMMState.java\nindex ecaf9b3d713..0c313bf34f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1011/ADMMState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1011/ADMMState.java\n@@ -25,7 +25,6 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n import java.util.List;\n \n public class ADMMState {\n-\n   List<LabeledData> instances;\n   double[] x;\n   double[] u;\n@@ -74,4 +73,4 @@ public class ADMMState {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1011/ADMMState.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1011/ADMMState.java\nindex ecaf9b3d713..d9abff15ddd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1011/ADMMState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1011/ADMMState.java\n@@ -21,16 +21,21 @@ import com.tencent.angel.ml.math.vector.SparseDummyVector;\n import it.unimi.dsi.fastutil.ints.Int2IntMap;\n import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.util.List;\n \n public class ADMMState {\n \n   List<LabeledData> instances;\n+\n   double[] x;\n+\n   double[] u;\n   Int2IntOpenHashMap global2Local;\n+\n+\n   int[] local2Global;\n+\n+\n   int localFeatureNum;\n \n   public ADMMState(List<LabeledData> instances) {\n@@ -42,30 +47,24 @@ public class ADMMState {\n \n   private void extractFeature(List<LabeledData> instances) {\n     global2Local = new Int2IntOpenHashMap();\n-\n     Int2IntOpenHashMap tempLocal2Global = new Int2IntOpenHashMap();\n     localFeatureNum = 0;\n-\n     for (LabeledData instance : instances) {\n       SparseDummyVector vector = (SparseDummyVector) instance.getX();\n       int length = vector.getNonzero();\n       int[] indices = vector.getIndices();\n       for (int i = 0; i < length; i++) {\n         int globalId = indices[i];\n-\n         if (!global2Local.containsKey(globalId)) {\n           tempLocal2Global.put(localFeatureNum, globalId);\n           global2Local.put(globalId, localFeatureNum);\n           localFeatureNum++;\n         }\n-\n         indices[i] = global2Local.get(globalId);\n       }\n     }\n-\n     local2Global = new int[localFeatureNum];\n     ObjectIterator<Int2IntMap.Entry> iter = tempLocal2Global.int2IntEntrySet().fastIterator();\n-\n     while (iter.hasNext()) {\n       Int2IntMap.Entry entry = iter.next();\n       int key = entry.getIntKey();\n@@ -73,5 +72,4 @@ public class ADMMState {\n       local2Global[key] = value;\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}