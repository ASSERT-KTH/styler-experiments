{
    "project_name": "h2database-h2database",
    "violation_id": "95",
    "information": {
        "violations": [
            {
                "line": "85",
                "column": "24",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n        return isArray //\n                ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n                : writeExpressions(builder.append(\"ROW (\"), list, sqlFlags).append(')');\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/h2database-h2database/styler/05_predictions/final/files-repaired/95/ExpressionList.java\nindex 2258029f229..7494f7b342f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/h2database-h2database/styler/05_predictions/final/files-repaired/95/ExpressionList.java\n@@ -82,8 +82,9 @@ public final class ExpressionList extends Expression {\n \n     @Override\n     public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n-        return isArray //\n-                ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n+        return isArray\n+            // ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n+         ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n                 : writeExpressions(builder.append(\"ROW (\"), list, sqlFlags).append(')');\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "90",
                    "column": "24",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/checkstyle_idea/95/ExpressionList.java\nindex 2258029f229..4d0cb3193b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/checkstyle_idea/95/ExpressionList.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression;\n \n import org.h2.engine.SessionLocal;\n@@ -35,7 +36,9 @@ public final class ExpressionList extends Expression {\n         for (int i = 0; i < list.length; i++) {\n             v[i] = list[i].getValue(session);\n         }\n-        return isArray ? ValueArray.get((TypeInfo) type.getExtTypeInfo(), v, session) : ValueRow.get(type, v);\n+        return isArray ?\n+                ValueArray.get((TypeInfo) type.getExtTypeInfo(), v, session) :\n+                ValueRow.get(type, v);\n     }\n \n     @Override\n@@ -69,8 +72,10 @@ public final class ExpressionList extends Expression {\n     }\n \n     void initializeType() {\n-        type = isArray ? TypeInfo.getTypeInfo(Value.ARRAY, list.length, 0, TypeInfo.getHigherType(list))\n-                : TypeInfo.getTypeInfo(Value.ROW, 0, 0, new ExtTypeInfoRow(list));\n+        type = isArray ? TypeInfo.getTypeInfo(Value.ARRAY, list.length, 0,\n+                TypeInfo.getHigherType(list))\n+                :\n+                TypeInfo.getTypeInfo(Value.ROW, 0, 0, new ExtTypeInfoRow(list));\n     }\n \n     @Override\n@@ -83,8 +88,10 @@ public final class ExpressionList extends Expression {\n     @Override\n     public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n         return isArray //\n-                ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n-                : writeExpressions(builder.append(\"ROW (\"), list, sqlFlags).append(')');\n+                ? writeExpressions(builder.append(\"ARRAY [\"), list,\n+                sqlFlags).append(']')\n+                : writeExpressions(builder.append(\"ROW (\"), list,\n+                sqlFlags).append(')');\n     }\n \n     @Override\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/styler/05_predictions/random/files-repaired/95/ExpressionList.java\nindex 2258029f229..7494f7b342f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/styler/05_predictions/random/files-repaired/95/ExpressionList.java\n@@ -82,8 +82,9 @@ public final class ExpressionList extends Expression {\n \n     @Override\n     public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n-        return isArray //\n-                ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n+        return isArray\n+            // ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n+         ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n                 : writeExpressions(builder.append(\"ROW (\"), list, sqlFlags).append(')');\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/styler/05_predictions/three_grams/files-repaired/95/ExpressionList.java\nindex 2258029f229..c2e9113d8af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/violations/95/ExpressionList.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/h2database-h2database/styler/05_predictions/three_grams/files-repaired/95/ExpressionList.java\n@@ -82,8 +82,10 @@ public final class ExpressionList extends Expression {\n \n     @Override\n     public StringBuilder getUnenclosedSQL(StringBuilder builder, int sqlFlags) {\n-        return isArray //\n-                ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n+        return isArray\n+\n+        //\n+                 ? writeExpressions(builder.append(\"ARRAY [\"), list, sqlFlags).append(']')\n                 : writeExpressions(builder.append(\"ROW (\"), list, sqlFlags).append(')');\n     }\n \n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}