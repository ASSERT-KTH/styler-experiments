{
    "project_name": "wso2-attic-commons",
    "violation_id": "208",
    "information": {
        "violations": [
            {
                "line": "22",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 141).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\t\t\n\n\t\tConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\");\n\t\tOMElement payload = createPayLoad();\n\t\tServiceClient serviceclient = new ServiceClient(cc, null);   \n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/208/RequestReplyAddressableSOAP11.java\nindex e2726ea45f5..ddfc0938c0d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/208/RequestReplyAddressableSOAP11.java\n@@ -17,9 +17,9 @@ import org.apache.axis2.context.ConfigurationContextFactory;\n public class RequestReplyAddressableSOAP11 {\n \n \tpublic static void main(String[] args)throws AxisFault {\n-\t\t\n \n-\t\tConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\");\n+ConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]\n+ + \"/axis2.xml\");\n \t\tOMElement payload = createPayLoad();\n \t\tServiceClient serviceclient = new ServiceClient(cc, null);   \n \n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/208/RequestReplyAddressableSOAP11.java\nindex e2726ea45f5..868bd9cb737 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/208/RequestReplyAddressableSOAP11.java\n@@ -16,68 +16,69 @@ import org.apache.axis2.context.ConfigurationContextFactory;\n \n public class RequestReplyAddressableSOAP11 {\n \n-\tpublic static void main(String[] args)throws AxisFault {\n-\t\t\n-\n-\t\tConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\");\n-\t\tOMElement payload = createPayLoad();\n-\t\tServiceClient serviceclient = new ServiceClient(cc, null);   \n-\n-\t\tOptions opts = new Options();\n-\t\topts.setTo(new EndpointReference(args[2]+\"/RMProxy\"));\n-\t\topts.setAction(\"urn:add\");\n-\t\topts.setUseSeparateListener(true);\n-\n-\t\tserviceclient.setOptions(opts);\n-\t\tserviceclient.engageModule(\"Mercury\");\n-\t\tserviceclient.engageModule(\"addressing\");\n-\n-\n-\t\tfor (int i = 0; i < 4; i++) {\n-\t\t\ttry {\n-\t\t\t\tOMElement response = serviceclient.sendReceive(payload);\n-\t\t\t\tSystem.out.println(response);\n-\t\t\t} catch (RemoteException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tThread.sleep(1000);\n-\t\t\t} catch (InterruptedException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\n-\t\t}\n-\t\t\t//Setting the last message\n-\t\t\tserviceclient.getOptions().setProperty(\"MercuryLastMessage\", Constants.VALUE_TRUE);\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tOMElement response = serviceclient.sendReceive(payload);\t\n-\t\t\t} catch (RemoteException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tThread.sleep(5000);\n-\t\t\t} catch (InterruptedException e) {\n-\t\t\t\te.printStackTrace();\n-\t\t\t}\n-\t\t\tcc.getListenerManager().stop();\n-\t}\n-\n-\tpublic static OMElement createPayLoad(){\n-\t\tOMFactory fac = OMAbstractFactory.getOMFactory();\n-\t\tOMNamespace omNs = fac.createOMNamespace(\"http://service.esb.wso2.org\", \"ns\");\n-\t\tOMElement method = fac.createOMElement(\"add\", omNs);\n-\t\tOMElement value1 = fac.createOMElement(\"x\", omNs);\n-\t\tOMElement value2 = fac.createOMElement(\"y\", omNs);\n-\n-\t\tvalue1.addChild(fac.createOMText(value1, \"10\"));\n-\t\tvalue2.addChild(fac.createOMText(value2, \"10\"));\n-\t\tmethod.addChild(value1);\n-\t\tmethod.addChild(value2);\n-\n-\t\treturn method;\n-\t}\n+  public static void main(String[] args) throws AxisFault {\n+\n+\n+    ConfigurationContext cc =\n+      ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0], args[1] + \"/axis2.xml\");\n+    OMElement payload = createPayLoad();\n+    ServiceClient serviceclient = new ServiceClient(cc, null);\n+\n+    Options opts = new Options();\n+    opts.setTo(new EndpointReference(args[2] + \"/RMProxy\"));\n+    opts.setAction(\"urn:add\");\n+    opts.setUseSeparateListener(true);\n+\n+    serviceclient.setOptions(opts);\n+    serviceclient.engageModule(\"Mercury\");\n+    serviceclient.engageModule(\"addressing\");\n+\n+\n+    for (int i = 0; i < 4; i++) {\n+      try {\n+        OMElement response = serviceclient.sendReceive(payload);\n+        System.out.println(response);\n+      } catch (RemoteException e) {\n+        e.printStackTrace();\n+      }\n+\n+      try {\n+        Thread.sleep(1000);\n+      } catch (InterruptedException e) {\n+        e.printStackTrace();\n+      }\n+\n+    }\n+    //Setting the last message\n+    serviceclient.getOptions().setProperty(\"MercuryLastMessage\", Constants.VALUE_TRUE);\n+\n+    try {\n+      OMElement response = serviceclient.sendReceive(payload);\n+    } catch (RemoteException e) {\n+      e.printStackTrace();\n+    }\n+\n+    try {\n+      Thread.sleep(5000);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();\n+    }\n+    cc.getListenerManager().stop();\n+  }\n+\n+  public static OMElement createPayLoad() {\n+    OMFactory fac = OMAbstractFactory.getOMFactory();\n+    OMNamespace omNs = fac.createOMNamespace(\"http://service.esb.wso2.org\", \"ns\");\n+    OMElement method = fac.createOMElement(\"add\", omNs);\n+    OMElement value1 = fac.createOMElement(\"x\", omNs);\n+    OMElement value2 = fac.createOMElement(\"y\", omNs);\n+\n+    value1.addChild(fac.createOMText(value1, \"10\"));\n+    value2.addChild(fac.createOMText(value2, \"10\"));\n+    method.addChild(value1);\n+    method.addChild(value2);\n+\n+    return method;\n+  }\n }\n \n",
            "diff_size": 64
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "20",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/208/RequestReplyAddressableSOAP11.java\nindex e2726ea45f5..1be2ebc22ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/208/RequestReplyAddressableSOAP11.java\n@@ -16,49 +16,43 @@ import org.apache.axis2.context.ConfigurationContextFactory;\n \n public class RequestReplyAddressableSOAP11 {\n \n-\tpublic static void main(String[] args)throws AxisFault {\n-\t\t\n-\n-\t\tConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\");\n+\tpublic static void main(String[] args) throws AxisFault {\n+ConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\");\n \t\tOMElement payload = createPayLoad();\n-\t\tServiceClient serviceclient = new ServiceClient(cc, null);   \n-\n-\t\tOptions opts = new Options();\n-\t\topts.setTo(new EndpointReference(args[2]+\"/RMProxy\"));\n+\t\tServiceClient serviceclient = new ServiceClient(cc, null);\n+Options opts = new Options();\n+opts.setTo(new EndpointReference(args[2]+\"/RMProxy\"));\n \t\topts.setAction(\"urn:add\");\n \t\topts.setUseSeparateListener(true);\n \n \t\tserviceclient.setOptions(opts);\n \t\tserviceclient.engageModule(\"Mercury\");\n \t\tserviceclient.engageModule(\"addressing\");\n-\n-\n-\t\tfor (int i = 0; i < 4; i++) {\n+for (int i = 0; i < 4; i++) {\n \t\t\ttry {\n \t\t\t\tOMElement response = serviceclient.sendReceive(payload);\n \t\t\t\tSystem.out.println(response);\n \t\t\t} catch (RemoteException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tThread.sleep(1000);\n+\n+try {\n+    Thread.sleep(1000);\n \t\t\t} catch (InterruptedException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \n \t\t}\n-\t\t\t//Setting the last message\n+//Setting the last message\n \t\t\tserviceclient.getOptions().setProperty(\"MercuryLastMessage\", Constants.VALUE_TRUE);\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tOMElement response = serviceclient.sendReceive(payload);\t\n-\t\t\t} catch (RemoteException e) {\n+try {\n+    OMElement response = serviceclient.sendReceive(payload);\n+    } catch (RemoteException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n-\t\t\t\n-\t\t\ttry {\n-\t\t\t\tThread.sleep(5000);\n+\n+try {\n+    Thread.sleep(5000);\n \t\t\t} catch (InterruptedException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n@@ -79,5 +73,4 @@ public class RequestReplyAddressableSOAP11 {\n \n \t\treturn method;\n \t}\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/208/RequestReplyAddressableSOAP11.java\nindex e2726ea45f5..ddfc0938c0d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/208/RequestReplyAddressableSOAP11.java\n@@ -17,9 +17,9 @@ import org.apache.axis2.context.ConfigurationContextFactory;\n public class RequestReplyAddressableSOAP11 {\n \n \tpublic static void main(String[] args)throws AxisFault {\n-\t\t\n \n-\t\tConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\");\n+ConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]\n+ + \"/axis2.xml\");\n \t\tOMElement payload = createPayLoad();\n \t\tServiceClient serviceclient = new ServiceClient(cc, null);   \n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/208/RequestReplyAddressableSOAP11.java\nindex e2726ea45f5..17888f59a78 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/208/RequestReplyAddressableSOAP11.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/208/RequestReplyAddressableSOAP11.java\n@@ -17,10 +17,9 @@ import org.apache.axis2.context.ConfigurationContextFactory;\n public class RequestReplyAddressableSOAP11 {\n \n \tpublic static void main(String[] args)throws AxisFault {\n-\t\t\n \n-\t\tConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\");\n-\t\tOMElement payload = createPayLoad();\n+     ConfigurationContext cc = ConfigurationContextFactory.createConfigurationContextFromFileSystem(args[0],args[1]+\"/axis2.xml\")\n+ ; OMElement payload = createPayLoad();\n \t\tServiceClient serviceclient = new ServiceClient(cc, null);   \n \n \t\tOptions opts = new Options();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}