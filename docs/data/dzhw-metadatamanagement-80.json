{
    "project_name": "dzhw-metadatamanagement",
    "violation_id": "80",
    "information": {
        "violations": [
            {
                "line": "24",
                "column": "63",
                "severity": "error",
                "message": "'}' at column 63 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidDataType constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/80/ValidDataTypeValidator.java\nindex 65d5e4eeade..1e1369fa95e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/80/ValidDataTypeValidator.java\n@@ -21,7 +21,9 @@ public class ValidDataTypeValidator implements ConstraintValidator<ValidDataType\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidDataType constraintAnnotation) {}\n+  public void initialize(ValidDataType constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/80/ValidDataTypeValidator.java\nindex 65d5e4eeade..f9f6206a658 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/80/ValidDataTypeValidator.java\n@@ -9,29 +9,29 @@ import eu.dzhw.fdz.metadatamanagement.surveymanagement.domain.DataTypes;\n /**\n  * Validator for the data type of a variable. Only valued from the {@link DataTypes} class are\n  * allowed.\n- * \n- * @author Daniel Katzberg\n  *\n+ * @author Daniel Katzberg\n  */\n public class ValidDataTypeValidator implements ConstraintValidator<ValidDataType, I18nString> {\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidDataType constraintAnnotation) {}\n+  public void initialize(ValidDataType constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n   @Override\n-  public boolean isValid(I18nString dataType, ConstraintValidatorContext context) {   \n-    \n+  public boolean isValid(I18nString dataType, ConstraintValidatorContext context) {\n+\n     // check for data types\n     return DataTypes.ALL.contains(dataType);\n   }\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "'ConstraintValidatorContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/80/ValidDataTypeValidator.java\nindex 65d5e4eeade..de73b8dc082 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/80/ValidDataTypeValidator.java\n@@ -2,7 +2,6 @@ package eu.dzhw.fdz.metadatamanagement.surveymanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import eu.dzhw.fdz.metadatamanagement.common.domain.I18nString;\n import eu.dzhw.fdz.metadatamanagement.surveymanagement.domain.DataTypes;\n \n@@ -13,6 +12,8 @@ import eu.dzhw.fdz.metadatamanagement.surveymanagement.domain.DataTypes;\n  * @author Daniel Katzberg\n  *\n  */\n+\n+\n public class ValidDataTypeValidator implements ConstraintValidator<ValidDataType, I18nString> {\n \n   /*\n@@ -20,8 +21,11 @@ public class ValidDataTypeValidator implements ConstraintValidator<ValidDataType\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n+\n   @Override\n-  public void initialize(ValidDataType constraintAnnotation) {}\n+  public void initialize(ValidDataType constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n@@ -29,11 +33,13 @@ public class ValidDataTypeValidator implements ConstraintValidator<ValidDataType\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n+\n+\n   @Override\n-  public boolean isValid(I18nString dataType, ConstraintValidatorContext context) {   \n+  public boolean isValid(I18nString dataType,\n+    ConstraintValidatorContext context) {   \n     \n     // check for data types\n     return DataTypes.ALL.contains(dataType);\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/80/ValidDataTypeValidator.java\nindex 65d5e4eeade..1e1369fa95e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/80/ValidDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/80/ValidDataTypeValidator.java\n@@ -21,7 +21,9 @@ public class ValidDataTypeValidator implements ConstraintValidator<ValidDataType\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidDataType constraintAnnotation) {}\n+  public void initialize(ValidDataType constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "24",
                    "column": "63",
                    "severity": "error",
                    "message": "'}' at column 63 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}