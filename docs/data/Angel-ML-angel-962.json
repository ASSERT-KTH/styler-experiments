{
    "project_name": "Angel-ML-angel",
    "violation_id": "962",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/962/ArgsParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/962/ArgsParser.java\nindex 88db330091f..89aa3deb39d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/962/ArgsParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/962/ArgsParser.java\n@@ -22,23 +22,23 @@ import org.apache.hadoop.conf.Configuration;\n \n public class ArgsParser {\n \n-  private static final Log LOG = LogFactory.getLog(ArgsParser.class);\n-  public static final String KEY_VALUE_SEP = \":\";\n+    private static final Log LOG = LogFactory.getLog(ArgsParser.class);\n+    public static final String KEY_VALUE_SEP = \":\";\n \n-  public static Configuration parse(String[] args) {\n-    Configuration cmdArgs = new Configuration();\n-    for (int i = 0; i < args.length; i++) {\n-      String argv = args[i];\n-      int sepIdx = argv.indexOf(KEY_VALUE_SEP);\n-      if (sepIdx != -1) {\n-        String k = argv.substring(0, sepIdx).trim();\n-        String v = argv.substring(sepIdx + 1).trim();\n-        if (v != \"\" && v != \"Nan\" && v != null) {\n-          cmdArgs.set(k, v);\n-          LOG.info(\"Argument: \" + k + \" -> \" + v);\n+    public static Configuration parse(String[] args) {\n+        Configuration cmdArgs = new Configuration();\n+        for (int i = 0; i < args.length; i++) {\n+            String argv = args[i];\n+            int sepIdx = argv.indexOf(KEY_VALUE_SEP);\n+            if (sepIdx != -1) {\n+                String k = argv.substring(0, sepIdx).trim();\n+                String v = argv.substring(sepIdx + 1).trim();\n+                if (v != \"\" && v != \"Nan\" && v != null) {\n+                    cmdArgs.set(k, v);\n+                    LOG.info(\"Argument: \" + k + \" -> \" + v);\n+                }\n+            }\n         }\n-      }\n+        return cmdArgs;\n     }\n-    return cmdArgs;\n-  }\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/962/ArgsParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/962/ArgsParser.java\nindex 88db330091f..c8ee213ecaf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/962/ArgsParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/962/ArgsParser.java\n@@ -41,4 +41,4 @@ public class ArgsParser {\n     }\n     return cmdArgs;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/962/ArgsParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/962/ArgsParser.java\nindex 88db330091f..8e933c400c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/962/ArgsParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/962/ArgsParser.java\n@@ -23,6 +23,7 @@ import org.apache.hadoop.conf.Configuration;\n public class ArgsParser {\n \n   private static final Log LOG = LogFactory.getLog(ArgsParser.class);\n+\n   public static final String KEY_VALUE_SEP = \":\";\n \n   public static Configuration parse(String[] args) {\n@@ -41,4 +42,5 @@ public class ArgsParser {\n     }\n     return cmdArgs;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}