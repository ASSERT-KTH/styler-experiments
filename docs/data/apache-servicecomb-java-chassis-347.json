{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "347",
    "information": {
        "violations": [
            {
                "line": "179",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        LOGGER\n            .warn(\n                \"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n                key, cseKey);\n      }\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/347/ConfigUtil.java\nindex 8f8922dcb90..7c7dd62ad35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/347/ConfigUtil.java\n@@ -175,9 +175,8 @@ public final class ConfigUtil {\n         source.addProperty(cseKey, source.getProperty(key));\n       } else {\n         LOGGER\n-            .warn(\n-                \"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n-                key, cseKey);\n+            .warn(\"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n+            key, cseKey);\n       }\n     }\n   }\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/347/ConfigUtil.java\nindex 8f8922dcb90..f358667aa39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/347/ConfigUtil.java\n@@ -183,16 +183,16 @@ public final class ConfigUtil {\n   }\n \n   private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+                                                      AbstractConfiguration source,\n+                                                      String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n \n     compositeConfiguration.addConfiguration(source, sourceName);\n   }\n \n   private static void duplicateServiceCombConfigToCseAtFront(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+                                                             AbstractConfiguration source,\n+                                                             String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n \n     compositeConfiguration.addConfigurationAtFront(source, sourceName);\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/347/ConfigUtil.java\nindex 8f8922dcb90..b968401f0cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/347/ConfigUtil.java\n@@ -130,7 +130,7 @@ public final class ConfigUtil {\n     duplicateServiceCombConfigToCse(config,\n         convertEnvVariable(new ConcurrentMapConfiguration(new EnvironmentConfiguration())),\n         \"configFromEnvironment\");\n-    // If there is extra configurations, add it into config.\n+// If there is extra configurations, add it into config.\n     EXTRA_CONFIG_MAP.entrySet()\n         .stream()\n         .filter(mapEntry -> !mapEntry.getValue().isEmpty())\n@@ -183,16 +183,14 @@ public final class ConfigUtil {\n   }\n \n   private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+      AbstractConfiguration source, String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n \n     compositeConfiguration.addConfiguration(source, sourceName);\n   }\n \n   private static void duplicateServiceCombConfigToCseAtFront(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+      AbstractConfiguration source, String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n \n     compositeConfiguration.addConfigurationAtFront(source, sourceName);\n@@ -216,8 +214,7 @@ public final class ConfigUtil {\n   }\n \n   private static void createDynamicWatchedConfiguration(\n-      ConcurrentCompositeConfiguration localConfiguration,\n-      ConfigCenterConfigurationSource configCenterConfigurationSource) {\n+      ConcurrentCompositeConfiguration localConfiguration, ConfigCenterConfigurationSource configCenterConfigurationSource) {\n     ConcurrentMapConfiguration injectConfig = new ConcurrentMapConfiguration();\n     localConfiguration.addConfigurationAtFront(injectConfig, \"extraInjectConfig\");\n     configCenterConfigurationSource.addUpdateListener(new ServiceCombPropertyUpdateListener(injectConfig));\n@@ -316,4 +313,4 @@ public final class ConfigUtil {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "175",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "211",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "232",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/347/ConfigUtil.java\nindex 8f8922dcb90..c595f283317 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/347/ConfigUtil.java\n@@ -26,7 +26,6 @@ import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.commons.configuration.AbstractConfiguration;\n import org.apache.commons.configuration.Configuration;\n import org.apache.commons.configuration.EnvironmentConfiguration;\n@@ -39,7 +38,6 @@ import org.apache.servicecomb.config.spi.ConfigCenterConfigurationSource;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.netflix.config.ConcurrentCompositeConfiguration;\n import com.netflix.config.ConcurrentMapConfiguration;\n import com.netflix.config.ConfigurationManager;\n@@ -64,6 +62,7 @@ public final class ConfigUtil {\n    * this can help {@link ConfigUtil} load config correctly.\n    * </p>\n    */\n+\n   private static final Map<String, Map<String, Object>> EXTRA_CONFIG_MAP = new LinkedHashMap<>();\n \n   private ConfigUtil() {\n@@ -123,26 +122,23 @@ public final class ConfigUtil {\n \n   public static ConcurrentCompositeConfiguration createLocalConfig(List<ConfigModel> configModelList) {\n     ConcurrentCompositeConfiguration config = new ConcurrentCompositeConfiguration();\n-\n     duplicateServiceCombConfigToCse(config,\n-        new ConcurrentMapConfiguration(new SystemConfiguration()),\n+      new ConcurrentMapConfiguration(new SystemConfiguration()),\n         \"configFromSystem\");\n     duplicateServiceCombConfigToCse(config,\n-        convertEnvVariable(new ConcurrentMapConfiguration(new EnvironmentConfiguration())),\n+      convertEnvVariable(new ConcurrentMapConfiguration(new EnvironmentConfiguration())),\n         \"configFromEnvironment\");\n     // If there is extra configurations, add it into config.\n-    EXTRA_CONFIG_MAP.entrySet()\n-        .stream()\n-        .filter(mapEntry -> !mapEntry.getValue().isEmpty())\n-        .forEachOrdered(configMapEntry -> duplicateServiceCombConfigToCse(config,\n-            new ConcurrentMapConfiguration(configMapEntry.getValue()),\n-            configMapEntry.getKey()));\n+    EXTRA_CONFIG_MAP.entrySet().stream()\n+                               .filter(mapEntry -> !mapEntry.getValue().isEmpty()).forEachOrdered(configMapEntry -> duplicateServiceCombConfigToCse(config,\n+new ConcurrentMapConfiguration(configMapEntry.getValue()),\n+configMapEntry.getKey()));\n     duplicateServiceCombConfigToCse(config,\n-        new DynamicConfiguration(\n-            new MicroserviceConfigurationSource(configModelList), new NeverStartPollingScheduler()),\n-        \"configFromYamlFile\");\n+      new DynamicConfiguration(new MicroserviceConfigurationSource(configModelList),\n+        new NeverStartPollingScheduler()),\n+          \"configFromYamlFile\");\n     duplicateServiceCombConfigToCseAtFront(config,\n-        new ConcurrentMapConfiguration(ConfigMapping.getConvertedMap(config)),\n+      new ConcurrentMapConfiguration(ConfigMapping.getConvertedMap(config)),\n         \"configFromMapping\");\n     return config;\n   }\n@@ -155,6 +151,7 @@ public final class ConfigUtil {\n       if (separatedKey.length == 1) {\n         continue;\n       }\n+\n       String newKey = String.join(\".\", separatedKey);\n       source.addProperty(newKey, source.getProperty(key));\n     }\n@@ -162,6 +159,7 @@ public final class ConfigUtil {\n   }\n \n   //inject a copy of cse.xxx for servicecomb.xxx\n+\n   private static void duplicateServiceCombConfigToCse(AbstractConfiguration source) {\n     Iterator<String> keys = source.getKeys();\n     while (keys.hasNext()) {\n@@ -174,37 +172,27 @@ public final class ConfigUtil {\n       if (!source.containsKey(cseKey)) {\n         source.addProperty(cseKey, source.getProperty(key));\n       } else {\n-        LOGGER\n-            .warn(\n-                \"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n-                key, cseKey);\n+        LOGGER.warn(\"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n+key,\n+cseKey);\n       }\n     }\n   }\n \n-  private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+  private static void duplicateServiceCombConfigToCse(ConcurrentCompositeConfiguration compositeConfiguration, AbstractConfiguration source, String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n-\n     compositeConfiguration.addConfiguration(source, sourceName);\n   }\n \n-  private static void duplicateServiceCombConfigToCseAtFront(ConcurrentCompositeConfiguration compositeConfiguration,\n-      AbstractConfiguration source,\n-      String sourceName) {\n+  private static void duplicateServiceCombConfigToCseAtFront(ConcurrentCompositeConfiguration compositeConfiguration, AbstractConfiguration source, String sourceName) {\n     duplicateServiceCombConfigToCse(source);\n-\n     compositeConfiguration.addConfigurationAtFront(source, sourceName);\n   }\n \n-  private static ConfigCenterConfigurationSource createConfigCenterConfigurationSource(\n-      Configuration localConfiguration) {\n-    ConfigCenterConfigurationSource configCenterConfigurationSource =\n-        SPIServiceUtils.getTargetService(ConfigCenterConfigurationSource.class);\n+  private static ConfigCenterConfigurationSource createConfigCenterConfigurationSource(Configuration localConfiguration) {\n+    ConfigCenterConfigurationSource configCenterConfigurationSource = SPIServiceUtils.getTargetService(ConfigCenterConfigurationSource.class);\n     if (null == configCenterConfigurationSource) {\n-      LOGGER.info(\n-          \"config center SPI service can not find, skip to load configuration from config center\");\n+      LOGGER.info(\"config center SPI service can not find, skip to load configuration from config center\");\n       return null;\n     }\n \n@@ -215,23 +203,19 @@ public final class ConfigUtil {\n     return configCenterConfigurationSource;\n   }\n \n-  private static void createDynamicWatchedConfiguration(\n-      ConcurrentCompositeConfiguration localConfiguration,\n-      ConfigCenterConfigurationSource configCenterConfigurationSource) {\n+  private static void createDynamicWatchedConfiguration(ConcurrentCompositeConfiguration localConfiguration, ConfigCenterConfigurationSource configCenterConfigurationSource) {\n     ConcurrentMapConfiguration injectConfig = new ConcurrentMapConfiguration();\n     localConfiguration.addConfigurationAtFront(injectConfig, \"extraInjectConfig\");\n     configCenterConfigurationSource.addUpdateListener(new ServiceCombPropertyUpdateListener(injectConfig));\n \n-    DynamicWatchedConfiguration configFromConfigCenter =\n-        new DynamicWatchedConfiguration(configCenterConfigurationSource);\n+    DynamicWatchedConfiguration configFromConfigCenter = new DynamicWatchedConfiguration(configCenterConfigurationSource);\n     duplicateServiceCombConfigToCse(configFromConfigCenter);\n     localConfiguration.addConfigurationAtFront(configFromConfigCenter, \"configCenterConfig\");\n   }\n \n   public static AbstractConfiguration createDynamicConfig() {\n     ConcurrentCompositeConfiguration compositeConfig = ConfigUtil.createLocalConfig();\n-    ConfigCenterConfigurationSource configCenterConfigurationSource =\n-        createConfigCenterConfigurationSource(compositeConfig);\n+    ConfigCenterConfigurationSource configCenterConfigurationSource = createConfigCenterConfigurationSource(compositeConfig);\n     if (configCenterConfigurationSource != null) {\n       createDynamicWatchedConfiguration(compositeConfig, configCenterConfigurationSource);\n     }\n@@ -245,14 +229,12 @@ public final class ConfigUtil {\n     }\n \n     ConcurrentCompositeConfiguration compositeConfig = ConfigUtil.createLocalConfig();\n-    ConfigCenterConfigurationSource configCenterConfigurationSource =\n-        createConfigCenterConfigurationSource(compositeConfig);\n+    ConfigCenterConfigurationSource configCenterConfigurationSource = createConfigCenterConfigurationSource(compositeConfig);\n     if (configCenterConfigurationSource != null) {\n       createDynamicWatchedConfiguration(compositeConfig, configCenterConfigurationSource);\n     }\n \n     ConfigurationManager.install(compositeConfig);\n-\n     if (configCenterConfigurationSource != null) {\n       configCenterConfigurationSource.init(compositeConfig);\n     }\n@@ -277,7 +259,6 @@ public final class ConfigUtil {\n   }\n \n   private static class ServiceCombPropertyUpdateListener implements WatchedUpdateListener {\n-\n     private final ConcurrentMapConfiguration injectConfig;\n \n     ServiceCombPropertyUpdateListener(ConcurrentMapConfiguration injectConfig) {\n@@ -316,4 +297,4 @@ public final class ConfigUtil {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/347/ConfigUtil.java\nindex 8f8922dcb90..7c7dd62ad35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/347/ConfigUtil.java\n@@ -175,9 +175,8 @@ public final class ConfigUtil {\n         source.addProperty(cseKey, source.getProperty(key));\n       } else {\n         LOGGER\n-            .warn(\n-                \"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n-                key, cseKey);\n+            .warn(\"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n+            key, cseKey);\n       }\n     }\n   }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "column": "120",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/347/ConfigUtil.java\nindex 8f8922dcb90..d717b889cd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/347/ConfigUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/347/ConfigUtil.java\n@@ -176,8 +176,7 @@ public final class ConfigUtil {\n       } else {\n         LOGGER\n             .warn(\n-                \"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",\n-                key, cseKey);\n+            \"Key {} with an ambiguous item {} exists, please use the same prefix or will get unexpected merged value.\",key, cseKey);\n       }\n     }\n   }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}