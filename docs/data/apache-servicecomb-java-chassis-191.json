{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "191",
    "information": {
        "violations": [
            {
                "line": "151",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    } catch (URISyntaxException e) {\n      throw new ServiceCombException(\n          \"current service center not support encoded endpoint, please do not use chinese or space or anything need to be encoded.\",\n          e);\n    }\n    return addressWithoutSchema;",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/191/AbstractTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/191/AbstractTransport.java\nindex a02f14e0086..d0964e633a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/191/AbstractTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/191/AbstractTransport.java\n@@ -92,7 +92,7 @@ public abstract class AbstractTransport implements Transport {\n    * addressWithoutSchema \u914d\u7f6e\u7684URI\uff0c\u6ca1\u6709schema\u90e8\u5206\n    */\n   protected void setListenAddressWithoutSchema(String addressWithoutSchema,\n-      Map<String, String> pairs) {\n+                                               Map<String, String> pairs) {\n     addressWithoutSchema = genAddressWithoutSchema(addressWithoutSchema, pairs);\n \n     this.endpoint = new Endpoint(this, NetUtils.getRealListenAddress(getName(), addressWithoutSchema));\n@@ -164,9 +164,8 @@ public abstract class AbstractTransport implements Transport {\n \n   /**\n    * Handles the request timeout configurations.\n-   * \n-   * @param invocation\n-   *            invocation of request\n+   *\n+   * @param invocation invocation of request\n    * @return configuration value\n    */\n   public static long getReqTimeout(Invocation invocation) {\n@@ -205,6 +204,7 @@ public abstract class AbstractTransport implements Transport {\n \n   /**\n    * Get the configuration value\n+   *\n    * @param config config parameter\n    * @return long value\n    */\n@@ -229,6 +229,7 @@ public abstract class AbstractTransport implements Transport {\n \n   /**\n    * Get the configuration value\n+   *\n    * @param config config parameter\n    * @return long value\n    */\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/191/AbstractTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/191/AbstractTransport.java\nindex a02f14e0086..1d7de57adb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/191/AbstractTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/191/AbstractTransport.java\n@@ -240,4 +240,4 @@ public abstract class AbstractTransport implements Transport {\n \n     return getConfigParam(config, REQUEST_TIMEOUT_CFG_FAIL);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "212",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/191/AbstractTransport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/191/AbstractTransport.java\nindex a02f14e0086..aa3950eb2f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/191/AbstractTransport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/191/AbstractTransport.java\n@@ -25,7 +25,6 @@ import java.nio.charset.StandardCharsets;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicLong;\n import java.util.stream.Collectors;\n-\n import org.apache.http.client.utils.URLEncodedUtils;\n import org.apache.http.message.BasicNameValuePair;\n import org.apache.servicecomb.core.Const;\n@@ -40,10 +39,8 @@ import org.apache.servicecomb.foundation.vertx.VertxUtils;\n import org.apache.servicecomb.serviceregistry.RegistryUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.netflix.config.DynamicLongProperty;\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.vertx.core.Vertx;\n \n public abstract class AbstractTransport implements Transport {\n@@ -52,9 +49,11 @@ public abstract class AbstractTransport implements Transport {\n   private static final String CONSUMER_REQUEST_TIMEOUT = \"cse.request.timeout\";\n \n   // key is configuration parameter.\n+\n   private static Map<String, String> cfgCallback = new ConcurrentHashMapEx<>();\n \n   // key is config paramter\n+\n   private static Map<String, AtomicLong> configCenterValue = new ConcurrentHashMapEx<>();\n \n   private static final long REQUEST_TIMEOUT_CFG_FAIL = -1;\n@@ -62,11 +61,13 @@ public abstract class AbstractTransport implements Transport {\n   /*\n    * \u7528\u4e8e\u53c2\u6570\u4f20\u9012\uff1a\u6bd4\u5982\u5411RestServerVerticle\u4f20\u9012endpoint\u5730\u5740\u3002\n    */\n+\n   public static final String ENDPOINT_KEY = \"cse.endpoint\";\n \n   private static final long DEFAULT_TIMEOUT_MILLIS = 30000;\n \n   // \u6240\u6709transport\u4f7f\u7528\u540c\u4e00\u4e2avertx\u5b9e\u4f8b\uff0c\u907f\u514d\u521b\u5efa\u592a\u591a\u7684\u7ebf\u7a0b\n+\n   protected Vertx transportVertx = VertxUtils.getOrCreateVertxByName(\"transport\", null);\n \n   protected Endpoint endpoint;\n@@ -91,14 +92,12 @@ public abstract class AbstractTransport implements Transport {\n    * \u5c06\u914d\u7f6e\u7684URI\u8f6c\u6362\u4e3aendpoint\n    * addressWithoutSchema \u914d\u7f6e\u7684URI\uff0c\u6ca1\u6709schema\u90e8\u5206\n    */\n-  protected void setListenAddressWithoutSchema(String addressWithoutSchema,\n-      Map<String, String> pairs) {\n-    addressWithoutSchema = genAddressWithoutSchema(addressWithoutSchema, pairs);\n \n+  protected void setListenAddressWithoutSchema(String addressWithoutSchema, Map<String, String> pairs) {\n+    addressWithoutSchema = genAddressWithoutSchema(addressWithoutSchema, pairs);\n     this.endpoint = new Endpoint(this, NetUtils.getRealListenAddress(getName(), addressWithoutSchema));\n     if (this.endpoint.getEndpoint() != null) {\n-      this.publishEndpoint = new Endpoint(this, RegistryUtils.getPublishAddress(getName(),\n-          addressWithoutSchema));\n+      this.publishEndpoint = new Endpoint(this, RegistryUtils.getPublishAddress(getName(), addressWithoutSchema));\n     } else {\n       this.publishEndpoint = null;\n     }\n@@ -116,16 +115,17 @@ public abstract class AbstractTransport implements Transport {\n       addressWithoutSchema += \"&\";\n     }\n \n-    String encodedQuery = URLEncodedUtils.format(pairs.entrySet().stream().map(entry -> {\n-      return new BasicNameValuePair(entry.getKey(), entry.getValue());\n-    }).collect(Collectors.toList()), StandardCharsets.UTF_8.name());\n-\n-    if (!RegistryUtils.getServiceRegistry().getFeatures().isCanEncodeEndpoint()) {\n+    String encodedQuery = URLEncodedUtils.format(pairs.entrySet().stream()\n+                                                                 .map(entry -> {\n+                                                                   return new BasicNameValuePair(entry.getKey(), entry.getValue());\n+                                                                 })\n+                                                                 .collect(Collectors.toList()), StandardCharsets.UTF_8.name());\n+    if (!RegistryUtils.getServiceRegistry().getFeatures()\n+                                           .isCanEncodeEndpoint()) {\n       addressWithoutSchema = genAddressWithoutSchemaForOldSC(addressWithoutSchema, encodedQuery);\n     } else {\n       addressWithoutSchema += encodedQuery;\n     }\n-\n     return addressWithoutSchema;\n   }\n \n@@ -134,8 +134,8 @@ public abstract class AbstractTransport implements Transport {\n     // sdk must query service center's version, and determine if encode query\n     // traced by JAV-307\n     try {\n-      LOGGER.warn(\"Service center do not support encoded query, so we use unencoded query, \"\n-          + \"this caused not support chinese/space (and maybe other char) in query value.\");\n+      LOGGER.warn(\"Service center do not support encoded query, so we use unencoded query, \" + \"this caused not support chinese/space (and maybe other char) in query value.\");\n+\n       String decodedQuery = URLDecoder.decode(encodedQuery, StandardCharsets.UTF_8.name());\n       addressWithoutSchema += decodedQuery;\n     } catch (UnsupportedEncodingException e) {\n@@ -147,9 +147,8 @@ public abstract class AbstractTransport implements Transport {\n       // make sure consumer can handle this endpoint\n       new URI(Const.RESTFUL + \"://\" + addressWithoutSchema);\n     } catch (URISyntaxException e) {\n-      throw new ServiceCombException(\n-          \"current service center not support encoded endpoint, please do not use chinese or space or anything need to be encoded.\",\n-          e);\n+      throw new ServiceCombException(\"current service center not support encoded endpoint, please do not use chinese or space or anything need to be encoded.\",\n+        e);\n     }\n     return addressWithoutSchema;\n   }\n@@ -169,6 +168,7 @@ public abstract class AbstractTransport implements Transport {\n    *            invocation of request\n    * @return configuration value\n    */\n+\n   public static long getReqTimeout(Invocation invocation) {\n     long value = 0;\n     String config;\n@@ -177,7 +177,6 @@ public abstract class AbstractTransport implements Transport {\n     String operationName = invocation.getOperationName();\n     String schema = invocation.getSchemaId();\n     String serviceName = invocation.getMicroserviceName();\n-\n     config = CONSUMER_REQUEST_TIMEOUT + \".\" + serviceName + \".\" + schema + \".\" + operationName;\n     value = getConfigValue(config);\n     if ((value != REQUEST_TIMEOUT_CFG_FAIL)) {\n@@ -208,10 +207,9 @@ public abstract class AbstractTransport implements Transport {\n    * @param config config parameter\n    * @return long value\n    */\n-  private static long getConfigParam(String config, long defaultValue) {\n-    DynamicLongProperty dynamicLongProperty = DynamicPropertyFactory.getInstance().getLongProperty(config,\n-        defaultValue);\n \n+  private static long getConfigParam(String config, long defaultValue) {\n+    DynamicLongProperty dynamicLongProperty = DynamicPropertyFactory.getInstance().getLongProperty(config, defaultValue);\n     cfgCallback.computeIfAbsent(config, key -> {\n       dynamicLongProperty.addCallback(() -> {\n         long newValue = dynamicLongProperty.get();\n@@ -223,7 +221,6 @@ public abstract class AbstractTransport implements Transport {\n       });\n       return config;\n     });\n-\n     return dynamicLongProperty.get();\n   }\n \n@@ -232,12 +229,12 @@ public abstract class AbstractTransport implements Transport {\n    * @param config config parameter\n    * @return long value\n    */\n+\n   private static long getConfigValue(String config) {\n     //first need to check in config center map which has high priority.\n     if (configCenterValue.containsKey(config)) {\n       return configCenterValue.get(config).get();\n     }\n-\n     return getConfigParam(config, REQUEST_TIMEOUT_CFG_FAIL);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}