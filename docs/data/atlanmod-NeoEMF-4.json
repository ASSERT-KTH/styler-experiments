{
    "project_name": "atlanmod-NeoEMF",
    "violation_id": "4",
    "information": {
        "violations": [
            {
                "line": "222",
                "column": "73",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    public EClass get() {\n        return checkNotNull(lazyClass.get(),\n                \"Unable to find the EPackage associated with URI: %s. \" +\n                        \"Make sure it is registered in EPackage.Registry.\", uri);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/atlanmod-NeoEMF/styler/05_predictions/final/files-repaired/4/ClassBean.java\nindex 9c524677972..a07f3c16874 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/atlanmod-NeoEMF/styler/05_predictions/final/files-repaired/4/ClassBean.java\n@@ -219,8 +219,7 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+                \"Unable to find the EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "216",
                    "column": "69",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/checkstyle_idea/4/ClassBean.java\nindex 9c524677972..94ef2a916ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/checkstyle_idea/4/ClassBean.java\n@@ -71,10 +71,10 @@ public class ClassBean implements Serializable {\n         this.uri = checkNotNull(uri);\n \n         lazyClass = LazyReference.soft(() ->\n-                Optional.ofNullable(EPackage.Registry.INSTANCE.getEPackage(uri))\n-                        .map(p -> p.getEClassifier(name))\n-                        .map(EClass.class::cast)\n-                        .orElse(null));\n+            Optional.ofNullable(EPackage.Registry.INSTANCE.getEPackage(uri))\n+                .map(p -> p.getEClassifier(name))\n+                .map(EClass.class::cast)\n+                .orElse(null));\n     }\n \n     /**\n@@ -96,9 +96,7 @@ public class ClassBean implements Serializable {\n      *\n      * @param object the object from which the {@link EClass} has to be retrieve with the {@link\n      *               PersistentEObject#eClass()} method\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      * @see #from(EClass)\n      */\n@@ -113,9 +111,7 @@ public class ClassBean implements Serializable {\n      * This method behaves like: {@code of(reference.getName(), reference.getEPackage().getNsURI())}.\n      *\n      * @param eClass the {@link EClass}\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n     @Nonnull\n@@ -129,9 +125,7 @@ public class ClassBean implements Serializable {\n      *\n      * @param name the name of the {@link EClass}\n      * @param uri  the literal representation of the {@link URI} of the {@link EClass}\n-     *\n      * @return a new {@code ClassBean}\n-     *\n      * @throws NullPointerException if any argument is {@code null}\n      */\n     @Nonnull\n@@ -186,10 +180,10 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public Optional<ClassBean> inheritFrom() {\n         return get().getESuperTypes()\n-                .parallelStream()\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .findAny();\n+            .parallelStream()\n+            .filter(c -> !c.isInterface())\n+            .map(ClassBean::from)\n+            .findAny();\n     }\n \n     /**\n@@ -201,14 +195,14 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public Set<ClassBean> inheritedBy() {\n         return get().getEPackage().getEClassifiers()\n-                .parallelStream()\n-                .filter(EClass.class::isInstance)\n-                .map(EClass.class::cast)\n-                .filter(c -> get().isSuperTypeOf(c))\n-                .filter(c -> !c.isAbstract())\n-                .filter(c -> !c.isInterface())\n-                .map(ClassBean::from)\n-                .collect(Collectors.toSet());\n+            .parallelStream()\n+            .filter(EClass.class::isInstance)\n+            .map(EClass.class::cast)\n+            .filter(c -> get().isSuperTypeOf(c))\n+            .filter(c -> !c.isAbstract())\n+            .filter(c -> !c.isInterface())\n+            .map(ClassBean::from)\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n@@ -219,8 +213,8 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+            \"Unable to find the EPackage associated with URI: %s. \" +\n+                \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n@@ -239,7 +233,7 @@ public class ClassBean implements Serializable {\n \n         ClassBean that = ClassBean.class.cast(o);\n         return Objects.equals(name, that.name)\n-                && Objects.equals(uri, that.uri);\n+            && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/naturalize/4/ClassBean.java\nindex 9c524677972..bcc16e33c47 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/naturalize/4/ClassBean.java\n@@ -219,8 +219,7 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+                \"Unable to find the EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n@@ -246,5 +245,4 @@ public class ClassBean implements Serializable {\n     public String toString() {\n         return String.format(\"ClassBean {%s @ %s}\", name, uri);\n     }\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/random/files-repaired/4/ClassBean.java\nindex 9c524677972..a07f3c16874 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/random/files-repaired/4/ClassBean.java\n@@ -219,8 +219,7 @@ public class ClassBean implements Serializable {\n     @Nonnull\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n-                \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+                \"Unable to find the EPackage associated with URI: %s. \" + \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "222",
                    "column": "73",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/three_grams/files-repaired/4/ClassBean.java\nindex 9c524677972..853210bfde8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/violations/4/ClassBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/atlanmod-NeoEMF/styler/05_predictions/three_grams/files-repaired/4/ClassBean.java\n@@ -220,7 +220,7 @@ public class ClassBean implements Serializable {\n     public EClass get() {\n         return checkNotNull(lazyClass.get(),\n                 \"Unable to find the EPackage associated with URI: %s. \" +\n-                        \"Make sure it is registered in EPackage.Registry.\", uri);\n+                    \"Make sure it is registered in EPackage.Registry.\", uri);\n     }\n \n     @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "codebuff",
        "styler_three_grams"
    ]
}