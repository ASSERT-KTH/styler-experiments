{
    "project_name": "neo4j-neo4j",
    "violation_id": "3069",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/3069/CountingLogCheckPointEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/3069/CountingLogCheckPointEvent.java\nindex ae6909f0ae1..bc83c7e5706 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/3069/CountingLogCheckPointEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/3069/CountingLogCheckPointEvent.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.tracer;\n \n import java.util.concurrent.atomic.AtomicLong;\n@@ -36,21 +37,21 @@ class CountingLogCheckPointEvent implements LogCheckPointEvent\n {\n     private final AtomicLong checkpointCounter = new AtomicLong();\n     private final AtomicLong accumulatedCheckpointTotalTimeMillis = new AtomicLong();\n-    private final BiConsumer<LogPosition,LogPosition> logFileAppendConsumer;\n+    private final BiConsumer<LogPosition, LogPosition> logFileAppendConsumer;\n     private final CountingLogRotateEvent countingLogRotateEvent;\n     private volatile long lastCheckpointTimeMillis;\n \n-    CountingLogCheckPointEvent( BiConsumer<LogPosition,LogPosition> logFileAppendConsumer, CountingLogRotateEvent countingLogRotateEvent )\n+    CountingLogCheckPointEvent(BiConsumer<LogPosition, LogPosition> logFileAppendConsumer, CountingLogRotateEvent countingLogRotateEvent)\n     {\n         this.logFileAppendConsumer = logFileAppendConsumer;\n         this.countingLogRotateEvent = countingLogRotateEvent;\n     }\n \n     @Override\n-    public void checkpointCompleted( long checkpointMillis )\n+    public void checkpointCompleted(long checkpointMillis)\n     {\n         checkpointCounter.incrementAndGet();\n-        accumulatedCheckpointTotalTimeMillis.addAndGet( checkpointMillis );\n+        accumulatedCheckpointTotalTimeMillis.addAndGet(checkpointMillis);\n         lastCheckpointTimeMillis = checkpointMillis;\n     }\n \n@@ -61,9 +62,9 @@ class CountingLogCheckPointEvent implements LogCheckPointEvent\n     }\n \n     @Override\n-    public void appendToLogFile( LogPosition positionBeforeCheckpoint, LogPosition positionAfterCheckpoint )\n+    public void appendToLogFile(LogPosition positionBeforeCheckpoint, LogPosition positionAfterCheckpoint)\n     {\n-        logFileAppendConsumer.accept( positionBeforeCheckpoint, positionAfterCheckpoint );\n+        logFileAppendConsumer.accept(positionBeforeCheckpoint, positionAfterCheckpoint);\n     }\n \n     @Override\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}