{
    "project_name": "Angel-ML-angel",
    "violation_id": "70",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "180",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/70/ServerIntDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/70/ServerIntDoubleRow.java\nindex 9b46a048840..c794ccbf0a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/70/ServerIntDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/70/ServerIntDoubleRow.java\n@@ -36,490 +36,497 @@ import java.io.IOException;\n  */\n public class ServerIntDoubleRow extends ServerDoubleRow {\n \n-  /**\n-   * Just a view of \"row\" in ServerRow\n-   */\n-  private IntDoubleVector intDoubleRow;\n-\n-  /**\n-   * Just a view of \"startCol\" in ServerRow\n-   */\n-  private transient int startColInt;\n-\n-  /**\n-   * Just a view of \"endCol\" in ServerRow\n-   */\n-  private transient int endColInt;\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   * @param innerRow inner row\n-   */\n-  public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntDoubleVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-    this.startColInt = startCol;\n-    this.endColInt = endCol;\n-    this.intDoubleRow = (IntDoubleVector) row;\n-  }\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowType row type\n-   */\n-  public ServerIntDoubleRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-   * Get a element value with out lock operation\n-   *\n-   * @param index element index\n-   * @return element value\n-   */\n-  public double get(int index) {\n-    return intDoubleRow.get(index - startColInt);\n-  }\n-\n-  /**\n-   * Set a element value without lock operation\n-   *\n-   * @param index element index\n-   * @param value element new value\n-   */\n-  public void set(int index, double value) {\n-    intDoubleRow.set(index - startColInt, value);\n-  }\n-\n-  /**\n-   * Get a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @return elements values\n-   */\n-  public double[] get(int[] indices) {\n-    double[] values = new double[indices.length];\n-    for (int i = 0; i < indices.length; i++) {\n-      values[i] = intDoubleRow.get(indices[i] - startColInt);\n-    }\n-    return values;\n-  }\n-\n-  /**\n-   * Set a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements values\n-   */\n-  public void set(int[] indices, double[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      intDoubleRow.set(indices[i] - startColInt, values[i]);\n-    }\n-  }\n-\n-  /**\n-   * Add a element value without lock\n-   *\n-   * @param index element index\n-   * @param value element plus value\n-   */\n-  public void addTo(int index, double value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  /**\n-   * Add a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements plus values\n-   */\n-  public void addTo(int[] indices, double[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n-    }\n-  }\n-\n-  /**\n-   * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n-   *\n-   * @return all element values\n-   */\n-  private double[] getValues() {\n-    return intDoubleRow.getStorage().getValues();\n-  }\n-\n-  /**\n-   * Get all element indices and values without lock, you must check the storage is sparse first use\n-   * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n-   *\n-   * @return all element values\n-   */\n-  public ObjectIterator<Int2DoubleMap.Entry> getIter() {\n-    return intDoubleRow.getStorage().entryIterator();\n-  }\n-\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    startWrite();\n-    try {\n-      switch (updateType) {\n-        case T_DOUBLE_SPARSE:\n-        case T_DOUBLE_SPARSE_COMPONENT:\n-          updateUseIntDoubleSparse(buf, op);\n-          break;\n-\n-        case T_FLOAT_SPARSE:\n-        case T_FLOAT_SPARSE_COMPONENT:\n-          updateUseIntFloatSparse(buf, op);\n-          break;\n-\n-        case T_LONG_SPARSE:\n-        case T_LONG_SPARSE_COMPONENT:\n-          updateUseIntLongSparse(buf, op);\n-          break;\n-\n-        case T_INT_SPARSE:\n-        case T_INT_SPARSE_COMPONENT:\n-          updateUseIntIntSparse(buf, op);\n-          break;\n-\n-        case T_DOUBLE_DENSE:\n-        case T_DOUBLE_DENSE_COMPONENT:\n-          updateUseIntDoubleDense(buf, op);\n-          break;\n-\n-        case T_FLOAT_DENSE:\n-        case T_FLOAT_DENSE_COMPONENT:\n-          updateUseIntFloatDense(buf, op);\n-          break;\n-\n-        case T_LONG_DENSE:\n-        case T_LONG_DENSE_COMPONENT:\n-          updateUseIntLongDense(buf, op);\n-          break;\n-\n-        case T_INT_DENSE:\n-        case T_INT_DENSE_COMPONENT:\n-          updateUseIntIntDense(buf, op);\n-          break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+    /**\n+     * Just a view of \"row\" in ServerRow\n+     */\n+    private IntDoubleVector intDoubleRow;\n+\n+    /**\n+     * Just a view of \"startCol\" in ServerRow\n+     */\n+    private transient int startColInt;\n+\n+    /**\n+     * Just a view of \"endCol\" in ServerRow\n+     */\n+    private transient int endColInt;\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     * @param innerRow   inner row\n+     */\n+    public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n+                              IntDoubleVector innerRow) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n+        this.startColInt = startCol;\n+        this.endColInt = endCol;\n+        this.intDoubleRow = (IntDoubleVector) row;\n+    }\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol,\n+                              int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n+    }\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowType row type\n+     */\n+    public ServerIntDoubleRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n+    }\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Get a element value with out lock operation\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public double get(int index) {\n+        return intDoubleRow.get(index - startColInt);\n+    }\n+\n+    /**\n+     * Set a element value without lock operation\n+     *\n+     * @param index element index\n+     * @param value element new value\n+     */\n+    public void set(int index, double value) {\n+        intDoubleRow.set(index - startColInt, value);\n+    }\n+\n+    /**\n+     * Get a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @return elements values\n+     */\n+    public double[] get(int[] indices) {\n+        double[] values = new double[indices.length];\n+        for (int i = 0; i < indices.length; i++) {\n+            values[i] = intDoubleRow.get(indices[i] - startColInt);\n         }\n-      }\n-\n-      updateRowVersion();\n-    } finally {\n-      endWrite();\n-    }\n-  }\n-\n-  private void updateUseIntDoubleDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, intDoubleRow.get(i) + buf.readDouble());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, buf.readDouble());\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, intDoubleRow.get(i) + buf.readFloat());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, buf.readFloat());\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, intDoubleRow.get(i) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, buf.readInt());\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, intDoubleRow.get(i) + buf.readLong());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, buf.readLong());\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntDoubleSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intDoubleRow.set(index, intDoubleRow.get(index) + buf.readDouble());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(buf.readInt(), buf.readDouble());\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intDoubleRow.set(index, intDoubleRow.get(index) + buf.readFloat());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(buf.readInt(), buf.readFloat());\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intDoubleRow.set(index, intDoubleRow.get(index) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(buf.readInt(), buf.readInt());\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        intDoubleRow.set(index, intDoubleRow.get(index) + buf.readLong());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(buf.readInt(), buf.readLong());\n-      }\n-    }\n-  }\n-\n-\n-  @Override\n-  public int size() {\n-    return intDoubleRow.size();\n-  }\n-\n-  /**\n-   * Merge this row split to a row\n-   *\n-   * @param mergedRow the dest row\n-   */\n-  public void mergeTo(IntDoubleVector mergedRow) {\n-    startRead();\n-    try {\n-      if (isDense()) {\n-        double[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startColInt, values[i]);\n+        return values;\n+    }\n+\n+    /**\n+     * Set a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements values\n+     */\n+    public void set(int[] indices, double[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            intDoubleRow.set(indices[i] - startColInt, values[i]);\n         }\n-      } else {\n-        ObjectIterator<Int2DoubleMap.Entry> iter = getIter();\n-        Int2DoubleMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          mergedRow.set(entry.getIntKey() + startColInt, entry.getDoubleValue());\n+    }\n+\n+    /**\n+     * Add a element value without lock\n+     *\n+     * @param index element index\n+     * @param value element plus value\n+     */\n+    public void addTo(int index, double value) {\n+        set(index, get(index) + value);\n+    }\n+\n+    /**\n+     * Add a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements plus values\n+     */\n+    public void addTo(int[] indices, double[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], get(indices[i]) + values[i]);\n         }\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n-    if (useDenseSerialize()) {\n-      double[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        buf.writeDouble(values[i]);\n-      }\n-    } else {\n-      ObjectIterator<Int2DoubleMap.Entry> iter = getIter();\n-      Int2DoubleMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeInt(entry.getIntKey());\n-        buf.writeDouble(entry.getDoubleValue());\n-      }\n-    }\n-  }\n-\n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n-    startColInt = (int) startCol;\n-    endColInt = (int) endCol;\n-    intDoubleRow = (IntDoubleVector) row;\n-    if (useDenseSerialize()) {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(i, buf.readDouble());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        intDoubleRow.set(buf.readInt(), buf.readDouble());\n-      }\n-    }\n-  }\n-\n-  @Override\n-  protected int getRowSpace() {\n-    if (useDenseSerialize()) {\n-      return 8 * size();\n-    } else {\n-      return 12 * size();\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow clone() {\n-    startRead();\n-    try {\n-      return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-          intDoubleRow.clone());\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n-    try {\n-      if (intDoubleRow.isSparse()) {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(),\n-                    intDoubleRow.getStorage().getValues()));\n-      } else {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intDoubleRow);\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(int index) {\n-    if (intDoubleRow.isSparse()) {\n-      return intDoubleRow.getStorage().hasKey(index - startColInt);\n-    } else {\n-      return intDoubleRow.get(index - startColInt) != 0.0;\n-    }\n-  }\n-\n-  public double initAndGet(int index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      double value = func.action();\n-      set(index, value);\n-      return value;\n-    }\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n-    if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeDouble(initAndGet(in.readInt(), func));\n+    }\n+\n+    /**\n+     * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n+     *\n+     * @return all element values\n+     */\n+    private double[] getValues() {\n+        return intDoubleRow.getStorage().getValues();\n+    }\n+\n+    /**\n+     * Get all element indices and values without lock, you must check the storage is sparse first use\n+     * \"isSparse\"; if you want use original indices, you must plus with \"startCol\" first\n+     *\n+     * @return all element values\n+     */\n+    public ObjectIterator<Int2DoubleMap.Entry> getIter() {\n+        return intDoubleRow.getStorage().entryIterator();\n+    }\n+\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        startWrite();\n+        try {\n+            switch (updateType) {\n+                case T_DOUBLE_SPARSE:\n+                case T_DOUBLE_SPARSE_COMPONENT:\n+                    updateUseIntDoubleSparse(buf, op);\n+                    break;\n+\n+                case T_FLOAT_SPARSE:\n+                case T_FLOAT_SPARSE_COMPONENT:\n+                    updateUseIntFloatSparse(buf, op);\n+                    break;\n+\n+                case T_LONG_SPARSE:\n+                case T_LONG_SPARSE_COMPONENT:\n+                    updateUseIntLongSparse(buf, op);\n+                    break;\n+\n+                case T_INT_SPARSE:\n+                case T_INT_SPARSE_COMPONENT:\n+                    updateUseIntIntSparse(buf, op);\n+                    break;\n+\n+                case T_DOUBLE_DENSE:\n+                case T_DOUBLE_DENSE_COMPONENT:\n+                    updateUseIntDoubleDense(buf, op);\n+                    break;\n+\n+                case T_FLOAT_DENSE:\n+                case T_FLOAT_DENSE_COMPONENT:\n+                    updateUseIntFloatDense(buf, op);\n+                    break;\n+\n+                case T_LONG_DENSE:\n+                case T_LONG_DENSE_COMPONENT:\n+                    updateUseIntLongDense(buf, op);\n+                    break;\n+\n+                case T_INT_DENSE:\n+                case T_INT_DENSE_COMPONENT:\n+                    updateUseIntIntDense(buf, op);\n+                    break;\n+\n+                default: {\n+                    throw new UnsupportedOperationException(\n+                            \"Unsupport operation: update \" + updateType + \" to \" +\n+                                    this.getClass().getName());\n+                }\n+            }\n+\n+            updateRowVersion();\n+        } finally {\n+            endWrite();\n+        }\n+    }\n+\n+    private void updateUseIntDoubleDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, intDoubleRow.get(i) + buf.readDouble());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, buf.readDouble());\n+            }\n+        }\n+    }\n+\n+    private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, intDoubleRow.get(i) + buf.readFloat());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, buf.readFloat());\n+            }\n+        }\n+    }\n+\n+    private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, intDoubleRow.get(i) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, buf.readInt());\n+            }\n         }\n-      } else {\n-        throw new IOException(this.getClass().getName() + \" only support int type index now\");\n-      }\n-    } else {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeDouble(get(in.readInt()));\n+    }\n+\n+    private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, intDoubleRow.get(i) + buf.readLong());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, buf.readLong());\n+            }\n+        }\n+    }\n+\n+    private void updateUseIntDoubleSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                intDoubleRow.set(index, intDoubleRow.get(index) + buf.readDouble());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(buf.readInt(), buf.readDouble());\n+            }\n         }\n-      } else {\n-        throw new IOException(this.getClass().getName() + \" only support int type index now\");\n-      }\n-    }\n-  }\n-\n-  @Override\n-  public void setSplit(Vector row) {\n-    super.setSplit(row);\n-    intDoubleRow = (IntDoubleVector) row;\n-  }\n-\n-  public void elemUpdate(DoubleElemUpdateFunc func) {\n-    if (isDense()) {\n-      double[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n-    } else {\n-      ObjectIterator<Int2DoubleMap.Entry> iter = getIter();\n-      Int2DoubleMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        entry.setValue(func.update());\n-      }\n-    }\n-  }\n+    }\n+\n+    private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                intDoubleRow.set(index, intDoubleRow.get(index) + buf.readFloat());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(buf.readInt(), buf.readFloat());\n+            }\n+        }\n+    }\n+\n+    private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                intDoubleRow.set(index, intDoubleRow.get(index) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(buf.readInt(), buf.readInt());\n+            }\n+        }\n+    }\n+\n+    private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                intDoubleRow.set(index, intDoubleRow.get(index) + buf.readLong());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(buf.readInt(), buf.readLong());\n+            }\n+        }\n+    }\n+\n+\n+    @Override\n+    public int size() {\n+        return intDoubleRow.size();\n+    }\n+\n+    /**\n+     * Merge this row split to a row\n+     *\n+     * @param mergedRow the dest row\n+     */\n+    public void mergeTo(IntDoubleVector mergedRow) {\n+        startRead();\n+        try {\n+            if (isDense()) {\n+                double[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    mergedRow.set(i + startColInt, values[i]);\n+                }\n+            } else {\n+                ObjectIterator<Int2DoubleMap.Entry> iter = getIter();\n+                Int2DoubleMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    mergedRow.set(entry.getIntKey() + startColInt, entry.getDoubleValue());\n+                }\n+            }\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n+        if (useDenseSerialize()) {\n+            double[] values = getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                buf.writeDouble(values[i]);\n+            }\n+        } else {\n+            ObjectIterator<Int2DoubleMap.Entry> iter = getIter();\n+            Int2DoubleMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                buf.writeInt(entry.getIntKey());\n+                buf.writeDouble(entry.getDoubleValue());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n+        startColInt = (int) startCol;\n+        endColInt = (int) endCol;\n+        intDoubleRow = (IntDoubleVector) row;\n+        if (useDenseSerialize()) {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(i, buf.readDouble());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                intDoubleRow.set(buf.readInt(), buf.readDouble());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected int getRowSpace() {\n+        if (useDenseSerialize()) {\n+            return 8 * size();\n+        } else {\n+            return 12 * size();\n+        }\n+    }\n+\n+    @Override\n+    public ServerRow clone() {\n+        startRead();\n+        try {\n+            return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n+                    intDoubleRow.clone());\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+    @Override\n+    public ServerRow\n+    adaptiveClone() {\n+        startRead();\n+        try {\n+            if (intDoubleRow.isSparse()) {\n+                return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt,\n+                        (int) estElemNum,\n+                        VFactory\n+                                .sortedDoubleVector(endColInt - startColInt,\n+                                        intDoubleRow.getStorage().getIndices(),\n+                                        intDoubleRow.getStorage().getValues()));\n+            } else {\n+                return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt,\n+                        (int) estElemNum,\n+                        intDoubleRow);\n+            }\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(int index) {\n+        if (intDoubleRow.isSparse()) {\n+            return intDoubleRow.getStorage().hasKey(index - startColInt);\n+        } else {\n+            return intDoubleRow.get(index - startColInt) != 0.0;\n+        }\n+    }\n+\n+    public double initAndGet(int index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            double value = func.action();\n+            set(index, value);\n+            return value;\n+        }\n+    }\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n+            throws IOException {\n+        if (func != null) {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeDouble(initAndGet(in.readInt(), func));\n+                }\n+            } else {\n+                throw new IOException(\n+                        this.getClass().getName() + \" only support int type index now\");\n+            }\n+        } else {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeDouble(get(in.readInt()));\n+                }\n+            } else {\n+                throw new IOException(\n+                        this.getClass().getName() + \" only support int type index now\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void setSplit(Vector row) {\n+        super.setSplit(row);\n+        intDoubleRow = (IntDoubleVector) row;\n+    }\n+\n+    public void elemUpdate(DoubleElemUpdateFunc func) {\n+        if (isDense()) {\n+            double[] values = getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                values[i] = func.update();\n+            }\n+        } else {\n+            ObjectIterator<Int2DoubleMap.Entry> iter = getIter();\n+            Int2DoubleMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                entry.setValue(func.update());\n+            }\n+        }\n+    }\n }\n",
            "diff_size": 715
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "433",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/70/ServerIntDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/70/ServerIntDoubleRow.java\nindex 9b46a048840..4f08e16daf0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/70/ServerIntDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/70/ServerIntDoubleRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -194,45 +193,36 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n         case T_DOUBLE_SPARSE_COMPONENT:\n           updateUseIntDoubleSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_DOUBLE_DENSE:\n+  case T_DOUBLE_DENSE:\n         case T_DOUBLE_DENSE_COMPONENT:\n           updateUseIntDoubleDense(buf, op);\n           break;\n-\n-        case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -350,8 +340,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int size() {\n     return intDoubleRow.size();\n   }\n@@ -431,22 +420,19 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n     try {\n       return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n           intDoubleRow.clone());\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (intDoubleRow.isSparse()) {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(),\n+        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(),\n                     intDoubleRow.getStorage().getValues()));\n-      } else {\n+  } else {\n         return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n             intDoubleRow);\n       }\n@@ -482,7 +468,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeDouble(initAndGet(in.readInt(), func));\n@@ -522,4 +508,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "435",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "446",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "448",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/70/ServerIntDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/70/ServerIntDoubleRow.java\nindex 9b46a048840..7db61eaa5e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/70/ServerIntDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/70/ServerIntDoubleRow.java\n@@ -34,11 +34,13 @@ import java.io.IOException;\n /**\n  * The row with \"int\" index type and \"double\" value type in PS\n  */\n+\n public class ServerIntDoubleRow extends ServerDoubleRow {\n \n   /**\n    * Just a view of \"row\" in ServerRow\n    */\n+\n   private IntDoubleVector intDoubleRow;\n \n   /**\n@@ -61,8 +63,8 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow inner row\n    */\n-  public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntDoubleVector innerRow) {\n+\n+  public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntDoubleVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n@@ -78,6 +80,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n+\n   public ServerIntDoubleRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n@@ -87,6 +90,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @param rowType row type\n    */\n+\n   public ServerIntDoubleRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -102,6 +106,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public double get(int index) {\n     return intDoubleRow.get(index - startColInt);\n   }\n@@ -112,6 +117,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(int index, double value) {\n     intDoubleRow.set(index - startColInt, value);\n   }\n@@ -122,6 +128,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public double[] get(int[] indices) {\n     double[] values = new double[indices.length];\n     for (int i = 0; i < indices.length; i++) {\n@@ -136,6 +143,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(int[] indices, double[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -149,6 +157,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(int index, double value) {\n     set(index, get(index) + value);\n   }\n@@ -159,6 +168,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(int[] indices, double[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -171,6 +181,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @return all element values\n    */\n+\n   private double[] getValues() {\n     return intDoubleRow.getStorage().getValues();\n   }\n@@ -181,12 +192,14 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @return all element values\n    */\n+\n   public ObjectIterator<Int2DoubleMap.Entry> getIter() {\n     return intDoubleRow.getStorage().entryIterator();\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -194,48 +207,38 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n         case T_DOUBLE_SPARSE_COMPONENT:\n           updateUseIntDoubleSparse(buf, op);\n           break;\n-\n         case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n         case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n         case T_DOUBLE_DENSE:\n         case T_DOUBLE_DENSE_COMPONENT:\n           updateUseIntDoubleDense(buf, op);\n           break;\n-\n         case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n-\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -350,7 +353,6 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n     }\n   }\n \n-\n   @Override\n   public int size() {\n     return intDoubleRow.size();\n@@ -361,6 +363,7 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n    *\n    * @param mergedRow the dest row\n    */\n+\n   public void mergeTo(IntDoubleVector mergedRow) {\n     startRead();\n     try {\n@@ -429,26 +432,20 @@ public class ServerIntDoubleRow extends ServerDoubleRow {\n   public ServerRow clone() {\n     startRead();\n     try {\n-      return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-          intDoubleRow.clone());\n+      return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intDoubleRow.clone());\n     } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       if (intDoubleRow.isSparse()) {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory\n-                .sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(),\n-                    intDoubleRow.getStorage().getValues()));\n+        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedDoubleVector(endColInt - startColInt, intDoubleRow.getStorage().getIndices(), intDoubleRow.getStorage().getValues()));\n       } else {\n-        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intDoubleRow);\n+        return new ServerIntDoubleRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intDoubleRow);\n       }\n     } finally {\n       endRead();\n@@ -461,6 +458,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(int index) {\n     if (intDoubleRow.isSparse()) {\n       return intDoubleRow.getStorage().hasKey(index - startColInt);\n@@ -480,8 +478,8 @@ adaptiveClone() {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -522,4 +520,5 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}