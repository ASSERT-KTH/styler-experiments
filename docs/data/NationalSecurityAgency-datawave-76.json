{
    "project_name": "NationalSecurityAgency-datawave",
    "violation_id": "76",
    "information": {
        "violations": [
            {
                "line": "13",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.client.TableNotFoundException;\nimport org.apache.accumulo.core.client.admin.TableOperations;\nimport org.apache.accumulo.core.conf.Property;\nimport org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.io.Text;",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/violations/76/DateIndexTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/checkstyle_idea/76/DateIndexTableConfigHelper.java\nindex 059a11e0c26..8a42aea638d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/violations/76/DateIndexTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/checkstyle_idea/76/DateIndexTableConfigHelper.java\n@@ -18,58 +18,67 @@ import org.apache.hadoop.util.StringUtils;\n import org.apache.log4j.Logger;\n \n public class DateIndexTableConfigHelper extends AbstractTableConfigHelper {\n-    \n-    protected Logger log;\n-    \n-    protected Configuration conf;\n-    protected String tableName;\n-    public static final String LOCALITY_GROUPS = \"date.index.table.locality.groups\";\n-    HashMap<String,Set<Text>> localityGroups = new HashMap<>();\n-    \n-    @Override\n-    public void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException {\n-        \n-        this.log = log;\n-        this.conf = config;\n-        this.tableName = tableName;\n-        \n-        if (this.tableName == null) {\n-            throw new IllegalArgumentException(\"No DateIndex Table Defined\");\n-        }\n-        \n-        String localityGroupsConf = null;\n-        localityGroupsConf = conf.get(LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':'\n-                        + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' + ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':'\n-                        + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n-        for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n-            String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n-            Set<Text> families = localityGroups.get(localityGroupDef[0]);\n-            if (families == null) {\n-                families = new HashSet<>();\n-                localityGroups.put(localityGroupDef[0], families);\n-            }\n-            families.add(new Text(localityGroupDef[1]));\n-        }\n+\n+  protected Logger log;\n+\n+  protected Configuration conf;\n+  protected String tableName;\n+  public static final String LOCALITY_GROUPS = \"date.index.table.locality.groups\";\n+  HashMap<String, Set<Text>> localityGroups = new HashMap<>();\n+\n+  @Override\n+  public void setup(String tableName, Configuration config, Logger log)\n+      throws IllegalArgumentException {\n+\n+    this.log = log;\n+    this.conf = config;\n+    this.tableName = tableName;\n+\n+    if (this.tableName == null) {\n+      throw new IllegalArgumentException(\"No DateIndex Table Defined\");\n     }\n-    \n-    @Override\n-    public void configure(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        configureDateIndexTable(tops);\n+\n+    String localityGroupsConf = null;\n+    localityGroupsConf =\n+        conf.get(LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':'\n+            + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' +\n+            ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':'\n+            + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n+    for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n+      String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n+      Set<Text> families = localityGroups.get(localityGroupDef[0]);\n+      if (families == null) {\n+        families = new HashSet<>();\n+        localityGroups.put(localityGroupDef[0], families);\n+      }\n+      families.add(new Text(localityGroupDef[1]));\n     }\n-    \n-    protected void configureDateIndexTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        // Add the DATE aggregator\n-        for (IteratorScope scope : IteratorScope.values()) {\n-            String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"DATEAggregator\");\n-            setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n-            stem += \".opt.\";\n-            setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.DateIndexDateAggregator\", tops, log);\n-        }\n-        \n-        setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(false), tops, log);\n-        \n-        // Set the locality group for the full content column family\n-        setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n+  }\n+\n+  @Override\n+  public void configure(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    configureDateIndexTable(tops);\n+  }\n+\n+  protected void configureDateIndexTable(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    // Add the DATE aggregator\n+    for (IteratorScope scope : IteratorScope.values()) {\n+      String stem =\n+          String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"DATEAggregator\");\n+      setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\",\n+          tops, log);\n+      stem += \".opt.\";\n+      setPropertyIfNecessary(tableName, stem + \"*\",\n+          \"datawave.ingest.table.aggregator.DateIndexDateAggregator\", tops, log);\n     }\n-    \n+\n+    setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(),\n+        Boolean.toString(false), tops, log);\n+\n+    // Set the locality group for the full content column family\n+    setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n+  }\n+\n }\n",
            "diff_size": 74
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/violations/76/DateIndexTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/naturalize/76/DateIndexTableConfigHelper.java\nindex 059a11e0c26..87db6e76f6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/violations/76/DateIndexTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/naturalize/76/DateIndexTableConfigHelper.java\n@@ -72,4 +72,4 @@ public class DateIndexTableConfigHelper extends AbstractTableConfigHelper {\n         setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n     }\n     \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/violations/76/DateIndexTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/codebuff/76/DateIndexTableConfigHelper.java\nindex 059a11e0c26..53cb5d4bc82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/violations/76/DateIndexTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/NationalSecurityAgency-datawave/codebuff/76/DateIndexTableConfigHelper.java\n@@ -3,9 +3,7 @@ package datawave.ingest.table.config;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Set;\n-\n import datawave.ingest.mapreduce.handler.ExtendedDataTypeHandler;\n-\n import org.apache.accumulo.core.client.AccumuloException;\n import org.apache.accumulo.core.client.AccumuloSecurityException;\n import org.apache.accumulo.core.client.TableNotFoundException;\n@@ -17,30 +15,28 @@ import org.apache.hadoop.io.Text;\n import org.apache.hadoop.util.StringUtils;\n import org.apache.log4j.Logger;\n \n+\n public class DateIndexTableConfigHelper extends AbstractTableConfigHelper {\n-    \n+\n     protected Logger log;\n-    \n     protected Configuration conf;\n     protected String tableName;\n+\n     public static final String LOCALITY_GROUPS = \"date.index.table.locality.groups\";\n     HashMap<String,Set<Text>> localityGroups = new HashMap<>();\n-    \n+\n     @Override\n     public void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException {\n-        \n         this.log = log;\n         this.conf = config;\n         this.tableName = tableName;\n-        \n         if (this.tableName == null) {\n             throw new IllegalArgumentException(\"No DateIndex Table Defined\");\n         }\n-        \n+\n         String localityGroupsConf = null;\n-        localityGroupsConf = conf.get(LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':'\n-                        + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' + ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':'\n-                        + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n+        localityGroupsConf = conf.get(LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':' + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' + ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':' + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n+\n         for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n             String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n             Set<Text> families = localityGroups.get(localityGroupDef[0]);\n@@ -51,12 +47,12 @@ public class DateIndexTableConfigHelper extends AbstractTableConfigHelper {\n             families.add(new Text(localityGroupDef[1]));\n         }\n     }\n-    \n+\n     @Override\n     public void configure(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n         configureDateIndexTable(tops);\n     }\n-    \n+\n     protected void configureDateIndexTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n         // Add the DATE aggregator\n         for (IteratorScope scope : IteratorScope.values()) {\n@@ -65,11 +61,9 @@ public class DateIndexTableConfigHelper extends AbstractTableConfigHelper {\n             stem += \".opt.\";\n             setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.DateIndexDateAggregator\", tops, log);\n         }\n-        \n         setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(false), tops, log);\n         \n         // Set the locality group for the full content column family\n         setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n     }\n-    \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}