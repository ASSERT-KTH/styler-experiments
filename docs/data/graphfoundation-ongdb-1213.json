{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "1213",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "138",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1213/HaRequestType210.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1213/HaRequestType210.java\nindex 1dee27e12f8..7800de28357 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1213/HaRequestType210.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1213/HaRequestType210.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha;\n \n import java.io.IOException;\n@@ -48,164 +49,163 @@ import static org.neo4j.com.Protocol.readString;\n \n public class HaRequestType210 extends AbstractHaRequestTypes\n {\n-    public HaRequestType210(\n-            LogEntryReader<ReadableClosablePositionAwareChannel> entryReader,\n-            ObjectSerializer<LockResult> lockResultObjectSerializer )\n-    {\n-        registerAllocateIds();\n-        registerCreateRelationshipType();\n-        registerAcquireExclusiveLock( lockResultObjectSerializer );\n-        registerAcquireSharedLock( lockResultObjectSerializer );\n-        registerCommit( entryReader );\n-        registerPullUpdates();\n-        registerEndLockSession();\n-        registerHandshake();\n-        registerCopyStore();\n-        registerNewLockSession();\n-        registerCreatePropertyKey();\n-        registerCreateLabel();\n-    }\n-\n-    private void registerAllocateIds()\n+  public HaRequestType210(\n+      LogEntryReader<ReadableClosablePositionAwareChannel> entryReader,\n+      ObjectSerializer<LockResult> lockResultObjectSerializer)\n+  {\n+    registerAllocateIds();\n+    registerCreateRelationshipType();\n+    registerAcquireExclusiveLock(lockResultObjectSerializer);\n+    registerAcquireSharedLock(lockResultObjectSerializer);\n+    registerCommit(entryReader);\n+    registerPullUpdates();\n+    registerEndLockSession();\n+    registerHandshake();\n+    registerCopyStore();\n+    registerNewLockSession();\n+    registerCreatePropertyKey();\n+    registerCreateLabel();\n+  }\n+\n+  private void registerAllocateIds()\n+  {\n+    TargetCaller<Master, IdAllocation> allocateIdTarget = (master, context, input, target) ->\n     {\n-        TargetCaller<Master,IdAllocation> allocateIdTarget = ( master, context, input, target ) ->\n-        {\n-            IdType idType = IdType.values()[input.readByte()];\n-            return master.allocateIds( context, idType );\n-        };\n-        ObjectSerializer<IdAllocation> allocateIdSerializer = ( idAllocation, result ) ->\n-        {\n-            IdRange idRange = idAllocation.getIdRange();\n-            result.writeInt( idRange.getDefragIds().length );\n-            for ( long id : idRange.getDefragIds() )\n-            {\n-                result.writeLong( id );\n-            }\n-            result.writeLong( idRange.getRangeStart() );\n-            result.writeInt( idRange.getRangeLength() );\n-            result.writeLong( idAllocation.getHighestIdInUse() );\n-            result.writeLong( idAllocation.getDefragCount() );\n-        };\n-        register( Type.ALLOCATE_IDS, allocateIdTarget, allocateIdSerializer );\n-    }\n-\n-    private void registerCreateRelationshipType()\n-    {\n-        TargetCaller<Master,Integer> createRelationshipTypeTarget =\n-                ( master, context, input, target ) -> master.createRelationshipType( context, readString( input ) );\n-        register( Type.CREATE_RELATIONSHIP_TYPE, createRelationshipTypeTarget, INTEGER_SERIALIZER );\n-    }\n-\n-    private void registerAcquireExclusiveLock( ObjectSerializer<LockResult> lockResultObjectSerializer )\n+      IdType idType = IdType.values()[input.readByte()];\n+      return master.allocateIds(context, idType);\n+    };\n+    ObjectSerializer<IdAllocation> allocateIdSerializer = (idAllocation, result) ->\n     {\n-        register( Type.ACQUIRE_EXCLUSIVE_LOCK, new AquireLockCall()\n-        {\n-            @Override\n-            protected Response<LockResult> lock( Master master, RequestContext context, ResourceType type,\n-                                                 long... ids )\n-            {\n-                return master.acquireExclusiveLock( context, type, ids );\n-            }\n-        }, lockResultObjectSerializer, true );\n-    }\n-\n-    private void registerAcquireSharedLock( ObjectSerializer<LockResult> lockResultObjectSerializer )\n+      IdRange idRange = idAllocation.getIdRange();\n+      result.writeInt(idRange.getDefragIds().length);\n+      for (long id : idRange.getDefragIds())\n+      {\n+        result.writeLong(id);\n+      }\n+      result.writeLong(idRange.getRangeStart());\n+      result.writeInt(idRange.getRangeLength());\n+      result.writeLong(idAllocation.getHighestIdInUse());\n+      result.writeLong(idAllocation.getDefragCount());\n+    };\n+    register(Type.ALLOCATE_IDS, allocateIdTarget, allocateIdSerializer);\n+  }\n+\n+  private void registerCreateRelationshipType()\n+  {\n+    TargetCaller<Master, Integer> createRelationshipTypeTarget =\n+        (master, context, input, target) -> master.createRelationshipType(context, readString(input));\n+    register(Type.CREATE_RELATIONSHIP_TYPE, createRelationshipTypeTarget, INTEGER_SERIALIZER);\n+  }\n+\n+  private void registerAcquireExclusiveLock(ObjectSerializer<LockResult> lockResultObjectSerializer)\n+  {\n+    register(Type.ACQUIRE_EXCLUSIVE_LOCK, new AquireLockCall()\n     {\n-        register( Type.ACQUIRE_SHARED_LOCK, new AquireLockCall()\n-        {\n-            @Override\n-            protected Response<LockResult> lock( Master master, RequestContext context, ResourceType type,\n-                                                 long... ids )\n-            {\n-                return master.acquireSharedLock( context, type, ids );\n-            }\n-        }, lockResultObjectSerializer, true );\n-    }\n-\n-    private void registerCommit( LogEntryReader<ReadableClosablePositionAwareChannel> entryReader )\n-    {\n-        TargetCaller<Master,Long> commitTarget = ( master, context, input, target ) ->\n-        {\n-            readString( input ); // Always neostorexadatasource\n-\n-            TransactionRepresentation tx;\n-            try\n-            {\n-                Deserializer<TransactionRepresentation> deserializer =\n-                        new Protocol.TransactionRepresentationDeserializer( entryReader );\n-                tx = deserializer.read( input, null );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-\n-            return master.commit( context, tx );\n-        };\n-        register( Type.COMMIT, commitTarget, LONG_SERIALIZER );\n-    }\n-\n-    private void registerPullUpdates()\n-    {\n-        TargetCaller<Master,Void> pullUpdatesTarget =\n-                ( master, context, input, target ) -> master.pullUpdates( context );\n-        register( Type.PULL_UPDATES, pullUpdatesTarget, VOID_SERIALIZER );\n-    }\n-\n-    private void registerEndLockSession()\n+      @Override\n+      protected Response<LockResult> lock(Master master, RequestContext context, ResourceType type,\n+                                          long... ids)\n+      {\n+        return master.acquireExclusiveLock(context, type, ids);\n+      }\n+    }, lockResultObjectSerializer, true);\n+  }\n+\n+  private void registerAcquireSharedLock(ObjectSerializer<LockResult> lockResultObjectSerializer)\n+  {\n+    register(Type.ACQUIRE_SHARED_LOCK, new AquireLockCall()\n     {\n-        // NOTE <1>: A 'false' argument for 'unpack' means we won't unpack the response.\n-        // We do this because END_LOCK_SESSION request can be send in 3 cases:\n-        //  1) transaction committed successfully\n-        //  2) transaction rolled back successfully\n-        //  3) transaction was terminated\n-        // Master's response for this call is an obligation to pull up to a specified txId.\n-        // Processing/unpacking of this response is not needed in all 3 cases:\n-        //  1) committed transaction pulls transaction stream as part of COMMIT call\n-        //  2) rolled back transaction does not care about reading any more\n-        //  3) terminated transaction does not care about reading any more\n-        TargetCaller<Master,Void> endLockSessionTarget =\n-                ( master, context, input, target ) -> master.endLockSession( context, readBoolean( input ) );\n-        register( Type.END_LOCK_SESSION, endLockSessionTarget, VOID_SERIALIZER, false /* <1> */);\n-    }\n-\n-    private void registerHandshake()\n+      @Override\n+      protected Response<LockResult> lock(Master master, RequestContext context, ResourceType type,\n+                                          long... ids)\n+      {\n+        return master.acquireSharedLock(context, type, ids);\n+      }\n+    }, lockResultObjectSerializer, true);\n+  }\n+\n+  private void registerCommit(LogEntryReader<ReadableClosablePositionAwareChannel> entryReader)\n+  {\n+    TargetCaller<Master, Long> commitTarget = (master, context, input, target) ->\n     {\n-        TargetCaller<Master,HandshakeResult> handshakeTarget =\n-                ( master, context, input, target ) -> master.handshake( input.readLong(), null );\n-        ObjectSerializer<HandshakeResult> handshakeResultObjectSerializer = ( responseObject, result ) ->\n-        {\n-            result.writeLong( responseObject.txChecksum() );\n-            result.writeLong( responseObject.epoch() );\n-        };\n-        register( Type.HANDSHAKE, handshakeTarget, handshakeResultObjectSerializer );\n-    }\n-\n-    private void registerCopyStore()\n-    {\n-        TargetCaller<Master,Void> copyStoreTarget = ( master, context, input, target ) ->\n-                master.copyStore( context, new ToNetworkStoreWriter( target, new Monitors() ) );\n-        register( Type.COPY_STORE, copyStoreTarget, VOID_SERIALIZER, false );\n-    }\n-\n-    private void registerNewLockSession()\n-    {\n-        TargetCaller<Master,Void> newLockSessionTarget =\n-                ( master, context, input, target ) -> master.newLockSession( context );\n-        register( Type.NEW_LOCK_SESSION, newLockSessionTarget, VOID_SERIALIZER );\n-    }\n-\n-    private void registerCreatePropertyKey()\n-    {\n-        TargetCaller<Master,Integer> createPropertyKeyTarget =\n-                ( master, context, input, target ) -> master.createPropertyKey( context, readString( input ) );\n-        register( Type.CREATE_PROPERTY_KEY, createPropertyKeyTarget, INTEGER_SERIALIZER );\n-    }\n-\n-    private void registerCreateLabel()\n+      readString(input); // Always neostorexadatasource\n+\n+      TransactionRepresentation tx;\n+      try\n+      {\n+        Deserializer<TransactionRepresentation> deserializer =\n+            new Protocol.TransactionRepresentationDeserializer(entryReader);\n+        tx = deserializer.read(input, null);\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n+\n+      return master.commit(context, tx);\n+    };\n+    register(Type.COMMIT, commitTarget, LONG_SERIALIZER);\n+  }\n+\n+  private void registerPullUpdates()\n+  {\n+    TargetCaller<Master, Void> pullUpdatesTarget =\n+        (master, context, input, target) -> master.pullUpdates(context);\n+    register(Type.PULL_UPDATES, pullUpdatesTarget, VOID_SERIALIZER);\n+  }\n+\n+  private void registerEndLockSession()\n+  {\n+    // NOTE <1>: A 'false' argument for 'unpack' means we won't unpack the response.\n+    // We do this because END_LOCK_SESSION request can be send in 3 cases:\n+    //  1) transaction committed successfully\n+    //  2) transaction rolled back successfully\n+    //  3) transaction was terminated\n+    // Master's response for this call is an obligation to pull up to a specified txId.\n+    // Processing/unpacking of this response is not needed in all 3 cases:\n+    //  1) committed transaction pulls transaction stream as part of COMMIT call\n+    //  2) rolled back transaction does not care about reading any more\n+    //  3) terminated transaction does not care about reading any more\n+    TargetCaller<Master, Void> endLockSessionTarget =\n+        (master, context, input, target) -> master.endLockSession(context, readBoolean(input));\n+    register(Type.END_LOCK_SESSION, endLockSessionTarget, VOID_SERIALIZER, false /* <1> */);\n+  }\n+\n+  private void registerHandshake()\n+  {\n+    TargetCaller<Master, HandshakeResult> handshakeTarget =\n+        (master, context, input, target) -> master.handshake(input.readLong(), null);\n+    ObjectSerializer<HandshakeResult> handshakeResultObjectSerializer = (responseObject, result) ->\n     {\n-        TargetCaller<Master,Integer> createLabelTarget =\n-                ( master, context, input, target ) -> master.createLabel( context, readString( input ) );\n-        register( Type.CREATE_LABEL, createLabelTarget, INTEGER_SERIALIZER );\n-    }\n+      result.writeLong(responseObject.txChecksum());\n+      result.writeLong(responseObject.epoch());\n+    };\n+    register(Type.HANDSHAKE, handshakeTarget, handshakeResultObjectSerializer);\n+  }\n+\n+  private void registerCopyStore()\n+  {\n+    TargetCaller<Master, Void> copyStoreTarget = (master, context, input, target) ->\n+        master.copyStore(context, new ToNetworkStoreWriter(target, new Monitors()));\n+    register(Type.COPY_STORE, copyStoreTarget, VOID_SERIALIZER, false);\n+  }\n+\n+  private void registerNewLockSession()\n+  {\n+    TargetCaller<Master, Void> newLockSessionTarget =\n+        (master, context, input, target) -> master.newLockSession(context);\n+    register(Type.NEW_LOCK_SESSION, newLockSessionTarget, VOID_SERIALIZER);\n+  }\n+\n+  private void registerCreatePropertyKey()\n+  {\n+    TargetCaller<Master, Integer> createPropertyKeyTarget =\n+        (master, context, input, target) -> master.createPropertyKey(context, readString(input));\n+    register(Type.CREATE_PROPERTY_KEY, createPropertyKeyTarget, INTEGER_SERIALIZER);\n+  }\n+\n+  private void registerCreateLabel()\n+  {\n+    TargetCaller<Master, Integer> createLabelTarget =\n+        (master, context, input, target) -> master.createLabel(context, readString(input));\n+    register(Type.CREATE_LABEL, createLabelTarget, INTEGER_SERIALIZER);\n+  }\n }\n",
            "diff_size": 213
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1213/HaRequestType210.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1213/HaRequestType210.java\nindex 1dee27e12f8..6a8d9d2aec7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1213/HaRequestType210.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1213/HaRequestType210.java\n@@ -48,9 +48,7 @@ import static org.neo4j.com.Protocol.readString;\n \n public class HaRequestType210 extends AbstractHaRequestTypes\n {\n-    public HaRequestType210(\n-            LogEntryReader<ReadableClosablePositionAwareChannel> entryReader,\n-            ObjectSerializer<LockResult> lockResultObjectSerializer )\n+    public HaRequestType210( LogEntryReader<ReadableClosablePositionAwareChannel> entryReader, ObjectSerializer<LockResult> lockResultObjectSerializer )\n     {\n         registerAllocateIds();\n         registerCreateRelationshipType();\n@@ -86,14 +84,14 @@ public class HaRequestType210 extends AbstractHaRequestTypes\n             result.writeLong( idAllocation.getHighestIdInUse() );\n             result.writeLong( idAllocation.getDefragCount() );\n         };\n-        register( Type.ALLOCATE_IDS, allocateIdTarget, allocateIdSerializer );\n+\n+register( Type.ALLOCATE_IDS, allocateIdTarget, allocateIdSerializer );\n     }\n \n     private void registerCreateRelationshipType()\n     {\n-        TargetCaller<Master,Integer> createRelationshipTypeTarget =\n-                ( master, context, input, target ) -> master.createRelationshipType( context, readString( input ) );\n-        register( Type.CREATE_RELATIONSHIP_TYPE, createRelationshipTypeTarget, INTEGER_SERIALIZER );\n+        TargetCaller<Master,Integer> createRelationshipTypeTarget = ( master, context, input, target ) -> master.createRelationshipType( context, readString( input ) );\n+register( Type.CREATE_RELATIONSHIP_TYPE, createRelationshipTypeTarget, INTEGER_SERIALIZER );\n     }\n \n     private void registerAcquireExclusiveLock( ObjectSerializer<LockResult> lockResultObjectSerializer )\n@@ -101,9 +99,8 @@ public class HaRequestType210 extends AbstractHaRequestTypes\n         register( Type.ACQUIRE_EXCLUSIVE_LOCK, new AquireLockCall()\n         {\n             @Override\n-            protected Response<LockResult> lock( Master master, RequestContext context, ResourceType type,\n-                                                 long... ids )\n-            {\n+            protected Response<LockResult> lock( Master master, RequestContext context, ResourceType type, long... ids )\n+{\n                 return master.acquireExclusiveLock( context, type, ids );\n             }\n         }, lockResultObjectSerializer, true );\n@@ -114,9 +111,8 @@ public class HaRequestType210 extends AbstractHaRequestTypes\n         register( Type.ACQUIRE_SHARED_LOCK, new AquireLockCall()\n         {\n             @Override\n-            protected Response<LockResult> lock( Master master, RequestContext context, ResourceType type,\n-                                                 long... ids )\n-            {\n+            protected Response<LockResult> lock( Master master, RequestContext context, ResourceType type, long... ids )\n+{\n                 return master.acquireSharedLock( context, type, ids );\n             }\n         }, lockResultObjectSerializer, true );\n@@ -131,9 +127,8 @@ public class HaRequestType210 extends AbstractHaRequestTypes\n             TransactionRepresentation tx;\n             try\n             {\n-                Deserializer<TransactionRepresentation> deserializer =\n-                        new Protocol.TransactionRepresentationDeserializer( entryReader );\n-                tx = deserializer.read( input, null );\n+                Deserializer<TransactionRepresentation> deserializer = new Protocol.TransactionRepresentationDeserializer( entryReader );\n+tx = deserializer.read( input, null );\n             }\n             catch ( IOException e )\n             {\n@@ -142,14 +137,14 @@ public class HaRequestType210 extends AbstractHaRequestTypes\n \n             return master.commit( context, tx );\n         };\n-        register( Type.COMMIT, commitTarget, LONG_SERIALIZER );\n+\n+register( Type.COMMIT, commitTarget, LONG_SERIALIZER );\n     }\n \n     private void registerPullUpdates()\n     {\n-        TargetCaller<Master,Void> pullUpdatesTarget =\n-                ( master, context, input, target ) -> master.pullUpdates( context );\n-        register( Type.PULL_UPDATES, pullUpdatesTarget, VOID_SERIALIZER );\n+        TargetCaller<Master,Void> pullUpdatesTarget = ( master, context, input, target ) -> master.pullUpdates( context );\n+register( Type.PULL_UPDATES, pullUpdatesTarget, VOID_SERIALIZER );\n     }\n \n     private void registerEndLockSession()\n@@ -164,48 +159,44 @@ public class HaRequestType210 extends AbstractHaRequestTypes\n         //  1) committed transaction pulls transaction stream as part of COMMIT call\n         //  2) rolled back transaction does not care about reading any more\n         //  3) terminated transaction does not care about reading any more\n-        TargetCaller<Master,Void> endLockSessionTarget =\n-                ( master, context, input, target ) -> master.endLockSession( context, readBoolean( input ) );\n-        register( Type.END_LOCK_SESSION, endLockSessionTarget, VOID_SERIALIZER, false /* <1> */);\n+        TargetCaller<Master,Void> endLockSessionTarget = ( master, context, input, target ) -> master.endLockSession( context, readBoolean( input ) );\n+register( Type.END_LOCK_SESSION, endLockSessionTarget, VOID_SERIALIZER, false /* <1> */);\n     }\n \n     private void registerHandshake()\n     {\n-        TargetCaller<Master,HandshakeResult> handshakeTarget =\n-                ( master, context, input, target ) -> master.handshake( input.readLong(), null );\n-        ObjectSerializer<HandshakeResult> handshakeResultObjectSerializer = ( responseObject, result ) ->\n+        TargetCaller<Master,HandshakeResult> handshakeTarget = ( master, context, input, target ) -> master.handshake( input.readLong(), null );\n+ObjectSerializer<HandshakeResult> handshakeResultObjectSerializer = ( responseObject, result ) ->\n         {\n             result.writeLong( responseObject.txChecksum() );\n             result.writeLong( responseObject.epoch() );\n         };\n-        register( Type.HANDSHAKE, handshakeTarget, handshakeResultObjectSerializer );\n+\n+register( Type.HANDSHAKE, handshakeTarget, handshakeResultObjectSerializer );\n     }\n \n     private void registerCopyStore()\n     {\n         TargetCaller<Master,Void> copyStoreTarget = ( master, context, input, target ) ->\n-                master.copyStore( context, new ToNetworkStoreWriter( target, new Monitors() ) );\n-        register( Type.COPY_STORE, copyStoreTarget, VOID_SERIALIZER, false );\n+master.copyStore( context, new ToNetworkStoreWriter( target, new Monitors() ) );\n+register( Type.COPY_STORE, copyStoreTarget, VOID_SERIALIZER, false );\n     }\n \n     private void registerNewLockSession()\n     {\n-        TargetCaller<Master,Void> newLockSessionTarget =\n-                ( master, context, input, target ) -> master.newLockSession( context );\n-        register( Type.NEW_LOCK_SESSION, newLockSessionTarget, VOID_SERIALIZER );\n+        TargetCaller<Master,Void> newLockSessionTarget = ( master, context, input, target ) -> master.newLockSession( context );\n+register( Type.NEW_LOCK_SESSION, newLockSessionTarget, VOID_SERIALIZER );\n     }\n \n     private void registerCreatePropertyKey()\n     {\n-        TargetCaller<Master,Integer> createPropertyKeyTarget =\n-                ( master, context, input, target ) -> master.createPropertyKey( context, readString( input ) );\n-        register( Type.CREATE_PROPERTY_KEY, createPropertyKeyTarget, INTEGER_SERIALIZER );\n+        TargetCaller<Master,Integer> createPropertyKeyTarget = ( master, context, input, target ) -> master.createPropertyKey( context, readString( input ) );\n+register( Type.CREATE_PROPERTY_KEY, createPropertyKeyTarget, INTEGER_SERIALIZER );\n     }\n \n     private void registerCreateLabel()\n     {\n-        TargetCaller<Master,Integer> createLabelTarget =\n-                ( master, context, input, target ) -> master.createLabel( context, readString( input ) );\n-        register( Type.CREATE_LABEL, createLabelTarget, INTEGER_SERIALIZER );\n+        TargetCaller<Master,Integer> createLabelTarget = ( master, context, input, target ) -> master.createLabel( context, readString( input ) );\n+register( Type.CREATE_LABEL, createLabelTarget, INTEGER_SERIALIZER );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 42
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}