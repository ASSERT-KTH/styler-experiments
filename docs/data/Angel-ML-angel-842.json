{
    "project_name": "Angel-ML-angel",
    "violation_id": "842",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/842/RequestConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/842/RequestConverter.java\nindex 9935528b66f..6eccf4414e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/842/RequestConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/842/RequestConverter.java\n@@ -13,6 +13,7 @@\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.tencent.angel.protobuf;\n \n import com.tencent.angel.protobuf.generated.MLProtos.MatrixClock;\n@@ -37,68 +38,69 @@ import java.util.concurrent.atomic.AtomicLong;\n  */\n public final class RequestConverter {\n \n-  private static final Log LOG = LogFactory.getLog(RequestConverter.class);\n-\n-  private RequestConverter() {}\n+    private static final Log LOG = LogFactory.getLog(RequestConverter.class);\n \n-\n-  public static WorkerReportRequest buildWorkerReportRequest(Worker worker) {\n-    WorkerReportRequest.Builder builder = WorkerReportRequest.newBuilder();\n-    builder.setWorkerAttemptId(worker.getWorkerAttemptIdProto());\n-    if (!worker.isWorkerInitFinished()) {\n-      return builder.build();\n-    }\n-    Map<TaskId, Task> tasks = worker.getTaskManager().getRunningTask();\n-    if (tasks != null && !tasks.isEmpty()) {\n-      for (Entry<TaskId, Task> entry : tasks.entrySet()) {\n-        builder.addTaskReports(buildTaskReport(entry.getKey(), entry.getValue()));\n-      }\n+    private RequestConverter() {\n     }\n \n-    Pair.Builder kvBuilder = Pair.newBuilder();\n \n-    Map<String, String> props = worker.getMetrics();\n-    for (Entry<String, String> kv : props.entrySet()) {\n-      kvBuilder.setKey(kv.getKey());\n-      kvBuilder.setValue(kv.getValue());\n-      builder.addPairs(kvBuilder.build());\n-    }\n+    public static WorkerReportRequest buildWorkerReportRequest(Worker worker) {\n+        WorkerReportRequest.Builder builder = WorkerReportRequest.newBuilder();\n+        builder.setWorkerAttemptId(worker.getWorkerAttemptIdProto());\n+        if (!worker.isWorkerInitFinished()) {\n+            return builder.build();\n+        }\n+        Map<TaskId, Task> tasks = worker.getTaskManager().getRunningTask();\n+        if (tasks != null && !tasks.isEmpty()) {\n+            for (Entry<TaskId, Task> entry : tasks.entrySet()) {\n+                builder.addTaskReports(buildTaskReport(entry.getKey(), entry.getValue()));\n+            }\n+        }\n \n-    //add the PSAgentContext,need fix\n-    props = PSAgentContext.get().getMetrics();\n-    for (Entry<String, String> kv : props.entrySet()) {\n-      kvBuilder.setKey(kv.getKey());\n-      kvBuilder.setValue(kv.getValue());\n-      builder.addPairs(kvBuilder.build());\n-    }\n+        Pair.Builder kvBuilder = Pair.newBuilder();\n \n-    return builder.build();\n-  }\n+        Map<String, String> props = worker.getMetrics();\n+        for (Entry<String, String> kv : props.entrySet()) {\n+            kvBuilder.setKey(kv.getKey());\n+            kvBuilder.setValue(kv.getValue());\n+            builder.addPairs(kvBuilder.build());\n+        }\n \n+        //add the PSAgentContext,need fix\n+        props = PSAgentContext.get().getMetrics();\n+        for (Entry<String, String> kv : props.entrySet()) {\n+            kvBuilder.setKey(kv.getKey());\n+            kvBuilder.setValue(kv.getValue());\n+            builder.addPairs(kvBuilder.build());\n+        }\n \n-  private static TaskStateProto buildTaskReport(TaskId taskId, Task task) {\n-    TaskStateProto.Builder builder = TaskStateProto.newBuilder();\n-    if(!PSAgentContext.get().syncClockEnable()) {\n-      builder.setIteration(task.getTaskContext().getEpoch());\n-      Map<Integer, AtomicInteger> matrixClocks = task.getTaskContext().getMatrixClocks();\n-      MatrixClock.Builder clockBuilder = MatrixClock.newBuilder();\n-      for (Entry<Integer, AtomicInteger> clockEntry : matrixClocks.entrySet()) {\n-        builder.addMatrixClocks(clockBuilder.setMatrixId(clockEntry.getKey())\n-            .setClock(clockEntry.getValue().get()).build());\n-      }\n+        return builder.build();\n     }\n \n-    builder.setProgress(task.getProgress());\n-    builder.setState(task.getTaskState().toString());\n-    builder.setTaskId(ProtobufUtil.convertToIdProto(taskId));\n \n-    Pair.Builder kvBuilder = Pair.newBuilder();\n-    Map<String, AtomicLong> taskCounters = task.getTaskContext().getCounters();\n-    for (Entry<String, AtomicLong> kv : taskCounters.entrySet()) {\n-      kvBuilder.setKey(kv.getKey());\n-      kvBuilder.setValue(String.valueOf(kv.getValue().longValue()));\n-      builder.addCounters(kvBuilder.build());\n+    private static TaskStateProto buildTaskReport(TaskId taskId, Task task) {\n+        TaskStateProto.Builder builder = TaskStateProto.newBuilder();\n+        if (!PSAgentContext.get().syncClockEnable()) {\n+            builder.setIteration(task.getTaskContext().getEpoch());\n+            Map<Integer, AtomicInteger> matrixClocks = task.getTaskContext().getMatrixClocks();\n+            MatrixClock.Builder clockBuilder = MatrixClock.newBuilder();\n+            for (Entry<Integer, AtomicInteger> clockEntry : matrixClocks.entrySet()) {\n+                builder.addMatrixClocks(clockBuilder.setMatrixId(clockEntry.getKey())\n+                        .setClock(clockEntry.getValue().get()).build());\n+            }\n+        }\n+\n+        builder.setProgress(task.getProgress());\n+        builder.setState(task.getTaskState().toString());\n+        builder.setTaskId(ProtobufUtil.convertToIdProto(taskId));\n+\n+        Pair.Builder kvBuilder = Pair.newBuilder();\n+        Map<String, AtomicLong> taskCounters = task.getTaskContext().getCounters();\n+        for (Entry<String, AtomicLong> kv : taskCounters.entrySet()) {\n+            kvBuilder.setKey(kv.getKey());\n+            kvBuilder.setValue(String.valueOf(kv.getValue().longValue()));\n+            builder.addCounters(kvBuilder.build());\n+        }\n+        return builder.build();\n     }\n-    return builder.build();\n-  }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/842/RequestConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/842/RequestConverter.java\nindex 9935528b66f..5791dbffbfa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/842/RequestConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/842/RequestConverter.java\n@@ -101,4 +101,4 @@ public final class RequestConverter {\n     }\n     return builder.build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/842/RequestConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/842/RequestConverter.java\nindex 9935528b66f..9beefbf2f1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/842/RequestConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/842/RequestConverter.java\n@@ -25,7 +25,6 @@ import com.tencent.angel.worker.task.Task;\n import com.tencent.angel.worker.task.TaskId;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -35,19 +34,20 @@ import java.util.concurrent.atomic.AtomicLong;\n  * Helper utility to build protocol buffer requests, or build components for protocol buffer\n  * requests.\n  */\n+\n public final class RequestConverter {\n \n   private static final Log LOG = LogFactory.getLog(RequestConverter.class);\n \n   private RequestConverter() {}\n \n-\n   public static WorkerReportRequest buildWorkerReportRequest(Worker worker) {\n     WorkerReportRequest.Builder builder = WorkerReportRequest.newBuilder();\n     builder.setWorkerAttemptId(worker.getWorkerAttemptIdProto());\n     if (!worker.isWorkerInitFinished()) {\n       return builder.build();\n     }\n+\n     Map<TaskId, Task> tasks = worker.getTaskManager().getRunningTask();\n     if (tasks != null && !tasks.isEmpty()) {\n       for (Entry<TaskId, Task> entry : tasks.entrySet()) {\n@@ -56,7 +56,6 @@ public final class RequestConverter {\n     }\n \n     Pair.Builder kvBuilder = Pair.newBuilder();\n-\n     Map<String, String> props = worker.getMetrics();\n     for (Entry<String, String> kv : props.entrySet()) {\n       kvBuilder.setKey(kv.getKey());\n@@ -71,27 +70,22 @@ public final class RequestConverter {\n       kvBuilder.setValue(kv.getValue());\n       builder.addPairs(kvBuilder.build());\n     }\n-\n     return builder.build();\n   }\n \n-\n   private static TaskStateProto buildTaskReport(TaskId taskId, Task task) {\n     TaskStateProto.Builder builder = TaskStateProto.newBuilder();\n-    if(!PSAgentContext.get().syncClockEnable()) {\n+    if (!PSAgentContext.get().syncClockEnable()) {\n       builder.setIteration(task.getTaskContext().getEpoch());\n       Map<Integer, AtomicInteger> matrixClocks = task.getTaskContext().getMatrixClocks();\n       MatrixClock.Builder clockBuilder = MatrixClock.newBuilder();\n       for (Entry<Integer, AtomicInteger> clockEntry : matrixClocks.entrySet()) {\n-        builder.addMatrixClocks(clockBuilder.setMatrixId(clockEntry.getKey())\n-            .setClock(clockEntry.getValue().get()).build());\n+        builder.addMatrixClocks(clockBuilder.setMatrixId(clockEntry.getKey()).setClock(clockEntry.getValue().get()).build());\n       }\n     }\n-\n     builder.setProgress(task.getProgress());\n     builder.setState(task.getTaskState().toString());\n     builder.setTaskId(ProtobufUtil.convertToIdProto(taskId));\n-\n     Pair.Builder kvBuilder = Pair.newBuilder();\n     Map<String, AtomicLong> taskCounters = task.getTaskContext().getCounters();\n     for (Entry<String, AtomicLong> kv : taskCounters.entrySet()) {\n@@ -101,4 +95,5 @@ public final class RequestConverter {\n     }\n     return builder.build();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}