{
    "project_name": "Activiti-Activiti",
    "violation_id": "509",
    "information": {
        "violations": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport java.util.List;\nimport java.util.Map;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/509/MappingAwareCallActivityBehavior.java\nindex 09d855c5912..f88644ba935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/509/MappingAwareCallActivityBehavior.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/509/MappingAwareCallActivityBehavior.java\nindex 09d855c5912..feddad24c52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/509/MappingAwareCallActivityBehavior.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n@@ -37,7 +38,7 @@ public class MappingAwareCallActivityBehavior extends CallActivityBehavior {\n                                             VariablesMappingProvider mappingProvider,\n                                             ProcessVariablesInitiator processVariablesInitiator) {\n         super(processDefinitionKey,\n-              mapExceptions);\n+                mapExceptions);\n         this.mappingProvider = mappingProvider;\n         this.processVariablesInitiator = processVariablesInitiator;\n     }\n@@ -47,7 +48,7 @@ public class MappingAwareCallActivityBehavior extends CallActivityBehavior {\n                                             VariablesMappingProvider mappingProvider,\n                                             ProcessVariablesInitiator processVariablesInitiator) {\n         super(processDefinitionExpression,\n-              mapExceptions);\n+                mapExceptions);\n         this.mappingProvider = mappingProvider;\n         this.processVariablesInitiator = processVariablesInitiator;\n     }\n@@ -58,13 +59,13 @@ public class MappingAwareCallActivityBehavior extends CallActivityBehavior {\n \n         Map<String, Object> inputVariables = mappingProvider.calculateInputVariables(execution);\n         return processVariablesInitiator.calculateVariablesFromExtensionFile(processDefinition,\n-                                                                                                  inputVariables);\n+                inputVariables);\n     }\n \n     @Override\n     protected Map<String, Object> calculateOutBoundVariables(DelegateExecution execution,\n                                                              Map<String, Object> availableVariables) {\n         return mappingProvider.calculateOutPutVariables(buildMappingExecutionContext(execution),\n-                                                        availableVariables);\n+                availableVariables);\n     }\n }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/509/MappingAwareCallActivityBehavior.java\nindex 09d855c5912..056fb4896b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/509/MappingAwareCallActivityBehavior.java\n@@ -17,7 +17,6 @@ package org.activiti.runtime.api.impl;\n \n import java.util.List;\n import java.util.Map;\n-\n import org.activiti.bpmn.model.MapExceptionEntry;\n import org.activiti.engine.delegate.DelegateExecution;\n import org.activiti.engine.delegate.Expression;\n@@ -29,42 +28,35 @@ import static org.activiti.runtime.api.impl.MappingExecutionContext.buildMapping\n \n public class MappingAwareCallActivityBehavior extends CallActivityBehavior {\n \n-    private VariablesMappingProvider mappingProvider;\n-    private ProcessVariablesInitiator processVariablesInitiator;\n-\n-    public MappingAwareCallActivityBehavior(String processDefinitionKey,\n-                                            List<MapExceptionEntry> mapExceptions,\n-                                            VariablesMappingProvider mappingProvider,\n-                                            ProcessVariablesInitiator processVariablesInitiator) {\n-        super(processDefinitionKey,\n-              mapExceptions);\n-        this.mappingProvider = mappingProvider;\n-        this.processVariablesInitiator = processVariablesInitiator;\n-    }\n-\n-    public MappingAwareCallActivityBehavior(Expression processDefinitionExpression,\n-                                            List<MapExceptionEntry> mapExceptions,\n-                                            VariablesMappingProvider mappingProvider,\n-                                            ProcessVariablesInitiator processVariablesInitiator) {\n-        super(processDefinitionExpression,\n-              mapExceptions);\n-        this.mappingProvider = mappingProvider;\n-        this.processVariablesInitiator = processVariablesInitiator;\n-    }\n-\n-    @Override\n-    protected Map<String, Object> calculateInboundVariables(DelegateExecution execution,\n-                                                            ProcessDefinition processDefinition) {\n-\n-        Map<String, Object> inputVariables = mappingProvider.calculateInputVariables(execution);\n-        return processVariablesInitiator.calculateVariablesFromExtensionFile(processDefinition,\n-                                                                                                  inputVariables);\n-    }\n-\n-    @Override\n-    protected Map<String, Object> calculateOutBoundVariables(DelegateExecution execution,\n-                                                             Map<String, Object> availableVariables) {\n-        return mappingProvider.calculateOutPutVariables(buildMappingExecutionContext(execution),\n-                                                        availableVariables);\n-    }\n-}\n+  private VariablesMappingProvider mappingProvider;\n+\n+  private ProcessVariablesInitiator processVariablesInitiator;\n+\n+  public MappingAwareCallActivityBehavior(String processDefinitionKey,\n+                                          List<MapExceptionEntry> mapExceptions,\n+                                          VariablesMappingProvider mappingProvider, ProcessVariablesInitiator processVariablesInitiator) {\n+    super(processDefinitionKey, mapExceptions);\n+    this.mappingProvider = mappingProvider;\n+    this.processVariablesInitiator = processVariablesInitiator;\n+  }\n+\n+  public MappingAwareCallActivityBehavior(Expression processDefinitionExpression,\n+                                          List<MapExceptionEntry> mapExceptions,\n+                                          VariablesMappingProvider mappingProvider, ProcessVariablesInitiator processVariablesInitiator) {\n+    super(processDefinitionExpression, mapExceptions);\n+    this.mappingProvider = mappingProvider;\n+    this.processVariablesInitiator = processVariablesInitiator;\n+  }\n+\n+  @Override\n+  protected Map<String, Object> calculateInboundVariables(DelegateExecution execution, ProcessDefinition processDefinition) {\n+    Map<String, Object> inputVariables = mappingProvider.calculateInputVariables(execution);\n+    return processVariablesInitiator.calculateVariablesFromExtensionFile(processDefinition, inputVariables);\n+  }\n+\n+  @Override\n+  protected Map<String, Object> calculateOutBoundVariables(DelegateExecution execution, Map<String, Object> availableVariables) {\n+    return mappingProvider.calculateOutPutVariables(buildMappingExecutionContext(execution),\n+                                                    availableVariables);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/509/MappingAwareCallActivityBehavior.java\nindex 09d855c5912..f88644ba935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/509/MappingAwareCallActivityBehavior.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/509/MappingAwareCallActivityBehavior.java\nindex 09d855c5912..f88644ba935 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/509/MappingAwareCallActivityBehavior.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/509/MappingAwareCallActivityBehavior.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}