{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "4269",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4269/FormattedLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/4269/FormattedLogger.java\nindex e09f2beddc9..7eecaaa9e1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4269/FormattedLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/4269/FormattedLogger.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.logging;\n \n import java.io.PrintWriter;\n@@ -31,67 +32,67 @@ import org.neo4j.function.Suppliers;\n \n class FormattedLogger extends AbstractPrintWriterLogger\n {\n-    static final DateTimeFormatter DATE_TIME_FORMATTER =\n-            DateTimeFormatter.ofPattern( \"yyyy-MM-dd HH:mm:ss.SSSZ\" );\n-    static final Function<ZoneId, ZonedDateTime> DEFAULT_CURRENT_DATE_TIME = zoneId ->\n-            ZonedDateTime.now()\n-                    .withZoneSameInstant( zoneId );\n-    private FormattedLog formattedLog;\n-    private final String prefix;\n-    private final DateTimeFormatter dateTimeFormatter;\n-    private Supplier<ZonedDateTime> supplier;\n+  static final DateTimeFormatter DATE_TIME_FORMATTER =\n+      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSZ\");\n+  static final Function<ZoneId, ZonedDateTime> DEFAULT_CURRENT_DATE_TIME = zoneId ->\n+      ZonedDateTime.now()\n+          .withZoneSameInstant(zoneId);\n+  private FormattedLog formattedLog;\n+  private final String prefix;\n+  private final DateTimeFormatter dateTimeFormatter;\n+  private Supplier<ZonedDateTime> supplier;\n \n-    FormattedLogger( FormattedLog formattedLog, @Nonnull Supplier<PrintWriter> writerSupplier,\n-                     @Nonnull String prefix, DateTimeFormatter dateTimeFormatter,\n-                     Supplier<ZonedDateTime> zonedDateTimeSupplier )\n-    {\n-        super( writerSupplier, formattedLog.lock, formattedLog.autoFlush );\n+  FormattedLogger(FormattedLog formattedLog, @Nonnull Supplier<PrintWriter> writerSupplier,\n+                  @Nonnull String prefix, DateTimeFormatter dateTimeFormatter,\n+                  Supplier<ZonedDateTime> zonedDateTimeSupplier)\n+  {\n+    super(writerSupplier, formattedLog.lock, formattedLog.autoFlush);\n \n-        this.formattedLog = formattedLog;\n-        this.prefix = prefix;\n-        this.dateTimeFormatter = dateTimeFormatter;\n-        this.supplier = zonedDateTimeSupplier;\n-    }\n+    this.formattedLog = formattedLog;\n+    this.prefix = prefix;\n+    this.dateTimeFormatter = dateTimeFormatter;\n+    this.supplier = zonedDateTimeSupplier;\n+  }\n \n-    @Override\n-    protected void writeLog( @Nonnull PrintWriter out, @Nonnull String message )\n-    {\n-        lineStart( out );\n-        out.write( message );\n-        out.println();\n-    }\n+  @Override\n+  protected void writeLog(@Nonnull PrintWriter out, @Nonnull String message)\n+  {\n+    lineStart(out);\n+    out.write(message);\n+    out.println();\n+  }\n \n-    @Override\n-    protected void writeLog( @Nonnull PrintWriter out, @Nonnull String message, @Nonnull Throwable throwable )\n+  @Override\n+  protected void writeLog(@Nonnull PrintWriter out, @Nonnull String message, @Nonnull Throwable throwable)\n+  {\n+    lineStart(out);\n+    out.write(message);\n+    if (throwable.getMessage() != null)\n     {\n-        lineStart( out );\n-        out.write( message );\n-        if ( throwable.getMessage() != null )\n-        {\n-            out.write( ' ' );\n-            out.write( throwable.getMessage() );\n-        }\n-        out.println();\n-        throwable.printStackTrace( out );\n+      out.write(' ');\n+      out.write(throwable.getMessage());\n     }\n+    out.println();\n+    throwable.printStackTrace(out);\n+  }\n \n-    @Override\n-    protected Logger getBulkLogger( @Nonnull PrintWriter out, @Nonnull Object lock )\n-    {\n-        return new FormattedLogger( formattedLog, Suppliers.singleton( out ), prefix, DATE_TIME_FORMATTER,\n-                () -> DEFAULT_CURRENT_DATE_TIME.apply( formattedLog.zoneId ) );\n-    }\n+  @Override\n+  protected Logger getBulkLogger(@Nonnull PrintWriter out, @Nonnull Object lock)\n+  {\n+    return new FormattedLogger(formattedLog, Suppliers.singleton(out), prefix, DATE_TIME_FORMATTER,\n+        () -> DEFAULT_CURRENT_DATE_TIME.apply(formattedLog.zoneId));\n+  }\n \n-    private void lineStart( PrintWriter out )\n-    {\n-        out.write( time() );\n-        out.write( ' ' );\n-        out.write( prefix );\n-        out.write( ' ' );\n-    }\n+  private void lineStart(PrintWriter out)\n+  {\n+    out.write(time());\n+    out.write(' ');\n+    out.write(prefix);\n+    out.write(' ');\n+  }\n \n-    private String time()\n-    {\n-        return dateTimeFormatter.format( supplier.get() );\n-    }\n+  private String time()\n+  {\n+    return dateTimeFormatter.format(supplier.get());\n+  }\n }\n",
            "diff_size": 62
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4269/FormattedLogger.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/4269/FormattedLogger.java\nindex e09f2beddc9..15bf51d8b0d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/4269/FormattedLogger.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/4269/FormattedLogger.java\n@@ -31,23 +31,17 @@ import org.neo4j.function.Suppliers;\n \n class FormattedLogger extends AbstractPrintWriterLogger\n {\n-    static final DateTimeFormatter DATE_TIME_FORMATTER =\n-            DateTimeFormatter.ofPattern( \"yyyy-MM-dd HH:mm:ss.SSSZ\" );\n-    static final Function<ZoneId, ZonedDateTime> DEFAULT_CURRENT_DATE_TIME = zoneId ->\n-            ZonedDateTime.now()\n-                    .withZoneSameInstant( zoneId );\n-    private FormattedLog formattedLog;\n+    static final DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern( \"yyyy-MM-dd HH:mm:ss.SSSZ\" ); static final Function<ZoneId,ZonedDateTime> DEFAULT_CURRENT_DATE_TIME = zoneId -> ZonedDateTime.now().withZoneSameInstant( zoneId );\n+\n+private FormattedLog formattedLog;\n     private final String prefix;\n     private final DateTimeFormatter dateTimeFormatter;\n     private Supplier<ZonedDateTime> supplier;\n \n-    FormattedLogger( FormattedLog formattedLog, @Nonnull Supplier<PrintWriter> writerSupplier,\n-                     @Nonnull String prefix, DateTimeFormatter dateTimeFormatter,\n-                     Supplier<ZonedDateTime> zonedDateTimeSupplier )\n-    {\n+    FormattedLogger( FormattedLog formattedLog, @Nonnull Supplier<PrintWriter> writerSupplier, @Nonnull String prefix, DateTimeFormatter dateTimeFormatter, Supplier<ZonedDateTime> zonedDateTimeSupplier )\n+{\n         super( writerSupplier, formattedLog.lock, formattedLog.autoFlush );\n-\n-        this.formattedLog = formattedLog;\n+this.formattedLog = formattedLog;\n         this.prefix = prefix;\n         this.dateTimeFormatter = dateTimeFormatter;\n         this.supplier = zonedDateTimeSupplier;\n@@ -94,4 +88,4 @@ class FormattedLogger extends AbstractPrintWriterLogger\n     {\n         return dateTimeFormatter.format( supplier.get() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}