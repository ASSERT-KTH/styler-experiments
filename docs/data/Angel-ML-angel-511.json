{
    "project_name": "Angel-ML-angel",
    "violation_id": "511",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/511/InitWalkPathParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/511/InitWalkPathParam.java\nindex 580b362bd81..dc9a3da1fac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/511/InitWalkPathParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/511/InitWalkPathParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.node2vec.updatefuncs.initwalkpath;\n \n import com.tencent.angel.PartitionKey;\n@@ -25,96 +26,100 @@ import java.util.List;\n \n public class InitWalkPathParam extends UpdateParam {\n \n-  private int neighborMatrixId;\n-  private int walkLength;\n-  private int numParts;\n-  private int threshold;\n-  private double keepProba;\n-  private boolean isTrunc;\n-\n-\n-  public InitWalkPathParam(int matrixId, boolean updateClock, int neighborMatrixId, int walkLength,\n-      int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n-    super(matrixId, updateClock);\n-    this.neighborMatrixId = neighborMatrixId;\n-    this.walkLength = walkLength;\n-    this.numParts = numParts;\n-    this.threshold = threshold;\n-    this.keepProba = keepProba;\n-    this.isTrunc = isTrunc;\n-  }\n-\n-  public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n-    this(matrixId, false, neighborMatrixId, walkLength, numParts, threshold, keepProba, isTrunc);\n-  }\n-\n-  public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts) {\n-    this(matrixId, false, neighborMatrixId, walkLength, numParts, -1, 1.0, false);\n-  }\n-\n-  public int getNeighborMatrixId() {\n-    return neighborMatrixId;\n-  }\n-\n-  public void setNeighborMatrixId(int neighborMatrixId) {\n-    this.neighborMatrixId = neighborMatrixId;\n-  }\n-\n-  public int getWalkLength() {\n-    return walkLength;\n-  }\n-\n-  public void setWalkLength(int walkLength) {\n-    this.walkLength = walkLength;\n-  }\n-\n-  public int getThreshold() {\n-    return threshold;\n-  }\n-\n-  public void setThreshold(int threshold) {\n-    this.threshold = threshold;\n-  }\n-\n-  public double getKeepProba() {\n-    return keepProba;\n-  }\n-\n-  public void setKeepProba(double keepProba) {\n-    this.keepProba = keepProba;\n-  }\n-\n-  public int getNumParts() {\n-    return numParts;\n-  }\n-\n-  public void setNumParts(int numParts) {\n-    this.numParts = numParts;\n-  }\n-\n-  public boolean isTrunc() {\n-    return isTrunc;\n-  }\n-\n-  public void setTrunc(boolean trunc) {\n-    isTrunc = trunc;\n-  }\n-\n-  @Override\n-  public List<PartitionUpdateParam> split() {\n-    List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-    int size = parts.size();\n-\n-    List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n-    for (PartitionKey part : parts) {\n-      partParams.add(\n-          new InitWalkPathPartitionParam(matrixId, part, neighborMatrixId, walkLength, numParts,\n-              threshold, keepProba, isTrunc)\n-      );\n-    }\n-\n-    return partParams;\n-  }\n+    private int neighborMatrixId;\n+    private int walkLength;\n+    private int numParts;\n+    private int threshold;\n+    private double keepProba;\n+    private boolean isTrunc;\n+\n+\n+    public InitWalkPathParam(int matrixId, boolean updateClock, int neighborMatrixId,\n+                             int walkLength,\n+                             int numParts,\n+                             int threshold, double keepProba, boolean isTrunc) {\n+        super(matrixId, updateClock);\n+        this.neighborMatrixId = neighborMatrixId;\n+        this.walkLength = walkLength;\n+        this.numParts = numParts;\n+        this.threshold = threshold;\n+        this.keepProba = keepProba;\n+        this.isTrunc = isTrunc;\n+    }\n+\n+    public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts,\n+                             int threshold, double keepProba, boolean isTrunc) {\n+        this(matrixId, false, neighborMatrixId, walkLength, numParts, threshold, keepProba,\n+                isTrunc);\n+    }\n+\n+    public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts) {\n+        this(matrixId, false, neighborMatrixId, walkLength, numParts, -1, 1.0, false);\n+    }\n+\n+    public int getNeighborMatrixId() {\n+        return neighborMatrixId;\n+    }\n+\n+    public void setNeighborMatrixId(int neighborMatrixId) {\n+        this.neighborMatrixId = neighborMatrixId;\n+    }\n+\n+    public int getWalkLength() {\n+        return walkLength;\n+    }\n+\n+    public void setWalkLength(int walkLength) {\n+        this.walkLength = walkLength;\n+    }\n+\n+    public int getThreshold() {\n+        return threshold;\n+    }\n+\n+    public void setThreshold(int threshold) {\n+        this.threshold = threshold;\n+    }\n+\n+    public double getKeepProba() {\n+        return keepProba;\n+    }\n+\n+    public void setKeepProba(double keepProba) {\n+        this.keepProba = keepProba;\n+    }\n+\n+    public int getNumParts() {\n+        return numParts;\n+    }\n+\n+    public void setNumParts(int numParts) {\n+        this.numParts = numParts;\n+    }\n+\n+    public boolean isTrunc() {\n+        return isTrunc;\n+    }\n+\n+    public void setTrunc(boolean trunc) {\n+        isTrunc = trunc;\n+    }\n+\n+    @Override\n+    public List<PartitionUpdateParam> split() {\n+        List<PartitionKey> parts =\n+                PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n+        int size = parts.size();\n+\n+        List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n+        for (PartitionKey part : parts) {\n+            partParams.add(\n+                    new InitWalkPathPartitionParam(matrixId, part, neighborMatrixId, walkLength,\n+                            numParts,\n+                            threshold, keepProba, isTrunc)\n+            );\n+        }\n+\n+        return partParams;\n+    }\n }\n",
            "diff_size": 97
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/511/InitWalkPathParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/511/InitWalkPathParam.java\nindex 580b362bd81..3aad6e4ed5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/511/InitWalkPathParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/511/InitWalkPathParam.java\n@@ -33,8 +33,7 @@ public class InitWalkPathParam extends UpdateParam {\n   private boolean isTrunc;\n \n \n-  public InitWalkPathParam(int matrixId, boolean updateClock, int neighborMatrixId, int walkLength,\n-      int numParts,\n+  public InitWalkPathParam(int matrixId, boolean updateClock, int neighborMatrixId, int walkLength, int numParts,\n       int threshold, double keepProba, boolean isTrunc) {\n     super(matrixId, updateClock);\n     this.neighborMatrixId = neighborMatrixId;\n@@ -45,9 +44,8 @@ public class InitWalkPathParam extends UpdateParam {\n     this.isTrunc = isTrunc;\n   }\n \n-  public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n-    this(matrixId, false, neighborMatrixId, walkLength, numParts, threshold, keepProba, isTrunc);\n+  public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts, int threshold, double keepProba, boolean isTrunc) {\n+  this(matrixId, false, neighborMatrixId, walkLength, numParts, threshold, keepProba, isTrunc);\n   }\n \n   public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts) {\n@@ -111,10 +109,9 @@ public class InitWalkPathParam extends UpdateParam {\n     for (PartitionKey part : parts) {\n       partParams.add(\n           new InitWalkPathPartitionParam(matrixId, part, neighborMatrixId, walkLength, numParts,\n-              threshold, keepProba, isTrunc)\n-      );\n+              threshold, keepProba, isTrunc));\n     }\n \n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/511/InitWalkPathParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/511/InitWalkPathParam.java\nindex 580b362bd81..795f75a222e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/511/InitWalkPathParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/511/InitWalkPathParam.java\n@@ -32,10 +32,8 @@ public class InitWalkPathParam extends UpdateParam {\n   private double keepProba;\n   private boolean isTrunc;\n \n-\n-  public InitWalkPathParam(int matrixId, boolean updateClock, int neighborMatrixId, int walkLength,\n-      int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n+  public InitWalkPathParam(int matrixId,\n+                           boolean updateClock, int neighborMatrixId, int walkLength, int numParts, int threshold, double keepProba, boolean isTrunc) {\n     super(matrixId, updateClock);\n     this.neighborMatrixId = neighborMatrixId;\n     this.walkLength = walkLength;\n@@ -45,8 +43,7 @@ public class InitWalkPathParam extends UpdateParam {\n     this.isTrunc = isTrunc;\n   }\n \n-  public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts,\n-      int threshold, double keepProba, boolean isTrunc) {\n+  public InitWalkPathParam(int matrixId, int neighborMatrixId, int walkLength, int numParts, int threshold, double keepProba, boolean isTrunc) {\n     this(matrixId, false, neighborMatrixId, walkLength, numParts, threshold, keepProba, isTrunc);\n   }\n \n@@ -106,15 +103,11 @@ public class InitWalkPathParam extends UpdateParam {\n   public List<PartitionUpdateParam> split() {\n     List<PartitionKey> parts = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n     int size = parts.size();\n-\n     List<PartitionUpdateParam> partParams = new ArrayList<>(size);\n     for (PartitionKey part : parts) {\n-      partParams.add(\n-          new InitWalkPathPartitionParam(matrixId, part, neighborMatrixId, walkLength, numParts,\n-              threshold, keepProba, isTrunc)\n-      );\n+      partParams.add(new InitWalkPathPartitionParam(matrixId, part, neighborMatrixId, walkLength, numParts, threshold, keepProba, isTrunc));\n     }\n-\n     return partParams;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}