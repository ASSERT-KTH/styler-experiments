{
    "project_name": "wso2-attic-commons",
    "violation_id": "531",
    "information": {
        "violations": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            return new EventOutputRate(((IntConstant) events).getValue());\n        }\n        throw new MalformedAttributeException(\"Unsupported output event rate type, output event rate only supports int\");\n    }\n\n    public static TimeOutputRate perTimePeriod(TimeConstant timeConstant) {",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/531/Output.java\nindex 77cb6d2a3c2..3d72471dda4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/531/Output.java\n@@ -35,7 +35,7 @@ public abstract class Output {\n         } else if (events instanceof IntConstant) {\n             return new EventOutputRate(((IntConstant) events).getValue());\n         }\n-        throw new MalformedAttributeException(\"Unsupported output event rate type, output event rate only supports int\");\n+      throw new MalformedAttributeException(\"Unsupported output event rate type, output event rate only supports int\");\n     }\n \n     public static TimeOutputRate perTimePeriod(TimeConstant timeConstant) {\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/531/Output.java\nindex 77cb6d2a3c2..3c989332e10 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/531/Output.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.query.api.query.output;\n \n import org.wso2.siddhi.query.api.exception.MalformedAttributeException;\n@@ -25,34 +26,34 @@ import org.wso2.siddhi.query.api.expression.constant.TimeConstant;\n \n public abstract class Output {\n \n-    public enum Type {\n-        ALL, FIRST, LAST, SNAPSHOT\n-    }\n+  public enum Type {\n+    ALL, FIRST, LAST, SNAPSHOT\n+  }\n \n-    public static EventOutputRate perEvents(Constant events) {\n-        if (events instanceof LongConstant) {\n-            return new EventOutputRate(((LongConstant) events).getValue().intValue());\n-        } else if (events instanceof IntConstant) {\n-            return new EventOutputRate(((IntConstant) events).getValue());\n-        }\n-        throw new MalformedAttributeException(\"Unsupported output event rate type, output event rate only supports int\");\n+  public static EventOutputRate perEvents(Constant events) {\n+    if (events instanceof LongConstant) {\n+      return new EventOutputRate(((LongConstant) events).getValue().intValue());\n+    } else if (events instanceof IntConstant) {\n+      return new EventOutputRate(((IntConstant) events).getValue());\n     }\n+    throw new MalformedAttributeException(\"Unsupported output event rate type, output event rate only supports int\");\n+  }\n \n-    public static TimeOutputRate perTimePeriod(TimeConstant timeConstant) {\n-        return new TimeOutputRate(timeConstant.value());\n-    }\n+  public static TimeOutputRate perTimePeriod(TimeConstant timeConstant) {\n+    return new TimeOutputRate(timeConstant.value());\n+  }\n \n-    public static TimeOutputRate perTimePeriod(LongConstant longConstant) {\n-        return new TimeOutputRate(longConstant.getValue());\n-    }\n+  public static TimeOutputRate perTimePeriod(LongConstant longConstant) {\n+    return new TimeOutputRate(longConstant.getValue());\n+  }\n \n-    public static SnapshotOutputRate perSnapshot(TimeConstant timeConstant) {\n-        return new SnapshotOutputRate(timeConstant.value());\n-    }\n+  public static SnapshotOutputRate perSnapshot(TimeConstant timeConstant) {\n+    return new SnapshotOutputRate(timeConstant.value());\n+  }\n \n-    public static SnapshotOutputRate perSnapshot(LongConstant longConstant) {\n-        return new SnapshotOutputRate(longConstant.getValue());\n-    }\n+  public static SnapshotOutputRate perSnapshot(LongConstant longConstant) {\n+    return new SnapshotOutputRate(longConstant.getValue());\n+  }\n \n \n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/531/Output.java\nindex 77cb6d2a3c2..07c49d8d4bd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/531/Output.java\n@@ -55,4 +55,4 @@ public abstract class Output {\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/531/Output.java\nindex 77cb6d2a3c2..3d72471dda4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/531/Output.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/531/Output.java\n@@ -35,7 +35,7 @@ public abstract class Output {\n         } else if (events instanceof IntConstant) {\n             return new EventOutputRate(((IntConstant) events).getValue());\n         }\n-        throw new MalformedAttributeException(\"Unsupported output event rate type, output event rate only supports int\");\n+      throw new MalformedAttributeException(\"Unsupported output event rate type, output event rate only supports int\");\n     }\n \n     public static TimeOutputRate perTimePeriod(TimeConstant timeConstant) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}