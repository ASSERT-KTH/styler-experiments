{
    "project_name": "wso2-attic-commons",
    "violation_id": "266",
    "information": {
        "violations": [
            {
                "line": "28",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * Both the leftProperty & rightProperty has the format A.foo where A is a Stream and foo is a attribute in the stream\n     * Existence of those Streams and properties needs to be validated at org.wso2.siddhi.api.eventstream.query.Query\n     */\n",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/266/SimpleCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/266/SimpleCondition.java\nindex 55715197772..037467693d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/266/SimpleCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/266/SimpleCondition.java\n@@ -2,9 +2,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing,\n  * software distributed under the License is distributed on an\n  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n@@ -24,69 +24,69 @@ import java.util.Map;\n  */\n public class SimpleCondition extends ExpirableCondition implements WhereCondition {\n \n-    /**\n-     * Both the leftProperty & rightProperty has the format A.foo where A is a Stream and foo is a attribute in the stream\n-     * Existence of those Streams and properties needs to be validated at org.wso2.siddhi.api.eventstream.query.Query\n-     */\n+  /**\n+   * Both the leftProperty & rightProperty has the format A.foo where A is a Stream and foo is a attribute in the stream\n+   * Existence of those Streams and properties needs to be validated at org.wso2.siddhi.api.eventstream.query.Query\n+   */\n \n-    private String leftProperty;\n-    private String rightProperty;\n-    private ConditionOperator operator;\n+  private String leftProperty;\n+  private String rightProperty;\n+  private ConditionOperator operator;\n \n \n-    /**\n-     * @param leftProperty  A property in the format StreamId.attribute\n-     * @param operator      The condition operator of the condition\n-     * @param rightProperty A property in the format StreamId.attribute\n-     */\n-    public SimpleCondition(String leftProperty, ConditionOperator operator,\n-                           String rightProperty) {\n-        this.leftProperty = leftProperty;\n-        this.rightProperty = rightProperty;\n-        this.operator = operator;\n-    }\n+  /**\n+   * @param leftProperty  A property in the format StreamId.attribute\n+   * @param operator      The condition operator of the condition\n+   * @param rightProperty A property in the format StreamId.attribute\n+   */\n+  public SimpleCondition(String leftProperty, ConditionOperator operator,\n+                         String rightProperty) {\n+    this.leftProperty = leftProperty;\n+    this.rightProperty = rightProperty;\n+    this.operator = operator;\n+  }\n \n-    /**\n-     * get the left property of the stream\n-     *\n-     * @return left property of the stream\n-     */\n-    public String getLeftProperty() {\n-        return leftProperty;\n-    }\n+  /**\n+   * get the left property of the stream\n+   *\n+   * @return left property of the stream\n+   */\n+  public String getLeftProperty() {\n+    return leftProperty;\n+  }\n \n-    /**\n-     * get the right property of the stream\n-     *\n-     * @return right property of the stream\n-     */\n-    public String getRightProperty() {\n-        return rightProperty;\n-    }\n+  /**\n+   * get the right property of the stream\n+   *\n+   * @return right property of the stream\n+   */\n+  public String getRightProperty() {\n+    return rightProperty;\n+  }\n \n-    /**\n-     * get the condition operator\n-     *\n-     * @return the condition operator of the condition\n-     */\n-    public ConditionOperator getOperator() {\n-        return operator;\n-    }\n+  /**\n+   * get the condition operator\n+   *\n+   * @return the condition operator of the condition\n+   */\n+  public ConditionOperator getOperator() {\n+    return operator;\n+  }\n \n-    @Override\n-    public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n-        if (referenceConversion == null) {\n-            return (WhereCondition) new SimpleCondition(leftProperty, operator, rightProperty).within(getLifeTime());\n-        } else {\n-            String leftProp = leftProperty.replaceAll(\" \", \"\");\n-            String rightProp = rightProperty.replaceAll(\" \", \"\");\n-            for (String ref : referenceConversion.keySet()) {\n-                leftProp = leftProp.replace(\"$\" + ref, \"$\" + referenceConversion.get(ref));\n-                rightProp = rightProp.replace(\"$\" + ref, \"$\" + referenceConversion.get(ref));\n-            }\n-            return (WhereCondition) new SimpleCondition(leftProp, operator, rightProp).within(getLifeTime());\n-        }\n+  @Override\n+  public WhereCondition getNewInstance(Map<String, String> referenceConversion) {\n+    if (referenceConversion == null) {\n+      return (WhereCondition) new SimpleCondition(leftProperty, operator, rightProperty).within(getLifeTime());\n+    } else {\n+      String leftProp = leftProperty.replaceAll(\" \", \"\");\n+      String rightProp = rightProperty.replaceAll(\" \", \"\");\n+      for (String ref : referenceConversion.keySet()) {\n+        leftProp = leftProp.replace(\"$\" + ref, \"$\" + referenceConversion.get(ref));\n+        rightProp = rightProp.replace(\"$\" + ref, \"$\" + referenceConversion.get(ref));\n+      }\n+      return (WhereCondition) new SimpleCondition(leftProp, operator, rightProp).within(getLifeTime());\n     }\n+  }\n \n \n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/266/SimpleCondition.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/266/SimpleCondition.java\nindex 55715197772..bdb3e1e2459 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/266/SimpleCondition.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/266/SimpleCondition.java\n@@ -39,9 +39,8 @@ public class SimpleCondition extends ExpirableCondition implements WhereConditio\n      * @param operator      The condition operator of the condition\n      * @param rightProperty A property in the format StreamId.attribute\n      */\n-    public SimpleCondition(String leftProperty, ConditionOperator operator,\n-                           String rightProperty) {\n-        this.leftProperty = leftProperty;\n+    public SimpleCondition(String leftProperty, ConditionOperator operator, String rightProperty) {\n+    this.leftProperty = leftProperty;\n         this.rightProperty = rightProperty;\n         this.operator = operator;\n     }\n@@ -89,4 +88,4 @@ public class SimpleCondition extends ExpirableCondition implements WhereConditio\n     }\n \n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}