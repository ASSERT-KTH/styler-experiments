{
    "project_name": "Angel-ML-angel",
    "violation_id": "620",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/620/TransportMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/620/TransportMethod.java\nindex 82fe44d52b8..20cd93ee8e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/620/TransportMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/620/TransportMethod.java\n@@ -22,43 +22,44 @@ import java.util.HashMap;\n import java.util.Map;\n \n public enum TransportMethod {\n-  GET_ROWSPLIT(1), PUT_PARTUPDATE(2), GET_ROWSSPLIT(3), GET_PART(4), PUT_PART(5), GET_CLOCKS(\n-      6), UPDATE_PSF(7), GET_PSF(8), RECOVER_PART(9), UPDATE_CLOCK(10), UPDATE(11), INDEX_GET_ROW(\n-      12), INDEX_GET_ROWS(13), CHECKPOINT(14), GET_STATE(15), UNKNOWN(16);\n+    GET_ROWSPLIT(1), PUT_PARTUPDATE(2), GET_ROWSSPLIT(3), GET_PART(4), PUT_PART(5), GET_CLOCKS(\n+            6), UPDATE_PSF(7), GET_PSF(8), RECOVER_PART(9), UPDATE_CLOCK(10), UPDATE(11),\n+    INDEX_GET_ROW(\n+            12), INDEX_GET_ROWS(13), CHECKPOINT(14), GET_STATE(15), UNKNOWN(16);\n \n-  public static Map<Integer, TransportMethod> typeIdToTypeMap;\n+    public static Map<Integer, TransportMethod> typeIdToTypeMap;\n \n-  static {\n-    typeIdToTypeMap = new HashMap<>();\n-    typeIdToTypeMap.put(GET_ROWSPLIT.methodId, GET_ROWSPLIT);\n-    typeIdToTypeMap.put(PUT_PARTUPDATE.methodId, PUT_PARTUPDATE);\n-    typeIdToTypeMap.put(GET_ROWSSPLIT.methodId, GET_ROWSSPLIT);\n-    typeIdToTypeMap.put(GET_PART.methodId, GET_PART);\n-    typeIdToTypeMap.put(PUT_PART.methodId, PUT_PART);\n-    typeIdToTypeMap.put(GET_CLOCKS.methodId, GET_CLOCKS);\n-    typeIdToTypeMap.put(UPDATE_PSF.methodId, UPDATE_PSF);\n-    typeIdToTypeMap.put(GET_PSF.methodId, GET_PSF);\n-    typeIdToTypeMap.put(RECOVER_PART.methodId, RECOVER_PART);\n-    typeIdToTypeMap.put(UPDATE_CLOCK.methodId, UPDATE_CLOCK);\n-    typeIdToTypeMap.put(UPDATE.methodId, UPDATE);\n-    typeIdToTypeMap.put(INDEX_GET_ROW.methodId, INDEX_GET_ROW);\n-    typeIdToTypeMap.put(INDEX_GET_ROWS.methodId, INDEX_GET_ROWS);\n-    typeIdToTypeMap.put(CHECKPOINT.methodId, CHECKPOINT);\n-    typeIdToTypeMap.put(GET_STATE.methodId, GET_STATE);\n-    typeIdToTypeMap.put(UNKNOWN.methodId, UNKNOWN);\n-  }\n+    static {\n+        typeIdToTypeMap = new HashMap<>();\n+        typeIdToTypeMap.put(GET_ROWSPLIT.methodId, GET_ROWSPLIT);\n+        typeIdToTypeMap.put(PUT_PARTUPDATE.methodId, PUT_PARTUPDATE);\n+        typeIdToTypeMap.put(GET_ROWSSPLIT.methodId, GET_ROWSSPLIT);\n+        typeIdToTypeMap.put(GET_PART.methodId, GET_PART);\n+        typeIdToTypeMap.put(PUT_PART.methodId, PUT_PART);\n+        typeIdToTypeMap.put(GET_CLOCKS.methodId, GET_CLOCKS);\n+        typeIdToTypeMap.put(UPDATE_PSF.methodId, UPDATE_PSF);\n+        typeIdToTypeMap.put(GET_PSF.methodId, GET_PSF);\n+        typeIdToTypeMap.put(RECOVER_PART.methodId, RECOVER_PART);\n+        typeIdToTypeMap.put(UPDATE_CLOCK.methodId, UPDATE_CLOCK);\n+        typeIdToTypeMap.put(UPDATE.methodId, UPDATE);\n+        typeIdToTypeMap.put(INDEX_GET_ROW.methodId, INDEX_GET_ROW);\n+        typeIdToTypeMap.put(INDEX_GET_ROWS.methodId, INDEX_GET_ROWS);\n+        typeIdToTypeMap.put(CHECKPOINT.methodId, CHECKPOINT);\n+        typeIdToTypeMap.put(GET_STATE.methodId, GET_STATE);\n+        typeIdToTypeMap.put(UNKNOWN.methodId, UNKNOWN);\n+    }\n \n-  public static TransportMethod valueOf(int id) {\n-    return typeIdToTypeMap.get(id);\n-  }\n+    public static TransportMethod valueOf(int id) {\n+        return typeIdToTypeMap.get(id);\n+    }\n \n-  private final int methodId;\n+    private final int methodId;\n \n-  TransportMethod(int methodId) {\n-    this.methodId = methodId;\n-  }\n+    TransportMethod(int methodId) {\n+        this.methodId = methodId;\n+    }\n \n-  public int getMethodId() {\n-    return methodId;\n-  }\n+    public int getMethodId() {\n+        return methodId;\n+    }\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/620/TransportMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/620/TransportMethod.java\nindex 82fe44d52b8..9854d2264fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/620/TransportMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/620/TransportMethod.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.server.data;\n \n import java.util.HashMap;\n@@ -23,10 +22,8 @@ import java.util.Map;\n \n public enum TransportMethod {\n   GET_ROWSPLIT(1), PUT_PARTUPDATE(2), GET_ROWSSPLIT(3), GET_PART(4), PUT_PART(5), GET_CLOCKS(\n-      6), UPDATE_PSF(7), GET_PSF(8), RECOVER_PART(9), UPDATE_CLOCK(10), UPDATE(11), INDEX_GET_ROW(\n-      12), INDEX_GET_ROWS(13), CHECKPOINT(14), GET_STATE(15), UNKNOWN(16);\n-\n-  public static Map<Integer, TransportMethod> typeIdToTypeMap;\n+      6), UPDATE_PSF(7), GET_PSF(8), RECOVER_PART(9), UPDATE_CLOCK(10), UPDATE(11), INDEX_GET_ROW(12), INDEX_GET_ROWS(13), CHECKPOINT(14), GET_STATE(15), UNKNOWN(16);\n+public static Map<Integer, TransportMethod> typeIdToTypeMap;\n \n   static {\n     typeIdToTypeMap = new HashMap<>();\n@@ -61,4 +58,4 @@ public enum TransportMethod {\n   public int getMethodId() {\n     return methodId;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "24",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 280).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/620/TransportMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/620/TransportMethod.java\nindex 82fe44d52b8..88aaeadf064 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/620/TransportMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/620/TransportMethod.java\n@@ -21,10 +21,7 @@ package com.tencent.angel.ps.server.data;\n import java.util.HashMap;\n import java.util.Map;\n \n-public enum TransportMethod {\n-  GET_ROWSPLIT(1), PUT_PARTUPDATE(2), GET_ROWSSPLIT(3), GET_PART(4), PUT_PART(5), GET_CLOCKS(\n-      6), UPDATE_PSF(7), GET_PSF(8), RECOVER_PART(9), UPDATE_CLOCK(10), UPDATE(11), INDEX_GET_ROW(\n-      12), INDEX_GET_ROWS(13), CHECKPOINT(14), GET_STATE(15), UNKNOWN(16);\n+public enum TransportMethod {GET_ROWSPLIT(1), PUT_PARTUPDATE(2), GET_ROWSSPLIT(3), GET_PART(4), PUT_PART(5), GET_CLOCKS(6), UPDATE_PSF(7), GET_PSF(8), RECOVER_PART(9), UPDATE_CLOCK(10), UPDATE(11), INDEX_GET_ROW(12), INDEX_GET_ROWS(13), CHECKPOINT(14), GET_STATE(15), UNKNOWN(16);\n \n   public static Map<Integer, TransportMethod> typeIdToTypeMap;\n \n@@ -61,4 +58,5 @@ public enum TransportMethod {\n   public int getMethodId() {\n     return methodId;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}