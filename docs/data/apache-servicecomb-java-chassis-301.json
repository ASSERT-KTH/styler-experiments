{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "301",
    "information": {
        "violations": [
            {
                "line": "138",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * <p>As the process of instance registry is asynchronous, the {@code AFTER_REGISTRY}\n   * event should not be sent immediately after {@link RegistryUtils#run()} is invoked.\n   * When the instance registry succeeds, {@link MicroserviceInstanceRegisterTask} will be posted in {@link EventManager},\n   * register a subscriber to watch this event and send {@code AFTER_REGISTRY}.</p>\n   *\n   * <p>This method should be called before {@link RegistryUtils#run()} to avoid that the registry process is too quick",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/301/SCBEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/301/SCBEngine.java\nindex d17de6e18e2..b638c5f91ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/301/SCBEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/301/SCBEngine.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.core;\n \n import java.util.Collection;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/301/SCBEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/301/SCBEngine.java\nindex d17de6e18e2..d5a1b29eb36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/301/SCBEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/301/SCBEngine.java\n@@ -183,8 +183,7 @@ public class SCBEngine {\n     }\n   }\n \n-\n-  private void doInit() throws Exception {\n+private void doInit() throws Exception {\n     status = SCBStatus.STARTING;\n \n     eventBus.register(this);\n@@ -267,4 +266,4 @@ public class SCBEngine {\n       TimeUnit.SECONDS.sleep(1);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "137",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/301/SCBEngine.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/301/SCBEngine.java\nindex d17de6e18e2..132bdb81678 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/301/SCBEngine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/301/SCBEngine.java\n@@ -19,7 +19,6 @@ package org.apache.servicecomb.core;\n import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n-\n import org.apache.servicecomb.core.BootListener.BootEvent;\n import org.apache.servicecomb.core.BootListener.EventType;\n import org.apache.servicecomb.core.definition.loader.SchemaListenerManager;\n@@ -37,12 +36,12 @@ import org.apache.servicecomb.serviceregistry.task.MicroserviceInstanceRegisterT\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.google.common.eventbus.AllowConcurrentEvents;\n import com.google.common.eventbus.EventBus;\n import com.google.common.eventbus.Subscribe;\n \n // TODO: should not depend on spring, that will make integration more flexible\n+\n public class SCBEngine {\n   private static final Logger LOGGER = LoggerFactory.getLogger(SCBEngine.class);\n \n@@ -78,13 +77,11 @@ public class SCBEngine {\n     return INSTANCE;\n   }\n \n-  public void setProducerProviderManager(\n-      ProducerProviderManager producerProviderManager) {\n+  public void setProducerProviderManager(ProducerProviderManager producerProviderManager) {\n     this.producerProviderManager = producerProviderManager;\n   }\n \n-  public void setConsumerProviderManager(\n-      ConsumerProviderManager consumerProviderManager) {\n+  public void setConsumerProviderManager(ConsumerProviderManager consumerProviderManager) {\n     this.consumerProviderManager = consumerProviderManager;\n   }\n \n@@ -96,8 +93,7 @@ public class SCBEngine {\n     this.transportManager = transportManager;\n   }\n \n-  public void setSchemaListenerManager(\n-      SchemaListenerManager schemaListenerManager) {\n+  public void setSchemaListenerManager(SchemaListenerManager schemaListenerManager) {\n     this.schemaListenerManager = schemaListenerManager;\n   }\n \n@@ -112,7 +108,6 @@ public class SCBEngine {\n   protected void triggerEvent(EventType eventType) {\n     BootEvent event = new BootEvent();\n     event.setEventType(eventType);\n-\n     for (BootListener listener : bootListenerList) {\n       listener.onBootEvent(event);\n     }\n@@ -121,13 +116,17 @@ public class SCBEngine {\n   protected void safeTriggerEvent(EventType eventType) {\n     BootEvent event = new BootEvent();\n     event.setEventType(eventType);\n-\n     for (BootListener listener : bootListenerList) {\n       try {\n         listener.onBootEvent(event);\n-        LOGGER.info(\"BootListener {} succeed to process {}.\", listener.getClass().getName(), eventType);\n+        LOGGER.info(\"BootListener {} succeed to process {}.\",\n+listener.getClass().getName(),\n+eventType);\n       } catch (Throwable e) {\n-        LOGGER.error(\"BootListener {} failed to process {}.\", listener.getClass().getName(), eventType, e);\n+        LOGGER.error(\"BootListener {} failed to process {}.\",\n+listener.getClass().getName(),\n+eventType,\n+e);\n       }\n     }\n   }\n@@ -143,6 +142,7 @@ public class SCBEngine {\n    *\n    * <p>Check if {@code InstanceId} is null to judge whether the instance registry has succeeded.</p>\n    */\n+\n   private void triggerAfterRegistryEvent() {\n     EventManager.register(new Object() {\n       @Subscribe\n@@ -183,39 +183,27 @@ public class SCBEngine {\n     }\n   }\n \n-\n   private void doInit() throws Exception {\n     status = SCBStatus.STARTING;\n-\n     eventBus.register(this);\n-\n     consumerProviderManager.setAppManager(RegistryUtils.getServiceRegistry().getAppManager());\n     AbstractEndpointsCache.init(RegistryUtils.getInstanceCacheManager(), transportManager);\n-\n     triggerEvent(EventType.BEFORE_HANDLER);\n     HandlerConfigUtils.init();\n     triggerEvent(EventType.AFTER_HANDLER);\n-\n     triggerEvent(EventType.BEFORE_PRODUCER_PROVIDER);\n     producerProviderManager.init();\n     triggerEvent(EventType.AFTER_PRODUCER_PROVIDER);\n-\n     triggerEvent(EventType.BEFORE_CONSUMER_PROVIDER);\n     consumerProviderManager.init();\n     triggerEvent(EventType.AFTER_CONSUMER_PROVIDER);\n-\n     triggerEvent(EventType.BEFORE_TRANSPORT);\n     transportManager.init();\n     triggerEvent(EventType.AFTER_TRANSPORT);\n-\n     schemaListenerManager.notifySchemaListener();\n-\n     triggerEvent(EventType.BEFORE_REGISTRY);\n-\n     triggerAfterRegistryEvent();\n-\n     RegistryUtils.run();\n-\n     Runtime.getRuntime().addShutdownHook(new Thread(this::uninit));\n   }\n \n@@ -223,6 +211,7 @@ public class SCBEngine {\n    * not allow throw any exception\n    * even some step throw exception, must catch it and go on, otherwise shutdown process will be broken.\n    */\n+\n   public synchronized void uninit() {\n     if (SCBStatus.UP.equals(status)) {\n       LOGGER.info(\"ServiceComb is closing now...\");\n@@ -252,6 +241,7 @@ public class SCBEngine {\n     }\n \n     //Step 5: Stop vertx to prevent blocking exit\n+\n     VertxUtils.blockCloseVertxByName(\"config-center\");\n     VertxUtils.blockCloseVertxByName(\"transport\");\n \n@@ -264,7 +254,8 @@ public class SCBEngine {\n       if (invocationFinishedCounter.get() == invocationStartedCounter.get()) {\n         return;\n       }\n+\n       TimeUnit.SECONDS.sleep(1);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}