{
    "project_name": "wso2-attic-commons",
    "violation_id": "303",
    "information": {
        "violations": [
            {
                "line": "56",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        public void bpelImportsLoaded(Process source, CompilerContext compilerContext) throws CompilationException {}\n        public void bpelCompilationCompleted(Process source) throws CompilationException {}\n        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException { return null; }\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/303/ExpressionValidatorFactory.java\nindex cad5e7a583d..090b4e7bf41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/303/ExpressionValidatorFactory.java\n@@ -53,6 +53,8 @@ public class ExpressionValidatorFactory {\n     private static class EmptyValidator implements ExpressionValidator {\n         public void bpelImportsLoaded(Process source, CompilerContext compilerContext) throws CompilationException {}\n         public void bpelCompilationCompleted(Process source) throws CompilationException {}\n-        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException { return null; }\n+        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType)\n+                throws CompilationException { returnnull ;\n     }\n-}\n+      }\n+  }\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/303/ExpressionValidatorFactory.java\nindex cad5e7a583d..0684062ae15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/303/ExpressionValidatorFactory.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.compiler;\n \n import java.util.Properties;\n@@ -30,29 +31,36 @@ import org.apache.ode.bpel.compiler.bom.Expression;\n import org.apache.ode.bpel.o.OVarType;\n \n public class ExpressionValidatorFactory {\n-    private static final Log __log = LogFactory.getLog(ExpressionValidatorFactory.class);\n-    private ExpressionValidator _validator = new EmptyValidator();\n-\n-    public ExpressionValidatorFactory(Properties config) {\n-        String propertyName = \"org.apache.ode.validator\";\n-        String validatorClass = (String) config.getProperty(propertyName, \"\");\n-        __log.debug(\"Trying property \" + propertyName + \" got value: \" + validatorClass);\n-        if (!validatorClass.equals(\"\")) {\n-            try {\n-                _validator = (ExpressionValidator) getClass().forName(validatorClass).newInstance();\n-            } catch (Exception e) {\n-                __log.warn(\"Cannot instantiate expression validator of class \" + validatorClass);\n-            }\n-        }\n+  private static final Log __log = LogFactory.getLog(ExpressionValidatorFactory.class);\n+  private ExpressionValidator _validator = new EmptyValidator();\n+\n+  public ExpressionValidatorFactory(Properties config) {\n+    String propertyName = \"org.apache.ode.validator\";\n+    String validatorClass = (String) config.getProperty(propertyName, \"\");\n+    __log.debug(\"Trying property \" + propertyName + \" got value: \" + validatorClass);\n+    if (!validatorClass.equals(\"\")) {\n+      try {\n+        _validator = (ExpressionValidator) getClass().forName(validatorClass).newInstance();\n+      } catch (Exception e) {\n+        __log.warn(\"Cannot instantiate expression validator of class \" + validatorClass);\n+      }\n+    }\n+  }\n+\n+  public ExpressionValidator getValidator() {\n+    return _validator;\n+  }\n+\n+  private static class EmptyValidator implements ExpressionValidator {\n+    public void bpelImportsLoaded(Process source, CompilerContext compilerContext) throws CompilationException {\n     }\n \n-    public ExpressionValidator getValidator() {\n-        return _validator;\n+    public void bpelCompilationCompleted(Process source) throws CompilationException {\n     }\n \n-    private static class EmptyValidator implements ExpressionValidator {\n-        public void bpelImportsLoaded(Process source, CompilerContext compilerContext) throws CompilationException {}\n-        public void bpelCompilationCompleted(Process source) throws CompilationException {}\n-        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException { return null; }\n+    public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType)\n+      throws CompilationException {\n+      return null;\n     }\n+  }\n }\n",
            "diff_size": 30
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/303/ExpressionValidatorFactory.java\nindex cad5e7a583d..2d8c6f2957d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/303/ExpressionValidatorFactory.java\n@@ -53,6 +53,7 @@ public class ExpressionValidatorFactory {\n     private static class EmptyValidator implements ExpressionValidator {\n         public void bpelImportsLoaded(Process source, CompilerContext compilerContext) throws CompilationException {}\n         public void bpelCompilationCompleted(Process source) throws CompilationException {}\n-        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException { return null; }\n+        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException {\n+    return null; }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/303/ExpressionValidatorFactory.java\nindex cad5e7a583d..f67b9b5d299 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/303/ExpressionValidatorFactory.java\n@@ -53,6 +53,5 @@ public class ExpressionValidatorFactory {\n     private static class EmptyValidator implements ExpressionValidator {\n         public void bpelImportsLoaded(Process source, CompilerContext compilerContext) throws CompilationException {}\n         public void bpelCompilationCompleted(Process source) throws CompilationException {}\n-        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException { return null; }\n+        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException { return null; } }\n     }\n-}\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/303/ExpressionValidatorFactory.java\nindex cad5e7a583d..090b4e7bf41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/303/ExpressionValidatorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/303/ExpressionValidatorFactory.java\n@@ -53,6 +53,8 @@ public class ExpressionValidatorFactory {\n     private static class EmptyValidator implements ExpressionValidator {\n         public void bpelImportsLoaded(Process source, CompilerContext compilerContext) throws CompilationException {}\n         public void bpelCompilationCompleted(Process source) throws CompilationException {}\n-        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType) throws CompilationException { return null; }\n+        public Object validate(Expression source, OVarType rootNodeType, Object requestedResultType)\n+                throws CompilationException { returnnull ;\n     }\n-}\n+      }\n+  }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}