{
    "project_name": "Angel-ML-angel",
    "violation_id": "538",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/538/PushPathTailPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/538/PushPathTailPartitionParam.java\nindex fe749864841..84f977df98f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/538/PushPathTailPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/538/PushPathTailPartitionParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.node2vec.updatefuncs.pushpathtail;\n \n import com.tencent.angel.PartitionKey;\n@@ -23,75 +24,75 @@ import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;\n \n public class PushPathTailPartitionParam extends PartitionUpdateParam {\n \n-  private long[] keyIds;\n-  private int startIdx;\n-  private int endIdx;\n-  private Long2LongOpenHashMap pathTail;\n+    private long[] keyIds;\n+    private int startIdx;\n+    private int endIdx;\n+    private Long2LongOpenHashMap pathTail;\n \n \n-  public PushPathTailPartitionParam(int matrixId, PartitionKey partKey,\n-      Long2LongOpenHashMap pathTail,\n-      long[] nodeIds, int startIndex, int endIndex) {\n-    super(matrixId, partKey, false);\n-    this.keyIds = nodeIds;\n-    this.startIdx = startIndex;\n-    this.endIdx = endIndex;\n-    this.pathTail = pathTail;\n-  }\n+    public PushPathTailPartitionParam(int matrixId, PartitionKey partKey,\n+                                      Long2LongOpenHashMap pathTail,\n+                                      long[] nodeIds, int startIndex, int endIndex) {\n+        super(matrixId, partKey, false);\n+        this.keyIds = nodeIds;\n+        this.startIdx = startIndex;\n+        this.endIdx = endIndex;\n+        this.pathTail = pathTail;\n+    }\n \n-  public PushPathTailPartitionParam() {\n-    super();\n-  }\n+    public PushPathTailPartitionParam() {\n+        super();\n+    }\n \n-  public Long2LongOpenHashMap getPathTail() {\n-    return pathTail;\n-  }\n+    public Long2LongOpenHashMap getPathTail() {\n+        return pathTail;\n+    }\n \n-  public void setPathTail(Long2LongOpenHashMap pathTail) {\n-    this.pathTail = pathTail;\n-  }\n+    public void setPathTail(Long2LongOpenHashMap pathTail) {\n+        this.pathTail = pathTail;\n+    }\n \n-  protected void clear() {\n-    this.keyIds = null;\n-    this.startIdx = 0;\n-    this.endIdx = 0;\n-    this.pathTail = null;\n-  }\n+    protected void clear() {\n+        this.keyIds = null;\n+        this.startIdx = 0;\n+        this.endIdx = 0;\n+        this.pathTail = null;\n+    }\n \n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    int size = endIdx - startIdx;\n-    buf.writeInt(size);\n-    // System.out.println(Thread.currentThread().getId() + \"\\t serialize -> \" + ());\n-    for (int i = startIdx; i < endIdx; i++) {\n-      long key = keyIds[i];\n-      buf.writeLong(key);\n-      buf.writeLong(pathTail.get(key));\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        int size = endIdx - startIdx;\n+        buf.writeInt(size);\n+        // System.out.println(Thread.currentThread().getId() + \"\\t serialize -> \" + ());\n+        for (int i = startIdx; i < endIdx; i++) {\n+            long key = keyIds[i];\n+            buf.writeLong(key);\n+            buf.writeLong(pathTail.get(key));\n+        }\n+        //clear();\n     }\n-    //clear();\n-  }\n \n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    this.startIdx = 0;\n-    this.endIdx = buf.readInt();\n-    int size = endIdx - startIdx;\n-    // System.out.println(Thread.currentThread().getId() + \"\\t deserialize -> \" + size);\n-    pathTail = new Long2LongOpenHashMap(size);\n-    for (int i = 0; i < size; i++) {\n-      long key = buf.readLong();\n-      long value = buf.readLong();\n-      pathTail.put(key, value);\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        this.startIdx = 0;\n+        this.endIdx = buf.readInt();\n+        int size = endIdx - startIdx;\n+        // System.out.println(Thread.currentThread().getId() + \"\\t deserialize -> \" + size);\n+        pathTail = new Long2LongOpenHashMap(size);\n+        for (int i = 0; i < size; i++) {\n+            long key = buf.readLong();\n+            long value = buf.readLong();\n+            pathTail.put(key, value);\n+        }\n     }\n-  }\n \n-  @Override\n-  public int bufferLen() {\n-    int len = super.bufferLen();\n-    len += 16 * (endIdx - startIdx) + 4;\n-    return len;\n-  }\n+    @Override\n+    public int bufferLen() {\n+        int len = super.bufferLen();\n+        len += 16 * (endIdx - startIdx) + 4;\n+        return len;\n+    }\n \n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/538/PushPathTailPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/538/PushPathTailPartitionParam.java\nindex fe749864841..83a0ef584d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/538/PushPathTailPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/538/PushPathTailPartitionParam.java\n@@ -94,4 +94,4 @@ public class PushPathTailPartitionParam extends PartitionUpdateParam {\n     return len;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/538/PushPathTailPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/538/PushPathTailPartitionParam.java\nindex fe749864841..3586c3a3e08 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/538/PushPathTailPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/538/PushPathTailPartitionParam.java\n@@ -28,10 +28,10 @@ public class PushPathTailPartitionParam extends PartitionUpdateParam {\n   private int endIdx;\n   private Long2LongOpenHashMap pathTail;\n \n-\n-  public PushPathTailPartitionParam(int matrixId, PartitionKey partKey,\n-      Long2LongOpenHashMap pathTail,\n-      long[] nodeIds, int startIndex, int endIndex) {\n+  public PushPathTailPartitionParam(int matrixId,\n+                                    PartitionKey partKey,\n+                                    Long2LongOpenHashMap pathTail,\n+                                    long[] nodeIds, int startIndex, int endIndex) {\n     super(matrixId, partKey, false);\n     this.keyIds = nodeIds;\n     this.startIdx = startIndex;\n@@ -61,6 +61,7 @@ public class PushPathTailPartitionParam extends PartitionUpdateParam {\n   @Override\n   public void serialize(ByteBuf buf) {\n     super.serialize(buf);\n+\n     int size = endIdx - startIdx;\n     buf.writeInt(size);\n     // System.out.println(Thread.currentThread().getId() + \"\\t serialize -> \" + ());\n@@ -77,6 +78,7 @@ public class PushPathTailPartitionParam extends PartitionUpdateParam {\n     super.deserialize(buf);\n     this.startIdx = 0;\n     this.endIdx = buf.readInt();\n+\n     int size = endIdx - startIdx;\n     // System.out.println(Thread.currentThread().getId() + \"\\t deserialize -> \" + size);\n     pathTail = new Long2LongOpenHashMap(size);\n@@ -93,5 +95,4 @@ public class PushPathTailPartitionParam extends PartitionUpdateParam {\n     len += 16 * (endIdx - startIdx) + 4;\n     return len;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}