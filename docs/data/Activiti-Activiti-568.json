{
    "project_name": "Activiti-Activiti",
    "violation_id": "568",
    "information": {
        "violations": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.agenda;\n\nimport org.activiti.bpmn.model.FlowElement;\nimport org.activiti.bpmn.model.FlowNode;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/568/ContinueMultiInstanceOperation.java\nindex 82555a96209..add966f1743 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/568/ContinueMultiInstanceOperation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.agenda;\n \n import org.activiti.bpmn.model.FlowElement;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/568/ContinueMultiInstanceOperation.java\nindex 82555a96209..cc55c59f72d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/568/ContinueMultiInstanceOperation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.agenda;\n \n import org.activiti.bpmn.model.FlowElement;\n@@ -34,76 +35,73 @@ import org.slf4j.LoggerFactory;\n \n /**\n  * Special operation when executing an instance of a multi-instance.\n- * It's similar to the {@link ContinueProcessOperation}, but simpler, as it doesn't need to \n+ * It's similar to the {@link ContinueProcessOperation}, but simpler, as it doesn't need to\n  * cater for as many use cases.\n- * \n-\n-\n  */\n public class ContinueMultiInstanceOperation extends AbstractOperation {\n \n-  private static Logger logger = LoggerFactory.getLogger(ContinueMultiInstanceOperation.class);\n+    private static Logger logger = LoggerFactory.getLogger(ContinueMultiInstanceOperation.class);\n \n-  public ContinueMultiInstanceOperation(CommandContext commandContext, ExecutionEntity execution) {\n-    super(commandContext, execution);\n-  }\n-\n-  @Override\n-  public void run() {\n-    FlowElement currentFlowElement = getCurrentFlowElement(execution);\n-    if (currentFlowElement instanceof FlowNode) {\n-      continueThroughMultiInstanceFlowNode((FlowNode) currentFlowElement);\n-    } else {\n-      throw new RuntimeException(\"Programmatic error: no valid multi instance flow node, type: \" + currentFlowElement + \". Halting.\");\n+    public ContinueMultiInstanceOperation(CommandContext commandContext, ExecutionEntity execution) {\n+        super(commandContext, execution);\n     }\n-  }\n-  \n-  protected void continueThroughMultiInstanceFlowNode(FlowNode flowNode) {\n-    if (!flowNode.isAsynchronous()) {\n-      executeSynchronous(flowNode);\n-    } else {\n-      executeAsynchronous(flowNode);\n+\n+    @Override\n+    public void run() {\n+        FlowElement currentFlowElement = getCurrentFlowElement(execution);\n+        if (currentFlowElement instanceof FlowNode) {\n+            continueThroughMultiInstanceFlowNode((FlowNode) currentFlowElement);\n+        } else {\n+            throw new RuntimeException(\"Programmatic error: no valid multi instance flow node, type: \" + currentFlowElement + \". Halting.\");\n+        }\n     }\n-  }\n-  \n-  protected void executeSynchronous(FlowNode flowNode) {\n-    \n-    // Execution listener\n-    if (CollectionUtil.isNotEmpty(flowNode.getExecutionListeners())) {\n-      executeExecutionListeners(flowNode, ExecutionListener.EVENTNAME_START);\n+\n+    protected void continueThroughMultiInstanceFlowNode(FlowNode flowNode) {\n+        if (!flowNode.isAsynchronous()) {\n+            executeSynchronous(flowNode);\n+        } else {\n+            executeAsynchronous(flowNode);\n+        }\n     }\n-    \n-    commandContext.getHistoryManager().recordActivityStart(execution);\n-    \n-    // Execute actual behavior\n-    ActivityBehavior activityBehavior = (ActivityBehavior) flowNode.getBehavior();\n-    if (activityBehavior != null) {\n-      logger.debug(\"Executing activityBehavior {} on activity '{}' with execution {}\", activityBehavior.getClass(), flowNode.getId(), execution.getId());\n-      \n-      if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n-        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(\n-            ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, flowNode.getId(), flowNode.getName(), execution.getId(),\n-                execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));\n-      }\n-      \n-      try {\n-        activityBehavior.execute(execution);\n-      } catch (BpmnError error) {\n-        // re-throw business fault so that it can be caught by an Error Intermediate Event or Error Event Sub-Process in the process\n-        ErrorPropagation.propagateError(error, execution);\n-      } catch (RuntimeException e) {\n-        if (LogMDC.isMDCEnabled()) {\n-          LogMDC.putMDCExecution(execution);\n+\n+    protected void executeSynchronous(FlowNode flowNode) {\n+\n+        // Execution listener\n+        if (CollectionUtil.isNotEmpty(flowNode.getExecutionListeners())) {\n+            executeExecutionListeners(flowNode, ExecutionListener.EVENTNAME_START);\n+        }\n+\n+        commandContext.getHistoryManager().recordActivityStart(execution);\n+\n+        // Execute actual behavior\n+        ActivityBehavior activityBehavior = (ActivityBehavior) flowNode.getBehavior();\n+        if (activityBehavior != null) {\n+            logger.debug(\"Executing activityBehavior {} on activity '{}' with execution {}\", activityBehavior.getClass(), flowNode.getId(), execution.getId());\n+\n+            if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n+                Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(\n+                        ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, flowNode.getId(), flowNode.getName(), execution.getId(),\n+                                execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));\n+            }\n+\n+            try {\n+                activityBehavior.execute(execution);\n+            } catch (BpmnError error) {\n+                // re-throw business fault so that it can be caught by an Error Intermediate Event or Error Event Sub-Process in the process\n+                ErrorPropagation.propagateError(error, execution);\n+            } catch (RuntimeException e) {\n+                if (LogMDC.isMDCEnabled()) {\n+                    LogMDC.putMDCExecution(execution);\n+                }\n+                throw e;\n+            }\n+        } else {\n+            logger.debug(\"No activityBehavior on activity '{}' with execution {}\", flowNode.getId(), execution.getId());\n         }\n-        throw e;\n-      }\n-    } else {\n-      logger.debug(\"No activityBehavior on activity '{}' with execution {}\", flowNode.getId(), execution.getId());\n     }\n-  }\n-  \n-  protected void executeAsynchronous(FlowNode flowNode) {\n-    JobEntity job = commandContext.getJobManager().createAsyncJob(execution, flowNode.isExclusive());\n-    commandContext.getJobManager().scheduleAsyncJob(job);\n-  }\n+\n+    protected void executeAsynchronous(FlowNode flowNode) {\n+        JobEntity job = commandContext.getJobManager().createAsyncJob(execution, flowNode.isExclusive());\n+        commandContext.getJobManager().scheduleAsyncJob(job);\n+    }\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 298).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/568/ContinueMultiInstanceOperation.java\nindex 82555a96209..f95ce0051ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/568/ContinueMultiInstanceOperation.java\n@@ -40,6 +40,8 @@ import org.slf4j.LoggerFactory;\n \n \n  */\n+\n+\n public class ContinueMultiInstanceOperation extends AbstractOperation {\n \n   private static Logger logger = LoggerFactory.getLogger(ContinueMultiInstanceOperation.class);\n@@ -57,7 +59,7 @@ public class ContinueMultiInstanceOperation extends AbstractOperation {\n       throw new RuntimeException(\"Programmatic error: no valid multi instance flow node, type: \" + currentFlowElement + \". Halting.\");\n     }\n   }\n-  \n+\n   protected void continueThroughMultiInstanceFlowNode(FlowNode flowNode) {\n     if (!flowNode.isAsynchronous()) {\n       executeSynchronous(flowNode);\n@@ -65,27 +67,25 @@ public class ContinueMultiInstanceOperation extends AbstractOperation {\n       executeAsynchronous(flowNode);\n     }\n   }\n-  \n+\n   protected void executeSynchronous(FlowNode flowNode) {\n     \n     // Execution listener\n     if (CollectionUtil.isNotEmpty(flowNode.getExecutionListeners())) {\n-      executeExecutionListeners(flowNode, ExecutionListener.EVENTNAME_START);\n+      executeExecutionListeners(flowNode,\n+                                ExecutionListener.EVENTNAME_START);\n     }\n-    \n     commandContext.getHistoryManager().recordActivityStart(execution);\n     \n     // Execute actual behavior\n+\n     ActivityBehavior activityBehavior = (ActivityBehavior) flowNode.getBehavior();\n     if (activityBehavior != null) {\n       logger.debug(\"Executing activityBehavior {} on activity '{}' with execution {}\", activityBehavior.getClass(), flowNode.getId(), execution.getId());\n-      \n       if (Context.getProcessEngineConfiguration() != null && Context.getProcessEngineConfiguration().getEventDispatcher().isEnabled()) {\n-        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(\n-            ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, flowNode.getId(), flowNode.getName(), execution.getId(),\n-                execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));\n+        Context.getProcessEngineConfiguration().getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createActivityEvent(ActivitiEventType.ACTIVITY_STARTED, flowNode.getId(), flowNode.getName(), execution.getId(), execution.getProcessInstanceId(), execution.getProcessDefinitionId(), flowNode));\n       }\n-      \n+\n       try {\n         activityBehavior.execute(execution);\n       } catch (BpmnError error) {\n@@ -101,9 +101,9 @@ public class ContinueMultiInstanceOperation extends AbstractOperation {\n       logger.debug(\"No activityBehavior on activity '{}' with execution {}\", flowNode.getId(), execution.getId());\n     }\n   }\n-  \n+\n   protected void executeAsynchronous(FlowNode flowNode) {\n     JobEntity job = commandContext.getJobManager().createAsyncJob(execution, flowNode.isExclusive());\n     commandContext.getJobManager().scheduleAsyncJob(job);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/568/ContinueMultiInstanceOperation.java\nindex 82555a96209..add966f1743 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/568/ContinueMultiInstanceOperation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.agenda;\n \n import org.activiti.bpmn.model.FlowElement;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/568/ContinueMultiInstanceOperation.java\nindex 82555a96209..add966f1743 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/568/ContinueMultiInstanceOperation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/568/ContinueMultiInstanceOperation.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.agenda;\n \n import org.activiti.bpmn.model.FlowElement;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}