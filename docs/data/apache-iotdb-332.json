{
    "project_name": "apache-iotdb",
    "violation_id": "332",
    "information": {
        "violations": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.tsfile.read.query.dataset;\n\nimport org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\nimport org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-iotdb/styler/05_predictions/final/files-repaired/332/DataSetWithoutTimeGenerator.java\nindex 85d17a28caf..de65100f9ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-iotdb/styler/05_predictions/final/files-repaired/332/DataSetWithoutTimeGenerator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.tsfile.read.query.dataset;\n \n import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/checkstyle_idea/332/DataSetWithoutTimeGenerator.java\nindex 85d17a28caf..8e641b9bf59 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/checkstyle_idea/332/DataSetWithoutTimeGenerator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.tsfile.read.query.dataset;\n \n import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n@@ -33,7 +34,9 @@ import java.util.List;\n import java.util.PriorityQueue;\n import java.util.Set;\n \n-/** multi-way merging data set, no need to use TimeGenerator. */\n+/**\n+ * multi-way merging data set, no need to use TimeGenerator.\n+ */\n public class DataSetWithoutTimeGenerator extends QueryDataSet {\n \n   private List<AbstractFileSeriesReader> readers;\n@@ -42,7 +45,9 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n \n   private List<Boolean> hasDataRemaining;\n \n-  /** heap only need to store time. */\n+  /**\n+   * heap only need to store time.\n+   */\n   private PriorityQueue<Long> timeHeap;\n \n   private Set<Long> timeSet;\n@@ -50,9 +55,9 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n   /**\n    * constructor of DataSetWithoutTimeGenerator.\n    *\n-   * @param paths paths in List structure\n+   * @param paths     paths in List structure\n    * @param dataTypes TSDataTypes in List structure\n-   * @param readers readers in List(FileSeriesReaderByTimestamp) structure\n+   * @param readers   readers in List(FileSeriesReaderByTimestamp) structure\n    * @throws IOException IOException\n    */\n   public DataSetWithoutTimeGenerator(\n@@ -138,7 +143,9 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n     return record;\n   }\n \n-  /** keep heap from storing duplicate time. */\n+  /**\n+   * keep heap from storing duplicate time.\n+   */\n   private void timeHeapPut(long time) {\n     if (!timeSet.contains(time)) {\n       timeSet.add(time);\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'throws' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/codebuff/332/DataSetWithoutTimeGenerator.java\nindex 85d17a28caf..8290bdf4820 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/codebuff/332/DataSetWithoutTimeGenerator.java\n@@ -25,7 +25,6 @@ import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.reader.series.AbstractFileSeriesReader;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.HashSet;\n@@ -34,17 +33,15 @@ import java.util.PriorityQueue;\n import java.util.Set;\n \n /** multi-way merging data set, no need to use TimeGenerator. */\n+\n public class DataSetWithoutTimeGenerator extends QueryDataSet {\n \n   private List<AbstractFileSeriesReader> readers;\n-\n   private List<BatchData> batchDataList;\n-\n   private List<Boolean> hasDataRemaining;\n \n   /** heap only need to store time. */\n   private PriorityQueue<Long> timeHeap;\n-\n   private Set<Long> timeSet;\n \n   /**\n@@ -55,9 +52,9 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n    * @param readers readers in List(FileSeriesReaderByTimestamp) structure\n    * @throws IOException IOException\n    */\n-  public DataSetWithoutTimeGenerator(\n-      List<Path> paths, List<TSDataType> dataTypes, List<AbstractFileSeriesReader> readers)\n-      throws IOException {\n+\n+  public DataSetWithoutTimeGenerator(List<Path> paths, List<TSDataType> dataTypes, List<AbstractFileSeriesReader> readers)\n+    throws IOException {\n     super(paths, dataTypes);\n     this.readers = readers;\n     initHeap();\n@@ -68,7 +65,6 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n     batchDataList = new ArrayList<>();\n     timeHeap = new PriorityQueue<>();\n     timeSet = new HashSet<>();\n-\n     for (int i = 0; i < paths.size(); i++) {\n       AbstractFileSeriesReader reader = readers.get(i);\n       if (!reader.hasNextBatch()) {\n@@ -79,7 +75,6 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n         hasDataRemaining.add(true);\n       }\n     }\n-\n     for (BatchData data : batchDataList) {\n       if (data.hasCurrent()) {\n         timeHeapPut(data.currentTime());\n@@ -96,24 +91,17 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n   @Override\n   public RowRecord nextWithoutConstraint() throws IOException {\n     long minTime = timeHeapGet();\n-\n     RowRecord record = new RowRecord(minTime);\n-\n     for (int i = 0; i < paths.size(); i++) {\n-\n       Field field = new Field(dataTypes.get(i));\n-\n       if (!hasDataRemaining.get(i)) {\n         record.addField(null);\n         continue;\n       }\n-\n       BatchData data = batchDataList.get(i);\n-\n       if (data.hasCurrent() && data.currentTime() == minTime) {\n         putValueToField(data, field);\n         data.next();\n-\n         if (!data.hasCurrent()) {\n           AbstractFileSeriesReader reader = readers.get(i);\n           if (reader.hasNextBatch()) {\n@@ -139,6 +127,7 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n   }\n \n   /** keep heap from storing duplicate time. */\n+\n   private void timeHeapPut(long time) {\n     if (!timeSet.contains(time)) {\n       timeSet.add(time);\n@@ -176,4 +165,4 @@ public class DataSetWithoutTimeGenerator extends QueryDataSet {\n         throw new UnSupportedDataTypeException(\"UnSupported\" + col.getDataType());\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "package statement should not be line-wrapped.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoLineWrapCheck"
                },
                {
                    "line": "21",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "21",
                    "column": "78",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/styler/05_predictions/random/files-repaired/332/DataSetWithoutTimeGenerator.java\nindex 85d17a28caf..4d956409ff4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/styler/05_predictions/random/files-repaired/332/DataSetWithoutTimeGenerator.java\n@@ -16,9 +16,9 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.iotdb.tsfile.read.query.dataset;\n+package org.apache.iotdb.tsfile.read.query.dataset\n \n-import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n+; import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n import org.apache.iotdb.tsfile.file.metadata.enums.TSDataType;\n import org.apache.iotdb.tsfile.read.common.BatchData;\n import org.apache.iotdb.tsfile.read.common.Field;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/styler/05_predictions/three_grams/files-repaired/332/DataSetWithoutTimeGenerator.java\nindex 85d17a28caf..de65100f9ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/violations/332/DataSetWithoutTimeGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-iotdb/styler/05_predictions/three_grams/files-repaired/332/DataSetWithoutTimeGenerator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.tsfile.read.query.dataset;\n \n import org.apache.iotdb.tsfile.exception.write.UnSupportedDataTypeException;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}