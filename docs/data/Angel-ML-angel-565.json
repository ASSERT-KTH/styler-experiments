{
    "project_name": "Angel-ML-angel",
    "violation_id": "565",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/565/LongFloatSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/565/LongFloatSortedVectorStorage.java\nindex a8ce832f617..2be1ab968d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/565/LongFloatSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/565/LongFloatSortedVectorStorage.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n@@ -24,299 +25,299 @@ import java.util.Random;\n \n public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n \n-  private long[] indices;\n-  private float[] values;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private int size;\n-  private long dim;\n-\n-  public LongFloatSortedVectorStorage() {\n-    super();\n-  }\n-\n-  public LongFloatSortedVectorStorage(long dim, int size, long[] indices, float[] values) {\n-    this.flag = 4;\n-    this.dim = dim;\n-    this.size = size;\n-    this.indices = indices;\n-    this.values = values;\n-  }\n-\n-  public LongFloatSortedVectorStorage(long dim, long[] indices, float[] values) {\n-    this(dim, indices.length, indices, values);\n-  }\n-\n-  public LongFloatSortedVectorStorage(long dim, int capacity) {\n-    this(dim, 0, new long[capacity], new float[capacity]);\n-  }\n-\n-  public LongFloatSortedVectorStorage(long dim) {\n-    this(dim, (int) Math.min(64, Math.max(dim, 0)));\n-  }\n-\n-  @Override\n-  public float get(long idx) {\n-    if (idx < 0 || idx > dim - 1) {\n-      throw new ArrayIndexOutOfBoundsException();\n-    } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n-      return 0;\n-    } else {\n-      int i = Arrays.binarySearch(indices, idx);\n-      return i >= 0 ? values[i] : 0;\n+    private long[] indices;\n+    private float[] values;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private int size;\n+    private long dim;\n+\n+    public LongFloatSortedVectorStorage() {\n+        super();\n     }\n-  }\n \n-  @Override\n-  public void set(long idx, float value) {\n-    if (idx < 0 || idx > dim - 1) {\n-      throw new ArrayIndexOutOfBoundsException();\n+    public LongFloatSortedVectorStorage(long dim, int size, long[] indices, float[] values) {\n+        this.flag = 4;\n+        this.dim = dim;\n+        this.size = size;\n+        this.indices = indices;\n+        this.values = values;\n     }\n \n-    // 1. find the insert point\n-    int point;\n-    if (size == 0 || idx < indices[0]) {\n-      point = 0;\n-    } else if (idx > indices[size - 1]) {\n-      point = size;\n-    } else {\n-      point = Arrays.binarySearch(indices, idx);\n-      if (point >= 0) {\n-        values[point] = value;\n-        return;\n-      } else {\n-        point = -(point + 1);\n-      }\n+    public LongFloatSortedVectorStorage(long dim, long[] indices, float[] values) {\n+        this(dim, indices.length, indices, values);\n     }\n \n-    // 2. check the capacity and insert\n-    if (size == indices.length) {\n-      long[] newIdxs = new long[(int) (indices.length * 1.5)];\n-      float[] newValues = new float[(int) (indices.length * 1.5)];\n-      if (point == 0) {\n-        System.arraycopy(indices, 0, newIdxs, 1, size);\n-        System.arraycopy(values, 0, newValues, 1, size);\n-      } else if (point == size) {\n-        System.arraycopy(indices, 0, newIdxs, 0, size);\n-        System.arraycopy(values, 0, newValues, 0, size);\n-      } else {\n-        System.arraycopy(indices, 0, newIdxs, 0, point);\n-        System.arraycopy(values, 0, newValues, 0, point);\n-        System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n-        System.arraycopy(values, point, newValues, point + 1, size - point);\n-      }\n-      newIdxs[point] = idx;\n-      newValues[point] = value;\n-      indices = newIdxs;\n-      values = newValues;\n-    } else {\n-      if (point != size) {\n-        System.arraycopy(indices, point, indices, point + 1, size - point);\n-        System.arraycopy(values, point, values, point + 1, size - point);\n-      }\n-      indices[point] = idx;\n-      values[point] = value;\n+    public LongFloatSortedVectorStorage(long dim, int capacity) {\n+        this(dim, 0, new long[capacity], new float[capacity]);\n     }\n \n-    // 3. increase size\n-    size++;\n-  }\n+    public LongFloatSortedVectorStorage(long dim) {\n+        this(dim, (int) Math.min(64, Math.max(dim, 0)));\n+    }\n \n-  @Override\n-  public LongFloatVectorStorage clone() {\n-    return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n-  }\n+    @Override\n+    public float get(long idx) {\n+        if (idx < 0 || idx > dim - 1) {\n+            throw new ArrayIndexOutOfBoundsException();\n+        } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n+            return 0;\n+        } else {\n+            int i = Arrays.binarySearch(indices, idx);\n+            return i >= 0 ? values[i] : 0;\n+        }\n+    }\n \n-  @Override\n-  public LongFloatVectorStorage copy() {\n-    return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n-  }\n+    @Override\n+    public void set(long idx, float value) {\n+        if (idx < 0 || idx > dim - 1) {\n+            throw new ArrayIndexOutOfBoundsException();\n+        }\n+\n+        // 1. find the insert point\n+        int point;\n+        if (size == 0 || idx < indices[0]) {\n+            point = 0;\n+        } else if (idx > indices[size - 1]) {\n+            point = size;\n+        } else {\n+            point = Arrays.binarySearch(indices, idx);\n+            if (point >= 0) {\n+                values[point] = value;\n+                return;\n+            } else {\n+                point = -(point + 1);\n+            }\n+        }\n+\n+        // 2. check the capacity and insert\n+        if (size == indices.length) {\n+            long[] newIdxs = new long[(int) (indices.length * 1.5)];\n+            float[] newValues = new float[(int) (indices.length * 1.5)];\n+            if (point == 0) {\n+                System.arraycopy(indices, 0, newIdxs, 1, size);\n+                System.arraycopy(values, 0, newValues, 1, size);\n+            } else if (point == size) {\n+                System.arraycopy(indices, 0, newIdxs, 0, size);\n+                System.arraycopy(values, 0, newValues, 0, size);\n+            } else {\n+                System.arraycopy(indices, 0, newIdxs, 0, point);\n+                System.arraycopy(values, 0, newValues, 0, point);\n+                System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n+                System.arraycopy(values, point, newValues, point + 1, size - point);\n+            }\n+            newIdxs[point] = idx;\n+            newValues[point] = value;\n+            indices = newIdxs;\n+            values = newValues;\n+        } else {\n+            if (point != size) {\n+                System.arraycopy(indices, point, indices, point + 1, size - point);\n+                System.arraycopy(values, point, values, point + 1, size - point);\n+            }\n+            indices[point] = idx;\n+            values[point] = value;\n+        }\n+\n+        // 3. increase size\n+        size++;\n+    }\n \n+    @Override\n+    public LongFloatVectorStorage clone() {\n+        return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n+                ArrayCopy.copy(values));\n+    }\n \n-  @Override\n-  public LongFloatVectorStorage oneLikeSparse() {\n-    float[] oneLikeValues = new float[size];\n-    for (int i = 0; i < size; i++) {\n-      oneLikeValues[i] = 1;\n+    @Override\n+    public LongFloatVectorStorage copy() {\n+        return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n+                ArrayCopy.copy(values));\n     }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSorted() {\n-    float[] oneLikeValues = new float[size];\n-    for (int i = 0; i < size; i++) {\n-      oneLikeValues[i] = 1;\n+\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSparse() {\n+        float[] oneLikeValues = new float[size];\n+        for (int i = 0; i < size; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSorted() {\n+        float[] oneLikeValues = new float[size];\n+        for (int i = 0; i < size; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSorted(long dim, int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSorted(long dim, int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSparse(int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSparse(int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public LongFloatVectorStorage oneLikeSorted(int capacity) {\n+        float[] oneLikeValues = new float[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+\n+    @Override\n+    public LongFloatVectorStorage emptySparse() {\n+        return new LongFloatSparseVectorStorage(dim, indices.length);\n     }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage oneLikeSorted(int capacity) {\n-    float[] oneLikeValues = new float[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public LongFloatVectorStorage emptySorted() {\n+        return new LongFloatSortedVectorStorage(dim, indices.length);\n     }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+\n+    @Override\n+    public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n+        return new LongFloatSparseVectorStorage(dim, capacity);\n     }\n-    return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongFloatVectorStorage emptySparse() {\n-    return new LongFloatSparseVectorStorage(dim, indices.length);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySorted() {\n-    return new LongFloatSortedVectorStorage(dim, indices.length);\n-  }\n-\n-\n-  @Override\n-  public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n-    return new LongFloatSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySorted(long dim, int capacity) {\n-    return new LongFloatSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySparse(int capacity) {\n-    return new LongFloatSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongFloatVectorStorage emptySorted(int capacity) {\n-    return new LongFloatSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public long[] getIndices() {\n-    return indices;\n-  }\n-\n-  @Override\n-  public int size() {\n-    return size;\n-  }\n-\n-  @Override\n-  public boolean hasKey(long key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n-  }\n-\n-  @Override\n-  public RowType getType() {\n-    return RowType.T_FLOAT_SPARSE_LONGKEY;\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return flag == 1;\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return flag == 2;\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return flag == 4;\n-  }\n-\n-  @Override\n-  public void clear() {\n-    Arrays.parallelSetAll(indices, (int value) -> 0);\n-    for (int i = 0; i < values.length; i++) {\n-      values[i] = 0;\n+\n+    @Override\n+    public LongFloatVectorStorage emptySorted(long dim, int capacity) {\n+        return new LongFloatSortedVectorStorage(dim, capacity);\n     }\n-  }\n \n-  @Override\n-  public float[] getValues() {\n-    return values;\n-  }\n+    @Override\n+    public LongFloatVectorStorage emptySparse(int capacity) {\n+        return new LongFloatSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongFloatVectorStorage emptySorted(int capacity) {\n+        return new LongFloatSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public long[] getIndices() {\n+        return indices;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return size;\n+    }\n+\n+    @Override\n+    public boolean hasKey(long key) {\n+        return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n+                && Arrays.binarySearch(indices, key) > 0);\n+    }\n+\n+    @Override\n+    public RowType getType() {\n+        return RowType.T_FLOAT_SPARSE_LONGKEY;\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return flag == 1;\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return flag == 2;\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return flag == 4;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        Arrays.parallelSetAll(indices, (int value) -> 0);\n+        for (int i = 0; i < values.length; i++) {\n+            values[i] = 0;\n+        }\n+    }\n+\n+    @Override\n+    public float[] getValues() {\n+        return values;\n+    }\n }\n",
            "diff_size": 438
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "282",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/565/LongFloatSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/565/LongFloatSortedVectorStorage.java\nindex a8ce832f617..bdb4cc24b02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/565/LongFloatSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/565/LongFloatSortedVectorStorage.java\n@@ -133,8 +133,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n         ArrayCopy.copy(values));\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage oneLikeSparse() {\n     float[] oneLikeValues = new float[size];\n     for (int i = 0; i < size; i++) {\n@@ -152,8 +151,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n     float[] oneLikeValues = new float[capacity];\n     long[] indices = new long[capacity];\n@@ -239,8 +237,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage emptySparse() {\n     return new LongFloatSparseVectorStorage(dim, indices.length);\n   }\n@@ -250,8 +247,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSortedVectorStorage(dim, indices.length);\n   }\n \n-\n-  @Override\n+@Override\n   public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n     return new LongFloatSparseVectorStorage(dim, capacity);\n   }\n@@ -283,8 +279,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n \n   @Override\n   public boolean hasKey(long key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, key) > 0);\n   }\n \n   @Override\n@@ -319,4 +314,4 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n   public float[] getValues() {\n     return values;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/565/LongFloatSortedVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/565/LongFloatSortedVectorStorage.java\nindex a8ce832f617..f49aaf2e774 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/565/LongFloatSortedVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/565/LongFloatSortedVectorStorage.java\n@@ -59,7 +59,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     if (idx < 0 || idx > dim - 1) {\n       throw new ArrayIndexOutOfBoundsException();\n     } else if (size == 0 || idx > indices[size - 1] || idx < indices[0]) {\n-      return 0;\n+             return 0;\n     } else {\n       int i = Arrays.binarySearch(indices, idx);\n       return i >= 0 ? values[i] : 0;\n@@ -73,22 +73,24 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     }\n \n     // 1. find the insert point\n+\n     int point;\n     if (size == 0 || idx < indices[0]) {\n       point = 0;\n     } else if (idx > indices[size - 1]) {\n-      point = size;\n+             point = size;\n     } else {\n-      point = Arrays.binarySearch(indices, idx);\n-      if (point >= 0) {\n-        values[point] = value;\n-        return;\n-      } else {\n-        point = -(point + 1);\n-      }\n+             point = Arrays.binarySearch(indices, idx);\n+             if (point >= 0) {\n+               values[point] = value;\n+               return;\n+             } else {\n+               point = -(point + 1);\n+             }\n     }\n \n     // 2. check the capacity and insert\n+\n     if (size == indices.length) {\n       long[] newIdxs = new long[(int) (indices.length * 1.5)];\n       float[] newValues = new float[(int) (indices.length * 1.5)];\n@@ -96,13 +98,13 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n         System.arraycopy(indices, 0, newIdxs, 1, size);\n         System.arraycopy(values, 0, newValues, 1, size);\n       } else if (point == size) {\n-        System.arraycopy(indices, 0, newIdxs, 0, size);\n-        System.arraycopy(values, 0, newValues, 0, size);\n+               System.arraycopy(indices, 0, newIdxs, 0, size);\n+               System.arraycopy(values, 0, newValues, 0, size);\n       } else {\n-        System.arraycopy(indices, 0, newIdxs, 0, point);\n-        System.arraycopy(values, 0, newValues, 0, point);\n-        System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n-        System.arraycopy(values, point, newValues, point + 1, size - point);\n+               System.arraycopy(indices, 0, newIdxs, 0, point);\n+               System.arraycopy(values, 0, newValues, 0, point);\n+               System.arraycopy(indices, point, newIdxs, point + 1, size - point);\n+               System.arraycopy(values, point, newValues, point + 1, size - point);\n       }\n       newIdxs[point] = idx;\n       newValues[point] = value;\n@@ -123,17 +125,14 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n \n   @Override\n   public LongFloatVectorStorage clone() {\n-    return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n   @Override\n   public LongFloatVectorStorage copy() {\n-    return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices),\n-        ArrayCopy.copy(values));\n+    return new LongFloatSortedVectorStorage(dim, size, ArrayCopy.copy(indices), ArrayCopy.copy(values));\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage oneLikeSparse() {\n     float[] oneLikeValues = new float[size];\n@@ -152,7 +151,6 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage oneLikeSparse(long dim, int capacity) {\n     float[] oneLikeValues = new float[capacity];\n@@ -168,6 +166,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -211,6 +210,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -239,7 +239,6 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage emptySparse() {\n     return new LongFloatSparseVectorStorage(dim, indices.length);\n@@ -250,7 +249,6 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n     return new LongFloatSortedVectorStorage(dim, indices.length);\n   }\n \n-\n   @Override\n   public LongFloatVectorStorage emptySparse(long dim, int capacity) {\n     return new LongFloatSparseVectorStorage(dim, capacity);\n@@ -283,8 +281,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n \n   @Override\n   public boolean hasKey(long key) {\n-    return (size != 0 && key <= indices[size - 1] && key >= indices[0]\n-        && Arrays.binarySearch(indices, key) > 0);\n+    return (size != 0 && key <= indices[size - 1] && key >= indices[0] && Arrays.binarySearch(indices, key) > 0);\n   }\n \n   @Override\n@@ -309,7 +306,7 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n \n   @Override\n   public void clear() {\n-    Arrays.parallelSetAll(indices, (int value) -> 0);\n+    Arrays.parallelSetAll(indices, (int value)-> 0);\n     for (int i = 0; i < values.length; i++) {\n       values[i] = 0;\n     }\n@@ -319,4 +316,5 @@ public class LongFloatSortedVectorStorage implements LongFloatVectorStorage {\n   public float[] getValues() {\n     return values;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}