{
    "project_name": "wso2-attic-commons",
    "violation_id": "539",
    "information": {
        "violations": [
            {
                "line": "30",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 162).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    public static void validate(Condition condition, List<QueryEventSource> queryEventSources,\n                                ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n        condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/539/ConditionValidator.java\nindex 19ac91f82bf..a009393d8af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/539/ConditionValidator.java\n@@ -27,8 +27,8 @@ import java.util.concurrent.ConcurrentMap;\n public class ConditionValidator {\n \n     public static void validate(Condition condition, List<QueryEventSource> queryEventSources,\n-                                ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n-        condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n+                                                    ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n+      condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n     }\n \n     public static Set<String> getDependencySet(Condition condition) {\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/539/ConditionValidator.java\nindex 19ac91f82bf..5c9d1641100 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/539/ConditionValidator.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.query.api.condition;\n \n import org.wso2.siddhi.query.api.definition.AbstractDefinition;\n@@ -26,13 +27,14 @@ import java.util.concurrent.ConcurrentMap;\n \n public class ConditionValidator {\n \n-    public static void validate(Condition condition, List<QueryEventSource> queryEventSources,\n-                                ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n-        condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n-    }\n+  public static void validate(Condition condition, List<QueryEventSource> queryEventSources,\n+                              ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap,\n+                              String streamReferenceId, boolean processInStreamDefinition) {\n+    condition.validate(queryEventSources, streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n+  }\n \n-    public static Set<String> getDependencySet(Condition condition) {\n-        return condition.getDependencySet();\n-    }\n+  public static Set<String> getDependencySet(Condition condition) {\n+    return condition.getDependencySet();\n+  }\n \n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/539/ConditionValidator.java\nindex 19ac91f82bf..abb08edbd7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/539/ConditionValidator.java\n@@ -28,11 +28,11 @@ public class ConditionValidator {\n \n     public static void validate(Condition condition, List<QueryEventSource> queryEventSources,\n                                 ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n-        condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n+    condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n     }\n \n     public static Set<String> getDependencySet(Condition condition) {\n         return condition.getDependencySet();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/539/ConditionValidator.java\nindex 19ac91f82bf..a009393d8af 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/539/ConditionValidator.java\n@@ -27,8 +27,8 @@ import java.util.concurrent.ConcurrentMap;\n public class ConditionValidator {\n \n     public static void validate(Condition condition, List<QueryEventSource> queryEventSources,\n-                                ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n-        condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n+                                                    ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n+      condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n     }\n \n     public static Set<String> getDependencySet(Condition condition) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/539/ConditionValidator.java\nindex 19ac91f82bf..5be29c6e174 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/539/ConditionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/539/ConditionValidator.java\n@@ -27,8 +27,8 @@ import java.util.concurrent.ConcurrentMap;\n public class ConditionValidator {\n \n     public static void validate(Condition condition, List<QueryEventSource> queryEventSources,\n-                                ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n-        condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n+    ConcurrentMap<String, AbstractDefinition> streamTableDefinitionMap, String streamReferenceId, boolean processInStreamDefinition) {\n+condition.validate(queryEventSources,streamTableDefinitionMap, streamReferenceId, processInStreamDefinition);\n     }\n \n     public static Set<String> getDependencySet(Condition condition) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}