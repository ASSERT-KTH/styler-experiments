{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "7",
    "information": {
        "violations": [
            {
                "line": "186",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * Get property names from {@link EnumerablePropertySource}, and get property value from {@link ConfigurableEnvironment#getProperty(String)}\n   */\n  private void getProperties(ConfigurableEnvironment environment, PropertySource<?> propertySource,\n      Map<String, Object> configFromSpringBoot) {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/7/ConfigurationSpringInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/7/ConfigurationSpringInitializer.java\nindex 8d9ab076579..28b82f441b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/7/ConfigurationSpringInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/7/ConfigurationSpringInitializer.java\n@@ -46,19 +46,19 @@ import com.netflix.config.ConfigurationManager;\n import com.netflix.config.DynamicPropertyFactory;\n \n /**\n- *  Adapt spring PropertySource and Archaius Configuration\n- *  spring     vs      archaius\n- *        (add)     |      dynamic(configcenter)\n- *  system property           |      system property\n- *  environment               |      environment\n- *  *properties/*.yml        |       (add)\n- *       (add)                |      microservice.yaml\n- *\n- *  add dynamic configuration, microserive.yaml to spring, add *properties/*.yml to archaius\n- *\n- *  NOTICE: we are not duplicate spring system property and environment property source, this will cause some problem\n- *  related to precedence of a KEY-VAlUE. That is cse.test in dynamic config may not override servicecomb.test in yml.\n- *  Users need to use the same key as what is in config file to override.\n+ * Adapt spring PropertySource and Archaius Configuration\n+ * spring     vs      archaius\n+ * (add)     |      dynamic(configcenter)\n+ * system property           |      system property\n+ * environment               |      environment\n+ * *properties/*.yml        |       (add)\n+ * (add)                |      microservice.yaml\n+ * <p>\n+ * add dynamic configuration, microserive.yaml to spring, add *properties/*.yml to archaius\n+ * <p>\n+ * NOTICE: we are not duplicate spring system property and environment property source, this will cause some problem\n+ * related to precedence of a KEY-VAlUE. That is cse.test in dynamic config may not override servicecomb.test in yml.\n+ * Users need to use the same key as what is in config file to override.\n  */\n public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigurer implements EnvironmentAware {\n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationSpringInitializer.class);\n@@ -72,6 +72,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n \n   /**\n    * Get configurations from Spring, merge them into the configurations of ServiceComb.\n+   *\n    * @param environment From which to get the extra config.\n    */\n   @Override\n@@ -123,6 +124,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n           });\n     }\n   }\n+\n   @Override\n   protected Properties mergeProperties() throws IOException {\n     Properties properties = super.mergeProperties();\n@@ -148,6 +150,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n \n   /**\n    * Try to get a name for identifying the environment.\n+   *\n    * @param environment the target that the name is generated for.\n    * @return The generated name for the environment.\n    */\n@@ -186,7 +189,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n    * Get property names from {@link EnumerablePropertySource}, and get property value from {@link ConfigurableEnvironment#getProperty(String)}\n    */\n   private void getProperties(ConfigurableEnvironment environment, PropertySource<?> propertySource,\n-      Map<String, Object> configFromSpringBoot) {\n+                             Map<String, Object> configFromSpringBoot) {\n     if (propertySource instanceof CompositePropertySource) {\n       // recursively get EnumerablePropertySource\n       CompositePropertySource compositePropertySource = (CompositePropertySource) propertySource;\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/7/ConfigurationSpringInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/7/ConfigurationSpringInitializer.java\nindex 8d9ab076579..887b7bfaf32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/7/ConfigurationSpringInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/7/ConfigurationSpringInitializer.java\n@@ -203,4 +203,4 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n \n     LOGGER.debug(\"a none EnumerablePropertySource is ignored, propertySourceName = [{}]\", propertySource.getName());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/7/ConfigurationSpringInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/7/ConfigurationSpringInitializer.java\nindex 8d9ab076579..a6e604af0d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/7/ConfigurationSpringInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/7/ConfigurationSpringInitializer.java\n@@ -23,7 +23,6 @@ import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n-\n import org.apache.commons.configuration.AbstractConfiguration;\n import org.apache.servicecomb.config.spi.ConfigCenterConfigurationSource;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n@@ -39,7 +38,6 @@ import org.springframework.core.env.Environment;\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.PropertySource;\n import org.springframework.util.StringUtils;\n-\n import com.google.common.collect.Lists;\n import com.netflix.config.ConcurrentCompositeConfiguration;\n import com.netflix.config.ConfigurationManager;\n@@ -60,6 +58,7 @@ import com.netflix.config.DynamicPropertyFactory;\n  *  related to precedence of a KEY-VAlUE. That is cse.test in dynamic config may not override servicecomb.test in yml.\n  *  Users need to use the same key as what is in config file to override.\n  */\n+\n public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigurer implements EnvironmentAware {\n   private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationSpringInitializer.class);\n \n@@ -74,59 +73,54 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n    * Get configurations from Spring, merge them into the configurations of ServiceComb.\n    * @param environment From which to get the extra config.\n    */\n+\n   @Override\n   public void setEnvironment(Environment environment) {\n     String environmentName = generateNameForEnvironment(environment);\n     LOGGER.info(\"Environment received, will get configurations from [{}].\", environmentName);\n \n     Map<String, Object> extraConfig = getAllProperties(environment);\n-\n     ConfigUtil.addExtraConfig(EXTRA_CONFIG_SOURCE_PREFIX + environmentName, extraConfig);\n-\n     ConfigUtil.installDynamicConfig();\n-\n     setUpSpringPropertySource(environment);\n   }\n \n   private void setUpSpringPropertySource(Environment environment) {\n     if (environment instanceof ConfigurableEnvironment) {\n       ConfigurableEnvironment ce = (ConfigurableEnvironment) environment;\n-      ConfigCenterConfigurationSource configCenterConfigurationSource =\n-          SPIServiceUtils.getTargetService(ConfigCenterConfigurationSource.class);\n+      ConfigCenterConfigurationSource configCenterConfigurationSource = SPIServiceUtils.getTargetService(ConfigCenterConfigurationSource.class);\n       if (configCenterConfigurationSource != null) {\n         try {\n-          ce.getPropertySources()\n-              .addFirst(new MapPropertySource(\"dynamic-source\", configCenterConfigurationSource.getCurrentData()));\n+          ce.getPropertySources().addFirst(new MapPropertySource(\"dynamic-source\", configCenterConfigurationSource.getCurrentData()));\n         } catch (Exception e) {\n           LOGGER.warn(\"set up spring property source failed. msg: {}\", e.getMessage());\n         }\n       }\n+\n       ConcurrentCompositeConfiguration concurrentCompositeConfiguration = ConfigUtil.createLocalConfig();\n-      ce.getPropertySources().addLast(\n-          new EnumerablePropertySource<ConcurrentCompositeConfiguration>(\"microservice.yaml\",\n-              concurrentCompositeConfiguration) {\n-            private String[] propertyNames = null;\n-\n-            @Override\n-            public String[] getPropertyNames() {\n-              if (propertyNames == null) {\n-                List<String> keyList = Lists.newArrayList(this.source.getKeys());\n-                propertyNames = keyList.toArray(new String[keyList.size()]);\n-              }\n-              return propertyNames;\n-            }\n-\n-            @Override\n-            public Object getProperty(String s) {\n-              return this.source.getProperty(s);\n-            }\n-          });\n+      ce.getPropertySources().addLast(new EnumerablePropertySource<ConcurrentCompositeConfiguration>(\"microservice.yaml\", concurrentCompositeConfiguration) {\n+        private String[] propertyNames = null;\n+\n+        @Override\n+        public String[] getPropertyNames() {\n+          if (propertyNames == null) {\n+            List<String> keyList = Lists.newArrayList(this.source.getKeys());\n+            propertyNames = keyList.toArray(new String[keyList.size()]);\n+          }\n+          return propertyNames;\n+        }\n+\n+        @Override\n+        public Object getProperty(String s) {\n+          return this.source.getProperty(s);\n+        }\n+      });\n     }\n   }\n+\n   @Override\n   protected Properties mergeProperties() throws IOException {\n     Properties properties = super.mergeProperties();\n-\n     AbstractConfiguration config = ConfigurationManager.getConfigInstance();\n     Iterator<String> iter = config.getKeys();\n     while (iter.hasNext()) {\n@@ -141,7 +135,8 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n   protected String resolvePlaceholder(String placeholder, Properties props) {\n     String propertyValue = super.resolvePlaceholder(placeholder, props);\n     if (propertyValue == null) {\n-      return DynamicPropertyFactory.getInstance().getStringProperty(placeholder, null).get();\n+      return DynamicPropertyFactory.getInstance().getStringProperty(placeholder, null)\n+                                                 .get();\n     }\n     return propertyValue;\n   }\n@@ -151,6 +146,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n    * @param environment the target that the name is generated for.\n    * @return The generated name for the environment.\n    */\n+\n   private String generateNameForEnvironment(Environment environment) {\n     String environmentName = environment.getProperty(\"spring.config.name\");\n     if (!StringUtils.isEmpty(environmentName)) {\n@@ -161,16 +157,15 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n     if (!StringUtils.isEmpty(environmentName)) {\n       return environmentName;\n     }\n-\n     return environment.getClass().getName() + \"@\" + environment.hashCode();\n   }\n \n   /**\n    * Traversal all {@link PropertySource} of {@link ConfigurableEnvironment}, and try to get all properties.\n    */\n+\n   private Map<String, Object> getAllProperties(Environment environment) {\n     Map<String, Object> configFromSpringBoot = new HashMap<>();\n-\n     if (!(environment instanceof ConfigurableEnvironment)) {\n       return configFromSpringBoot;\n     }\n@@ -185,14 +180,16 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n   /**\n    * Get property names from {@link EnumerablePropertySource}, and get property value from {@link ConfigurableEnvironment#getProperty(String)}\n    */\n-  private void getProperties(ConfigurableEnvironment environment, PropertySource<?> propertySource,\n-      Map<String, Object> configFromSpringBoot) {\n+\n+  private void getProperties(ConfigurableEnvironment environment,\n+    PropertySource<?> propertySource, Map<String, Object> configFromSpringBoot) {\n     if (propertySource instanceof CompositePropertySource) {\n       // recursively get EnumerablePropertySource\n       CompositePropertySource compositePropertySource = (CompositePropertySource) propertySource;\n       compositePropertySource.getPropertySources().forEach(ps -> getProperties(environment, ps, configFromSpringBoot));\n       return;\n     }\n+\n     if (propertySource instanceof EnumerablePropertySource) {\n       EnumerablePropertySource<?> enumerablePropertySource = (EnumerablePropertySource<?>) propertySource;\n       for (String propertyName : enumerablePropertySource.getPropertyNames()) {\n@@ -201,6 +198,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n       return;\n     }\n \n-    LOGGER.debug(\"a none EnumerablePropertySource is ignored, propertySourceName = [{}]\", propertySource.getName());\n+    LOGGER.debug(\"a none EnumerablePropertySource is ignored, propertySourceName = [{}]\",\n+propertySource.getName());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}