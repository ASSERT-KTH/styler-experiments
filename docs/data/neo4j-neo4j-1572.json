{
    "project_name": "neo4j-neo4j",
    "violation_id": "1572",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "33",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1572/HeapTrackingIntObjectHashMap.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1572/HeapTrackingIntObjectHashMap.java\nindex 1ce74a4e255..3e72a50bff3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1572/HeapTrackingIntObjectHashMap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1572/HeapTrackingIntObjectHashMap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection.trackable;\n \n import org.eclipse.collections.impl.map.mutable.primitive.IntObjectHashMap;\n@@ -29,49 +30,49 @@ import static org.neo4j.memory.HeapEstimator.OBJECT_REFERENCE_BYTES;\n import static org.neo4j.memory.HeapEstimator.alignObjectSize;\n import static org.neo4j.memory.HeapEstimator.shallowSizeOfInstance;\n \n-@SuppressWarnings( \"ExternalizableWithoutPublicNoArgConstructor\" )\n+@SuppressWarnings(\"ExternalizableWithoutPublicNoArgConstructor\")\n class HeapTrackingIntObjectHashMap<V> extends IntObjectHashMap<V> implements AutoCloseable\n {\n-    private static final long SHALLOW_SIZE = shallowSizeOfInstance( HeapTrackingLongObjectHashMap.class );\n+    private static final long SHALLOW_SIZE = shallowSizeOfInstance(HeapTrackingLongObjectHashMap.class);\n     private static final int DEFAULT_INITIAL_CAPACITY = 16;\n \n     private final MemoryTracker memoryTracker;\n     private int trackedCapacity;\n \n-    static <V> HeapTrackingIntObjectHashMap<V> createIntObjectHashMap( MemoryTracker memoryTracker )\n+    static <V> HeapTrackingIntObjectHashMap<V> createIntObjectHashMap(MemoryTracker memoryTracker)\n     {\n-        memoryTracker.allocateHeap( SHALLOW_SIZE + arraysHeapSize( DEFAULT_INITIAL_CAPACITY ) );\n-        return new HeapTrackingIntObjectHashMap<>( memoryTracker, DEFAULT_INITIAL_CAPACITY );\n+        memoryTracker.allocateHeap(SHALLOW_SIZE + arraysHeapSize(DEFAULT_INITIAL_CAPACITY));\n+        return new HeapTrackingIntObjectHashMap<>(memoryTracker, DEFAULT_INITIAL_CAPACITY);\n     }\n \n-    private HeapTrackingIntObjectHashMap( MemoryTracker memoryTracker, int trackedCapacity )\n+    private HeapTrackingIntObjectHashMap(MemoryTracker memoryTracker, int trackedCapacity)\n     {\n-        this.memoryTracker = requireNonNull( memoryTracker );\n+        this.memoryTracker = requireNonNull(memoryTracker);\n         this.trackedCapacity = trackedCapacity;\n     }\n \n     @Override\n-    protected void allocateTable( int sizeToAllocate )\n+    protected void allocateTable(int sizeToAllocate)\n     {\n-        if ( memoryTracker != null )\n+        if (memoryTracker != null)\n         {\n-            memoryTracker.allocateHeap( arraysHeapSize( sizeToAllocate ) );\n-            memoryTracker.releaseHeap( arraysHeapSize( trackedCapacity ) );\n+            memoryTracker.allocateHeap(arraysHeapSize(sizeToAllocate));\n+            memoryTracker.releaseHeap(arraysHeapSize(trackedCapacity));\n             trackedCapacity = sizeToAllocate;\n         }\n-        super.allocateTable( sizeToAllocate );\n+        super.allocateTable(sizeToAllocate);\n     }\n \n     @Override\n     public void close()\n     {\n-        memoryTracker.releaseHeap( arraysHeapSize( trackedCapacity ) + SHALLOW_SIZE );\n+        memoryTracker.releaseHeap(arraysHeapSize(trackedCapacity) + SHALLOW_SIZE);\n     }\n \n-    static long arraysHeapSize( int arrayLength )\n+    static long arraysHeapSize(int arrayLength)\n     {\n-        long keyArray = alignObjectSize( ARRAY_HEADER_BYTES + (long) arrayLength * Integer.BYTES );\n-        long valueArray = alignObjectSize( ARRAY_HEADER_BYTES + (long) arrayLength * OBJECT_REFERENCE_BYTES );\n+        long keyArray = alignObjectSize(ARRAY_HEADER_BYTES + (long) arrayLength * Integer.BYTES);\n+        long valueArray = alignObjectSize(ARRAY_HEADER_BYTES + (long) arrayLength * OBJECT_REFERENCE_BYTES);\n         return keyArray + valueArray;\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}