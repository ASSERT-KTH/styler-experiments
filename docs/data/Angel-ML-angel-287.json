{
    "project_name": "Angel-ML-angel",
    "violation_id": "287",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/287/AsyncAdamFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/287/AsyncAdamFunc.java\nindex cd38ec2c91d..f3e152f4d98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/287/AsyncAdamFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/287/AsyncAdamFunc.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.spark.ml.psf.optim;\n \n import com.tencent.angel.ml.math2.ufuncs.OptFuncs;\n@@ -23,35 +24,35 @@ import com.tencent.angel.ml.matrix.psf.update.base.UpdateParam;\n \n public class AsyncAdamFunc extends AsyncOptimFunc {\n \n-  public AsyncAdamFunc(UpdateParam param) {\n-    super(param);\n-  }\n+    public AsyncAdamFunc(UpdateParam param) {\n+        super(param);\n+    }\n \n-  public AsyncAdamFunc() {\n-    super(null);\n-  }\n+    public AsyncAdamFunc() {\n+        super(null);\n+    }\n \n-  @Override\n-  public void update(Vector[] vectors, Vector grad, double[] doubles, int[] ints) {\n-    double eta = doubles[0];\n-    double gamma = doubles[1];\n-    double beta = doubles[2];\n+    @Override\n+    public void update(Vector[] vectors, Vector grad, double[] doubles, int[] ints) {\n+        double eta = doubles[0];\n+        double gamma = doubles[1];\n+        double beta = doubles[2];\n \n-    int numUpdates = ints[2];\n-    double powBeta = Math.pow(beta, numUpdates);\n-    double powGamma = Math.pow(gamma, numUpdates);\n+        int numUpdates = ints[2];\n+        double powBeta = Math.pow(beta, numUpdates);\n+        double powGamma = Math.pow(gamma, numUpdates);\n \n-    Vector weight = vectors[0];\n-    Vector velocity = vectors[1];\n-    Vector square = vectors[2];\n+        Vector weight = vectors[0];\n+        Vector velocity = vectors[1];\n+        Vector square = vectors[2];\n \n-    OptFuncs.iexpsmoothing(velocity, grad, beta);\n-    OptFuncs.iexpsmoothing2(square, grad, gamma);\n+        OptFuncs.iexpsmoothing(velocity, grad, beta);\n+        OptFuncs.iexpsmoothing2(square, grad, gamma);\n \n-    velocity = Ufuncs.indexget(velocity, grad);\n+        velocity = Ufuncs.indexget(velocity, grad);\n \n-    Vector delta = OptFuncs.adamdelta(velocity, square, powBeta, powGamma);\n-    delta.imul(eta);\n-    weight.isub(delta);\n-  }\n+        Vector delta = OptFuncs.adamdelta(velocity, square, powBeta, powGamma);\n+        delta.imul(eta);\n+        weight.isub(delta);\n+    }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/287/AsyncAdamFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/287/AsyncAdamFunc.java\nindex cd38ec2c91d..51c89c2a9a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/287/AsyncAdamFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/287/AsyncAdamFunc.java\n@@ -54,4 +54,4 @@ public class AsyncAdamFunc extends AsyncOptimFunc {\n     delta.imul(eta);\n     weight.isub(delta);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/287/AsyncAdamFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/287/AsyncAdamFunc.java\nindex cd38ec2c91d..e69a427880f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/287/AsyncAdamFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/287/AsyncAdamFunc.java\n@@ -32,26 +32,23 @@ public class AsyncAdamFunc extends AsyncOptimFunc {\n   }\n \n   @Override\n-  public void update(Vector[] vectors, Vector grad, double[] doubles, int[] ints) {\n+  public void update(\n+    Vector[] vectors, Vector grad, double[] doubles, int[] ints) {\n     double eta = doubles[0];\n     double gamma = doubles[1];\n     double beta = doubles[2];\n-\n     int numUpdates = ints[2];\n     double powBeta = Math.pow(beta, numUpdates);\n     double powGamma = Math.pow(gamma, numUpdates);\n-\n     Vector weight = vectors[0];\n     Vector velocity = vectors[1];\n     Vector square = vectors[2];\n-\n     OptFuncs.iexpsmoothing(velocity, grad, beta);\n     OptFuncs.iexpsmoothing2(square, grad, gamma);\n-\n     velocity = Ufuncs.indexget(velocity, grad);\n-\n     Vector delta = OptFuncs.adamdelta(velocity, square, powBeta, powGamma);\n     delta.imul(eta);\n     weight.isub(delta);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}