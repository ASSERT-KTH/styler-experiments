{
    "project_name": "EMResearch-EMB",
    "violation_id": "68",
    "information": {
        "violations": [
            {
                "line": "41",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Nullable\n  @Override\n  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n    try {\n      int x = Integer.parseInt(arguments.get(\"x\"));\n      int y = Integer.parseInt(arguments.get(\"y\"));",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/68/DateRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/68/DateRangeChecker.java\nindex 0bff1dce4ff..ccae8ece217 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/68/DateRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/68/DateRangeChecker.java\n@@ -31,25 +31,25 @@ import java.util.Map;\n  * date happens before the end date. The check is trivial: simply check\n  * whether the first integer number is smaller than the second, so this\n  * can be implemented for any language.\n- *\n+ * <p>\n  * The parameters used in the XML file are called 'x' and 'y'.\n- *\n  */\n public class DateRangeChecker extends RuleFilter {\n-  @Nullable\n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    try {\n-      int x = Integer.parseInt(arguments.get(\"x\"));\n-      int y = Integer.parseInt(arguments.get(\"y\"));\n-      if (x >= y) {\n-        return match;\n-      }\n-    } catch (IllegalArgumentException ignore) {\n-      // if something's fishy with the number \u2013 ignore it silently,\n-      // it's not a date range\n-      return null;\n+    @Nullable\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos,\n+                                     AnalyzedTokenReadings[] patternTokens) {\n+        try {\n+            int x = Integer.parseInt(arguments.get(\"x\"));\n+            int y = Integer.parseInt(arguments.get(\"y\"));\n+            if (x >= y) {\n+                return match;\n+            }\n+        } catch (IllegalArgumentException ignore) {\n+            // if something's fishy with the number \u2013 ignore it silently,\n+            // it's not a date range\n+            return null;\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/68/DateRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/68/DateRangeChecker.java\nindex 0bff1dce4ff..ee942834cfa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/68/DateRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/68/DateRangeChecker.java\n@@ -16,8 +16,6 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n-\n-\n package org.languagetool.rules;\n \n import org.jetbrains.annotations.Nullable;\n@@ -52,4 +50,4 @@ public class DateRangeChecker extends RuleFilter {\n     }\n     return null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/68/DateRangeChecker.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/68/DateRangeChecker.java\nindex 0bff1dce4ff..16a4ca8998e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/68/DateRangeChecker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/68/DateRangeChecker.java\n@@ -23,7 +23,6 @@ package org.languagetool.rules;\n import org.jetbrains.annotations.Nullable;\n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.rules.patterns.RuleFilter;\n-\n import java.util.Map;\n \n /**\n@@ -35,21 +34,24 @@ import java.util.Map;\n  * The parameters used in the XML file are called 'x' and 'y'.\n  *\n  */\n+\n+\n public class DateRangeChecker extends RuleFilter {\n-  @Nullable\n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    try {\n-      int x = Integer.parseInt(arguments.get(\"x\"));\n-      int y = Integer.parseInt(arguments.get(\"y\"));\n-      if (x >= y) {\n-        return match;\n-      }\n-    } catch (IllegalArgumentException ignore) {\n+    @Nullable\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> arguments, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n+        try {\n+            int x = Integer.parseInt(arguments.get(\"x\"));\n+            int y = Integer.parseInt(arguments.get(\"y\"));\n+            if (x >= y) {\n+                return match;\n+            }\n+        } catch (IllegalArgumentException ignore) {\n       // if something's fishy with the number \u2013 ignore it silently,\n       // it's not a date range\n-      return null;\n+          return null;\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}