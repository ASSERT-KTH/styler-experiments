{
    "project_name": "open-eid-digidoc4j",
    "violation_id": "29",
    "information": {
        "violations": [
            {
                "line": "36",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 140).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        if (isSignaturePolicyImpliedElementPresented()) {\n            this.log.error(\"Signature contains forbidden element\");\n            this.addValidationError(new InvalidTimemarkSignatureException(\"Signature contains forbidden <SignaturePolicyImplied> element\"));\n        }\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/violations/29/TimemarkSignatureValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/checkstyle_idea/29/TimemarkSignatureValidator.java\nindex 62f526ab228..39b0c8b7137 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/violations/29/TimemarkSignatureValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/checkstyle_idea/29/TimemarkSignatureValidator.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic.xades.validation;\n \n@@ -18,22 +18,23 @@ import org.slf4j.LoggerFactory;\n \n public class TimemarkSignatureValidator extends TimestampSignatureValidator {\n \n-    private final Logger log = LoggerFactory.getLogger(TimemarkSignatureValidator.class);\n+  private final Logger log = LoggerFactory.getLogger(TimemarkSignatureValidator.class);\n \n-    public TimemarkSignatureValidator(XadesSignature signature) {\n-        super(signature);\n-    }\n+  public TimemarkSignatureValidator(XadesSignature signature) {\n+    super(signature);\n+  }\n \n-    public TimemarkSignatureValidator(XadesSignature signature, Configuration configuration) {\n-        super(signature, configuration);\n-    }\n+  public TimemarkSignatureValidator(XadesSignature signature, Configuration configuration) {\n+    super(signature, configuration);\n+  }\n \n-    @Override\n-    protected void addPolicyErrors() {\n-        this.log.debug(\"Extracting TM signature policy errors\");\n-        if (isSignaturePolicyImpliedElementPresented()) {\n-            this.log.error(\"Signature contains forbidden element\");\n-            this.addValidationError(new InvalidTimemarkSignatureException(\"Signature contains forbidden <SignaturePolicyImplied> element\"));\n-        }\n+  @Override\n+  protected void addPolicyErrors() {\n+    this.log.debug(\"Extracting TM signature policy errors\");\n+    if (isSignaturePolicyImpliedElementPresented()) {\n+      this.log.error(\"Signature contains forbidden element\");\n+      this.addValidationError(\n+          new InvalidTimemarkSignatureException(\"Signature contains forbidden <SignaturePolicyImplied> element\"));\n     }\n+  }\n }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/violations/29/TimemarkSignatureValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/naturalize/29/TimemarkSignatureValidator.java\nindex 62f526ab228..b14f52a8b4d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/violations/29/TimemarkSignatureValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/naturalize/29/TimemarkSignatureValidator.java\n@@ -18,7 +18,7 @@ import org.slf4j.LoggerFactory;\n \n public class TimemarkSignatureValidator extends TimestampSignatureValidator {\n \n-    private final Logger log = LoggerFactory.getLogger(TimemarkSignatureValidator.class);\n+  private final Logger log = LoggerFactory.getLogger(TimemarkSignatureValidator.class);\n \n     public TimemarkSignatureValidator(XadesSignature signature) {\n         super(signature);\n@@ -26,7 +26,7 @@ public class TimemarkSignatureValidator extends TimestampSignatureValidator {\n \n     public TimemarkSignatureValidator(XadesSignature signature, Configuration configuration) {\n         super(signature, configuration);\n-    }\n+  }\n \n     @Override\n     protected void addPolicyErrors() {\n@@ -36,4 +36,4 @@ public class TimemarkSignatureValidator extends TimestampSignatureValidator {\n             this.addValidationError(new InvalidTimemarkSignatureException(\"Signature contains forbidden <SignaturePolicyImplied> element\"));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/violations/29/TimemarkSignatureValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/codebuff/29/TimemarkSignatureValidator.java\nindex 62f526ab228..692a63badc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/violations/29/TimemarkSignatureValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/open-eid-digidoc4j/codebuff/29/TimemarkSignatureValidator.java\n@@ -16,24 +16,26 @@ import org.digidoc4j.impl.asic.xades.XadesSignature;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public class TimemarkSignatureValidator extends TimestampSignatureValidator {\n \n-    private final Logger log = LoggerFactory.getLogger(TimemarkSignatureValidator.class);\n+  private final Logger log = LoggerFactory.getLogger(TimemarkSignatureValidator.class);\n \n-    public TimemarkSignatureValidator(XadesSignature signature) {\n-        super(signature);\n-    }\n+  public TimemarkSignatureValidator(XadesSignature signature) {\n+    super(signature);\n+  }\n \n-    public TimemarkSignatureValidator(XadesSignature signature, Configuration configuration) {\n-        super(signature, configuration);\n-    }\n \n-    @Override\n-    protected void addPolicyErrors() {\n-        this.log.debug(\"Extracting TM signature policy errors\");\n-        if (isSignaturePolicyImpliedElementPresented()) {\n-            this.log.error(\"Signature contains forbidden element\");\n-            this.addValidationError(new InvalidTimemarkSignatureException(\"Signature contains forbidden <SignaturePolicyImplied> element\"));\n-        }\n+  public TimemarkSignatureValidator(XadesSignature signature, Configuration configuration) {\n+    super(signature, configuration);\n+  }\n+\n+  @Override\n+  protected void addPolicyErrors() {\n+    this.log.debug(\"Extracting TM signature policy errors\");\n+    if (isSignaturePolicyImpliedElementPresented()) {\n+      this.log.error(\"Signature contains forbidden element\");\n+      this.addValidationError(new InvalidTimemarkSignatureException(\"Signature contains forbidden <SignaturePolicyImplied> element\"));\n     }\n-}\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}