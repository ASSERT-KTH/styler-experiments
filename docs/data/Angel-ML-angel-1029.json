{
    "project_name": "Angel-ML-angel",
    "violation_id": "1029",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1029/NettyUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1029/NettyUtils.java\nindex f8940341ef7..c1126a209f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1029/NettyUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1029/NettyUtils.java\n@@ -22,27 +22,30 @@ import io.netty.util.internal.PlatformDependent;\n import java.lang.reflect.Field;\n \n public class NettyUtils {\n-  public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs,\n-      boolean allowCache, int numCores) {\n-    if (numCores == 0) {\n-      numCores = Runtime.getRuntime().availableProcessors();\n+    public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs,\n+                                                                      boolean allowCache,\n+                                                                      int numCores) {\n+        if (numCores == 0) {\n+            numCores = Runtime.getRuntime().availableProcessors();\n+        }\n+        return new PooledByteBufAllocator(\n+                allowDirectBufs && PlatformDependent.directBufferPreferred(),\n+                Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(\n+                getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n+                getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"),\n+                getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n+                allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n+                allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n+                allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0);\n     }\n-    return new PooledByteBufAllocator(allowDirectBufs && PlatformDependent.directBufferPreferred(),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(\n-            getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n-        getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"), getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n-        allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0);\n-  }\n \n-  private static int getPrivateStaticField(String name) {\n-    try {\n-      Field f = PooledByteBufAllocator.DEFAULT.getClass().getDeclaredField(name);\n-      f.setAccessible(true);\n-      return f.getInt(null);\n-    } catch (Exception e) {\n-      throw new RuntimeException(e);\n+    private static int getPrivateStaticField(String name) {\n+        try {\n+            Field f = PooledByteBufAllocator.DEFAULT.getClass().getDeclaredField(name);\n+            f.setAccessible(true);\n+            return f.getInt(null);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 257).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1029/NettyUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1029/NettyUtils.java\nindex f8940341ef7..844f2039063 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1029/NettyUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1029/NettyUtils.java\n@@ -22,15 +22,12 @@ import io.netty.util.internal.PlatformDependent;\n import java.lang.reflect.Field;\n \n public class NettyUtils {\n-  public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs,\n-      boolean allowCache, int numCores) {\n-    if (numCores == 0) {\n+  public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs, boolean allowCache, int numCores) {\n+  if (numCores == 0) {\n       numCores = Runtime.getRuntime().availableProcessors();\n     }\n     return new PooledByteBufAllocator(allowDirectBufs && PlatformDependent.directBufferPreferred(),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(\n-            getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n-        getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"), getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n+        Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0), getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"), getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n         allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n         allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n         allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0);\n@@ -45,4 +42,4 @@ public class NettyUtils {\n       throw new RuntimeException(e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "25",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 554).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1029/NettyUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1029/NettyUtils.java\nindex f8940341ef7..b5ea2a5a95e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1029/NettyUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1029/NettyUtils.java\n@@ -18,22 +18,15 @@ package com.tencent.angel.utils;\n \n import io.netty.buffer.PooledByteBufAllocator;\n import io.netty.util.internal.PlatformDependent;\n-\n import java.lang.reflect.Field;\n \n public class NettyUtils {\n-  public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs,\n-      boolean allowCache, int numCores) {\n+\n+  public static PooledByteBufAllocator createPooledByteBufAllocator(boolean allowDirectBufs, boolean allowCache, int numCores) {\n     if (numCores == 0) {\n       numCores = Runtime.getRuntime().availableProcessors();\n     }\n-    return new PooledByteBufAllocator(allowDirectBufs && PlatformDependent.directBufferPreferred(),\n-        Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(\n-            getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0),\n-        getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"), getPrivateStaticField(\"DEFAULT_MAX_ORDER\"),\n-        allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0,\n-        allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0);\n+    return new PooledByteBufAllocator(allowDirectBufs && PlatformDependent.directBufferPreferred(), Math.min(getPrivateStaticField(\"DEFAULT_NUM_HEAP_ARENA\"), numCores), Math.min(getPrivateStaticField(\"DEFAULT_NUM_DIRECT_ARENA\"), allowDirectBufs ? numCores : 0), getPrivateStaticField(\"DEFAULT_PAGE_SIZE\"), getPrivateStaticField(\"DEFAULT_MAX_ORDER\"), allowCache ? getPrivateStaticField(\"DEFAULT_TINY_CACHE_SIZE\") : 0, allowCache ? getPrivateStaticField(\"DEFAULT_SMALL_CACHE_SIZE\") : 0, allowCache ? getPrivateStaticField(\"DEFAULT_NORMAL_CACHE_SIZE\") : 0);\n   }\n \n   private static int getPrivateStaticField(String name) {\n@@ -45,4 +38,4 @@ public class NettyUtils {\n       throw new RuntimeException(e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}