{
    "project_name": "Angel-ML-angel",
    "violation_id": "676",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/676/ServerIntIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/676/ServerIntIntRow.java\nindex d3dc79b5d91..4a8fda3c8f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/676/ServerIntIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/676/ServerIntIntRow.java\n@@ -33,146 +33,149 @@ import io.netty.buffer.ByteBuf;\n  */\n public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n \n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   * @param storage vector storage\n-   */\n-  public ServerIntIntRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntIntStorage storage) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, storage);\n-  }\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerIntIntRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a empty ServerIntIntRow\n-   *\n-   * @param rowType row type\n-   */\n-  public ServerIntIntRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  @Override\n-  public IntIntStorage getStorage() {\n-    return (IntIntStorage) storage;\n-  }\n-\n-\n-  @Override\n-  public int get(int index) {\n-    return getStorage().get(index);\n-  }\n-\n-  @Override\n-  public void set(int index, int value) {\n-    getStorage().set(index, value);\n-  }\n-\n-  @Override\n-  public int[] get(int[] indices) {\n-    return getStorage().get(indices);\n-  }\n-\n-  @Override\n-  public void set(int[] indices, int[] values) {\n-    assert indices.length == values.length;\n-    getStorage().set(indices, values);\n-  }\n-\n-  @Override\n-  public void addTo(int index, int value) {\n-    getStorage().addTo(index, value);\n-  }\n-\n-  @Override\n-  public void addTo(int[] indices, int[] values) {\n-    assert indices.length == values.length;\n-    getStorage().addTo(indices, values);\n-  }\n-\n-  @Override\n-  public int size() {\n-    return getStorage().size();\n-  }\n-\n-  @Override\n-  public void mergeTo(IntIntVector mergedRow) {\n-    startRead();\n-    try {\n-      getStorage().mergeTo(mergedRow);\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow deepClone() {\n-    startRead();\n-    try {\n-      return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntIntStorage) storage.deepClone());\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-\n-  @Override\n-  public ServerRow adaptiveClone() {\n-    startRead();\n-    try {\n-      return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntIntStorage) storage.adaptiveClone());\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(int index) {\n-    return getStorage().exist(index);\n-  }\n-\n-  @Override\n-  public int initAndGet(int index, InitFunc func) {\n-    return getStorage().initAndGet(index, func);\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n-    getStorage().indexGet(indexType, indexSize, in, out, func);\n-  }\n-\n-  @Override\n-  public void elemUpdate(IntElemUpdateFunc func) {\n-    getStorage().elemUpdate(func);\n-  }\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     * @param storage    vector storage\n+     */\n+    public ServerIntIntRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n+                           IntIntStorage storage) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, storage);\n+    }\n+\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerIntIntRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n+    }\n+\n+    /**\n+     * Create a empty ServerIntIntRow\n+     *\n+     * @param rowType row type\n+     */\n+    public ServerIntIntRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n+    }\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    @Override\n+    public IntIntStorage getStorage() {\n+        return (IntIntStorage) storage;\n+    }\n+\n+\n+    @Override\n+    public int get(int index) {\n+        return getStorage().get(index);\n+    }\n+\n+    @Override\n+    public void set(int index, int value) {\n+        getStorage().set(index, value);\n+    }\n+\n+    @Override\n+    public int[] get(int[] indices) {\n+        return getStorage().get(indices);\n+    }\n+\n+    @Override\n+    public void set(int[] indices, int[] values) {\n+        assert indices.length == values.length;\n+        getStorage().set(indices, values);\n+    }\n+\n+    @Override\n+    public void addTo(int index, int value) {\n+        getStorage().addTo(index, value);\n+    }\n+\n+    @Override\n+    public void addTo(int[] indices, int[] values) {\n+        assert indices.length == values.length;\n+        getStorage().addTo(indices, values);\n+    }\n+\n+    @Override\n+    public int size() {\n+        return getStorage().size();\n+    }\n+\n+    @Override\n+    public void mergeTo(IntIntVector mergedRow) {\n+        startRead();\n+        try {\n+            getStorage().mergeTo(mergedRow);\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+    @Override\n+    public ServerRow deepClone() {\n+        startRead();\n+        try {\n+            return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol,\n+                    (int) estElemNum,\n+                    (IntIntStorage) storage.deepClone());\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+\n+    @Override\n+    public ServerRow adaptiveClone() {\n+        startRead();\n+        try {\n+            return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol,\n+                    (int) estElemNum,\n+                    (IntIntStorage) storage.adaptiveClone());\n+        } finally {\n+            endRead();\n+        }\n+    }\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(int index) {\n+        return getStorage().exist(index);\n+    }\n+\n+    @Override\n+    public int initAndGet(int index, InitFunc func) {\n+        return getStorage().initAndGet(index, func);\n+    }\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out,\n+                         InitFunc func) {\n+        getStorage().indexGet(indexType, indexSize, in, out, func);\n+    }\n+\n+    @Override\n+    public void elemUpdate(IntElemUpdateFunc func) {\n+        getStorage().elemUpdate(func);\n+    }\n }\n",
            "diff_size": 145
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/676/ServerIntIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/676/ServerIntIntRow.java\nindex d3dc79b5d91..56fd652516f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/676/ServerIntIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/676/ServerIntIntRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.vector.IntIntVector;\n@@ -80,8 +79,7 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n     return (IntIntStorage) storage;\n   }\n \n-\n-  @Override\n+@Override\n   public int get(int index) {\n     return getStorage().get(index);\n   }\n@@ -133,20 +131,19 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n     startRead();\n     try {\n       return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntIntStorage) storage.deepClone());\n-    } finally {\n+(IntIntStorage) storage.deepClone());\n+  } finally {\n       endRead();\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntIntStorage) storage.adaptiveClone());\n-    } finally {\n+(IntIntStorage) storage.adaptiveClone());\n+  } finally {\n       endRead();\n     }\n   }\n@@ -175,4 +172,4 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n   public void elemUpdate(IntElemUpdateFunc func) {\n     getStorage().elemUpdate(func);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/676/ServerIntIntRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/676/ServerIntIntRow.java\nindex d3dc79b5d91..eb080b0a790 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/676/ServerIntIntRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/676/ServerIntIntRow.java\n@@ -31,6 +31,7 @@ import io.netty.buffer.ByteBuf;\n /**\n  * The row with \"int\" index type and \"int\" value type in PS\n  */\n+\n public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n \n   /**\n@@ -43,8 +44,8 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n    * @param estElemNum the estimate element number\n    * @param storage vector storage\n    */\n-  public ServerIntIntRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntIntStorage storage) {\n+\n+  public ServerIntIntRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntIntStorage storage) {\n     super(rowId, rowType, startCol, endCol, estElemNum, storage);\n   }\n \n@@ -57,6 +58,7 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n+\n   public ServerIntIntRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n@@ -66,6 +68,7 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n    *\n    * @param rowType row type\n    */\n+\n   public ServerIntIntRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -80,7 +83,6 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n     return (IntIntStorage) storage;\n   }\n \n-\n   @Override\n   public int get(int index) {\n     return getStorage().get(index);\n@@ -132,20 +134,17 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n   public ServerRow deepClone() {\n     startRead();\n     try {\n-      return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntIntStorage) storage.deepClone());\n+      return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum, (IntIntStorage) storage.deepClone());\n     } finally {\n       endRead();\n     }\n   }\n \n-\n   @Override\n   public ServerRow adaptiveClone() {\n     startRead();\n     try {\n-      return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum,\n-          (IntIntStorage) storage.adaptiveClone());\n+      return new ServerIntIntRow(rowId, rowType, (int) startCol, (int) endCol, (int) estElemNum, (IntIntStorage) storage.adaptiveClone());\n     } finally {\n       endRead();\n     }\n@@ -157,6 +156,7 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(int index) {\n     return getStorage().exist(index);\n   }\n@@ -167,7 +167,8 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     getStorage().indexGet(indexType, indexSize, in, out, func);\n   }\n \n@@ -175,4 +176,4 @@ public class ServerIntIntRow extends ServerBasicTypeRow implements IIntIntOp {\n   public void elemUpdate(IntElemUpdateFunc func) {\n     getStorage().elemUpdate(func);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}