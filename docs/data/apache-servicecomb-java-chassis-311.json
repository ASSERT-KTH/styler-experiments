{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "311",
    "information": {
        "violations": [
            {
                "line": "55",
                "column": "78",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  public void setInvocationMonitorType(InvocationType invocationType) {\n    if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n    }\n  }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/311/InvocationMonitor.java\nindex e11ee89c61d..cd5076c68d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/311/InvocationMonitor.java\n@@ -52,8 +52,8 @@ public class InvocationMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER\n+          ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "55",
                    "column": "78",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/311/InvocationMonitor.java\nindex e11ee89c61d..bceaa8bd552 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/311/InvocationMonitor.java\n@@ -52,8 +52,7 @@ public class InvocationMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n@@ -121,4 +120,4 @@ public class InvocationMonitor {\n     }\n     return metric;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 257).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/311/InvocationMonitor.java\nindex e11ee89c61d..082d9d72c04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/311/InvocationMonitor.java\n@@ -19,7 +19,6 @@ package io.servicecomb.metrics.core.monitor;\n \n import com.netflix.servo.monitor.BasicCounter;\n import com.netflix.servo.monitor.MonitorConfig;\n-\n import io.servicecomb.metrics.core.MetricsConst;\n import io.servicecomb.metrics.core.metric.ConsumerInvocationMetric;\n import io.servicecomb.metrics.core.metric.InvocationMetric;\n@@ -50,10 +49,10 @@ public class InvocationMonitor {\n   private InvocationMonitorType invocationMonitorType = InvocationMonitorType.UNKNOWN;\n \n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n+\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n@@ -94,10 +93,8 @@ public class InvocationMonitor {\n     this.consumerPrefix = String.format(MetricsConst.CONSUMER_PREFIX_TEMPLATE, operationName);\n     this.producerPrefix = String.format(MetricsConst.PRODUCER_PREFIX_TEMPLATE, operationName);\n     this.waitInQueue = new BasicCounter(MonitorConfig.builder(producerPrefix + \".waitInQueue.count\").build());\n-\n     this.consumerLatency = new TimerMonitor(consumerPrefix + \".consumerLatency\");\n     this.consumerCall = new CallMonitor(consumerPrefix + \".consumerCall\");\n-\n     this.lifeTimeInQueue = new TimerMonitor(producerPrefix + \".lifeTimeInQueue\");\n     this.executionTime = new TimerMonitor(producerPrefix + \".executionTime\");\n     this.producerLatency = new TimerMonitor(producerPrefix + \".producerLatency\");\n@@ -108,17 +105,16 @@ public class InvocationMonitor {\n     InvocationMetric metric;\n     long queueCount = waitInQueue.getValue(pollerIndex).longValue();\n     if (invocationMonitorType.equals(InvocationMonitorType.PRODUCER)) {\n-      metric = new ProducerInvocationMetric(operationName, producerPrefix, queueCount,\n-          lifeTimeInQueue.toTimerMetric(pollerIndex),\n-          executionTime.toTimerMetric(pollerIndex),\n-          producerLatency.toTimerMetric(pollerIndex),\n-          producerCall.toCallMetric(pollerIndex));\n+      metric = new ProducerInvocationMetric(operationName, producerPrefix, queueCount, lifeTimeInQueue.toTimerMetric(pollerIndex), executionTime.toTimerMetric(pollerIndex), producerLatency.toTimerMetric(pollerIndex), producerCall.toCallMetric(pollerIndex));\n     } else if (invocationMonitorType.equals(InvocationMonitorType.CONSUMER)) {\n-      metric = new ConsumerInvocationMetric(operationName, consumerPrefix, queueCount,\n-          consumerLatency.toTimerMetric(pollerIndex), consumerCall.toCallMetric(pollerIndex));\n+      metric = new ConsumerInvocationMetric(operationName,\n+        consumerPrefix,\n+          queueCount,\n+            consumerLatency.toTimerMetric(pollerIndex),\n+              consumerCall.toCallMetric(pollerIndex));\n     } else {\n-      metric = new InvocationMetric(operationName, consumerPrefix, queueCount);\n+             metric = new InvocationMetric(operationName, consumerPrefix, queueCount);\n     }\n     return metric;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/311/InvocationMonitor.java\nindex e11ee89c61d..cd5076c68d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/311/InvocationMonitor.java\n@@ -52,8 +52,8 @@ public class InvocationMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER\n+          ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/311/InvocationMonitor.java\nindex e11ee89c61d..cd5076c68d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/311/InvocationMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/311/InvocationMonitor.java\n@@ -52,8 +52,8 @@ public class InvocationMonitor {\n   //TODO:current java chassis unable know invocation type before starting process,so we need set it,can improve later\n   public void setInvocationMonitorType(InvocationType invocationType) {\n     if (InvocationMonitorType.UNKNOWN.equals(this.invocationMonitorType)) {\n-      this.invocationMonitorType = invocationType == InvocationType.PRODUCER ?\n-          InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n+      this.invocationMonitorType = invocationType == InvocationType.PRODUCER\n+          ? InvocationMonitorType.PRODUCER : InvocationMonitorType.CONSUMER;\n     }\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}