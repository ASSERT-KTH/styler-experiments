{
    "project_name": "Angel-ML-angel",
    "violation_id": "35",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/35/AngelRunJar.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/35/AngelRunJar.java\nindex db8ac4b4102..e68108e2a07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/35/AngelRunJar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/35/AngelRunJar.java\n@@ -42,233 +42,236 @@ import java.util.regex.Pattern;\n  * Java class running tools for Angel.\n  */\n public class AngelRunJar {\n-  private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n-  private static final String angelSysConfFile = \"angel-site.xml\";\n+    private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n+    private static final String angelSysConfFile = \"angel-site.xml\";\n \n-  public static void main(String[] args) {\n-    try{\n-      final Configuration jobConf = new Configuration(false);\n-\n-      Map<String, String> cmdConfMap = parseArgs(args);\n-      for (Entry<String, String> kvEntry : cmdConfMap.entrySet()) {\n-        jobConf.set(kvEntry.getKey(), kvEntry.getValue());\n-      }\n-      submit(jobConf);\n-    } catch (Exception x) {\n-      LOG.fatal(\"submit job failed \", x);\n-      System.exit(-1);\n-    }\n-  }\n+    public static void main(String[] args) {\n+        try {\n+            final Configuration jobConf = new Configuration(false);\n \n-  public static void submit(Configuration jobConf) throws Exception {\n-    final Configuration conf = new Configuration();\n-    // load hadoop configuration\n-    String hadoopHomePath = System.getenv(\"HADOOP_HOME\");\n-    if (hadoopHomePath == null) {\n-      LOG.warn(\"HADOOP_HOME is empty.\");\n-    } else {\n-      conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/yarn-site.xml\"));\n-      conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/hdfs-site.xml\"));\n+            Map<String, String> cmdConfMap = parseArgs(args);\n+            for (Entry<String, String> kvEntry : cmdConfMap.entrySet()) {\n+                jobConf.set(kvEntry.getKey(), kvEntry.getValue());\n+            }\n+            submit(jobConf);\n+        } catch (Exception x) {\n+            LOG.fatal(\"submit job failed \", x);\n+            System.exit(-1);\n+        }\n     }\n \n-    // load angel system configuration\n-    String angelHomePath = System.getenv(\"ANGEL_HOME\");\n-    if (angelHomePath == null) {\n-      LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\n-      throw new InvalidParameterException(\"ANGEL_HOME is empty, please set it first\");\n-    }\n-    LOG.info(\"angelHomePath conf path=\" + angelHomePath + \"/conf/\" + angelSysConfFile);\n-    conf.addResource(new Path(angelHomePath + \"/conf/\" + angelSysConfFile));\n-    LOG.info(\"load system config file success\");\n+    public static void submit(Configuration jobConf) throws Exception {\n+        final Configuration conf = new Configuration();\n+        // load hadoop configuration\n+        String hadoopHomePath = System.getenv(\"HADOOP_HOME\");\n+        if (hadoopHomePath == null) {\n+            LOG.warn(\"HADOOP_HOME is empty.\");\n+        } else {\n+            conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/yarn-site.xml\"));\n+            conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/hdfs-site.xml\"));\n+        }\n \n-    // load user configuration:\n-    // load user config file\n-    String jobConfFile = jobConf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-    if(jobConfFile != null) {\n-      LOG.info(\"user app config file \" + jobConfFile);\n-      conf.addResource(new Path(jobConfFile));\n-    } else {\n-      jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-      if(jobConfFile != null) {\n-        LOG.info(\"user app config file \" + jobConfFile);\n-        conf.addResource(new Path(jobConfFile));\n-      }\n-    }\n+        // load angel system configuration\n+        String angelHomePath = System.getenv(\"ANGEL_HOME\");\n+        if (angelHomePath == null) {\n+            LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\n+            throw new InvalidParameterException(\"ANGEL_HOME is empty, please set it first\");\n+        }\n+        LOG.info(\"angelHomePath conf path=\" + angelHomePath + \"/conf/\" + angelSysConfFile);\n+        conf.addResource(new Path(angelHomePath + \"/conf/\" + angelSysConfFile));\n+        LOG.info(\"load system config file success\");\n \n-    // load command line parameters\n-    Iterator<Entry<String, String>> iter = jobConf.iterator();\n-    Entry<String, String> entry = null;\n-    while(iter.hasNext()) {\n-      entry = iter.next();\n-      conf.set(entry.getKey(), entry.getValue());\n-    }\n+        // load user configuration:\n+        // load user config file\n+        String jobConfFile = jobConf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n+        if (jobConfFile != null) {\n+            LOG.info(\"user app config file \" + jobConfFile);\n+            conf.addResource(new Path(jobConfFile));\n+        } else {\n+            jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n+            if (jobConfFile != null) {\n+                LOG.info(\"user app config file \" + jobConfFile);\n+                conf.addResource(new Path(jobConfFile));\n+            }\n+        }\n \n-    // load user job resource files\n-    String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n-    if(userResourceFiles != null) {\n-      addResourceFiles(conf, userResourceFiles);\n-    }\n+        // load command line parameters\n+        Iterator<Entry<String, String>> iter = jobConf.iterator();\n+        Entry<String, String> entry = null;\n+        while (iter.hasNext()) {\n+            entry = iter.next();\n+            conf.set(entry.getKey(), entry.getValue());\n+        }\n \n-    // load user job jar if it exist\n-    String jobJar = conf.get(AngelConf.ANGEL_JOB_JAR);\n-    if (jobJar != null) {\n-      loadJar(jobJar);\n-      addResourceFiles(conf, jobJar);\n-    }\n+        // load user job resource files\n+        String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n+        if (userResourceFiles != null) {\n+            addResourceFiles(conf, userResourceFiles);\n+        }\n \n-    // Expand the environment variable\n-    try {\n-      expandEnv(conf);\n-    } catch (Exception x) {\n-      LOG.warn(\"expand env in configuration failed.\", x);\n-    }\n+        // load user job jar if it exist\n+        String jobJar = conf.get(AngelConf.ANGEL_JOB_JAR);\n+        if (jobJar != null) {\n+            loadJar(jobJar);\n+            addResourceFiles(conf, jobJar);\n+        }\n \n-    // instance submitter class\n-    final String submitClassName =\n-      conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n-    UserGroupInformation ugi = UGITools.getCurrentUser(conf);\n-    ugi.doAs(new PrivilegedExceptionAction<String>() {\n-      @Override public String run() throws Exception {\n-        AppSubmitter submmiter = null;\n+        // Expand the environment variable\n         try {\n-          Class<?> submitClass = Class.forName(submitClassName);\n-          submmiter = (AppSubmitter) submitClass.newInstance();\n+            expandEnv(conf);\n         } catch (Exception x) {\n-          String message = \"load submit class failed \" + x.getMessage();\n-          LOG.fatal(message);\n-          throw new InvalidParameterException(message);\n+            LOG.warn(\"expand env in configuration failed.\", x);\n         }\n \n-        submmiter.submit(conf);\n-        return \"OK\";\n-      }\n-    });\n-  }\n+        // instance submitter class\n+        final String submitClassName =\n+                conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS,\n+                        AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n+        UserGroupInformation ugi = UGITools.getCurrentUser(conf);\n+        ugi.doAs(new PrivilegedExceptionAction<String>() {\n+            @Override\n+            public String run() throws Exception {\n+                AppSubmitter submmiter = null;\n+                try {\n+                    Class<?> submitClass = Class.forName(submitClassName);\n+                    submmiter = (AppSubmitter) submitClass.newInstance();\n+                } catch (Exception x) {\n+                    String message = \"load submit class failed \" + x.getMessage();\n+                    LOG.fatal(message);\n+                    throw new InvalidParameterException(message);\n+                }\n \n-  private static void expandEnv(Configuration conf) {\n-    Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\n-    Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\n+                submmiter.submit(conf);\n+                return \"OK\";\n+            }\n+        });\n+    }\n \n-    for (Entry<String, String> kv : kvs.entrySet()) {\n-      String value = kv.getValue();\n-      Matcher matcher = pattern.matcher(value);\n-      List<String> keys = new ArrayList<String>();\n+    private static void expandEnv(Configuration conf) {\n+        Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\n+        Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\n \n-      while (matcher.find()) {\n-        String matchedStr = matcher.group();\n-        keys.add(matchedStr.substring(2, matchedStr.length() - 1));\n-      }\n+        for (Entry<String, String> kv : kvs.entrySet()) {\n+            String value = kv.getValue();\n+            Matcher matcher = pattern.matcher(value);\n+            List<String> keys = new ArrayList<String>();\n \n-      int size = keys.size();\n-      for (int i = 0; i < size; i++) {\n-        String envValue = System.getenv(keys.get(i));\n-        if (envValue == null) {\n-          LOG.warn(\"env \" + keys.get(i) + \" is null, please check.\");\n-          continue;\n-        }\n-        value = value.replaceAll(\"\\\\$\\\\{\" + keys.get(i) + \"\\\\}\", envValue);\n-      }\n+            while (matcher.find()) {\n+                String matchedStr = matcher.group();\n+                keys.add(matchedStr.substring(2, matchedStr.length() - 1));\n+            }\n \n-      conf.set(kv.getKey(), value);\n-    }\n+            int size = keys.size();\n+            for (int i = 0; i < size; i++) {\n+                String envValue = System.getenv(keys.get(i));\n+                if (envValue == null) {\n+                    LOG.warn(\"env \" + keys.get(i) + \" is null, please check.\");\n+                    continue;\n+                }\n+                value = value.replaceAll(\"\\\\$\\\\{\" + keys.get(i) + \"\\\\}\", envValue);\n+            }\n \n-    // Add default fs(local fs) for lib jars.\n-    String libJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n-    if (libJars != null) {\n-      StringBuilder sb = new StringBuilder();\n-      String[] jars = libJars.split(\",\");\n-      for (int i = 0; i < jars.length; i++) {\n-        if (new Path(jars[i]).isAbsoluteAndSchemeAuthorityNull()) {\n-          sb.append(\"file://\").append(jars[i]);\n-          if (i != jars.length - 1) {\n-            sb.append(\",\");\n-          }\n-        } else {\n-          sb.append(jars[i]);\n-          if (i != jars.length - 1) {\n-            sb.append(\",\");\n-          }\n+            conf.set(kv.getKey(), value);\n         }\n-      }\n-      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n-    }\n-  }\n \n-  private static void addResourceFiles(Configuration conf, String fileNames)\n-    throws MalformedURLException {\n-    String[] fileNameArray = fileNames.split(\",\");\n-    StringBuilder sb = new StringBuilder();\n-    for (int i = 0; i < fileNameArray.length; i++) {\n-      if (i != 0) {\n-        sb.append(\",\");\n-      }\n-      URL url = new File(fileNameArray[i]).toURI().toURL();\n-      sb.append(url.toString());\n+        // Add default fs(local fs) for lib jars.\n+        String libJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n+        if (libJars != null) {\n+            StringBuilder sb = new StringBuilder();\n+            String[] jars = libJars.split(\",\");\n+            for (int i = 0; i < jars.length; i++) {\n+                if (new Path(jars[i]).isAbsoluteAndSchemeAuthorityNull()) {\n+                    sb.append(\"file://\").append(jars[i]);\n+                    if (i != jars.length - 1) {\n+                        sb.append(\",\");\n+                    }\n+                } else {\n+                    sb.append(jars[i]);\n+                    if (i != jars.length - 1) {\n+                        sb.append(\",\");\n+                    }\n+                }\n+            }\n+            conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n+        }\n     }\n \n-    String addJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n-\n-    if (addJars == null || addJars.trim().isEmpty()) {\n-      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n-    } else {\n-      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString() + \",\" + addJars);\n-    }\n-  }\n+    private static void addResourceFiles(Configuration conf, String fileNames)\n+            throws MalformedURLException {\n+        String[] fileNameArray = fileNames.split(\",\");\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < fileNameArray.length; i++) {\n+            if (i != 0) {\n+                sb.append(\",\");\n+            }\n+            URL url = new File(fileNameArray[i]).toURI().toURL();\n+            sb.append(url.toString());\n+        }\n \n-  private static Map<String, String> parseArgs(String[] args) throws InvalidParameterException {\n-    Map<String, String> kvMap = new HashMap<String, String>();\n+        String addJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n \n-    int seg = 0;\n-    for (int i = 0; i < args.length; i++) {\n-      if (args[i].startsWith(\"-D\")) {\n-        seg = args[i].indexOf(\"=\");\n-        if (seg > 0) {\n-          kvMap.put(args[i].substring(2, seg), args[i].substring(seg + 1));\n-        } else {\n-          throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n-        }\n-      } else if (args[i].startsWith(\"--\")) {\n-        String key = args[i].substring(2);\n-        i++;\n-        if (i < args.length) {\n-          String value = args[i];\n-          kvMap.put(key, value);\n+        if (addJars == null || addJars.trim().isEmpty()) {\n+            conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n         } else {\n-          throw new InvalidParameterException(\"there is no value for parameter \" + key);\n+            conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString() + \",\" + addJars);\n         }\n-      } else if ((seg = args[i].indexOf(\":\")) > 0) {\n-        kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\n-      } else {\n-        switch (args[i]) {\n-          case \"jar\": {\n-            if (i == args.length - 1) {\n-              throw new InvalidParameterException(\"there must be a jar file after jar commond\");\n+    }\n+\n+    private static Map<String, String> parseArgs(String[] args) throws InvalidParameterException {\n+        Map<String, String> kvMap = new HashMap<String, String>();\n+\n+        int seg = 0;\n+        for (int i = 0; i < args.length; i++) {\n+            if (args[i].startsWith(\"-D\")) {\n+                seg = args[i].indexOf(\"=\");\n+                if (seg > 0) {\n+                    kvMap.put(args[i].substring(2, seg), args[i].substring(seg + 1));\n+                } else {\n+                    throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n+                }\n+            } else if (args[i].startsWith(\"--\")) {\n+                String key = args[i].substring(2);\n+                i++;\n+                if (i < args.length) {\n+                    String value = args[i];\n+                    kvMap.put(key, value);\n+                } else {\n+                    throw new InvalidParameterException(\"there is no value for parameter \" + key);\n+                }\n+            } else if ((seg = args[i].indexOf(\":\")) > 0) {\n+                kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\n             } else {\n-              i++;\n-              kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\n+                switch (args[i]) {\n+                    case \"jar\": {\n+                        if (i == args.length - 1) {\n+                            throw new InvalidParameterException(\n+                                    \"there must be a jar file after jar commond\");\n+                        } else {\n+                            i++;\n+                            kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\n+                        }\n+                        break;\n+                    }\n+                    default: {\n+                        throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n+                    }\n+                }\n             }\n-            break;\n-          }\n-          default: {\n-            throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n-          }\n         }\n-      }\n+        return kvMap;\n     }\n-    return kvMap;\n-  }\n \n-  private static void loadJar(String jarFile) throws IOException {\n-    URLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n-    Class<? extends URLClassLoader> sysclass = URLClassLoader.class;\n-    try {\n-      Method method = sysclass.getDeclaredMethod(\"addURL\", URL.class);\n-      method.setAccessible(true);\n+    private static void loadJar(String jarFile) throws IOException {\n+        URLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n+        Class<? extends URLClassLoader> sysclass = URLClassLoader.class;\n+        try {\n+            Method method = sysclass.getDeclaredMethod(\"addURL\", URL.class);\n+            method.setAccessible(true);\n \n-      method.invoke(sysloader, new File(jarFile).toURI().toURL());\n+            method.invoke(sysloader, new File(jarFile).toURI().toURL());\n \n-    } catch (Throwable t) {\n-      throw new IOException(\"Error, could not add URL to system classloader\", t);\n+        } catch (Throwable t) {\n+            throw new IOException(\"Error, could not add URL to system classloader\", t);\n+        }\n     }\n-  }\n }\n",
            "diff_size": 268
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/35/AngelRunJar.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/35/AngelRunJar.java\nindex db8ac4b4102..6bfda0b20ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/35/AngelRunJar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/35/AngelRunJar.java\n@@ -46,7 +46,7 @@ public class AngelRunJar {\n   private static final String angelSysConfFile = \"angel-site.xml\";\n \n   public static void main(String[] args) {\n-    try{\n+    try {\n       final Configuration jobConf = new Configuration(false);\n \n       Map<String, String> cmdConfMap = parseArgs(args);\n@@ -84,12 +84,12 @@ public class AngelRunJar {\n     // load user configuration:\n     // load user config file\n     String jobConfFile = jobConf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-    if(jobConfFile != null) {\n+    if (jobConfFile != null) {\n       LOG.info(\"user app config file \" + jobConfFile);\n       conf.addResource(new Path(jobConfFile));\n     } else {\n       jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-      if(jobConfFile != null) {\n+      if (jobConfFile != null) {\n         LOG.info(\"user app config file \" + jobConfFile);\n         conf.addResource(new Path(jobConfFile));\n       }\n@@ -98,14 +98,14 @@ public class AngelRunJar {\n     // load command line parameters\n     Iterator<Entry<String, String>> iter = jobConf.iterator();\n     Entry<String, String> entry = null;\n-    while(iter.hasNext()) {\n+    while (iter.hasNext()) {\n       entry = iter.next();\n       conf.set(entry.getKey(), entry.getValue());\n     }\n \n     // load user job resource files\n     String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n-    if(userResourceFiles != null) {\n+    if (userResourceFiles != null) {\n       addResourceFiles(conf, userResourceFiles);\n     }\n \n@@ -124,11 +124,11 @@ public class AngelRunJar {\n     }\n \n     // instance submitter class\n-    final String submitClassName =\n-      conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n+    final String submitClassName = conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n     UserGroupInformation ugi = UGITools.getCurrentUser(conf);\n     ugi.doAs(new PrivilegedExceptionAction<String>() {\n-      @Override public String run() throws Exception {\n+      @Override\n+public String run() throws Exception {\n         AppSubmitter submmiter = null;\n         try {\n           Class<?> submitClass = Class.forName(submitClassName);\n@@ -194,8 +194,7 @@ public class AngelRunJar {\n     }\n   }\n \n-  private static void addResourceFiles(Configuration conf, String fileNames)\n-    throws MalformedURLException {\n+  private static void addResourceFiles(Configuration conf, String fileNames) throws MalformedURLException {\n     String[] fileNameArray = fileNames.split(\",\");\n     StringBuilder sb = new StringBuilder();\n     for (int i = 0; i < fileNameArray.length; i++) {\n@@ -266,9 +265,8 @@ public class AngelRunJar {\n       method.setAccessible(true);\n \n       method.invoke(sysloader, new File(jarFile).toURI().toURL());\n-\n-    } catch (Throwable t) {\n+  } catch (Throwable t) {\n       throw new IOException(\"Error, could not add URL to system classloader\", t);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/35/AngelRunJar.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/35/AngelRunJar.java\nindex db8ac4b4102..02c1e38f454 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/35/AngelRunJar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/35/AngelRunJar.java\n@@ -19,13 +19,11 @@ package com.tencent.angel.utils;\n import com.tencent.angel.AppSubmitter;\n import com.tencent.angel.conf.AngelConf;\n import com.tencent.angel.exception.InvalidParameterException;\n-\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.security.UserGroupInformation;\n-\n import java.io.File;\n import java.io.IOException;\n import java.lang.reflect.Method;\n@@ -41,14 +39,15 @@ import java.util.regex.Pattern;\n /**\n  * Java class running tools for Angel.\n  */\n+\n public class AngelRunJar {\n+\n   private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n   private static final String angelSysConfFile = \"angel-site.xml\";\n \n   public static void main(String[] args) {\n-    try{\n+    try {\n       final Configuration jobConf = new Configuration(false);\n-\n       Map<String, String> cmdConfMap = parseArgs(args);\n       for (Entry<String, String> kvEntry : cmdConfMap.entrySet()) {\n         jobConf.set(kvEntry.getKey(), kvEntry.getValue());\n@@ -72,6 +71,7 @@ public class AngelRunJar {\n     }\n \n     // load angel system configuration\n+\n     String angelHomePath = System.getenv(\"ANGEL_HOME\");\n     if (angelHomePath == null) {\n       LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\n@@ -84,32 +84,35 @@ public class AngelRunJar {\n     // load user configuration:\n     // load user config file\n     String jobConfFile = jobConf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-    if(jobConfFile != null) {\n+    if (jobConfFile != null) {\n       LOG.info(\"user app config file \" + jobConfFile);\n       conf.addResource(new Path(jobConfFile));\n     } else {\n       jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n-      if(jobConfFile != null) {\n+      if (jobConfFile != null) {\n         LOG.info(\"user app config file \" + jobConfFile);\n         conf.addResource(new Path(jobConfFile));\n       }\n     }\n \n     // load command line parameters\n+\n     Iterator<Entry<String, String>> iter = jobConf.iterator();\n     Entry<String, String> entry = null;\n-    while(iter.hasNext()) {\n+    while (iter.hasNext()) {\n       entry = iter.next();\n       conf.set(entry.getKey(), entry.getValue());\n     }\n \n     // load user job resource files\n+\n     String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n-    if(userResourceFiles != null) {\n+    if (userResourceFiles != null) {\n       addResourceFiles(conf, userResourceFiles);\n     }\n \n     // load user job jar if it exist\n+\n     String jobJar = conf.get(AngelConf.ANGEL_JOB_JAR);\n     if (jobJar != null) {\n       loadJar(jobJar);\n@@ -124,11 +127,14 @@ public class AngelRunJar {\n     }\n \n     // instance submitter class\n-    final String submitClassName =\n-      conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n+\n+    final String submitClassName = conf.get(AngelConf.ANGEL_APP_SUBMIT_CLASS, AngelConf.DEFAULT_ANGEL_APP_SUBMIT_CLASS);\n     UserGroupInformation ugi = UGITools.getCurrentUser(conf);\n     ugi.doAs(new PrivilegedExceptionAction<String>() {\n-      @Override public String run() throws Exception {\n+\n+\n+      @Override\n+      public String run() throws Exception {\n         AppSubmitter submmiter = null;\n         try {\n           Class<?> submitClass = Class.forName(submitClassName);\n@@ -138,7 +144,6 @@ public class AngelRunJar {\n           LOG.fatal(message);\n           throw new InvalidParameterException(message);\n         }\n-\n         submmiter.submit(conf);\n         return \"OK\";\n       }\n@@ -148,12 +153,10 @@ public class AngelRunJar {\n   private static void expandEnv(Configuration conf) {\n     Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\n     Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\n-\n     for (Entry<String, String> kv : kvs.entrySet()) {\n       String value = kv.getValue();\n       Matcher matcher = pattern.matcher(value);\n       List<String> keys = new ArrayList<String>();\n-\n       while (matcher.find()) {\n         String matchedStr = matcher.group();\n         keys.add(matchedStr.substring(2, matchedStr.length() - 1));\n@@ -168,11 +171,11 @@ public class AngelRunJar {\n         }\n         value = value.replaceAll(\"\\\\$\\\\{\" + keys.get(i) + \"\\\\}\", envValue);\n       }\n-\n       conf.set(kv.getKey(), value);\n     }\n \n     // Add default fs(local fs) for lib jars.\n+\n     String libJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n     if (libJars != null) {\n       StringBuilder sb = new StringBuilder();\n@@ -194,20 +197,19 @@ public class AngelRunJar {\n     }\n   }\n \n-  private static void addResourceFiles(Configuration conf, String fileNames)\n-    throws MalformedURLException {\n+  private static void addResourceFiles(Configuration conf, String fileNames) throws MalformedURLException {\n     String[] fileNameArray = fileNames.split(\",\");\n     StringBuilder sb = new StringBuilder();\n     for (int i = 0; i < fileNameArray.length; i++) {\n       if (i != 0) {\n         sb.append(\",\");\n       }\n+\n       URL url = new File(fileNameArray[i]).toURI().toURL();\n       sb.append(url.toString());\n     }\n \n     String addJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n-\n     if (addJars == null || addJars.trim().isEmpty()) {\n       conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n     } else {\n@@ -217,7 +219,6 @@ public class AngelRunJar {\n \n   private static Map<String, String> parseArgs(String[] args) throws InvalidParameterException {\n     Map<String, String> kvMap = new HashMap<String, String>();\n-\n     int seg = 0;\n     for (int i = 0; i < args.length; i++) {\n       if (args[i].startsWith(\"-D\")) {\n@@ -228,32 +229,33 @@ public class AngelRunJar {\n           throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n         }\n       } else if (args[i].startsWith(\"--\")) {\n-        String key = args[i].substring(2);\n-        i++;\n-        if (i < args.length) {\n-          String value = args[i];\n-          kvMap.put(key, value);\n-        } else {\n-          throw new InvalidParameterException(\"there is no value for parameter \" + key);\n-        }\n+               String key = args[i].substring(2);\n+               i++;\n+               if (i < args.length) {\n+                 String value = args[i];\n+                 kvMap.put(key, value);\n+               } else {\n+                 throw new InvalidParameterException(\"there is no value for parameter \" + key);\n+               }\n       } else if ((seg = args[i].indexOf(\":\")) > 0) {\n-        kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\n-      } else {\n-        switch (args[i]) {\n-          case \"jar\": {\n-            if (i == args.length - 1) {\n-              throw new InvalidParameterException(\"there must be a jar file after jar commond\");\n-            } else {\n-              i++;\n-              kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\n-            }\n-            break;\n-          }\n-          default: {\n-            throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n-          }\n-        }\n-      }\n+               kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\n+             } else {\n+               switch (args[i]) {\n+                 case \"jar\": {\n+                   if (i == args.length - 1) {\n+                     throw new InvalidParameterException(\"there must be a jar file after jar commond\");\n+                   } else {\n+                     i++;\n+                     kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\n+                   }\n+                   break;\n+                 }\n+\n+                 default: {\n+                   throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n+                 }\n+               }\n+             }\n     }\n     return kvMap;\n   }\n@@ -264,11 +266,9 @@ public class AngelRunJar {\n     try {\n       Method method = sysclass.getDeclaredMethod(\"addURL\", URL.class);\n       method.setAccessible(true);\n-\n       method.invoke(sysloader, new File(jarFile).toURI().toURL());\n-\n     } catch (Throwable t) {\n       throw new IOException(\"Error, could not add URL to system classloader\", t);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}