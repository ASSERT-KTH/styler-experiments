{
    "project_name": "opencb-opencga",
    "violation_id": "335",
    "information": {
        "violations": [
            {
                "line": "238",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Trailing whitespace'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId())\n                .append(\"jobDependsOn\", indexVcfJobIds);\n        \n        VariantStatsAnalysisParams data = new VariantStatsAnalysisParams();\n        data.setAggregated(Aggregation.NONE);\n        for (File file : study.getFiles()) {",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/opencb-opencga/styler/05_predictions/final/files-repaired/335/TemplateManager.java\nindex 4f59f88b87d..9cd1d7310f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/opencb-opencga/styler/05_predictions/final/files-repaired/335/TemplateManager.java\n@@ -235,7 +235,6 @@ public class TemplateManager {\n     private String variantStats(Study study, List<String> indexVcfJobIds) throws ClientException {\n         ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId())\n                 .append(\"jobDependsOn\", indexVcfJobIds);\n-        \n         VariantStatsAnalysisParams data = new VariantStatsAnalysisParams();\n         data.setAggregated(Aggregation.NONE);\n         for (File file : study.getFiles()) {\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/checkstyle_idea/335/TemplateManager.java\nindex 4f59f88b87d..f78cc524c29 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/checkstyle_idea/335/TemplateManager.java\n@@ -55,224 +55,224 @@ import java.util.stream.Collectors;\n \n public class TemplateManager {\n \n-    private TemplateConfiguration templateConfiguration;\n-    private OpenCGAClient openCGAClient;\n+  private TemplateConfiguration templateConfiguration;\n+  private OpenCGAClient openCGAClient;\n \n-    private Logger logger;\n+  private Logger logger;\n \n-    public TemplateManager() {\n-    }\n+  public TemplateManager() {\n+  }\n \n-    public TemplateManager(TemplateConfiguration templateConfiguration, ClientConfiguration clientConfiguration, String token) {\n-        this.templateConfiguration = templateConfiguration;\n-        this.openCGAClient = new OpenCGAClient(token, clientConfiguration);\n+  public TemplateManager(TemplateConfiguration templateConfiguration, ClientConfiguration clientConfiguration, String token) {\n+    this.templateConfiguration = templateConfiguration;\n+    this.openCGAClient = new OpenCGAClient(token, clientConfiguration);\n \n-        this.logger = LoggerFactory.getLogger(TemplateManager.class);\n-    }\n+    this.logger = LoggerFactory.getLogger(TemplateManager.class);\n+  }\n \n-    public void execute() throws ClientException {\n-        // TODO Check version\n-\n-        // Check if any study exists before we start, if a study exists we should fail. Projects are allowed to exist.\n-        for (Project project : templateConfiguration.getProjects()) {\n-            for (Study study : project.getStudies()) {\n-                RestResponse<Study> infoResponse = openCGAClient.getStudyClient()\n-                        .info(project.getId() + \":\" + study.getId(), new ObjectMap());\n-                if (infoResponse.getResponses().size() > 0) {\n-                    logger.error(\"Study already exists\");\n-                    return;\n-                }\n-            }\n-        }\n+  public void execute() throws ClientException {\n+    // TODO Check version\n \n-        // Create and load data\n-        for (Project project : templateConfiguration.getProjects()) {\n-            if (openCGAClient.getProjectClient().info(project.getId(), new ObjectMap()).first().getNumResults() == 0) {\n-                logger.info(\"Creating project '{}'\", project.getId());\n-                openCGAClient.getProjectClient().create(ProjectCreateParams.of(project));\n-            } else {\n-                logger.warn(\"Project '{}' already exists.\", project.getId());\n-            }\n-\n-            List<String> indexVcfJobIds = null;\n-            for (Study study : project.getStudies()) {\n-                ObjectMap params = new ObjectMap(ParamConstants.PROJECT_PARAM, project.getId());\n-                openCGAClient.getStudyClient().create(StudyCreateParams.of(study), params);\n-                // NOTE: Do not change the order of the following resource creation.\n-                if (CollectionUtils.isNotEmpty(study.getIndividuals())) {\n-                    createIndividuals(study);\n-                }\n-                if (CollectionUtils.isNotEmpty(study.getSamples())) {\n-                    createSamples(study);\n-                }\n-                if (CollectionUtils.isNotEmpty(study.getCohorts())) {\n-                    createCohorts(study);\n-                }\n-                if (CollectionUtils.isNotEmpty(study.getFamilies())) {\n-                    createFamilies(study);\n-                }\n-                if (CollectionUtils.isNotEmpty(study.getFiles())) {\n-                    indexVcfJobIds = fetchFiles(study);\n-                }\n-            }\n-            if (CollectionUtils.isNotEmpty(indexVcfJobIds)) {\n-                postIndex(project, indexVcfJobIds);\n-            }\n+    // Check if any study exists before we start, if a study exists we should fail. Projects are allowed to exist.\n+    for (Project project : templateConfiguration.getProjects()) {\n+      for (Study study : project.getStudies()) {\n+        RestResponse<Study> infoResponse = openCGAClient.getStudyClient()\n+            .info(project.getId() + \":\" + study.getId(), new ObjectMap());\n+        if (infoResponse.getResponses().size() > 0) {\n+          logger.error(\"Study already exists\");\n+          return;\n         }\n+      }\n     }\n \n-    private void createIndividuals(Study study) throws ClientException {\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n-        Map<String, Map<String, Object>> relatives = new HashMap<>();\n-\n-        // Create individuals without parents and siblings\n-        for (Individual individual : study.getIndividuals()) {\n-            relatives.put(individual.getId(), new HashMap<String, Object>(){{\n-                put(\"father\", individual.getFather());\n-                put(\"mother\", individual.getMother());\n-                put(\"multiples\", individual.getMultiples());\n-            }});\n-            individual.setFather(null);\n-            individual.setMother(null);\n-            individual.setMultiples(null);\n-            openCGAClient.getIndividualClient().create(IndividualCreateParams.of(individual), params);\n+    // Create and load data\n+    for (Project project : templateConfiguration.getProjects()) {\n+      if (openCGAClient.getProjectClient().info(project.getId(), new ObjectMap()).first().getNumResults() == 0) {\n+        logger.info(\"Creating project '{}'\", project.getId());\n+        openCGAClient.getProjectClient().create(ProjectCreateParams.of(project));\n+      } else {\n+        logger.warn(\"Project '{}' already exists.\", project.getId());\n+      }\n+\n+      List<String> indexVcfJobIds = null;\n+      for (Study study : project.getStudies()) {\n+        ObjectMap params = new ObjectMap(ParamConstants.PROJECT_PARAM, project.getId());\n+        openCGAClient.getStudyClient().create(StudyCreateParams.of(study), params);\n+        // NOTE: Do not change the order of the following resource creation.\n+        if (CollectionUtils.isNotEmpty(study.getIndividuals())) {\n+          createIndividuals(study);\n         }\n-\n-        // Update parents and siblings for each individual\n-        for (Individual individual : study.getIndividuals()) {\n-            IndividualUpdateParams updateParams = new IndividualUpdateParams();\n-            Individual father = (Individual) relatives.get(individual.getId()).get(\"father\");\n-            updateParams.setFather(father.getId());\n-            Individual mother = (Individual) relatives.get(individual.getId()).get(\"mother\");\n-            updateParams.setMother(mother.getId());\n-            updateParams.setMultiples((Multiples) relatives.get(individual.getId()).get(\"multiples\"));\n-            openCGAClient.getIndividualClient().update(individual.getId(), updateParams, params);\n+        if (CollectionUtils.isNotEmpty(study.getSamples())) {\n+          createSamples(study);\n         }\n-    }\n-\n-    private void createSamples(Study study) throws ClientException {\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n-        for (Sample sample : study.getSamples()) {\n-            openCGAClient.getSampleClient().create(SampleCreateParams.of(sample), params);\n+        if (CollectionUtils.isNotEmpty(study.getCohorts())) {\n+          createCohorts(study);\n         }\n-    }\n-\n-    private void createCohorts(Study study) throws ClientException {\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n-        for (Cohort cohort : study.getCohorts()) {\n-            openCGAClient.getCohortClient().create(CohortCreateParams.of(cohort), params);\n+        if (CollectionUtils.isNotEmpty(study.getFamilies())) {\n+          createFamilies(study);\n         }\n-    }\n-\n-    private void createFamilies(Study study) throws ClientException {\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n-        for (Family family : study.getFamilies()) {\n-            openCGAClient.getFamilyClient().create(FamilyCreateParams.of(family), params);\n+        if (CollectionUtils.isNotEmpty(study.getFiles())) {\n+          indexVcfJobIds = fetchFiles(study);\n         }\n+      }\n+      if (CollectionUtils.isNotEmpty(indexVcfJobIds)) {\n+        postIndex(project, indexVcfJobIds);\n+      }\n     }\n-\n-    private List<String> fetchFiles(Study study) throws ClientException {\n-        String baseUrl = this.templateConfiguration.getBaseUrl();\n-        baseUrl = baseUrl.replaceAll(\"STUDY_ID\", study.getId());\n-        if (!baseUrl.endsWith(\"/\")) {\n-            baseUrl = baseUrl + \"/\";\n-        }\n-\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n-        List<String> indexVcfJobIds = new ArrayList<>();\n-        for (File file : study.getFiles()) {\n-            FileFetch fileFetch = new FileFetch(baseUrl + file.getName(), file.getPath());\n-            String fetchJobId = openCGAClient.getFileClient().fetch(fileFetch, params).getResponses().get(0).getResults().get(0).getId();\n-            if (templateConfiguration.isIndex()) {\n-                if (isVcf(file)) {\n-                    indexVcfJobIds.add(indexVcf(study, file.getId(), Collections.singletonList(fetchJobId)));\n-                }\n-            }\n-        }\n-        return indexVcfJobIds;\n+  }\n+\n+  private void createIndividuals(Study study) throws ClientException {\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n+    Map<String, Map<String, Object>> relatives = new HashMap<>();\n+\n+    // Create individuals without parents and siblings\n+    for (Individual individual : study.getIndividuals()) {\n+      relatives.put(individual.getId(), new HashMap<String, Object>() {{\n+        put(\"father\", individual.getFather());\n+        put(\"mother\", individual.getMother());\n+        put(\"multiples\", individual.getMultiples());\n+      }});\n+      individual.setFather(null);\n+      individual.setMother(null);\n+      individual.setMultiples(null);\n+      openCGAClient.getIndividualClient().create(IndividualCreateParams.of(individual), params);\n     }\n \n-    private boolean isVcf(File file) {\n-        return file.getId().endsWith(\".vcf.gz\") || file.getId().endsWith(\".vcf\");\n+    // Update parents and siblings for each individual\n+    for (Individual individual : study.getIndividuals()) {\n+      IndividualUpdateParams updateParams = new IndividualUpdateParams();\n+      Individual father = (Individual) relatives.get(individual.getId()).get(\"father\");\n+      updateParams.setFather(father.getId());\n+      Individual mother = (Individual) relatives.get(individual.getId()).get(\"mother\");\n+      updateParams.setMother(mother.getId());\n+      updateParams.setMultiples((Multiples) relatives.get(individual.getId()).get(\"multiples\"));\n+      openCGAClient.getIndividualClient().update(individual.getId(), updateParams, params);\n     }\n+  }\n \n-    private String indexVcf(Study study, String file, List<String> jobDependsOn) throws ClientException {\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n-        params.put(\"jobDependsOn\", jobDependsOn);\n-        return openCGAClient.getVariantClient()\n-                .index(new VariantIndexParams().setFile(file), params)\n-                .getResponses().get(0).getResults().get(0).getId();\n+  private void createSamples(Study study) throws ClientException {\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n+    for (Sample sample : study.getSamples()) {\n+      openCGAClient.getSampleClient().create(SampleCreateParams.of(sample), params);\n     }\n+  }\n \n-    private void postIndex(Project project, List<String> indexVcfJobIds) throws ClientException {\n-        List<String> jobs = new ArrayList<>();\n-        jobs.add(variantAnnot(project, indexVcfJobIds));\n-        for (Study study : project.getStudies()) {\n-            if (study.getFiles().stream().anyMatch(this::isVcf)) {\n-                jobs.add(variantStats(study, indexVcfJobIds));\n-            }\n-        }\n-        variantSecondaryIndex(project, jobs);\n+  private void createCohorts(Study study) throws ClientException {\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n+    for (Cohort cohort : study.getCohorts()) {\n+      openCGAClient.getCohortClient().create(CohortCreateParams.of(cohort), params);\n     }\n+  }\n \n-    private String variantAnnot(Project project, List<String> indexVcfJobIds) throws ClientException {\n-        List<String> studies = project.getStudies().stream()\n-                .filter(study -> study.getFiles()\n-                        .stream()\n-                        .anyMatch(this::isVcf))\n-                .map(Study::getFqn)\n-                .collect(Collectors.toList());\n-\n-        ObjectMap params = new ObjectMap()\n-                .append(ParamConstants.PROJECT_PARAM, project.getId())\n-                .append(ParamConstants.STUDY_PARAM, studies)\n-                .append(\"jobDependsOn\", indexVcfJobIds);\n-        return openCGAClient.getVariantOperationClient()\n-                .indexVariantAnnotation(new VariantAnnotationIndexParams(), params)\n-                .getResponses().get(0).getResults().get(0).getId();\n+  private void createFamilies(Study study) throws ClientException {\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n+    for (Family family : study.getFamilies()) {\n+      openCGAClient.getFamilyClient().create(FamilyCreateParams.of(family), params);\n     }\n+  }\n \n-    private String variantStats(Study study, List<String> indexVcfJobIds) throws ClientException {\n-        ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId())\n-                .append(\"jobDependsOn\", indexVcfJobIds);\n-        \n-        VariantStatsAnalysisParams data = new VariantStatsAnalysisParams();\n-        data.setAggregated(Aggregation.NONE);\n-        for (File file : study.getFiles()) {\n-            if (file.getId().endsWith(\".properties\")\n-                    && file.getAttributes() != null\n-                    && Boolean.parseBoolean(String.valueOf(file.getAttributes().get(\"aggregationMappingFile\")))) {\n-                data.setAggregationMappingFile(file.getId());\n-                data.setAggregated(Aggregation.BASIC);\n-            }\n-        }\n+  private List<String> fetchFiles(Study study) throws ClientException {\n+    String baseUrl = this.templateConfiguration.getBaseUrl();\n+    baseUrl = baseUrl.replaceAll(\"STUDY_ID\", study.getId());\n+    if (!baseUrl.endsWith(\"/\")) {\n+      baseUrl = baseUrl + \"/\";\n+    }\n \n-        if (study.getAttributes() != null) {\n-            Object aggregationObj = study.getAttributes().get(\"aggregation\");\n-            if (aggregationObj != null) {\n-                data.setAggregated(AggregationUtils.valueOf(aggregationObj.toString()));\n-            }\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n+    List<String> indexVcfJobIds = new ArrayList<>();\n+    for (File file : study.getFiles()) {\n+      FileFetch fileFetch = new FileFetch(baseUrl + file.getName(), file.getPath());\n+      String fetchJobId = openCGAClient.getFileClient().fetch(fileFetch, params).getResponses().get(0).getResults().get(0).getId();\n+      if (templateConfiguration.isIndex()) {\n+        if (isVcf(file)) {\n+          indexVcfJobIds.add(indexVcf(study, file.getId(), Collections.singletonList(fetchJobId)));\n         }\n-\n-        return openCGAClient.getVariantClient()\n-                .runStats(data, params)\n-                .getResponses().get(0).getResults().get(0).getId();\n+      }\n+    }\n+    return indexVcfJobIds;\n+  }\n+\n+  private boolean isVcf(File file) {\n+    return file.getId().endsWith(\".vcf.gz\") || file.getId().endsWith(\".vcf\");\n+  }\n+\n+  private String indexVcf(Study study, String file, List<String> jobDependsOn) throws ClientException {\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId());\n+    params.put(\"jobDependsOn\", jobDependsOn);\n+    return openCGAClient.getVariantClient()\n+        .index(new VariantIndexParams().setFile(file), params)\n+        .getResponses().get(0).getResults().get(0).getId();\n+  }\n+\n+  private void postIndex(Project project, List<String> indexVcfJobIds) throws ClientException {\n+    List<String> jobs = new ArrayList<>();\n+    jobs.add(variantAnnot(project, indexVcfJobIds));\n+    for (Study study : project.getStudies()) {\n+      if (study.getFiles().stream().anyMatch(this::isVcf)) {\n+        jobs.add(variantStats(study, indexVcfJobIds));\n+      }\n+    }\n+    variantSecondaryIndex(project, jobs);\n+  }\n+\n+  private String variantAnnot(Project project, List<String> indexVcfJobIds) throws ClientException {\n+    List<String> studies = project.getStudies().stream()\n+        .filter(study -> study.getFiles()\n+            .stream()\n+            .anyMatch(this::isVcf))\n+        .map(Study::getFqn)\n+        .collect(Collectors.toList());\n+\n+    ObjectMap params = new ObjectMap()\n+        .append(ParamConstants.PROJECT_PARAM, project.getId())\n+        .append(ParamConstants.STUDY_PARAM, studies)\n+        .append(\"jobDependsOn\", indexVcfJobIds);\n+    return openCGAClient.getVariantOperationClient()\n+        .indexVariantAnnotation(new VariantAnnotationIndexParams(), params)\n+        .getResponses().get(0).getResults().get(0).getId();\n+  }\n+\n+  private String variantStats(Study study, List<String> indexVcfJobIds) throws ClientException {\n+    ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId())\n+        .append(\"jobDependsOn\", indexVcfJobIds);\n+\n+    VariantStatsAnalysisParams data = new VariantStatsAnalysisParams();\n+    data.setAggregated(Aggregation.NONE);\n+    for (File file : study.getFiles()) {\n+      if (file.getId().endsWith(\".properties\")\n+          && file.getAttributes() != null\n+          && Boolean.parseBoolean(String.valueOf(file.getAttributes().get(\"aggregationMappingFile\")))) {\n+        data.setAggregationMappingFile(file.getId());\n+        data.setAggregated(Aggregation.BASIC);\n+      }\n     }\n \n-    private void variantSecondaryIndex(Project project, List<String> jobs) throws ClientException {\n-        List<String> studies = project.getStudies().stream()\n-                .filter(study -> study.getFiles()\n-                        .stream()\n-                        .anyMatch(this::isVcf))\n-                .map(Study::getFqn)\n-                .collect(Collectors.toList());\n-\n-        ObjectMap params = new ObjectMap()\n-                .append(ParamConstants.PROJECT_PARAM, project.getId())\n-                .append(ParamConstants.STUDY_PARAM, studies)\n-                .append(\"jobDependsOn\", jobs);\n-        openCGAClient.getVariantOperationClient()\n-                .secondaryIndexVariant(new VariantSecondaryIndexParams().setOverwrite(true), params);\n+    if (study.getAttributes() != null) {\n+      Object aggregationObj = study.getAttributes().get(\"aggregation\");\n+      if (aggregationObj != null) {\n+        data.setAggregated(AggregationUtils.valueOf(aggregationObj.toString()));\n+      }\n     }\n \n+    return openCGAClient.getVariantClient()\n+        .runStats(data, params)\n+        .getResponses().get(0).getResults().get(0).getId();\n+  }\n+\n+  private void variantSecondaryIndex(Project project, List<String> jobs) throws ClientException {\n+    List<String> studies = project.getStudies().stream()\n+        .filter(study -> study.getFiles()\n+            .stream()\n+            .anyMatch(this::isVcf))\n+        .map(Study::getFqn)\n+        .collect(Collectors.toList());\n+\n+    ObjectMap params = new ObjectMap()\n+        .append(ParamConstants.PROJECT_PARAM, project.getId())\n+        .append(ParamConstants.STUDY_PARAM, studies)\n+        .append(\"jobDependsOn\", jobs);\n+    openCGAClient.getVariantOperationClient()\n+        .secondaryIndexVariant(new VariantSecondaryIndexParams().setOverwrite(true), params);\n+  }\n+\n }\n",
            "diff_size": 284
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Trailing whitespace'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/naturalize/335/TemplateManager.java\nindex 4f59f88b87d..685007a3556 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/naturalize/335/TemplateManager.java\n@@ -127,11 +127,13 @@ public class TemplateManager {\n \n         // Create individuals without parents and siblings\n         for (Individual individual : study.getIndividuals()) {\n-            relatives.put(individual.getId(), new HashMap<String, Object>(){{\n+            relatives.put(individual.getId(), new HashMap<String, Object>(){\n+    {\n                 put(\"father\", individual.getFather());\n                 put(\"mother\", individual.getMother());\n                 put(\"multiples\", individual.getMultiples());\n-            }});\n+            }\n+    });\n             individual.setFather(null);\n             individual.setMother(null);\n             individual.setMultiples(null);\n@@ -275,4 +277,4 @@ public class TemplateManager {\n                 .secondaryIndexVariant(new VariantSecondaryIndexParams().setOverwrite(true), params);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/styler/05_predictions/random/files-repaired/335/TemplateManager.java\nindex 4f59f88b87d..9cd1d7310f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/styler/05_predictions/random/files-repaired/335/TemplateManager.java\n@@ -235,7 +235,6 @@ public class TemplateManager {\n     private String variantStats(Study study, List<String> indexVcfJobIds) throws ClientException {\n         ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId())\n                 .append(\"jobDependsOn\", indexVcfJobIds);\n-        \n         VariantStatsAnalysisParams data = new VariantStatsAnalysisParams();\n         data.setAggregated(Aggregation.NONE);\n         for (File file : study.getFiles()) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/styler/05_predictions/three_grams/files-repaired/335/TemplateManager.java\nindex 4f59f88b87d..9cd1d7310f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/violations/335/TemplateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/opencb-opencga/styler/05_predictions/three_grams/files-repaired/335/TemplateManager.java\n@@ -235,7 +235,6 @@ public class TemplateManager {\n     private String variantStats(Study study, List<String> indexVcfJobIds) throws ClientException {\n         ObjectMap params = new ObjectMap(ParamConstants.STUDY_PARAM, study.getId())\n                 .append(\"jobDependsOn\", indexVcfJobIds);\n-        \n         VariantStatsAnalysisParams data = new VariantStatsAnalysisParams();\n         data.setAggregated(Aggregation.NONE);\n         for (File file : study.getFiles()) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}