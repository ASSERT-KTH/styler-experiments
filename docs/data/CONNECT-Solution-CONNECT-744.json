{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "744",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.gateway.servlet;\n\nimport gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet;\nimport gov.hhs.fha.nhinc.configuration.jmx.WebServicesMXBean;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/744/InitServlet.java\nindex c4dbe739ce4..ce27eff3eba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/744/InitServlet.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.gateway.servlet;\n \n import gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/744/InitServlet.java\nindex c4dbe739ce4..9d6646b2bce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/744/InitServlet.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.gateway.servlet;\n \n import gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet;\n@@ -45,102 +46,110 @@ import org.slf4j.LoggerFactory;\n  * Main ExecutorService creates a new thread pool of size specified on construction, independent/in addition to\n  * glassfish thread pool(s) set in domain.xml. 2. ExecutorService automatically handles any thread death condition and\n  * creates a new thread in this case\n- *\n+ * <p>\n  * 3. Also creates a second largeJobExecutor with a fixed size thread pool (largeJobExecutor is used for TaskExecutors\n  * that get a callable list of size comparable to the size of the main ExecutorService)\n- *\n+ * <p>\n  * 4. See {@link gov.fha.hhs.nhinc.gateway.AbstractJMXEnabledServlet} for JMX init and destroy functionality.\n  *\n  * @author paul.eftis, msw\n  */\n public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n \n-    /** The Constant serialVersionUID. */\n-    private static final long serialVersionUID = -4229185731377926278L;\n+  /**\n+   * The Constant serialVersionUID.\n+   */\n+  private static final long serialVersionUID = -4229185731377926278L;\n \n-    /** The Constant LOG. */\n-    private static final Logger LOG = LoggerFactory.getLogger(InitServlet.class);\n+  /**\n+   * The Constant LOG.\n+   */\n+  private static final Logger LOG = LoggerFactory.getLogger(InitServlet.class);\n \n-    /** The executor. */\n-    private static ExecutorService executor = null;\n+  /**\n+   * The executor.\n+   */\n+  private static ExecutorService executor = null;\n \n-    /** The large job executor. */\n-    private static ExecutorService largeJobExecutor = null;\n+  /**\n+   * The large job executor.\n+   */\n+  private static ExecutorService largeJobExecutor = null;\n \n-    /**\n-     * Initializes the servlet with parallel fanout executors as well as calling super.init().\n-     *\n-     * @param config the config\n-     * @throws ServletException the servlet exception\n-     * @see gov.fha.hhs.nhinc.gateway.AbstractJMXEnabledServlet#init(javax.servlet.ServletConfig)\n-     */\n-    @Override\n-    @SuppressWarnings(\"static-access\")\n-    public void init(ServletConfig config) throws ServletException {\n-        LOG.debug(\"InitServlet start...\");\n-        executor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance().getExecutorPoolSize());\n-        largeJobExecutor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance()\n-                .getLargeJobExecutorPoolSize());\n-\n-        super.init(config);\n-    }\n+  /**\n+   * Initializes the servlet with parallel fanout executors as well as calling super.init().\n+   *\n+   * @param config the config\n+   * @throws ServletException the servlet exception\n+   * @see gov.fha.hhs.nhinc.gateway.AbstractJMXEnabledServlet#init(javax.servlet.ServletConfig)\n+   */\n+  @Override\n+  @SuppressWarnings(\"static-access\")\n+  public void init(ServletConfig config) throws ServletException {\n+    LOG.debug(\"InitServlet start...\");\n+    executor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance().getExecutorPoolSize());\n+    largeJobExecutor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance()\n+        .getLargeJobExecutorPoolSize());\n \n-    /**\n-     * Gets the executor service.\n-     *\n-     * @return the executor service\n-     */\n-    public static ExecutorService getExecutorService() {\n-        return executor;\n-    }\n+    super.init(config);\n+  }\n \n-    /**\n-     * Gets the large job executor service.\n-     *\n-     * @return the large job executor service\n-     */\n-    public static ExecutorService getLargeJobExecutorService() {\n-        return largeJobExecutor;\n-    }\n+  /**\n+   * Gets the executor service.\n+   *\n+   * @return the executor service\n+   */\n+  public static ExecutorService getExecutorService() {\n+    return executor;\n+  }\n \n-    /**\n-     * Servlet destroy method. Since we don't want to hault the serlvet from coming down we are not propogating errors\n-     * which are caught in this method.\n-     *\n-     * @see gov.fha.hhs.nhinc.gateway.AbstractJMXEnabledServlet#destroy()\n-     */\n-    @Override\n-    public void destroy() {\n-        LOG.debug(\"InitServlet shutdown stopping executor(s)....\");\n-        if (executor != null) {\n-            try {\n-                executor.shutdown();\n-            } catch (Exception e) {\n-                LOG.error(\"Error shutting down executor.\", e);\n-            }\n-        }\n-        if (largeJobExecutor != null) {\n-            try {\n-                largeJobExecutor.shutdown();\n-            } catch (Exception e) {\n-                LOG.error(\"Error shutting down large jobs executor.\", e);\n-            }\n-        }\n+  /**\n+   * Gets the large job executor service.\n+   *\n+   * @return the large job executor service\n+   */\n+  public static ExecutorService getLargeJobExecutorService() {\n+    return largeJobExecutor;\n+  }\n \n-        super.destroy();\n+  /**\n+   * Servlet destroy method. Since we don't want to hault the serlvet from coming down we are not propogating errors\n+   * which are caught in this method.\n+   *\n+   * @see gov.fha.hhs.nhinc.gateway.AbstractJMXEnabledServlet#destroy()\n+   */\n+  @Override\n+  public void destroy() {\n+    LOG.debug(\"InitServlet shutdown stopping executor(s)....\");\n+    if (executor != null) {\n+      try {\n+        executor.shutdown();\n+      } catch (Exception e) {\n+        LOG.error(\"Error shutting down executor.\", e);\n+      }\n     }\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see\n-     * gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet#getWebServiceMXBean(javax.servlet.\n-     * ServletContext)\n-     */\n-    @Override\n-    public Set<WebServicesMXBean> getWebServiceMXBean(ServletContext sc) {\n-        WebServicesMXBean bean = new DocumentQuery30WebServices(sc);\n-        return Collections.singleton(bean);\n+    if (largeJobExecutor != null) {\n+      try {\n+        largeJobExecutor.shutdown();\n+      } catch (Exception e) {\n+        LOG.error(\"Error shutting down large jobs executor.\", e);\n+      }\n     }\n \n+    super.destroy();\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see\n+   * gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet#getWebServiceMXBean(javax.servlet.\n+   * ServletContext)\n+   */\n+  @Override\n+  public Set<WebServicesMXBean> getWebServiceMXBean(ServletContext sc) {\n+    WebServicesMXBean bean = new DocumentQuery30WebServices(sc);\n+    return Collections.singleton(bean);\n+  }\n+\n }\n",
            "diff_size": 118
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/744/InitServlet.java\nindex c4dbe739ce4..44824ec04e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/744/InitServlet.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.gateway.servlet;\n \n import gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet;\n@@ -79,8 +80,7 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n     public void init(ServletConfig config) throws ServletException {\n         LOG.debug(\"InitServlet start...\");\n         executor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance().getExecutorPoolSize());\n-        largeJobExecutor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance()\n-                .getLargeJobExecutorPoolSize());\n+        largeJobExecutor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance().getLargeJobExecutorPoolSize());\n \n         super.init(config);\n     }\n@@ -140,7 +140,8 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n     @Override\n     public Set<WebServicesMXBean> getWebServiceMXBean(ServletContext sc) {\n         WebServicesMXBean bean = new DocumentQuery30WebServices(sc);\n-        return Collections.singleton(bean);\n+\n+return Collections.singleton(bean);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/744/InitServlet.java\nindex c4dbe739ce4..f4437b89859 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/744/InitServlet.java\n@@ -53,10 +53,15 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author paul.eftis, msw\n  */\n-public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n+\n+\n+public class InitServlet extends\n+    AbstractPassthruRegistryEnabledServlet {\n \n     /** The Constant serialVersionUID. */\n-    private static final long serialVersionUID = -4229185731377926278L;\n+\n+    private static final long serialVersionUID = -\n+                                                     4229185731377926278L;\n \n     /** The Constant LOG. */\n     private static final Logger LOG = LoggerFactory.getLogger(InitServlet.class);\n@@ -74,14 +79,14 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n      * @throws ServletException the servlet exception\n      * @see gov.fha.hhs.nhinc.gateway.AbstractJMXEnabledServlet#init(javax.servlet.ServletConfig)\n      */\n+\n+\n     @Override\n     @SuppressWarnings(\"static-access\")\n     public void init(ServletConfig config) throws ServletException {\n         LOG.debug(\"InitServlet start...\");\n         executor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance().getExecutorPoolSize());\n-        largeJobExecutor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance()\n-                .getLargeJobExecutorPoolSize());\n-\n+        largeJobExecutor = Executors.newFixedThreadPool(ExecutorServiceHelper.getInstance().getLargeJobExecutorPoolSize());\n         super.init(config);\n     }\n \n@@ -90,6 +95,8 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n      *\n      * @return the executor service\n      */\n+\n+\n     public static ExecutorService getExecutorService() {\n         return executor;\n     }\n@@ -99,6 +106,8 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n      *\n      * @return the large job executor service\n      */\n+\n+\n     public static ExecutorService getLargeJobExecutorService() {\n         return largeJobExecutor;\n     }\n@@ -109,6 +118,8 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n      *\n      * @see gov.fha.hhs.nhinc.gateway.AbstractJMXEnabledServlet#destroy()\n      */\n+\n+\n     @Override\n     public void destroy() {\n         LOG.debug(\"InitServlet shutdown stopping executor(s)....\");\n@@ -126,7 +137,6 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n                 LOG.error(\"Error shutting down large jobs executor.\", e);\n             }\n         }\n-\n         super.destroy();\n     }\n \n@@ -137,10 +147,12 @@ public class InitServlet extends AbstractPassthruRegistryEnabledServlet {\n      * gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet#getWebServiceMXBean(javax.servlet.\n      * ServletContext)\n      */\n+\n+\n     @Override\n     public Set<WebServicesMXBean> getWebServiceMXBean(ServletContext sc) {\n         WebServicesMXBean bean = new DocumentQuery30WebServices(sc);\n         return Collections.singleton(bean);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/744/InitServlet.java\nindex c4dbe739ce4..ce27eff3eba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/744/InitServlet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/744/InitServlet.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.gateway.servlet;\n \n import gov.hhs.fha.nhinc.configuration.jmx.AbstractPassthruRegistryEnabledServlet;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}