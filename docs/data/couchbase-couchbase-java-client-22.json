{
    "project_name": "couchbase-couchbase-java-client",
    "violation_id": "22",
    "information": {
        "violations": [
            {
                "line": "40",
                "column": "116",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "        ResponseStatus status) throws Exception {\n        if (!TranscoderUtils.hasSerializableFlags(flags)) {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n                \"document for id \" + id + \", could not decode.\");\n        }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-java-client/styler/05_predictions/final/files-repaired/22/SerializableTranscoder.java\nindex a4a804ecee1..851d06a3973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-java-client/styler/05_predictions/final/files-repaired/22/SerializableTranscoder.java\n@@ -37,8 +37,8 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \"\n+            + \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "41",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/checkstyle_idea/22/SerializableTranscoder.java\nindex a4a804ecee1..0e8ec5cf016 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/checkstyle_idea/22/SerializableTranscoder.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -35,7 +36,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n \n     @Override\n     protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                            ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n             throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n                 \"document for id \" + id + \", could not decode.\");\n@@ -57,7 +58,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n \n     @Override\n     public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+                                            MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/naturalize/22/SerializableTranscoder.java\nindex a4a804ecee1..6dc80a2ec61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/naturalize/22/SerializableTranscoder.java\n@@ -34,11 +34,9 @@ import java.io.Serializable;\n public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n \n     @Override\n-    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" + \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n@@ -56,8 +54,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     }\n \n     @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas, MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -65,4 +62,4 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     public Class<SerializableDocument> documentType() {\n         return SerializableDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/codebuff/22/SerializableTranscoder.java\nindex a4a804ecee1..903a849ac27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/codebuff/22/SerializableTranscoder.java\n@@ -22,7 +22,6 @@ import com.couchbase.client.core.message.kv.MutationToken;\n import com.couchbase.client.deps.io.netty.buffer.ByteBuf;\n import com.couchbase.client.java.document.SerializableDocument;\n import com.couchbase.client.java.error.TranscodingException;\n-\n import java.io.Serializable;\n \n /**\n@@ -31,16 +30,14 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n \n+\n+public class SerializableTranscoder extends AbstractTranscoder<SerializableDocument, Serializable> {\n     @Override\n-    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" + \"document for id \" + id + \", could not decode.\");\n         }\n-\n         Serializable deserialized = TranscoderUtils.deserialize(content);\n         return newDocument(id, expiry, deserialized, cas);\n     }\n@@ -56,8 +53,7 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     }\n \n     @Override\n-    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas,\n-        MutationToken mutationToken) {\n+    public SerializableDocument newDocument(String id, int expiry, Serializable content, long cas, MutationToken mutationToken) {\n         return SerializableDocument.create(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -65,4 +61,4 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     public Class<SerializableDocument> documentType() {\n         return SerializableDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "40",
                    "column": "116",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/styler/05_predictions/three_grams/files-repaired/22/SerializableTranscoder.java\nindex a4a804ecee1..851d06a3973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/violations/22/SerializableTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-java-client/styler/05_predictions/three_grams/files-repaired/22/SerializableTranscoder.java\n@@ -37,8 +37,8 @@ public class SerializableTranscoder extends AbstractTranscoder<SerializableDocum\n     protected SerializableDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n         ResponseStatus status) throws Exception {\n         if (!TranscoderUtils.hasSerializableFlags(flags)) {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \" +\n-                \"document for id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non-serialized \"\n+            + \"document for id \" + id + \", could not decode.\");\n         }\n \n         Serializable deserialized = TranscoderUtils.deserialize(content);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}