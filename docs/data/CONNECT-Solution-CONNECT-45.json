{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "45",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.direct;\n\nimport gov.hhs.fha.nhinc.direct.event.DirectEventLogger;\nimport gov.hhs.fha.nhinc.direct.event.DirectEventType;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/45/DirectException.java\nindex ee521606bd2..8a4ee45b387 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/45/DirectException.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.direct.event.DirectEventLogger;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/45/DirectException.java\nindex ee521606bd2..91a831eb9ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/45/DirectException.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.direct.event.DirectEventLogger;\n@@ -38,63 +39,63 @@ import org.apache.log4j.Logger;\n  */\n public class DirectException extends RuntimeException {\n \n-    private static final long serialVersionUID = 4636463959045310435L;\n-    private static final Logger LOG = Logger.getLogger(DirectException.class);\n-    private static DirectEventLogger directEventLogger;\n+  private static final long serialVersionUID = 4636463959045310435L;\n+  private static final Logger LOG = Logger.getLogger(DirectException.class);\n+  private static DirectEventLogger directEventLogger;\n \n-    /**\n-     * Constructor.\n-     *\n-     * @param message for the exception\n-     * @param cause chained exception\n-     * @param mimeMessage associated with the exception for event logging.\n-     */\n-    public DirectException(String message, Throwable cause, MimeMessage mimeMessage) {\n-        super(message, cause);\n-        LOG.error(message, cause);\n-    }\n+  /**\n+   * Constructor.\n+   *\n+   * @param message     for the exception\n+   * @param cause       chained exception\n+   * @param mimeMessage associated with the exception for event logging.\n+   */\n+  public DirectException(String message, Throwable cause, MimeMessage mimeMessage) {\n+    super(message, cause);\n+    LOG.error(message, cause);\n+  }\n \n-    /**\n-     * Constructor.\n-     *\n-     * @param message for the exception\n-     * @param mimeMessage associated with the exception for event logging.\n-     */\n-    public DirectException(String message, MimeMessage mimeMessage) {\n-        super(message);\n-        LOG.error(message);\n-        directEventLogger.log(DirectEventType.DIRECT_ERROR, mimeMessage, message);\n-    }\n+  /**\n+   * Constructor.\n+   *\n+   * @param message     for the exception\n+   * @param mimeMessage associated with the exception for event logging.\n+   */\n+  public DirectException(String message, MimeMessage mimeMessage) {\n+    super(message);\n+    LOG.error(message);\n+    directEventLogger.log(DirectEventType.DIRECT_ERROR, mimeMessage, message);\n+  }\n \n-    /**\n-     * Constructor.\n-     *\n-     * @param message for the exception\n-     * @param cause chained exception\n-     */\n-    public DirectException(String message, Throwable cause) {\n-        super(message, cause);\n-        LOG.error(message, cause);\n-        directEventLogger.log(DirectEventType.DIRECT_ERROR, message + cause.getMessage());\n-    }\n+  /**\n+   * Constructor.\n+   *\n+   * @param message for the exception\n+   * @param cause   chained exception\n+   */\n+  public DirectException(String message, Throwable cause) {\n+    super(message, cause);\n+    LOG.error(message, cause);\n+    directEventLogger.log(DirectEventType.DIRECT_ERROR, message + cause.getMessage());\n+  }\n \n-    /**\n-     * Constructor.\n-     *\n-     * @param message for the exception\n-     */\n-    public DirectException(String message) {\n-        super(message);\n-        LOG.error(message);\n-        directEventLogger.log(DirectEventType.DIRECT_ERROR, message);\n-    }\n+  /**\n+   * Constructor.\n+   *\n+   * @param message for the exception\n+   */\n+  public DirectException(String message) {\n+    super(message);\n+    LOG.error(message);\n+    directEventLogger.log(DirectEventType.DIRECT_ERROR, message);\n+  }\n \n-    /**\n-     * Statically inject a {@link DirectEventLogger}.\n-     *\n-     * @param directEventLogger the directEventLogger to set\n-     */\n-    public static void setDirectEventLogger(DirectEventLogger directEventLogger) {\n-        DirectException.directEventLogger = directEventLogger;\n-    }\n+  /**\n+   * Statically inject a {@link DirectEventLogger}.\n+   *\n+   * @param directEventLogger the directEventLogger to set\n+   */\n+  public static void setDirectEventLogger(DirectEventLogger directEventLogger) {\n+    DirectException.directEventLogger = directEventLogger;\n+  }\n }\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/45/DirectException.java\nindex ee521606bd2..83d2339cb79 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/45/DirectException.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.direct.event.DirectEventLogger;\n@@ -97,4 +98,4 @@ public class DirectException extends RuntimeException {\n     public static void setDirectEventLogger(DirectEventLogger directEventLogger) {\n         DirectException.directEventLogger = directEventLogger;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/45/DirectException.java\nindex ee521606bd2..fa21f9c6f1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/45/DirectException.java\n@@ -28,15 +28,16 @@ package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.direct.event.DirectEventLogger;\n import gov.hhs.fha.nhinc.direct.event.DirectEventType;\n-\n import javax.mail.internet.MimeMessage;\n-\n import org.apache.log4j.Logger;\n \n /**\n  * Exceptions for {@link MimeMessageBuilder}.\n  */\n-public class DirectException extends RuntimeException {\n+\n+\n+public class DirectException extends\n+    RuntimeException {\n \n     private static final long serialVersionUID = 4636463959045310435L;\n     private static final Logger LOG = Logger.getLogger(DirectException.class);\n@@ -49,9 +50,11 @@ public class DirectException extends RuntimeException {\n      * @param cause chained exception\n      * @param mimeMessage associated with the exception for event logging.\n      */\n-    public DirectException(String message, Throwable cause, MimeMessage mimeMessage) {\n-        super(message, cause);\n-        LOG.error(message, cause);\n+\n+    public DirectException(String message,\n+        Throwable cause, MimeMessage mimeMessage) {\n+                                                  super(message, cause);\n+                                                  LOG.error(message, cause);\n     }\n \n     /**\n@@ -60,10 +63,12 @@ public class DirectException extends RuntimeException {\n      * @param message for the exception\n      * @param mimeMessage associated with the exception for event logging.\n      */\n+\n+\n     public DirectException(String message, MimeMessage mimeMessage) {\n-        super(message);\n-        LOG.error(message);\n-        directEventLogger.log(DirectEventType.DIRECT_ERROR, mimeMessage, message);\n+                                                                    super(message);\n+                                                                    LOG.error(message);\n+                                                                    directEventLogger.log(DirectEventType.DIRECT_ERROR, mimeMessage, message);\n     }\n \n     /**\n@@ -72,10 +77,12 @@ public class DirectException extends RuntimeException {\n      * @param message for the exception\n      * @param cause chained exception\n      */\n+\n+\n     public DirectException(String message, Throwable cause) {\n-        super(message, cause);\n-        LOG.error(message, cause);\n-        directEventLogger.log(DirectEventType.DIRECT_ERROR, message + cause.getMessage());\n+                                                            super(message, cause);\n+                                                            LOG.error(message, cause);\n+                                                            directEventLogger.log(DirectEventType.DIRECT_ERROR, message + cause.getMessage());\n     }\n \n     /**\n@@ -83,10 +90,12 @@ public class DirectException extends RuntimeException {\n      *\n      * @param message for the exception\n      */\n+\n+\n     public DirectException(String message) {\n-        super(message);\n-        LOG.error(message);\n-        directEventLogger.log(DirectEventType.DIRECT_ERROR, message);\n+                                           super(message);\n+                                           LOG.error(message);\n+                                           directEventLogger.log(DirectEventType.DIRECT_ERROR, message);\n     }\n \n     /**\n@@ -94,7 +103,10 @@ public class DirectException extends RuntimeException {\n      *\n      * @param directEventLogger the directEventLogger to set\n      */\n+\n+\n     public static void setDirectEventLogger(DirectEventLogger directEventLogger) {\n         DirectException.directEventLogger = directEventLogger;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/45/DirectException.java\nindex ee521606bd2..8a4ee45b387 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/45/DirectException.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.direct.event.DirectEventLogger;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/45/DirectException.java\nindex ee521606bd2..8a4ee45b387 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/45/DirectException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/45/DirectException.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct;\n \n import gov.hhs.fha.nhinc.direct.event.DirectEventLogger;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}