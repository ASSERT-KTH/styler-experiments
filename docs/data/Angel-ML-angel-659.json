{
    "project_name": "Angel-ML-angel",
    "violation_id": "659",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/659/SampleNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/659/SampleNeighborParam.java\nindex 3fdcc7f958d..65d86a4cfa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/659/SampleNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/659/SampleNeighborParam.java\n@@ -32,57 +32,58 @@ import java.util.List;\n  */\n public class SampleNeighborParam extends GetParam {\n \n-  /**\n-   * Node ids\n-   */\n-  private int[] nodeIds;\n+    /**\n+     * Node ids\n+     */\n+    private int[] nodeIds;\n \n-  /**\n-   * Sample neighbor number, if count <= 0, means get all neighbors\n-   */\n-  private int count;\n+    /**\n+     * Sample neighbor number, if count <= 0, means get all neighbors\n+     */\n+    private int count;\n \n-  public SampleNeighborParam(int matrixId, int[] nodeIds, int count) {\n-    super(matrixId);\n-    this.nodeIds = nodeIds;\n-    this.count = count;\n-  }\n+    public SampleNeighborParam(int matrixId, int[] nodeIds, int count) {\n+        super(matrixId);\n+        this.nodeIds = nodeIds;\n+        this.count = count;\n+    }\n \n-  public SampleNeighborParam() {\n-    this(-1, null, -1);\n-  }\n+    public SampleNeighborParam() {\n+        this(-1, null, -1);\n+    }\n \n-  @Override\n-  public List<PartitionGetParam> split() {\n-    Arrays.sort(nodeIds);\n+    @Override\n+    public List<PartitionGetParam> split() {\n+        Arrays.sort(nodeIds);\n \n-    List<PartitionGetParam> partParams = new ArrayList<>();\n-    List<PartitionKey> partitions =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n+        List<PartitionGetParam> partParams = new ArrayList<>();\n+        List<PartitionKey> partitions =\n+                PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n-    if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n-              .get(partitions.size() - 1).getEndCol());\n-    }\n+        if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n+            throw new AngelException(\n+                    \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" +\n+                            partitions\n+                                    .get(partitions.size() - 1).getEndCol());\n+        }\n \n-    int nodeIndex = 0;\n-    int partIndex = 0;\n-    while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n-      int length = 0;\n-      int endOffset = (int) partitions.get(partIndex).getEndCol();\n-      while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n-        nodeIndex++;\n-        length++;\n-      }\n+        int nodeIndex = 0;\n+        int partIndex = 0;\n+        while (nodeIndex < nodeIds.length || partIndex < partitions.size()) {\n+            int length = 0;\n+            int endOffset = (int) partitions.get(partIndex).getEndCol();\n+            while (nodeIndex < nodeIds.length && nodeIds[nodeIndex] < endOffset) {\n+                nodeIndex++;\n+                length++;\n+            }\n \n-      if (length > 0) {\n-        partParams.add(new PartSampleNeighborParam(matrixId,\n-            partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n-    }\n+            if (length > 0) {\n+                partParams.add(new PartSampleNeighborParam(matrixId,\n+                        partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n+            }\n+            partIndex++;\n+        }\n \n-    return partParams;\n-  }\n+        return partParams;\n+    }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/659/SampleNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/659/SampleNeighborParam.java\nindex 3fdcc7f958d..f431e3f5bf3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/659/SampleNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/659/SampleNeighborParam.java\n@@ -61,10 +61,9 @@ public class SampleNeighborParam extends GetParam {\n         PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n \n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n+      throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n               .get(partitions.size() - 1).getEndCol());\n-    }\n+  }\n \n     int nodeIndex = 0;\n     int partIndex = 0;\n@@ -79,10 +78,11 @@ public class SampleNeighborParam extends GetParam {\n       if (length > 0) {\n         partParams.add(new PartSampleNeighborParam(matrixId,\n             partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n-      }\n-      partIndex++;\n+  }\n+\n+partIndex++;\n     }\n \n     return partParams;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/659/SampleNeighborParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/659/SampleNeighborParam.java\nindex 3fdcc7f958d..b89138fe148 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/659/SampleNeighborParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/659/SampleNeighborParam.java\n@@ -30,11 +30,13 @@ import java.util.List;\n /**\n  * The parameter of SampleNeighbor\n  */\n+\n public class SampleNeighborParam extends GetParam {\n \n   /**\n    * Node ids\n    */\n+\n   private int[] nodeIds;\n \n   /**\n@@ -55,15 +57,10 @@ public class SampleNeighborParam extends GetParam {\n   @Override\n   public List<PartitionGetParam> split() {\n     Arrays.sort(nodeIds);\n-\n     List<PartitionGetParam> partParams = new ArrayList<>();\n-    List<PartitionKey> partitions =\n-        PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n-\n+    List<PartitionKey> partitions = PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId);\n     if (!RowUpdateSplitUtils.isInRange(nodeIds, partitions)) {\n-      throw new AngelException(\n-          \"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions\n-              .get(partitions.size() - 1).getEndCol());\n+      throw new AngelException(\"node id is not in range [\" + partitions.get(0).getStartCol() + \", \" + partitions.get(partitions.size() - 1).getEndCol());\n     }\n \n     int nodeIndex = 0;\n@@ -77,12 +74,11 @@ public class SampleNeighborParam extends GetParam {\n       }\n \n       if (length > 0) {\n-        partParams.add(new PartSampleNeighborParam(matrixId,\n-            partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n+        partParams.add(new PartSampleNeighborParam(matrixId, partitions.get(partIndex), count, nodeIds, nodeIndex - length, nodeIndex));\n       }\n       partIndex++;\n     }\n-\n     return partParams;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}