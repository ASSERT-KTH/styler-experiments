{
    "project_name": "Angel-ML-angel",
    "violation_id": "194",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/194/PSMatrixLoadContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/194/PSMatrixLoadContext.java\nindex 9e0baf858a2..78d1a84c751 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/194/PSMatrixLoadContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/194/PSMatrixLoadContext.java\n@@ -26,117 +26,117 @@ import java.util.List;\n  */\n public class PSMatrixLoadContext {\n \n-  /**\n-   * Matrix id\n-   */\n-  private final int matrixId;\n-\n-  /**\n-   * Matrix save directory\n-   */\n-  private final String loadPath;\n-\n-  /**\n-   * Need load matrix partitions\n-   */\n-  private final List<Integer> partIds;\n-\n-  /**\n-   * Matrix output format class name\n-   */\n-  private volatile String formatClassName;\n-\n-  /**\n-   * Save workers\n-   */\n-  private volatile IOExecutors workers;\n-\n-  /**\n-   * Create a new PSMatrixLoadContext\n-   *\n-   * @param matrixId matrix id\n-   * @param loadPath matrix save directory\n-   * @param partIds need load directory\n-   */\n-  public PSMatrixLoadContext(int matrixId, String loadPath, List<Integer> partIds,\n-      String formatClassName) {\n-    this.matrixId = matrixId;\n-    this.loadPath = loadPath;\n-    this.partIds = partIds;\n-    this.formatClassName = formatClassName;\n-  }\n-\n-  /**\n-   * Create a new PSMatrixLoadContext\n-   *\n-   * @param matrixId matrix id\n-   * @param loadPath matrix save directory\n-   * @param partIds need load directory\n-   */\n-  public PSMatrixLoadContext(int matrixId, String loadPath, List<Integer> partIds) {\n-    this(matrixId, loadPath, partIds, null);\n-  }\n-\n-  /**\n-   * Get matrix id\n-   *\n-   * @return matrix id\n-   */\n-  public int getMatrixId() {\n-    return matrixId;\n-  }\n-\n-  /**\n-   * Get matrix save directory\n-   *\n-   * @return matrix save directory\n-   */\n-  public String getLoadPath() {\n-    return loadPath;\n-  }\n-\n-  /**\n-   * Get need load partitons\n-   *\n-   * @return need load partitions\n-   */\n-  public List<Integer> getPartIds() {\n-    return partIds;\n-  }\n-\n-  /**\n-   * Get output format class name\n-   *\n-   * @return output format class name\n-   */\n-  public String getFormatClassName() {\n-    return formatClassName;\n-  }\n-\n-  /**\n-   * Set output format class name\n-   *\n-   * @param formatClassName output format class name\n-   */\n-  public void setFormatClassName(String formatClassName) {\n-    this.formatClassName = formatClassName;\n-  }\n-\n-  /**\n-   * Get load workers\n-   *\n-   * @return load workers\n-   */\n-  public IOExecutors getWorkers() {\n-    return workers;\n-  }\n-\n-  /**\n-   * Set load workers\n-   *\n-   * @param workers load workers\n-   */\n-  public void setWorkers(IOExecutors workers) {\n-    this.workers = workers;\n-  }\n+    /**\n+     * Matrix id\n+     */\n+    private final int matrixId;\n+\n+    /**\n+     * Matrix save directory\n+     */\n+    private final String loadPath;\n+\n+    /**\n+     * Need load matrix partitions\n+     */\n+    private final List<Integer> partIds;\n+\n+    /**\n+     * Matrix output format class name\n+     */\n+    private volatile String formatClassName;\n+\n+    /**\n+     * Save workers\n+     */\n+    private volatile IOExecutors workers;\n+\n+    /**\n+     * Create a new PSMatrixLoadContext\n+     *\n+     * @param matrixId matrix id\n+     * @param loadPath matrix save directory\n+     * @param partIds  need load directory\n+     */\n+    public PSMatrixLoadContext(int matrixId, String loadPath, List<Integer> partIds,\n+                               String formatClassName) {\n+        this.matrixId = matrixId;\n+        this.loadPath = loadPath;\n+        this.partIds = partIds;\n+        this.formatClassName = formatClassName;\n+    }\n+\n+    /**\n+     * Create a new PSMatrixLoadContext\n+     *\n+     * @param matrixId matrix id\n+     * @param loadPath matrix save directory\n+     * @param partIds  need load directory\n+     */\n+    public PSMatrixLoadContext(int matrixId, String loadPath, List<Integer> partIds) {\n+        this(matrixId, loadPath, partIds, null);\n+    }\n+\n+    /**\n+     * Get matrix id\n+     *\n+     * @return matrix id\n+     */\n+    public int getMatrixId() {\n+        return matrixId;\n+    }\n+\n+    /**\n+     * Get matrix save directory\n+     *\n+     * @return matrix save directory\n+     */\n+    public String getLoadPath() {\n+        return loadPath;\n+    }\n+\n+    /**\n+     * Get need load partitons\n+     *\n+     * @return need load partitions\n+     */\n+    public List<Integer> getPartIds() {\n+        return partIds;\n+    }\n+\n+    /**\n+     * Get output format class name\n+     *\n+     * @return output format class name\n+     */\n+    public String getFormatClassName() {\n+        return formatClassName;\n+    }\n+\n+    /**\n+     * Set output format class name\n+     *\n+     * @param formatClassName output format class name\n+     */\n+    public void setFormatClassName(String formatClassName) {\n+        this.formatClassName = formatClassName;\n+    }\n+\n+    /**\n+     * Get load workers\n+     *\n+     * @return load workers\n+     */\n+    public IOExecutors getWorkers() {\n+        return workers;\n+    }\n+\n+    /**\n+     * Set load workers\n+     *\n+     * @param workers load workers\n+     */\n+    public void setWorkers(IOExecutors workers) {\n+        this.workers = workers;\n+    }\n }\n",
            "diff_size": 113
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/194/PSMatrixLoadContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/194/PSMatrixLoadContext.java\nindex 9e0baf858a2..1c0bacf70b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/194/PSMatrixLoadContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/194/PSMatrixLoadContext.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.model;\n \n import com.tencent.angel.model.io.IOExecutors;\n@@ -139,4 +138,4 @@ public class PSMatrixLoadContext {\n   public void setWorkers(IOExecutors workers) {\n     this.workers = workers;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/194/PSMatrixLoadContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/194/PSMatrixLoadContext.java\nindex 9e0baf858a2..6ae4830a55e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/194/PSMatrixLoadContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/194/PSMatrixLoadContext.java\n@@ -24,11 +24,13 @@ import java.util.List;\n /**\n  * PS matrix load context\n  */\n+\n public class PSMatrixLoadContext {\n \n   /**\n    * Matrix id\n    */\n+\n   private final int matrixId;\n \n   /**\n@@ -58,8 +60,8 @@ public class PSMatrixLoadContext {\n    * @param loadPath matrix save directory\n    * @param partIds need load directory\n    */\n-  public PSMatrixLoadContext(int matrixId, String loadPath, List<Integer> partIds,\n-      String formatClassName) {\n+\n+  public PSMatrixLoadContext(int matrixId, String loadPath, List<Integer> partIds, String formatClassName) {\n     this.matrixId = matrixId;\n     this.loadPath = loadPath;\n     this.partIds = partIds;\n@@ -73,6 +75,7 @@ public class PSMatrixLoadContext {\n    * @param loadPath matrix save directory\n    * @param partIds need load directory\n    */\n+\n   public PSMatrixLoadContext(int matrixId, String loadPath, List<Integer> partIds) {\n     this(matrixId, loadPath, partIds, null);\n   }\n@@ -82,6 +85,7 @@ public class PSMatrixLoadContext {\n    *\n    * @return matrix id\n    */\n+\n   public int getMatrixId() {\n     return matrixId;\n   }\n@@ -91,6 +95,7 @@ public class PSMatrixLoadContext {\n    *\n    * @return matrix save directory\n    */\n+\n   public String getLoadPath() {\n     return loadPath;\n   }\n@@ -100,6 +105,7 @@ public class PSMatrixLoadContext {\n    *\n    * @return need load partitions\n    */\n+\n   public List<Integer> getPartIds() {\n     return partIds;\n   }\n@@ -109,6 +115,7 @@ public class PSMatrixLoadContext {\n    *\n    * @return output format class name\n    */\n+\n   public String getFormatClassName() {\n     return formatClassName;\n   }\n@@ -118,6 +125,7 @@ public class PSMatrixLoadContext {\n    *\n    * @param formatClassName output format class name\n    */\n+\n   public void setFormatClassName(String formatClassName) {\n     this.formatClassName = formatClassName;\n   }\n@@ -127,6 +135,7 @@ public class PSMatrixLoadContext {\n    *\n    * @return load workers\n    */\n+\n   public IOExecutors getWorkers() {\n     return workers;\n   }\n@@ -136,7 +145,9 @@ public class PSMatrixLoadContext {\n    *\n    * @param workers load workers\n    */\n+\n   public void setWorkers(IOExecutors workers) {\n     this.workers = workers;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}