{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "1295",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1295/TopFetchingWeightedPathIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1295/TopFetchingWeightedPathIterator.java\nindex 61495c2856c..a80b1f947de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1295/TopFetchingWeightedPathIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1295/TopFetchingWeightedPathIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.ArrayList;\n@@ -34,51 +35,51 @@ import org.neo4j.kernel.impl.util.NoneStrictMath;\n  */\n public class TopFetchingWeightedPathIterator extends PrefetchingIterator<WeightedPath>\n {\n-    private final Iterator<Path> paths;\n-    private List<WeightedPath> shortestPaths;\n-    private Iterator<WeightedPath> shortestIterator;\n-    private final CostEvaluator<Double> costEvaluator;\n-    private double foundWeight;\n-    private final double epsilon;\n+  private final Iterator<Path> paths;\n+  private List<WeightedPath> shortestPaths;\n+  private Iterator<WeightedPath> shortestIterator;\n+  private final CostEvaluator<Double> costEvaluator;\n+  private double foundWeight;\n+  private final double epsilon;\n \n-    public TopFetchingWeightedPathIterator( Iterator<Path> paths, CostEvaluator<Double> costEvaluator )\n-    {\n-        this( paths, costEvaluator, NoneStrictMath.EPSILON );\n-    }\n+  public TopFetchingWeightedPathIterator(Iterator<Path> paths, CostEvaluator<Double> costEvaluator)\n+  {\n+    this(paths, costEvaluator, NoneStrictMath.EPSILON);\n+  }\n \n-    public TopFetchingWeightedPathIterator( Iterator<Path> paths, CostEvaluator<Double> costEvaluator,\n-            double epsilon )\n-    {\n-        this.paths = paths;\n-        this.costEvaluator = costEvaluator;\n-        this.epsilon = epsilon;\n-        this.foundWeight = Double.MAX_VALUE;\n-    }\n+  public TopFetchingWeightedPathIterator(Iterator<Path> paths, CostEvaluator<Double> costEvaluator,\n+                                         double epsilon)\n+  {\n+    this.paths = paths;\n+    this.costEvaluator = costEvaluator;\n+    this.epsilon = epsilon;\n+    this.foundWeight = Double.MAX_VALUE;\n+  }\n \n-    @Override\n-    protected WeightedPath fetchNextOrNull()\n+  @Override\n+  protected WeightedPath fetchNextOrNull()\n+  {\n+    if (shortestIterator == null)\n     {\n-        if ( shortestIterator == null )\n-        {\n-            shortestPaths = new ArrayList<>();\n+      shortestPaths = new ArrayList<>();\n \n-            while ( paths.hasNext() )\n-            {\n-                WeightedPath path = new WeightedPathImpl( costEvaluator, paths.next() );\n+      while (paths.hasNext())\n+      {\n+        WeightedPath path = new WeightedPathImpl(costEvaluator, paths.next());\n \n-                if ( NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) < 0 )\n-                {\n-                    foundWeight = path.weight();\n-                    shortestPaths.clear();\n-                }\n-                if ( NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) <= 0 )\n-                {\n-                    shortestPaths.add( path );\n-                }\n-            }\n-            shortestIterator = shortestPaths.iterator();\n+        if (NoneStrictMath.compare(path.weight(), foundWeight, epsilon) < 0)\n+        {\n+          foundWeight = path.weight();\n+          shortestPaths.clear();\n         }\n-\n-        return shortestIterator.hasNext() ? shortestIterator.next() : null;\n+        if (NoneStrictMath.compare(path.weight(), foundWeight, epsilon) <= 0)\n+        {\n+          shortestPaths.add(path);\n+        }\n+      }\n+      shortestIterator = shortestPaths.iterator();\n     }\n+\n+    return shortestIterator.hasNext() ? shortestIterator.next() : null;\n+  }\n }\n",
            "diff_size": 49
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1295/TopFetchingWeightedPathIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1295/TopFetchingWeightedPathIterator.java\nindex 61495c2856c..c840817f7ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1295/TopFetchingWeightedPathIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1295/TopFetchingWeightedPathIterator.java\n@@ -65,13 +65,13 @@ public class TopFetchingWeightedPathIterator extends PrefetchingIterator<Weighte\n             while ( paths.hasNext() )\n             {\n                 WeightedPath path = new WeightedPathImpl( costEvaluator, paths.next() );\n-\n-                if ( NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) < 0 )\n+if ( NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) < 0 )\n                 {\n                     foundWeight = path.weight();\n                     shortestPaths.clear();\n                 }\n-                if ( NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) <= 0 )\n+\n+if ( NoneStrictMath.compare( path.weight(), foundWeight, epsilon ) <= 0 )\n                 {\n                     shortestPaths.add( path );\n                 }\n@@ -81,4 +81,4 @@ public class TopFetchingWeightedPathIterator extends PrefetchingIterator<Weighte\n \n         return shortestIterator.hasNext() ? shortestIterator.next() : null;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}