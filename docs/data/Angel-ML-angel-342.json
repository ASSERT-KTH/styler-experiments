{
    "project_name": "Angel-ML-angel",
    "violation_id": "342",
    "information": {
        "violations": [
            {
                "line": "62",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 107).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\n  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n    MatrixContext mc = new MatrixContext();\n    mc.setName(name);",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/342/ModelContextUtils.java\nindex 0c166db0705..b8cf53bee52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/342/ModelContextUtils.java\n@@ -57,10 +57,8 @@ public class ModelContextUtils {\n \n     return mc;\n   }\n-\n-\n-  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n+  public static MatrixContext createMatrixContextWithUserDefinePartition(\n+      ModelContext context, String name, RowType rowType, Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n     mc.setRowNum(1);\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/342/ModelContextUtils.java\nindex 0c166db0705..af88c229143 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/342/ModelContextUtils.java\n@@ -11,128 +11,137 @@ import com.tencent.angel.ps.storage.vector.element.IElement;\n \n public class ModelContextUtils {\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType) {\n-    return createMatrixContext(context, rowType, null);\n-  }\n-\n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      int rowNum) {\n-    return createMatrixContext(context, rowType, null, rowNum);\n-  }\n-\n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass) {\n-    return createMatrixContext(context, rowType, elemClass, 1);\n-  }\n-\n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass, int rowNum) {\n-    if (rowType.isComplexValue() && elemClass == null) {\n-      throw new InvalidParameterException(\"Complex value type must set element class type\");\n+    public static MatrixContext createMatrixContext(ModelContext context, RowType rowType) {\n+        return createMatrixContext(context, rowType, null);\n     }\n \n-    MatrixContext mc = new MatrixContext();\n-    mc.setName(context.getModelName());\n-    mc.setRowNum(rowNum);\n-    mc.setRowType(rowType);\n-    mc.setPartitionNum(context.getPartitionNum());\n-    mc.setValidIndexNum(context.getNodeNum());\n-\n-    if (elemClass != null) {\n-      mc.setValueType(elemClass);\n+    public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n+                                                    int rowNum) {\n+        return createMatrixContext(context, rowType, null, rowNum);\n     }\n \n-    if (context.isUseHashPartition()) {\n-      mc.setPartitionerClass(HashPartitioner.class);\n-    } else {\n-      mc.setIndexStart(context.getMinNodeId());\n-      mc.setIndexEnd(context.getMaxNodeId());\n-      mc.setPartitionerClass(ColumnRangePartitioner.class);\n-      if (context.getPartitionNum() > 0) {\n-        mc.setMaxRowNumInBlock(rowNum);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n-      }\n+    public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n+                                                    Class<? extends IElement> elemClass) {\n+        return createMatrixContext(context, rowType, elemClass, 1);\n     }\n \n-    return mc;\n-  }\n-\n+    public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n+                                                    Class<? extends IElement> elemClass,\n+                                                    int rowNum) {\n+        if (rowType.isComplexValue() && elemClass == null) {\n+            throw new InvalidParameterException(\"Complex value type must set element class type\");\n+        }\n+\n+        MatrixContext mc = new MatrixContext();\n+        mc.setName(context.getModelName());\n+        mc.setRowNum(rowNum);\n+        mc.setRowType(rowType);\n+        mc.setPartitionNum(context.getPartitionNum());\n+        mc.setValidIndexNum(context.getNodeNum());\n+\n+        if (elemClass != null) {\n+            mc.setValueType(elemClass);\n+        }\n+\n+        if (context.isUseHashPartition()) {\n+            mc.setPartitionerClass(HashPartitioner.class);\n+        } else {\n+            mc.setIndexStart(context.getMinNodeId());\n+            mc.setIndexEnd(context.getMaxNodeId());\n+            mc.setPartitionerClass(ColumnRangePartitioner.class);\n+            if (context.getPartitionNum() > 0) {\n+                mc.setMaxRowNumInBlock(rowNum);\n+                mc.setMaxColNumInBlock(\n+                        (context.getMaxNodeId() - context.getMinNodeId()) /\n+                                context.getPartitionNum());\n+            }\n+        }\n+\n+        return mc;\n+    }\n \n-  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n-    MatrixContext mc = new MatrixContext();\n-    mc.setName(name);\n-    mc.setRowNum(1);\n-    mc.setRowType(rowType);\n-    mc.setPartitionNum(context.getPartitionNum());\n-    mc.setValidIndexNum(context.getNodeNum());\n \n-    if (partClass != null) {\n-      mc.setPartitionClass(partClass);\n+    public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context,\n+                                                                           String name,\n+                                                                           RowType rowType,\n+                                                                           Class<? extends UserDefinePartition> partClass) {\n+        MatrixContext mc = new MatrixContext();\n+        mc.setName(name);\n+        mc.setRowNum(1);\n+        mc.setRowType(rowType);\n+        mc.setPartitionNum(context.getPartitionNum());\n+        mc.setValidIndexNum(context.getNodeNum());\n+\n+        if (partClass != null) {\n+            mc.setPartitionClass(partClass);\n+        }\n+\n+        if (context.isUseHashPartition()) {\n+            mc.setPartitionerClass(HashPartitioner.class);\n+        } else {\n+            mc.setIndexStart(context.getMinNodeId());\n+            mc.setIndexEnd(context.getMaxNodeId());\n+            mc.setPartitionerClass(ColumnRangePartitioner.class);\n+            if (context.getPartitionNum() > 0) {\n+                mc.setMaxRowNumInBlock(1);\n+                mc.setMaxColNumInBlock(\n+                        (context.getMaxNodeId() - context.getMinNodeId()) /\n+                                context.getPartitionNum());\n+            }\n+        }\n+\n+        return mc;\n     }\n \n-    if (context.isUseHashPartition()) {\n-      mc.setPartitionerClass(HashPartitioner.class);\n-    } else {\n-      mc.setIndexStart(context.getMinNodeId());\n-      mc.setIndexEnd(context.getMaxNodeId());\n-      mc.setPartitionerClass(ColumnRangePartitioner.class);\n-      if (context.getPartitionNum() > 0) {\n-        mc.setMaxRowNumInBlock(1);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n-      }\n+    public static MatrixContext createMatrixContext(ModelContext context, String name,\n+                                                    RowType rowType) {\n+        return createMatrixContext(context, name, rowType, null);\n     }\n \n-    return mc;\n-  }\n-\n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType) {\n-    return createMatrixContext(context, name, rowType, null);\n-  }\n-\n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, int rowNum) {\n-    return createMatrixContext(context, name, rowType, null, rowNum);\n-  }\n-\n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass) {\n-    return createMatrixContext(context, name, rowType, elemClass, 1);\n-  }\n-\n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n-    if (rowType.isComplexValue() && elemClass == null) {\n-      throw new InvalidParameterException(\"Complex value type must set element class type\");\n+    public static MatrixContext createMatrixContext(ModelContext context, String name,\n+                                                    RowType rowType, int rowNum) {\n+        return createMatrixContext(context, name, rowType, null, rowNum);\n     }\n \n-    MatrixContext mc = new MatrixContext();\n-    mc.setName(name);\n-    mc.setRowNum(rowNum);\n-    mc.setRowType(rowType);\n-    mc.setPartitionNum(context.getPartitionNum());\n-    mc.setValidIndexNum(context.getNodeNum());\n-\n-    if (elemClass != null) {\n-      mc.setValueType(elemClass);\n+    public static MatrixContext createMatrixContext(ModelContext context, String name,\n+                                                    RowType rowType,\n+                                                    Class<? extends IElement> elemClass) {\n+        return createMatrixContext(context, name, rowType, elemClass, 1);\n     }\n \n-    if (context.isUseHashPartition()) {\n-      mc.setPartitionerClass(HashPartitioner.class);\n-    } else {\n-      mc.setIndexStart(context.getMinNodeId());\n-      mc.setIndexEnd(context.getMaxNodeId());\n-      mc.setPartitionerClass(ColumnRangePartitioner.class);\n-      if (context.getPartitionNum() > 0) {\n-        mc.setMaxRowNumInBlock(1);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n-      }\n+    public static MatrixContext createMatrixContext(ModelContext context, String name,\n+                                                    RowType rowType,\n+                                                    Class<? extends IElement> elemClass,\n+                                                    int rowNum) {\n+        if (rowType.isComplexValue() && elemClass == null) {\n+            throw new InvalidParameterException(\"Complex value type must set element class type\");\n+        }\n+\n+        MatrixContext mc = new MatrixContext();\n+        mc.setName(name);\n+        mc.setRowNum(rowNum);\n+        mc.setRowType(rowType);\n+        mc.setPartitionNum(context.getPartitionNum());\n+        mc.setValidIndexNum(context.getNodeNum());\n+\n+        if (elemClass != null) {\n+            mc.setValueType(elemClass);\n+        }\n+\n+        if (context.isUseHashPartition()) {\n+            mc.setPartitionerClass(HashPartitioner.class);\n+        } else {\n+            mc.setIndexStart(context.getMinNodeId());\n+            mc.setIndexEnd(context.getMaxNodeId());\n+            mc.setPartitionerClass(ColumnRangePartitioner.class);\n+            if (context.getPartitionNum() > 0) {\n+                mc.setMaxRowNumInBlock(1);\n+                mc.setMaxColNumInBlock(\n+                        (context.getMaxNodeId() - context.getMinNodeId()) /\n+                                context.getPartitionNum());\n+            }\n+        }\n+\n+        return mc;\n     }\n-\n-    return mc;\n-  }\n }\n",
            "diff_size": 189
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/342/ModelContextUtils.java\nindex 0c166db0705..bbe3c004051 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/342/ModelContextUtils.java\n@@ -15,19 +15,18 @@ public class ModelContextUtils {\n     return createMatrixContext(context, rowType, null);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      int rowNum) {\n-    return createMatrixContext(context, rowType, null, rowNum);\n+  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType, int rowNum) {\n+  return createMatrixContext(context, rowType, null, rowNum);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n       Class<? extends IElement> elemClass) {\n-    return createMatrixContext(context, rowType, elemClass, 1);\n+  return createMatrixContext(context, rowType, elemClass, 1);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n       Class<? extends IElement> elemClass, int rowNum) {\n-    if (rowType.isComplexValue() && elemClass == null) {\n+  if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n \n@@ -90,22 +89,22 @@ public class ModelContextUtils {\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType) {\n-    return createMatrixContext(context, name, rowType, null);\n+  return createMatrixContext(context, name, rowType, null);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType, int rowNum) {\n-    return createMatrixContext(context, name, rowType, null, rowNum);\n+  return createMatrixContext(context, name, rowType, null, rowNum);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType, Class<? extends IElement> elemClass) {\n-    return createMatrixContext(context, name, rowType, elemClass, 1);\n+  return createMatrixContext(context, name, rowType, elemClass, 1);\n   }\n \n   public static MatrixContext createMatrixContext(ModelContext context, String name,\n       RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n-    if (rowType.isComplexValue() && elemClass == null) {\n+  if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n \n@@ -135,4 +134,4 @@ public class ModelContextUtils {\n \n     return mc;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/342/ModelContextUtils.java\nindex 0c166db0705..3c15afd32e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/342/ModelContextUtils.java\n@@ -15,18 +15,18 @@ public class ModelContextUtils {\n     return createMatrixContext(context, rowType, null);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, RowType rowType, int rowNum) {\n     return createMatrixContext(context, rowType, null, rowNum);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, RowType rowType, Class<? extends IElement> elemClass) {\n     return createMatrixContext(context, rowType, elemClass, 1);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, RowType rowType,\n-      Class<? extends IElement> elemClass, int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n     if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n@@ -37,7 +37,6 @@ public class ModelContextUtils {\n     mc.setRowType(rowType);\n     mc.setPartitionNum(context.getPartitionNum());\n     mc.setValidIndexNum(context.getNodeNum());\n-\n     if (elemClass != null) {\n       mc.setValueType(elemClass);\n     }\n@@ -50,24 +49,20 @@ public class ModelContextUtils {\n       mc.setPartitionerClass(ColumnRangePartitioner.class);\n       if (context.getPartitionNum() > 0) {\n         mc.setMaxRowNumInBlock(rowNum);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n+        mc.setMaxColNumInBlock((context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n       }\n     }\n-\n     return mc;\n   }\n \n-\n-  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n+  public static MatrixContext createMatrixContextWithUserDefinePartition(\n+    ModelContext context, String name, RowType rowType, Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n     mc.setRowNum(1);\n     mc.setRowType(rowType);\n     mc.setPartitionNum(context.getPartitionNum());\n     mc.setValidIndexNum(context.getNodeNum());\n-\n     if (partClass != null) {\n       mc.setPartitionClass(partClass);\n     }\n@@ -80,31 +75,29 @@ public class ModelContextUtils {\n       mc.setPartitionerClass(ColumnRangePartitioner.class);\n       if (context.getPartitionNum() > 0) {\n         mc.setMaxRowNumInBlock(1);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n+        mc.setMaxColNumInBlock((context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n       }\n     }\n-\n     return mc;\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType) {\n     return createMatrixContext(context, name, rowType, null);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType, int rowNum) {\n     return createMatrixContext(context, name, rowType, null, rowNum);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType, Class<? extends IElement> elemClass) {\n     return createMatrixContext(context, name, rowType, elemClass, 1);\n   }\n \n-  public static MatrixContext createMatrixContext(ModelContext context, String name,\n-      RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n+  public static MatrixContext createMatrixContext(\n+    ModelContext context, String name, RowType rowType, Class<? extends IElement> elemClass, int rowNum) {\n     if (rowType.isComplexValue() && elemClass == null) {\n       throw new InvalidParameterException(\"Complex value type must set element class type\");\n     }\n@@ -115,7 +108,6 @@ public class ModelContextUtils {\n     mc.setRowType(rowType);\n     mc.setPartitionNum(context.getPartitionNum());\n     mc.setValidIndexNum(context.getNodeNum());\n-\n     if (elemClass != null) {\n       mc.setValueType(elemClass);\n     }\n@@ -128,11 +120,9 @@ public class ModelContextUtils {\n       mc.setPartitionerClass(ColumnRangePartitioner.class);\n       if (context.getPartitionNum() > 0) {\n         mc.setMaxRowNumInBlock(1);\n-        mc.setMaxColNumInBlock(\n-            (context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n+        mc.setMaxColNumInBlock((context.getMaxNodeId() - context.getMinNodeId()) / context.getPartitionNum());\n       }\n     }\n-\n     return mc;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/342/ModelContextUtils.java\nindex 0c166db0705..b8cf53bee52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/342/ModelContextUtils.java\n@@ -57,10 +57,8 @@ public class ModelContextUtils {\n \n     return mc;\n   }\n-\n-\n-  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n-      RowType rowType, Class<? extends UserDefinePartition> partClass) {\n+  public static MatrixContext createMatrixContextWithUserDefinePartition(\n+      ModelContext context, String name, RowType rowType, Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n     mc.setRowNum(1);\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/342/ModelContextUtils.java\nindex 0c166db0705..fe6f945a586 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/342/ModelContextUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/342/ModelContextUtils.java\n@@ -56,10 +56,7 @@ public class ModelContextUtils {\n     }\n \n     return mc;\n-  }\n-\n-\n-  public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n+  } public static MatrixContext createMatrixContextWithUserDefinePartition(ModelContext context, String name,\n       RowType rowType, Class<? extends UserDefinePartition> partClass) {\n     MatrixContext mc = new MatrixContext();\n     mc.setName(name);\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}