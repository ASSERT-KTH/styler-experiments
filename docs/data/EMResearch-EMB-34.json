{
    "project_name": "EMResearch-EMB",
    "violation_id": "34",
    "information": {
        "violations": [
            {
                "line": "33",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Override\n  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> args, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n    if (args.containsKey(\"year\") || args.containsKey(\"month\") || args.containsKey(\"day\")) {\n      throw new RuntimeException(\"Set only 'weekDay' and 'date' for \" + DMYDateCheckFilter.class.getSimpleName());\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/34/DMYDateCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/34/DMYDateCheckFilter.java\nindex 9e353de68d7..cdb04d22190 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/34/DMYDateCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/34/DMYDateCheckFilter.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules.fr;\n \n import org.languagetool.AnalyzedTokenReadings;\n@@ -25,24 +26,26 @@ import java.util.Map;\n \n /**\n  * Date filter that expects a 'date' argument in the format 'dd-mm-yyyy'.\n+ *\n  * @since 2.7\n  */\n public class DMYDateCheckFilter extends DateCheckFilter {\n \n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> args, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    if (args.containsKey(\"year\") || args.containsKey(\"month\") || args.containsKey(\"day\")) {\n-      throw new RuntimeException(\"Set only 'weekDay' and 'date' for \" + DMYDateCheckFilter.class.getSimpleName());\n-    }\n-    String dateString = getRequired(\"date\", args);\n-    String[] parts = dateString.split(\"-\");\n-    if (parts.length != 3) {\n-      throw new RuntimeException(\"Expected date in format 'dd-mm-yyyy': '\" + dateString + \"'\");\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> args, int patternTokenPos,\n+                                     AnalyzedTokenReadings[] patternTokens) {\n+        if (args.containsKey(\"year\") || args.containsKey(\"month\") || args.containsKey(\"day\")) {\n+            throw new RuntimeException(\"Set only 'weekDay' and 'date' for \" + DMYDateCheckFilter.class.getSimpleName());\n+        }\n+        String dateString = getRequired(\"date\", args);\n+        String[] parts = dateString.split(\"-\");\n+        if (parts.length != 3) {\n+            throw new RuntimeException(\"Expected date in format 'dd-mm-yyyy': '\" + dateString + \"'\");\n+        }\n+        args.put(\"day\", parts[0]);\n+        args.put(\"month\", parts[1]);\n+        args.put(\"year\", parts[2]);\n+        return super.acceptRuleMatch(match, args, patternTokenPos, patternTokens);\n     }\n-    args.put(\"day\", parts[0]);\n-    args.put(\"month\", parts[1]);\n-    args.put(\"year\", parts[2]);\n-    return super.acceptRuleMatch(match, args, patternTokenPos, patternTokens);\n-  }\n \n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/34/DMYDateCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/34/DMYDateCheckFilter.java\nindex 9e353de68d7..7d80d58687d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/34/DMYDateCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/34/DMYDateCheckFilter.java\n@@ -45,4 +45,4 @@ public class DMYDateCheckFilter extends DateCheckFilter {\n     return super.acceptRuleMatch(match, args, patternTokenPos, patternTokens);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/34/DMYDateCheckFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/34/DMYDateCheckFilter.java\nindex 9e353de68d7..744b31044c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/34/DMYDateCheckFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/34/DMYDateCheckFilter.java\n@@ -20,29 +20,30 @@ package org.languagetool.rules.fr;\n \n import org.languagetool.AnalyzedTokenReadings;\n import org.languagetool.rules.RuleMatch;\n-\n import java.util.Map;\n \n /**\n  * Date filter that expects a 'date' argument in the format 'dd-mm-yyyy'.\n  * @since 2.7\n  */\n-public class DMYDateCheckFilter extends DateCheckFilter {\n \n-  @Override\n-  public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> args, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n-    if (args.containsKey(\"year\") || args.containsKey(\"month\") || args.containsKey(\"day\")) {\n-      throw new RuntimeException(\"Set only 'weekDay' and 'date' for \" + DMYDateCheckFilter.class.getSimpleName());\n-    }\n-    String dateString = getRequired(\"date\", args);\n-    String[] parts = dateString.split(\"-\");\n-    if (parts.length != 3) {\n-      throw new RuntimeException(\"Expected date in format 'dd-mm-yyyy': '\" + dateString + \"'\");\n+\n+public class DMYDateCheckFilter extends DateCheckFilter {\n+    @Override\n+    public RuleMatch acceptRuleMatch(RuleMatch match, Map<String, String> args, int patternTokenPos, AnalyzedTokenReadings[] patternTokens) {\n+        if (args.containsKey(\"year\") || args.containsKey(\"month\") || args.containsKey(\"day\")) {\n+            throw new RuntimeException(\"Set only 'weekDay' and 'date' for \"\n+                + DMYDateCheckFilter.class.getSimpleName());\n+        }\n+        String dateString = getRequired(\"date\", args);\n+        String[] parts = dateString.split(\"-\");\n+        if (parts.length != 3) {\n+            throw new RuntimeException(\"Expected date in format 'dd-mm-yyyy': '\" + dateString + \"'\");\n+        }\n+        args.put(\"day\", parts[0]);\n+        args.put(\"month\", parts[1]);\n+        args.put(\"year\", parts[2]);\n+        return super.acceptRuleMatch(match, args, patternTokenPos, patternTokens);\n     }\n-    args.put(\"day\", parts[0]);\n-    args.put(\"month\", parts[1]);\n-    args.put(\"year\", parts[2]);\n-    return super.acceptRuleMatch(match, args, patternTokenPos, patternTokens);\n-  }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}