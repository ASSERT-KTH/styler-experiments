{
    "project_name": "Angel-ML-angel",
    "violation_id": "858",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/858/TAbstractVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/858/TAbstractVector.java\nindex 113c5937eba..6dc66b0393b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/858/TAbstractVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/858/TAbstractVector.java\n@@ -23,124 +23,123 @@ import com.tencent.angel.ml.matrix.RowType;\n  */\n public abstract class TAbstractVector extends TUpdate {\n \n-  /**\n-   * The Row id.\n-   */\n-  protected int rowId;\n-  /**\n-   * The Matrix id.\n-   */\n-  protected int matrixId;\n-  /**\n-   * The Clock.\n-   */\n-  protected int clock;\n-  /**\n-   * The Dimension.\n-   */\n-  protected int dim;\n-\n-  /**\n-   * Default construction.\n-   */\n-  public TAbstractVector() {\n-    this.rowId = -1;\n-    this.matrixId = -1;\n-    this.clock = -1;\n-    this.dim = -1;\n-  }\n-\n-  /**\n-   * Create a new vector by other.\n-   *\n-   * @param other the other\n-   */\n-  public TAbstractVector(TAbstractVector other) {\n-    this.rowId = other.getRowId();\n-    this.matrixId = other.getMatrixId();\n-    this.clock = other.getClock();\n-    this.dim = other.getDimension();\n-  }\n-\n-  /**\n-   * Gets sparsity factor.\n-   *\n-   * @return Return the sparsity of vector\n-   */\n-  public abstract double sparsity();\n-\n-  /**\n-   * Gets type of Vector.\n-   *\n-   * @return the type\n-   */\n-  public abstract RowType getType();\n-\n-  /**\n-   * Gets dimension,the represented length of vector\n-   *\n-   * @return the dimension\n-   */\n-  public int getDimension() {\n-    return dim;\n-  }\n-\n-  /**\n-   * Gets row id.\n-   *\n-   * @return the row id\n-   */\n-  public int getRowId() {\n-    return rowId;\n-  }\n-\n-  @Override\n-  public int getMatrixId() {\n-    return matrixId;\n-  }\n-\n-  /**\n-   * Gets clock.\n-   *\n-   * @return the clock\n-   */\n-  public int getClock() {\n-    return clock;\n-  }\n-\n-  /**\n-   * Sets row id.\n-   *\n-   * @param rowId the row id\n-   * @return the row id\n-   */\n-  public TAbstractVector setRowId(int rowId) {\n-    this.rowId = rowId;\n-    return this;\n-  }\n-\n-  @Override\n-  public TAbstractVector setMatrixId(int matrixId) {\n-    this.matrixId = matrixId;\n-    return this;\n-  }\n-\n-  /**\n-   * Sets clock.\n-   *\n-   * @param clock the clock\n-   * @return the clock\n-   */\n-  public TAbstractVector setClock(int clock) {\n-    this.clock = clock;\n-    return this;\n-  }\n-\n-  /**\n-   * The actually value size.\n-   *\n-   *\n-   * @return if sparse then return size of non-zero values, else size of all\n-   */\n-  public abstract int size();\n+    /**\n+     * The Row id.\n+     */\n+    protected int rowId;\n+    /**\n+     * The Matrix id.\n+     */\n+    protected int matrixId;\n+    /**\n+     * The Clock.\n+     */\n+    protected int clock;\n+    /**\n+     * The Dimension.\n+     */\n+    protected int dim;\n+\n+    /**\n+     * Default construction.\n+     */\n+    public TAbstractVector() {\n+        this.rowId = -1;\n+        this.matrixId = -1;\n+        this.clock = -1;\n+        this.dim = -1;\n+    }\n+\n+    /**\n+     * Create a new vector by other.\n+     *\n+     * @param other the other\n+     */\n+    public TAbstractVector(TAbstractVector other) {\n+        this.rowId = other.getRowId();\n+        this.matrixId = other.getMatrixId();\n+        this.clock = other.getClock();\n+        this.dim = other.getDimension();\n+    }\n+\n+    /**\n+     * Gets sparsity factor.\n+     *\n+     * @return Return the sparsity of vector\n+     */\n+    public abstract double sparsity();\n+\n+    /**\n+     * Gets type of Vector.\n+     *\n+     * @return the type\n+     */\n+    public abstract RowType getType();\n+\n+    /**\n+     * Gets dimension,the represented length of vector\n+     *\n+     * @return the dimension\n+     */\n+    public int getDimension() {\n+        return dim;\n+    }\n+\n+    /**\n+     * Gets row id.\n+     *\n+     * @return the row id\n+     */\n+    public int getRowId() {\n+        return rowId;\n+    }\n+\n+    @Override\n+    public int getMatrixId() {\n+        return matrixId;\n+    }\n+\n+    /**\n+     * Gets clock.\n+     *\n+     * @return the clock\n+     */\n+    public int getClock() {\n+        return clock;\n+    }\n+\n+    /**\n+     * Sets row id.\n+     *\n+     * @param rowId the row id\n+     * @return the row id\n+     */\n+    public TAbstractVector setRowId(int rowId) {\n+        this.rowId = rowId;\n+        return this;\n+    }\n+\n+    @Override\n+    public TAbstractVector setMatrixId(int matrixId) {\n+        this.matrixId = matrixId;\n+        return this;\n+    }\n+\n+    /**\n+     * Sets clock.\n+     *\n+     * @param clock the clock\n+     * @return the clock\n+     */\n+    public TAbstractVector setClock(int clock) {\n+        this.clock = clock;\n+        return this;\n+    }\n+\n+    /**\n+     * The actually value size.\n+     *\n+     * @return if sparse then return size of non-zero values, else size of all\n+     */\n+    public abstract int size();\n }\n",
            "diff_size": 120
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/858/TAbstractVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/858/TAbstractVector.java\nindex 113c5937eba..6f771dd5758 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/858/TAbstractVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/858/TAbstractVector.java\n@@ -143,4 +143,4 @@ public abstract class TAbstractVector extends TUpdate {\n    * @return if sparse then return size of non-zero values, else size of all\n    */\n   public abstract int size();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/858/TAbstractVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/858/TAbstractVector.java\nindex 113c5937eba..46e0893fc2c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/858/TAbstractVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/858/TAbstractVector.java\n@@ -21,28 +21,34 @@ import com.tencent.angel.ml.matrix.RowType;\n /**\n  * Vector is the Class operated by users.\n  */\n+\n public abstract class TAbstractVector extends TUpdate {\n \n   /**\n    * The Row id.\n    */\n+\n   protected int rowId;\n   /**\n    * The Matrix id.\n    */\n+\n   protected int matrixId;\n   /**\n    * The Clock.\n    */\n+\n   protected int clock;\n   /**\n    * The Dimension.\n    */\n+\n   protected int dim;\n \n   /**\n    * Default construction.\n    */\n+\n   public TAbstractVector() {\n     this.rowId = -1;\n     this.matrixId = -1;\n@@ -55,6 +61,7 @@ public abstract class TAbstractVector extends TUpdate {\n    *\n    * @param other the other\n    */\n+\n   public TAbstractVector(TAbstractVector other) {\n     this.rowId = other.getRowId();\n     this.matrixId = other.getMatrixId();\n@@ -67,6 +74,7 @@ public abstract class TAbstractVector extends TUpdate {\n    *\n    * @return Return the sparsity of vector\n    */\n+\n   public abstract double sparsity();\n \n   /**\n@@ -74,6 +82,7 @@ public abstract class TAbstractVector extends TUpdate {\n    *\n    * @return the type\n    */\n+\n   public abstract RowType getType();\n \n   /**\n@@ -81,6 +90,7 @@ public abstract class TAbstractVector extends TUpdate {\n    *\n    * @return the dimension\n    */\n+\n   public int getDimension() {\n     return dim;\n   }\n@@ -90,6 +100,7 @@ public abstract class TAbstractVector extends TUpdate {\n    *\n    * @return the row id\n    */\n+\n   public int getRowId() {\n     return rowId;\n   }\n@@ -104,6 +115,7 @@ public abstract class TAbstractVector extends TUpdate {\n    *\n    * @return the clock\n    */\n+\n   public int getClock() {\n     return clock;\n   }\n@@ -114,6 +126,7 @@ public abstract class TAbstractVector extends TUpdate {\n    * @param rowId the row id\n    * @return the row id\n    */\n+\n   public TAbstractVector setRowId(int rowId) {\n     this.rowId = rowId;\n     return this;\n@@ -131,6 +144,7 @@ public abstract class TAbstractVector extends TUpdate {\n    * @param clock the clock\n    * @return the clock\n    */\n+\n   public TAbstractVector setClock(int clock) {\n     this.clock = clock;\n     return this;\n@@ -142,5 +156,7 @@ public abstract class TAbstractVector extends TUpdate {\n    *\n    * @return if sparse then return size of non-zero values, else size of all\n    */\n+\n   public abstract int size();\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}