{
    "project_name": "Activiti-Activiti",
    "violation_id": "748",
    "information": {
        "violations": [
            {
                "line": "68",
                "severity": "error",
                "message": "'METHOD_DEF' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n    public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n        return messagePayloadMappingProvider.getMessagePayload(execution);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/748/DefaultMessageExecutionContext.java\nindex 0128c9c47f6..88d0012b340 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/748/DefaultMessageExecutionContext.java\n@@ -63,10 +63,9 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n                        });\n     }\n \n-\n-\n-    public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n-        return messagePayloadMappingProvider.getMessagePayload(execution);\n+    public Optional<Map<String, Object>>\n+            getMessagePayload (DelegateExecution execution) {\n+         return messagePayloadMappingProvider.getMessagePayload(execution);\n     }\n \n     @Override\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "67",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/748/DefaultMessageExecutionContext.java\nindex 0128c9c47f6..a9a27501303 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/748/DefaultMessageExecutionContext.java\n@@ -51,20 +51,19 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n     @Override\n     public String getMessageName(DelegateExecution execution) {\n         return evaluateExpression(Optional.ofNullable(messageEventDefinition.getMessageRef())\n-                                          .orElseGet(() -> messageEventDefinition.getMessageExpression()),\n-                                  execution);\n+                        .orElseGet(() -> messageEventDefinition.getMessageExpression()),\n+                execution);\n     }\n \n     public Optional<String> getCorrelationKey(DelegateExecution execution) {\n         return Optional.ofNullable(messageEventDefinition.getCorrelationKey())\n-                       .map(correlationKey -> {\n-                           return evaluateExpression(messageEventDefinition.getCorrelationKey(),\n-                                                     execution);\n-                       });\n+                .map(correlationKey -> {\n+                    return evaluateExpression(messageEventDefinition.getCorrelationKey(),\n+                            execution);\n+                });\n     }\n \n \n-\n     public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n         return messagePayloadMappingProvider.getMessagePayload(execution);\n     }\n@@ -77,11 +76,11 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n         Optional<Map<String, Object>> payload = getMessagePayload(execution);\n \n         return ThrowMessage.builder()\n-                           .name(name)\n-                           .correlationKey(correlationKey)\n-                           .businessKey(businessKey)\n-                           .payload(payload)\n-                           .build();\n+                .name(name)\n+                .correlationKey(correlationKey)\n+                .businessKey(businessKey)\n+                .payload(payload)\n+                .build();\n     }\n \n     @Override\n@@ -92,12 +91,12 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n         Optional<String> correlationKey = getCorrelationKey(execution);\n \n         correlationKey.ifPresent(key -> assertNoExistingDuplicateEventSubscriptions(messageName,\n-                                                                                    key,\n-                                                                                    commandContext));\n+                key,\n+                commandContext));\n \n         MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n-                                                                    .insertMessageEvent(messageName,\n-                                                                                        ExecutionEntity.class.cast(execution));\n+                .insertMessageEvent(messageName,\n+                        ExecutionEntity.class.cast(execution));\n         correlationKey.ifPresent(messageEvent::setConfiguration);\n \n         return messageEvent;\n@@ -114,9 +113,9 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n     protected String evaluateExpression(String expression,\n                                         DelegateExecution execution) {\n         return Optional.ofNullable(expressionManager.createExpression(expression))\n-                       .map(it -> it.getValue(execution))\n-                       .map(Object::toString)\n-                       .orElseThrow(() -> new ActivitiIllegalArgumentException(\"Expression '\" + expression + \"' is null\"));\n+                .map(it -> it.getValue(execution))\n+                .map(Object::toString)\n+                .orElseThrow(() -> new ActivitiIllegalArgumentException(\"Expression '\" + expression + \"' is null\"));\n     }\n \n     protected void assertNoExistingDuplicateEventSubscriptions(String messageName,\n@@ -124,16 +123,16 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n                                                                CommandContext commandContext) {\n \n         List<EventSubscriptionEntity> existing = commandContext.getEventSubscriptionEntityManager()\n-                                                               .findEventSubscriptionsByName(\"message\",\n-                                                                                             messageName,\n-                                                                                             null);\n+                .findEventSubscriptionsByName(\"message\",\n+                        messageName,\n+                        null);\n         existing.stream()\n                 .filter(subscription -> Objects.equals(subscription.getConfiguration(),\n-                                                       correlationKey))\n+                        correlationKey))\n                 .findFirst()\n                 .ifPresent(subscription -> {\n                     throw new ActivitiIllegalArgumentException(\"Duplicate message subscription '\" + subscription.getEventName() +\n-                                                               \"' with correlation key '\" + subscription.getConfiguration() + \"'\");\n+                            \"' with correlation key '\" + subscription.getConfiguration() + \"'\");\n                 });\n \n     }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/748/DefaultMessageExecutionContext.java\nindex 0128c9c47f6..1767b0f81de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/748/DefaultMessageExecutionContext.java\n@@ -26,115 +26,84 @@ import org.activiti.engine.impl.interceptor.CommandContext;\n import org.activiti.engine.impl.persistence.entity.EventSubscriptionEntity;\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;\n-\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-\n import java.util.Map;\n import java.util.Optional;\n \n+\n public class DefaultMessageExecutionContext implements MessageExecutionContext {\n-    private final ExpressionManager expressionManager;\n-    private final MessagePayloadMappingProvider messagePayloadMappingProvider;\n-    private final MessageEventDefinition messageEventDefinition;\n-\n-    public DefaultMessageExecutionContext(MessageEventDefinition messageEventDefinition,\n-                                          ExpressionManager expressionManager,\n-                                          MessagePayloadMappingProvider messagePayloadMappingProvider) {\n-        this.messageEventDefinition = messageEventDefinition;\n-        this.expressionManager = expressionManager;\n-        this.messagePayloadMappingProvider = messagePayloadMappingProvider;\n-    }\n-\n-    @Override\n-    public String getMessageName(DelegateExecution execution) {\n-        return evaluateExpression(Optional.ofNullable(messageEventDefinition.getMessageRef())\n-                                          .orElseGet(() -> messageEventDefinition.getMessageExpression()),\n-                                  execution);\n-    }\n-\n-    public Optional<String> getCorrelationKey(DelegateExecution execution) {\n-        return Optional.ofNullable(messageEventDefinition.getCorrelationKey())\n-                       .map(correlationKey -> {\n-                           return evaluateExpression(messageEventDefinition.getCorrelationKey(),\n-                                                     execution);\n-                       });\n-    }\n-\n-\n-\n-    public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n-        return messagePayloadMappingProvider.getMessagePayload(execution);\n-    }\n-\n-    @Override\n-    public ThrowMessage createThrowMessage(DelegateExecution execution) {\n-        String name = getMessageName(execution);\n-        Optional<String> correlationKey = getCorrelationKey(execution);\n-        Optional<String> businessKey = Optional.ofNullable(execution.getProcessInstanceBusinessKey());\n-        Optional<Map<String, Object>> payload = getMessagePayload(execution);\n-\n-        return ThrowMessage.builder()\n-                           .name(name)\n-                           .correlationKey(correlationKey)\n-                           .businessKey(businessKey)\n-                           .payload(payload)\n-                           .build();\n-    }\n-\n-    @Override\n-    public MessageEventSubscriptionEntity createMessageEventSubscription(CommandContext commandContext,\n-                                                                         DelegateExecution execution) {\n-\n-        String messageName = getMessageName(execution);\n-        Optional<String> correlationKey = getCorrelationKey(execution);\n-\n-        correlationKey.ifPresent(key -> assertNoExistingDuplicateEventSubscriptions(messageName,\n-                                                                                    key,\n-                                                                                    commandContext));\n-\n-        MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager()\n-                                                                    .insertMessageEvent(messageName,\n-                                                                                        ExecutionEntity.class.cast(execution));\n-        correlationKey.ifPresent(messageEvent::setConfiguration);\n-\n-        return messageEvent;\n-    }\n-\n-    public ExpressionManager getExpressionManager() {\n-        return expressionManager;\n-    }\n-\n-    public MessagePayloadMappingProvider getMessagePayloadMappingProvider() {\n-        return messagePayloadMappingProvider;\n-    }\n-\n-    protected String evaluateExpression(String expression,\n-                                        DelegateExecution execution) {\n-        return Optional.ofNullable(expressionManager.createExpression(expression))\n-                       .map(it -> it.getValue(execution))\n-                       .map(Object::toString)\n-                       .orElseThrow(() -> new ActivitiIllegalArgumentException(\"Expression '\" + expression + \"' is null\"));\n-    }\n-\n-    protected void assertNoExistingDuplicateEventSubscriptions(String messageName,\n-                                                               String correlationKey,\n-                                                               CommandContext commandContext) {\n-\n-        List<EventSubscriptionEntity> existing = commandContext.getEventSubscriptionEntityManager()\n-                                                               .findEventSubscriptionsByName(\"message\",\n-                                                                                             messageName,\n-                                                                                             null);\n-        existing.stream()\n-                .filter(subscription -> Objects.equals(subscription.getConfiguration(),\n-                                                       correlationKey))\n-                .findFirst()\n-                .ifPresent(subscription -> {\n-                    throw new ActivitiIllegalArgumentException(\"Duplicate message subscription '\" + subscription.getEventName() +\n-                                                               \"' with correlation key '\" + subscription.getConfiguration() + \"'\");\n-                });\n-\n-    }\n-}\n+\n+  private final ExpressionManager expressionManager;\n+\n+  private final MessagePayloadMappingProvider messagePayloadMappingProvider;\n+\n+  private final MessageEventDefinition messageEventDefinition;\n+\n+  public DefaultMessageExecutionContext(MessageEventDefinition messageEventDefinition,\n+                                        ExpressionManager expressionManager, MessagePayloadMappingProvider messagePayloadMappingProvider) {\n+    this.messageEventDefinition = messageEventDefinition;\n+    this.expressionManager = expressionManager;\n+    this.messagePayloadMappingProvider = messagePayloadMappingProvider;\n+  }\n+\n+  @Override\n+  public String getMessageName(DelegateExecution execution) {\n+    return evaluateExpression(Optional.ofNullable(messageEventDefinition.getMessageRef()).orElseGet(() -> messageEventDefinition.getMessageExpression()), execution);\n+  }\n+\n+  public Optional<String> getCorrelationKey(DelegateExecution execution) {\n+    return Optional.ofNullable(messageEventDefinition.getCorrelationKey()).map(correlationKey -> {\n+      return evaluateExpression(messageEventDefinition.getCorrelationKey(),\n+                                execution);\n+                                                                           });\n+  }\n+\n+  public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n+    return messagePayloadMappingProvider.getMessagePayload(execution);\n+  }\n+\n+  @Override\n+  public ThrowMessage createThrowMessage(DelegateExecution execution) {\n+    String name = getMessageName(execution);\n+    Optional<String> correlationKey = getCorrelationKey(execution);\n+    Optional<String> businessKey = Optional.ofNullable(execution.getProcessInstanceBusinessKey());\n+    Optional<Map<String, Object>> payload = getMessagePayload(execution);\n+    return ThrowMessage.builder().name(name).correlationKey(correlationKey).businessKey(businessKey).payload(payload).build();\n+  }\n+\n+  @Override\n+  public MessageEventSubscriptionEntity createMessageEventSubscription(CommandContext commandContext, DelegateExecution execution) {\n+    String messageName = getMessageName(execution);\n+    Optional<String> correlationKey = getCorrelationKey(execution);\n+    correlationKey.ifPresent(key -> assertNoExistingDuplicateEventSubscriptions(messageName, key, commandContext));\n+\n+    MessageEventSubscriptionEntity messageEvent = commandContext.getEventSubscriptionEntityManager().insertMessageEvent(messageName,\n+                                                                                                                        ExecutionEntity.class.cast(execution));\n+    correlationKey.ifPresent(messageEvent::setConfiguration);\n+    return messageEvent;\n+  }\n+\n+  public ExpressionManager getExpressionManager() {\n+    return expressionManager;\n+  }\n+\n+  public MessagePayloadMappingProvider getMessagePayloadMappingProvider() {\n+    return messagePayloadMappingProvider;\n+  }\n+\n+  protected String evaluateExpression(String expression, DelegateExecution execution) {\n+    return Optional.ofNullable(expressionManager.createExpression(expression)).map(it -> it.getValue(execution)).map(Object::toString).orElseThrow(() -> new ActivitiIllegalArgumentException(\"Expression '\" + expression + \"' is null\"));\n+  }\n+\n+  protected void assertNoExistingDuplicateEventSubscriptions(String messageName, String correlationKey, CommandContext commandContext) {\n+    List<EventSubscriptionEntity> existing = commandContext.getEventSubscriptionEntityManager().findEventSubscriptionsByName(\"message\", messageName, null);\n+    existing.stream().filter(subscription -> Objects.equals(subscription.getConfiguration(),\n+                                                            correlationKey)).findFirst().ifPresent(subscription -> {\n+                                                              throw new ActivitiIllegalArgumentException(\"Duplicate message subscription '\" + subscription.getEventName() + \"' with correlation key '\" + subscription.getConfiguration() + \"'\");\n+                                                                                        });\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 105
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "66",
                    "column": "24",
                    "severity": "error",
                    "message": "GenericWhitespace '<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "66",
                    "column": "40",
                    "severity": "error",
                    "message": "GenericWhitespace '>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "67",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/748/DefaultMessageExecutionContext.java\nindex 0128c9c47f6..ed7c70a6439 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/748/DefaultMessageExecutionContext.java\n@@ -63,9 +63,8 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n                        });\n     }\n \n-\n-\n-    public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n+    public Optional<Map< String,Object >> getMessagePayload\n+      ( DelegateExecution execution) {\n         return messagePayloadMappingProvider.getMessagePayload(execution);\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/748/DefaultMessageExecutionContext.java\nindex 0128c9c47f6..88d0012b340 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/748/DefaultMessageExecutionContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/748/DefaultMessageExecutionContext.java\n@@ -63,10 +63,9 @@ public class DefaultMessageExecutionContext implements MessageExecutionContext {\n                        });\n     }\n \n-\n-\n-    public Optional<Map<String, Object>> getMessagePayload(DelegateExecution execution) {\n-        return messagePayloadMappingProvider.getMessagePayload(execution);\n+    public Optional<Map<String, Object>>\n+            getMessagePayload (DelegateExecution execution) {\n+         return messagePayloadMappingProvider.getMessagePayload(execution);\n     }\n \n     @Override\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}