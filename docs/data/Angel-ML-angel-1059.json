{
    "project_name": "Angel-ML-angel",
    "violation_id": "1059",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1059/LinearRegressionTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1059/LinearRegressionTask.java\nindex 651f2aff2b1..53d6fc1c867 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1059/LinearRegressionTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1059/LinearRegressionTask.java\n@@ -30,57 +30,57 @@ import com.tencent.angel.worker.task.TrainTask;\n import com.tencent.angel.worker.task.TaskContext;\n \n public class LinearRegressionTask extends TrainTask<LongWritable, Text> {\n-  private final int dimension;\n-\n-  public LinearRegressionTask(TaskContext taskContext) throws IOException {\n-    super(taskContext);\n-    dimension =\n-        taskContext.getConf().getInt(AngelConfiguration.ANGEL_LINEARREGRESSION_SGD_MAX_DIM,\n-            AngelConfiguration.DEFAULT_ANGEL_LINEARREGRESSION_SGD_MAX_DIM);\n-  }\n-\n-  private static final Log LOG = LogFactory.getLog(LinearRegressionTask.class);\n-  private boolean addIntercept;\n-\n-  // private final boolean isTest = true;\n-\n-  /**\n-   * @throws Exception\n-   */\n-  @Override\n-  public void run(TaskContext taskContext) throws Exception {\n-    LOG.debug(\"------SparseLRTask starts ruuning------\");\n-    LinearRegressionModel model = new LinearRegressionModel(taskContext.getConf());\n-    model.train(taskContext, trainDataStorage);\n-  }\n-\n-  @Override\n-  public LabeledData parse(LongWritable key, Text line) {\n-    if (null == line) {\n-      return null;\n+    private final int dimension;\n+\n+    public LinearRegressionTask(TaskContext taskContext) throws IOException {\n+        super(taskContext);\n+        dimension =\n+                taskContext.getConf().getInt(AngelConfiguration.ANGEL_LINEARREGRESSION_SGD_MAX_DIM,\n+                        AngelConfiguration.DEFAULT_ANGEL_LINEARREGRESSION_SGD_MAX_DIM);\n     }\n \n-    String[] splits = line.toString().split(\",\");\n+    private static final Log LOG = LogFactory.getLog(LinearRegressionTask.class);\n+    private boolean addIntercept;\n+\n+    // private final boolean isTest = true;\n \n-    if (splits.length < 1) {\n-      return null;\n+    /**\n+     * @throws Exception\n+     */\n+    @Override\n+    public void run(TaskContext taskContext) throws Exception {\n+        LOG.debug(\"------SparseLRTask starts ruuning------\");\n+        LinearRegressionModel model = new LinearRegressionModel(taskContext.getConf());\n+        model.train(taskContext, trainDataStorage);\n     }\n \n-    SparseDummyVector x = new SparseDummyVector(dimension, splits.length + 1);\n+    @Override\n+    public LabeledData parse(LongWritable key, Text line) {\n+        if (null == line) {\n+            return null;\n+        }\n \n-    double y = Double.parseDouble(splits[0]);\n+        String[] splits = line.toString().split(\",\");\n \n-    for (int i = 1; i < splits.length; i++) {\n-      int index = Integer.parseInt(splits[i]);\n-      x.set(index, 1);\n-    }\n+        if (splits.length < 1) {\n+            return null;\n+        }\n \n-    if (addIntercept) {\n-      x.set(dimension, 1);\n-    }\n+        SparseDummyVector x = new SparseDummyVector(dimension, splits.length + 1);\n \n-    LabeledData result = new LabeledData(x, y);\n+        double y = Double.parseDouble(splits[0]);\n \n-    return result;\n-  }\n+        for (int i = 1; i < splits.length; i++) {\n+            int index = Integer.parseInt(splits[i]);\n+            x.set(index, 1);\n+        }\n+\n+        if (addIntercept) {\n+            x.set(dimension, 1);\n+        }\n+\n+        LabeledData result = new LabeledData(x, y);\n+\n+        return result;\n+    }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1059/LinearRegressionTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1059/LinearRegressionTask.java\nindex 651f2aff2b1..70f69e5141f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1059/LinearRegressionTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1059/LinearRegressionTask.java\n@@ -83,4 +83,4 @@ public class LinearRegressionTask extends TrainTask<LongWritable, Text> {\n \n     return result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1059/LinearRegressionTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1059/LinearRegressionTask.java\nindex 651f2aff2b1..5a327906839 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1059/LinearRegressionTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/1059/LinearRegressionTask.java\n@@ -17,26 +17,25 @@\n package com.tencent.angel.ml.algorithm.regression;\n \n import java.io.IOException;\n-\n import com.tencent.angel.ml.feature.LabeledData;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.io.LongWritable;\n import org.apache.hadoop.io.Text;\n-\n import com.tencent.angel.conf.AngelConfiguration;\n import com.tencent.angel.ml.math.vector.SparseDummyVector;\n import com.tencent.angel.worker.task.TrainTask;\n import com.tencent.angel.worker.task.TaskContext;\n \n public class LinearRegressionTask extends TrainTask<LongWritable, Text> {\n+\n   private final int dimension;\n \n-  public LinearRegressionTask(TaskContext taskContext) throws IOException {\n+  public LinearRegressionTask(TaskContext taskContext)\n+  throws IOException {\n     super(taskContext);\n-    dimension =\n-        taskContext.getConf().getInt(AngelConfiguration.ANGEL_LINEARREGRESSION_SGD_MAX_DIM,\n-            AngelConfiguration.DEFAULT_ANGEL_LINEARREGRESSION_SGD_MAX_DIM);\n+    dimension = taskContext.getConf().getInt(\n+      AngelConfiguration.ANGEL_LINEARREGRESSION_SGD_MAX_DIM, AngelConfiguration.DEFAULT_ANGEL_LINEARREGRESSION_SGD_MAX_DIM);\n   }\n \n   private static final Log LOG = LogFactory.getLog(LinearRegressionTask.class);\n@@ -47,6 +46,7 @@ public class LinearRegressionTask extends TrainTask<LongWritable, Text> {\n   /**\n    * @throws Exception\n    */\n+\n   @Override\n   public void run(TaskContext taskContext) throws Exception {\n     LOG.debug(\"------SparseLRTask starts ruuning------\");\n@@ -61,15 +61,12 @@ public class LinearRegressionTask extends TrainTask<LongWritable, Text> {\n     }\n \n     String[] splits = line.toString().split(\",\");\n-\n     if (splits.length < 1) {\n       return null;\n     }\n \n     SparseDummyVector x = new SparseDummyVector(dimension, splits.length + 1);\n-\n     double y = Double.parseDouble(splits[0]);\n-\n     for (int i = 1; i < splits.length; i++) {\n       int index = Integer.parseInt(splits[i]);\n       x.set(index, 1);\n@@ -80,7 +77,7 @@ public class LinearRegressionTask extends TrainTask<LongWritable, Text> {\n     }\n \n     LabeledData result = new LabeledData(x, y);\n-\n     return result;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}