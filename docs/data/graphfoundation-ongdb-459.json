{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "459",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/459/RelationshipPropertyExistenceException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/459/RelationshipPropertyExistenceException.java\nindex 0d64721afbf..183b8bb86d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/459/RelationshipPropertyExistenceException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/459/RelationshipPropertyExistenceException.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.exceptions.schema;\n \n import org.neo4j.internal.kernel.api.TokenNameLookup;\n@@ -28,24 +29,24 @@ import static java.lang.String.format;\n \n public class RelationshipPropertyExistenceException extends ConstraintValidationException\n {\n-    private final RelationTypeSchemaDescriptor schema;\n-    private final long relationshipId;\n+  private final RelationTypeSchemaDescriptor schema;\n+  private final long relationshipId;\n \n-    public RelationshipPropertyExistenceException(\n-            RelationTypeSchemaDescriptor schema, ConstraintValidationException.Phase phase, long relationshipId )\n-    {\n-        super( ConstraintDescriptorFactory.existsForSchema( schema ),\n-                phase, format( \"Relationship(%s)\", relationshipId ) );\n-        this.schema = schema;\n-        this.relationshipId = relationshipId;\n-    }\n+  public RelationshipPropertyExistenceException(\n+      RelationTypeSchemaDescriptor schema, ConstraintValidationException.Phase phase, long relationshipId)\n+  {\n+    super(ConstraintDescriptorFactory.existsForSchema(schema),\n+        phase, format(\"Relationship(%s)\", relationshipId));\n+    this.schema = schema;\n+    this.relationshipId = relationshipId;\n+  }\n \n-    @Override\n-    public String getUserMessage( TokenNameLookup tokenNameLookup )\n-    {\n-        return format( \"Relationship(%s) with type `%s` must have the property `%s`\",\n-                relationshipId,\n-                tokenNameLookup.relationshipTypeGetName( schema.getRelTypeId() ),\n-                tokenNameLookup.propertyKeyGetName( schema.getPropertyId() ) );\n-    }\n+  @Override\n+  public String getUserMessage(TokenNameLookup tokenNameLookup)\n+  {\n+    return format(\"Relationship(%s) with type `%s` must have the property `%s`\",\n+        relationshipId,\n+        tokenNameLookup.relationshipTypeGetName(schema.getRelTypeId()),\n+        tokenNameLookup.propertyKeyGetName(schema.getPropertyId()));\n+  }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/459/RelationshipPropertyExistenceException.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/459/RelationshipPropertyExistenceException.java\nindex 0d64721afbf..be9e5c4ed76 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/459/RelationshipPropertyExistenceException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/459/RelationshipPropertyExistenceException.java\n@@ -31,12 +31,11 @@ public class RelationshipPropertyExistenceException extends ConstraintValidation\n     private final RelationTypeSchemaDescriptor schema;\n     private final long relationshipId;\n \n-    public RelationshipPropertyExistenceException(\n-            RelationTypeSchemaDescriptor schema, ConstraintValidationException.Phase phase, long relationshipId )\n+    public RelationshipPropertyExistenceException( RelationTypeSchemaDescriptor schema, ConstraintValidationException.Phase phase, long relationshipId )\n     {\n         super( ConstraintDescriptorFactory.existsForSchema( schema ),\n                 phase, format( \"Relationship(%s)\", relationshipId ) );\n-        this.schema = schema;\n+this.schema = schema;\n         this.relationshipId = relationshipId;\n     }\n \n@@ -45,7 +44,6 @@ public class RelationshipPropertyExistenceException extends ConstraintValidation\n     {\n         return format( \"Relationship(%s) with type `%s` must have the property `%s`\",\n                 relationshipId,\n-                tokenNameLookup.relationshipTypeGetName( schema.getRelTypeId() ),\n-                tokenNameLookup.propertyKeyGetName( schema.getPropertyId() ) );\n+                tokenNameLookup.relationshipTypeGetName( schema.getRelTypeId() ), tokenNameLookup.propertyKeyGetName( schema.getPropertyId() ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}