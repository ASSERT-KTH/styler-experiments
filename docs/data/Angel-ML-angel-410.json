{
    "project_name": "Angel-ML-angel",
    "violation_id": "410",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/410/KmeansUpdateFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/410/KmeansUpdateFunc.java\nindex 794ed284312..dce3a1a9a58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/410/KmeansUpdateFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/410/KmeansUpdateFunc.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.psf.optimizer;\n \n import com.tencent.angel.ml.math2.vector.Vector;\n@@ -36,7 +37,7 @@ public class KmeansUpdateFunc extends OptMMUpdateFunc {\n     }\n \n     public KmeansUpdateFunc(int matId, int factor, int batchSize) {\n-        super(matId, new int[]{factor}, new double[]{batchSize});\n+        super(matId, new int[] {factor}, new double[] {batchSize});\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/410/KmeansUpdateFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/410/KmeansUpdateFunc.java\nindex 794ed284312..66526f5c8c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/410/KmeansUpdateFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/410/KmeansUpdateFunc.java\n@@ -25,41 +25,41 @@ import org.apache.commons.logging.LogFactory;\n \n public class KmeansUpdateFunc extends OptMMUpdateFunc {\n \n-    private static final Log LOG = LogFactory.getLog(KmeansUpdateFunc.class);\n+  private static final Log LOG = LogFactory.getLog(KmeansUpdateFunc.class);\n \n     public KmeansUpdateFunc() {\n-        super();\n+  super();\n     }\n \n     public KmeansUpdateFunc(int matId, int factor) {\n-        this(matId, factor, 1);\n+  this(matId, factor, 1);\n     }\n \n     public KmeansUpdateFunc(int matId, int factor, int batchSize) {\n-        super(matId, new int[]{factor}, new double[]{batchSize});\n+  super(matId, new int[]{factor}, new double[]{batchSize});\n     }\n \n     @Override\n     void update(RowBasedPartition partition, int factor, double[] scalars) {\n-        double batchSize = scalars[0];\n+  double batchSize = scalars[0];\n \n         for (int f = 0; f < factor; f++) {\n-            ServerRow gradientServerRow = partition.getRow(f + factor);\n+  ServerRow gradientServerRow = partition.getRow(f + factor);\n             try {\n-                gradientServerRow.startWrite();\n+  gradientServerRow.startWrite();\n                 Vector weight = ServerRowUtils.getVector(partition.getRow(f));\n                 Vector gradient = ServerRowUtils.getVector(gradientServerRow);\n \n                 if (batchSize > 1) {\n-                    gradient.idiv(batchSize);\n+  gradient.idiv(batchSize);\n                 }\n \n                 weight.iadd(gradient);\n \n                 gradient.clear();\n             } finally {\n-                gradientServerRow.endWrite();\n+  gradientServerRow.endWrite();\n             }\n-        }\n-    }\n-}\n+  }\n+  }\n+  }\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/410/KmeansUpdateFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/410/KmeansUpdateFunc.java\nindex 794ed284312..b6a7971237e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/410/KmeansUpdateFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/410/KmeansUpdateFunc.java\n@@ -25,41 +25,39 @@ import org.apache.commons.logging.LogFactory;\n \n public class KmeansUpdateFunc extends OptMMUpdateFunc {\n \n-    private static final Log LOG = LogFactory.getLog(KmeansUpdateFunc.class);\n-\n-    public KmeansUpdateFunc() {\n-        super();\n-    }\n-\n-    public KmeansUpdateFunc(int matId, int factor) {\n-        this(matId, factor, 1);\n-    }\n-\n-    public KmeansUpdateFunc(int matId, int factor, int batchSize) {\n-        super(matId, new int[]{factor}, new double[]{batchSize});\n-    }\n-\n-    @Override\n-    void update(RowBasedPartition partition, int factor, double[] scalars) {\n-        double batchSize = scalars[0];\n-\n-        for (int f = 0; f < factor; f++) {\n-            ServerRow gradientServerRow = partition.getRow(f + factor);\n-            try {\n-                gradientServerRow.startWrite();\n-                Vector weight = ServerRowUtils.getVector(partition.getRow(f));\n-                Vector gradient = ServerRowUtils.getVector(gradientServerRow);\n-\n-                if (batchSize > 1) {\n-                    gradient.idiv(batchSize);\n-                }\n-\n-                weight.iadd(gradient);\n-\n-                gradient.clear();\n-            } finally {\n-                gradientServerRow.endWrite();\n-            }\n+  private static final Log LOG = LogFactory.getLog(KmeansUpdateFunc.class);\n+\n+  public KmeansUpdateFunc() {\n+    super();\n+  }\n+\n+  public KmeansUpdateFunc(int matId, int factor) {\n+    this(matId, factor, 1);\n+  }\n+\n+  public KmeansUpdateFunc(int matId, int factor, int batchSize) {\n+    super(matId, new int[]{factor}, new double[]{batchSize});\n+  }\n+\n+  @Override\n+  void update(\n+    RowBasedPartition partition, int factor, double[] scalars) {\n+    double batchSize = scalars[0];\n+    for (int f = 0; f < factor; f++) {\n+      ServerRow gradientServerRow = partition.getRow(f + factor);\n+      try {\n+        gradientServerRow.startWrite();\n+        Vector weight = ServerRowUtils.getVector(partition.getRow(f));\n+        Vector gradient = ServerRowUtils.getVector(gradientServerRow);\n+        if (batchSize > 1) {\n+          gradient.idiv(batchSize);\n         }\n+        weight.iadd(gradient);\n+        gradient.clear();\n+      } finally {\n+        gradientServerRow.endWrite();\n+      }\n     }\n-}\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}