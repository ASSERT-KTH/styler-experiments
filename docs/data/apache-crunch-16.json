{
    "project_name": "apache-crunch",
    "violation_id": "16",
    "information": {
        "violations": [
            {
                "line": "53",
                "column": "98",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    workingNode = node;\n    if (!target.accept(this, node.getPType())) {\n      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" +\n          node.getPType().getClass());\n    }\n  }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "54",
                    "column": "7",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-crunch/styler/05_predictions/final/files-repaired/16/MSCROutputHandler.java\nindex 24090e7fc75..fe7b74629d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-crunch/styler/05_predictions/final/files-repaired/16/MSCROutputHandler.java\n@@ -50,8 +50,8 @@ public class MSCROutputHandler implements OutputHandler {\n   public void configureNode(DoNode node, Target target) {\n     workingNode = node;\n     if (!target.accept(this, node.getPType())) {\n-      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" +\n-          node.getPType().getClass());\n+      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \"\n+      +node.getPType().getClass());\n     }\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "54",
                    "column": "98",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/checkstyle_idea/16/MSCROutputHandler.java\nindex 24090e7fc75..fa735b88d39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/checkstyle_idea/16/MSCROutputHandler.java\n@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.crunch.impl.mr.plan;\n \n import java.util.Map;\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/naturalize/16/MSCROutputHandler.java\nindex 24090e7fc75..557145348b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/naturalize/16/MSCROutputHandler.java\n@@ -50,8 +50,7 @@ public class MSCROutputHandler implements OutputHandler {\n   public void configureNode(DoNode node, Target target) {\n     workingNode = node;\n     if (!target.accept(this, node.getPType())) {\n-      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" +\n-          node.getPType().getClass());\n+      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" + node.getPType().getClass());\n     }\n   }\n \n@@ -78,4 +77,4 @@ public class MSCROutputHandler implements OutputHandler {\n   public Map<Integer, PathTarget> getMultiPaths() {\n     return multiPaths;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/codebuff/16/MSCROutputHandler.java\nindex 24090e7fc75..f509f6ed98f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/codebuff/16/MSCROutputHandler.java\n@@ -18,7 +18,6 @@\n package org.apache.crunch.impl.mr.plan;\n \n import java.util.Map;\n-\n import org.apache.crunch.CrunchRuntimeException;\n import org.apache.crunch.Target;\n import org.apache.crunch.io.MapReduceTarget;\n@@ -27,7 +26,6 @@ import org.apache.crunch.io.PathTarget;\n import org.apache.crunch.types.PType;\n import org.apache.hadoop.fs.Path;\n import org.apache.hadoop.mapreduce.Job;\n-\n import com.google.common.collect.Maps;\n \n public class MSCROutputHandler implements OutputHandler {\n@@ -35,7 +33,6 @@ public class MSCROutputHandler implements OutputHandler {\n   private final Job job;\n   private final Path path;\n   private final boolean mapOnlyJob;\n-\n   private DoNode workingNode;\n   private Map<Integer, PathTarget> multiPaths;\n   private int jobCount;\n@@ -50,8 +47,7 @@ public class MSCROutputHandler implements OutputHandler {\n   public void configureNode(DoNode node, Target target) {\n     workingNode = node;\n     if (!target.accept(this, node.getPType())) {\n-      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" +\n-          node.getPType().getClass());\n+      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" + node.getPType().getClass());\n     }\n   }\n \n@@ -60,14 +56,12 @@ public class MSCROutputHandler implements OutputHandler {\n       if (target instanceof PathTarget) {\n         multiPaths.put(jobCount, (PathTarget) target);\n       }\n-\n       String name = PlanningParameters.MULTI_OUTPUT_PREFIX + jobCount;\n       jobCount++;\n       workingNode.setOutputName(name);\n       ((MapReduceTarget) target).configureForMapReduce(job, ptype, path, name);\n       return true;\n     }\n-\n     return false;\n   }\n \n@@ -78,4 +72,4 @@ public class MSCROutputHandler implements OutputHandler {\n   public Map<Integer, PathTarget> getMultiPaths() {\n     return multiPaths;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "54",
                    "column": "7",
                    "severity": "warning",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/styler/05_predictions/random/files-repaired/16/MSCROutputHandler.java\nindex 24090e7fc75..fe7b74629d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/styler/05_predictions/random/files-repaired/16/MSCROutputHandler.java\n@@ -50,8 +50,8 @@ public class MSCROutputHandler implements OutputHandler {\n   public void configureNode(DoNode node, Target target) {\n     workingNode = node;\n     if (!target.accept(this, node.getPType())) {\n-      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" +\n-          node.getPType().getClass());\n+      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \"\n+      +node.getPType().getClass());\n     }\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "53",
                    "column": "97",
                    "severity": "warning",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "53",
                    "column": "97",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/styler/05_predictions/three_grams/files-repaired/16/MSCROutputHandler.java\nindex 24090e7fc75..afba8458fd2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/violations/16/MSCROutputHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-crunch/styler/05_predictions/three_grams/files-repaired/16/MSCROutputHandler.java\n@@ -50,7 +50,7 @@ public class MSCROutputHandler implements OutputHandler {\n   public void configureNode(DoNode node, Target target) {\n     workingNode = node;\n     if (!target.accept(this, node.getPType())) {\n-      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \" +\n+      throw new CrunchRuntimeException(\"Target \" + target + \" cannot serialize PType of class: \"+\n           node.getPType().getClass());\n     }\n   }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}