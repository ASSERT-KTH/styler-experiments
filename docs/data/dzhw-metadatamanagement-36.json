{
    "project_name": "dzhw-metadatamanagement",
    "violation_id": "36",
    "information": {
        "violations": [
            {
                "line": "20",
                "column": "28",
                "severity": "error",
                "message": "'}' at column 28 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "public final class SecurityUtils {\n\n  private SecurityUtils() {}\n\n  /**\n   * Get the login of the current user.",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/36/SecurityUtils.java\nindex 3567ef6b4e6..6f5c394a3bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/dzhw-metadatamanagement/styler/05_predictions/final/files-repaired/36/SecurityUtils.java\n@@ -17,7 +17,9 @@ import eu.dzhw.fdz.metadatamanagement.usermanagement.domain.User;\n  */\n public final class SecurityUtils {\n \n-  private SecurityUtils() {}\n+  private SecurityUtils() {\n+\n+  }\n \n   /**\n    * Get the login of the current user.\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/36/SecurityUtils.java\nindex 3567ef6b4e6..5a70caecd95 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/checkstyle_idea/36/SecurityUtils.java\n@@ -17,7 +17,8 @@ import eu.dzhw.fdz.metadatamanagement.usermanagement.domain.User;\n  */\n public final class SecurityUtils {\n \n-  private SecurityUtils() {}\n+  private SecurityUtils() {\n+  }\n \n   /**\n    * Get the login of the current user.\n@@ -97,9 +98,10 @@ public final class SecurityUtils {\n     return user.getAuthorities().stream()\n         .anyMatch(userAuthority -> userAuthority.getName().equals(authority));\n   }\n-  \n+\n   /**\n    * Check whether the user doing the current request has been authenticated anonymously.\n+   *\n    * @return true if the user has been authenticated anonymously.\n    */\n   public static boolean isUserAnonymous() {\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "20",
                    "column": "28",
                    "severity": "error",
                    "message": "'}' at column 28 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/naturalize/36/SecurityUtils.java\nindex 3567ef6b4e6..e532d8966a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/naturalize/36/SecurityUtils.java\n@@ -109,4 +109,4 @@ public final class SecurityUtils {\n     }\n     return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "'User' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/36/SecurityUtils.java\nindex 3567ef6b4e6..d1cc70581d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/codebuff/36/SecurityUtils.java\n@@ -1,7 +1,6 @@\n package eu.dzhw.fdz.metadatamanagement.usermanagement.security;\n \n import java.util.Collection;\n-\n import org.springframework.security.authentication.AnonymousAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n@@ -9,19 +8,21 @@ import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.userdetails.UserDetails;\n-\n import eu.dzhw.fdz.metadatamanagement.usermanagement.domain.User;\n \n /**\n  * Utility class for Spring Security.\n  */\n-public final class SecurityUtils {\n \n-  private SecurityUtils() {}\n+\n+public final class SecurityUtils {\n+  private SecurityUtils() {\n+  }\n \n   /**\n    * Get the login of the current user.\n    */\n+\n   public static String getCurrentUserLogin() {\n     SecurityContext securityContext = SecurityContextHolder.getContext();\n     Authentication authentication = securityContext.getAuthentication();\n@@ -31,9 +32,10 @@ public final class SecurityUtils {\n         UserDetails springSecurityUser = (UserDetails) authentication.getPrincipal();\n         userName = springSecurityUser.getUsername();\n       } else if (authentication.getPrincipal() instanceof String) {\n-        userName = (String) authentication.getPrincipal();\n-      }\n+               userName = (String) authentication.getPrincipal();\n+             }\n     }\n+\n     return userName;\n   }\n \n@@ -42,10 +44,10 @@ public final class SecurityUtils {\n    *\n    * @return true if the user is authenticated, false otherwise\n    */\n+\n   public static boolean isAuthenticated() {\n     SecurityContext securityContext = SecurityContextHolder.getContext();\n-    Collection<? extends GrantedAuthority> authorities =\n-        securityContext.getAuthentication().getAuthorities();\n+    Collection<? extends GrantedAuthority> authorities = securityContext.getAuthentication().getAuthorities();\n     if (authorities != null) {\n       for (GrantedAuthority authority : authorities) {\n         if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {\n@@ -53,6 +55,7 @@ public final class SecurityUtils {\n         }\n       }\n     }\n+\n     return true;\n   }\n \n@@ -61,6 +64,7 @@ public final class SecurityUtils {\n    *\n    * @return the current user id\n    */\n+\n   public static String getCurrentUserId() {\n     return getCurrentUser().getId();\n   }\n@@ -70,6 +74,7 @@ public final class SecurityUtils {\n    *\n    * @return the current user\n    */\n+\n   public static CustomUserDetails getCurrentUser() {\n     SecurityContext securityContext = SecurityContextHolder.getContext();\n     Authentication authentication = securityContext.getAuthentication();\n@@ -83,6 +88,7 @@ public final class SecurityUtils {\n    * If the current user has a specific authority (security role). The name of this method comes\n    * from the isUserInRole() method in the Servlet API.\n    */\n+\n   public static boolean isUserInRole(String authority) {\n     SecurityContext securityContext = SecurityContextHolder.getContext();\n     Authentication authentication = securityContext.getAuthentication();\n@@ -90,23 +96,28 @@ public final class SecurityUtils {\n       UserDetails springSecurityUser = (UserDetails) authentication.getPrincipal();\n       return springSecurityUser.getAuthorities().contains(new SimpleGrantedAuthority(authority));\n     }\n+\n     return false;\n   }\n \n-  public static boolean isUserInRole(String authority, User user) {\n+  public static boolean isUserInRole(String authority,\n+    User user) {\n     return user.getAuthorities().stream()\n-        .anyMatch(userAuthority -> userAuthority.getName().equals(authority));\n+                                .anyMatch(userAuthority -> userAuthority.getName().equals(authority));\n   }\n   \n   /**\n    * Check whether the user doing the current request has been authenticated anonymously.\n    * @return true if the user has been authenticated anonymously.\n    */\n+\n   public static boolean isUserAnonymous() {\n     Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n-    if (authentication == null || authentication instanceof AnonymousAuthenticationToken) {\n+    if (authentication == null\n+        || authentication instanceof AnonymousAuthenticationToken) {\n       return true;\n     }\n+\n     return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/36/SecurityUtils.java\nindex 3567ef6b4e6..6f5c394a3bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/random/files-repaired/36/SecurityUtils.java\n@@ -17,7 +17,9 @@ import eu.dzhw.fdz.metadatamanagement.usermanagement.domain.User;\n  */\n public final class SecurityUtils {\n \n-  private SecurityUtils() {}\n+  private SecurityUtils() {\n+\n+  }\n \n   /**\n    * Get the login of the current user.\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "24",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/three_grams/files-repaired/36/SecurityUtils.java\nindex 3567ef6b4e6..32afd66db16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/violations/36/SecurityUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/dzhw-metadatamanagement/styler/05_predictions/three_grams/files-repaired/36/SecurityUtils.java\n@@ -17,9 +17,8 @@ import eu.dzhw.fdz.metadatamanagement.usermanagement.domain.User;\n  */\n public final class SecurityUtils {\n \n-  private SecurityUtils() {}\n-\n-  /**\n+  private SecurityUtils() {\n+  }/**\n    * Get the login of the current user.\n    */\n   public static String getCurrentUserLogin() {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}