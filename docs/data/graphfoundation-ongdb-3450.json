{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "3450",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3450/QueueDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3450/QueueDistribution.java\nindex a771a27357e..4b8d53c31e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3450/QueueDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3450/QueueDistribution.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import org.neo4j.consistency.checking.full.RecordDistributor.RecordConsumer;\n@@ -30,97 +31,95 @@ import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n  */\n public interface QueueDistribution\n {\n-    <RECORD> QueueDistributor<RECORD> distributor( long recordsPerCpu, int numberOfThreads );\n+  <RECORD> QueueDistributor<RECORD> distributor(long recordsPerCpu, int numberOfThreads);\n+\n+  /**\n+   * Distributes records into {@link RecordConsumer}.\n+   */\n+  interface QueueDistributor<RECORD>\n+  {\n+    void distribute(RECORD record, RecordConsumer<RECORD> consumer) throws InterruptedException;\n+  }\n \n-    /**\n-     * Distributes records into {@link RecordConsumer}.\n-     */\n-    interface QueueDistributor<RECORD>\n+  /**\n+   * Distributes records round-robin style to all queues.\n+   */\n+  QueueDistribution ROUND_ROBIN = new QueueDistribution()\n+  {\n+    @Override\n+    public <RECORD> QueueDistributor<RECORD> distributor(long recordsPerCpu, int numberOfThreads)\n     {\n-        void distribute( RECORD record, RecordConsumer<RECORD> consumer ) throws InterruptedException;\n+      return new RoundRobinQueueDistributor<>(numberOfThreads);\n     }\n+  };\n \n-    /**\n-     * Distributes records round-robin style to all queues.\n-     */\n-    QueueDistribution ROUND_ROBIN = new QueueDistribution()\n+  /**\n+   * Distributes {@link RelationshipRecord} depending on the start/end node ids.\n+   */\n+  QueueDistribution RELATIONSHIPS = new QueueDistribution()\n+  {\n+    @Override\n+    public QueueDistributor<RelationshipRecord> distributor(long recordsPerCpu, int numberOfThreads)\n     {\n-        @Override\n-        public <RECORD> QueueDistributor<RECORD> distributor( long recordsPerCpu, int numberOfThreads )\n-        {\n-            return new RoundRobinQueueDistributor<>( numberOfThreads );\n-        }\n-    };\n+      return new RelationshipNodesQueueDistributor(recordsPerCpu, numberOfThreads);\n+    }\n+  };\n \n-    /**\n-     * Distributes {@link RelationshipRecord} depending on the start/end node ids.\n-     */\n-    QueueDistribution RELATIONSHIPS = new QueueDistribution()\n+  class RoundRobinQueueDistributor<RECORD> implements QueueDistributor<RECORD>\n+  {\n+    private final int numberOfThreads;\n+    private int nextQIndex;\n+\n+    RoundRobinQueueDistributor(int numberOfThreads)\n     {\n-        @Override\n-        public QueueDistributor<RelationshipRecord> distributor( long recordsPerCpu, int numberOfThreads )\n-        {\n-            return new RelationshipNodesQueueDistributor( recordsPerCpu, numberOfThreads );\n-        }\n-    };\n+      this.numberOfThreads = numberOfThreads;\n+    }\n \n-    class RoundRobinQueueDistributor<RECORD> implements QueueDistributor<RECORD>\n+    @Override\n+    public void distribute(RECORD record, RecordConsumer<RECORD> consumer) throws InterruptedException\n     {\n-        private final int numberOfThreads;\n-        private int nextQIndex;\n+      try\n+      {\n+        consumer.accept(record, nextQIndex);\n+      } finally\n+      {\n+        nextQIndex = (nextQIndex + 1) % numberOfThreads;\n+      }\n+    }\n+  }\n \n-        RoundRobinQueueDistributor( int numberOfThreads )\n-        {\n-            this.numberOfThreads = numberOfThreads;\n-        }\n+  class RelationshipNodesQueueDistributor implements QueueDistributor<RelationshipRecord>\n+  {\n+    private final long recordsPerCpu;\n+    private final int maxAvailableThread;\n+    private final int numberOfThreads;\n \n-        @Override\n-        public void distribute( RECORD record, RecordConsumer<RECORD> consumer ) throws InterruptedException\n-        {\n-            try\n-            {\n-                consumer.accept( record, nextQIndex );\n-            }\n-            finally\n-            {\n-                nextQIndex = (nextQIndex + 1) % numberOfThreads;\n-            }\n-        }\n+    RelationshipNodesQueueDistributor(long recordsPerCpu, int numberOfThreads)\n+    {\n+      this.recordsPerCpu = recordsPerCpu;\n+      this.numberOfThreads = numberOfThreads;\n+      this.maxAvailableThread = numberOfThreads - 1;\n     }\n \n-    class RelationshipNodesQueueDistributor implements QueueDistributor<RelationshipRecord>\n+    @Override\n+    public void distribute(RelationshipRecord relationship, RecordConsumer<RelationshipRecord> consumer)\n+        throws InterruptedException\n     {\n-        private final long recordsPerCpu;\n-        private final int maxAvailableThread;\n-        private final int numberOfThreads;\n-\n-        RelationshipNodesQueueDistributor( long recordsPerCpu, int numberOfThreads )\n-        {\n-            this.recordsPerCpu = recordsPerCpu;\n-            this.numberOfThreads = numberOfThreads;\n-            this.maxAvailableThread = numberOfThreads - 1;\n-        }\n-\n-        @Override\n-        public void distribute( RelationshipRecord relationship, RecordConsumer<RelationshipRecord> consumer )\n-                throws InterruptedException\n+      int qIndex1 = (int) Math.min(maxAvailableThread, Math.abs(relationship.getFirstNode()) / recordsPerCpu);\n+      int qIndex2 = (int) Math.min(maxAvailableThread, Math.abs(relationship.getSecondNode()) / recordsPerCpu);\n+      try\n+      {\n+        consumer.accept(relationship, qIndex1);\n+        if (qIndex1 != qIndex2)\n         {\n-            int qIndex1 = (int) Math.min( maxAvailableThread, Math.abs( relationship.getFirstNode() ) / recordsPerCpu );\n-            int qIndex2 = (int) Math.min( maxAvailableThread, Math.abs( relationship.getSecondNode() ) / recordsPerCpu );\n-            try\n-            {\n-                consumer.accept( relationship, qIndex1 );\n-                if ( qIndex1 != qIndex2 )\n-                {\n-                    consumer.accept( relationship, qIndex2 );\n-                }\n-            }\n-            catch ( ArrayIndexOutOfBoundsException e )\n-            {\n-                throw Exceptions.withMessage( e, e.getMessage() + \", recordsPerCPU:\" + recordsPerCpu +\n-                        \", relationship:\" + relationship +\n-                        \", number of threads: \" + numberOfThreads );\n-            }\n+          consumer.accept(relationship, qIndex2);\n         }\n+      } catch (ArrayIndexOutOfBoundsException e)\n+      {\n+        throw Exceptions.withMessage(e, e.getMessage() + \", recordsPerCPU:\" + recordsPerCpu +\n+            \", relationship:\" + relationship +\n+            \", number of threads: \" + numberOfThreads);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 112
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "107",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3450/QueueDistribution.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3450/QueueDistribution.java\nindex a771a27357e..1575ff96819 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3450/QueueDistribution.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3450/QueueDistribution.java\n@@ -83,7 +83,7 @@ public interface QueueDistribution\n             }\n             finally\n             {\n-                nextQIndex = (nextQIndex + 1) % numberOfThreads;\n+                nextQIndex = (nextQIndex + 1 ) % numberOfThreads;\n             }\n         }\n     }\n@@ -102,11 +102,10 @@ public interface QueueDistribution\n         }\n \n         @Override\n-        public void distribute( RelationshipRecord relationship, RecordConsumer<RelationshipRecord> consumer )\n-                throws InterruptedException\n-        {\n-            int qIndex1 = (int) Math.min( maxAvailableThread, Math.abs( relationship.getFirstNode() ) / recordsPerCpu );\n-            int qIndex2 = (int) Math.min( maxAvailableThread, Math.abs( relationship.getSecondNode() ) / recordsPerCpu );\n+        public void distribute( RelationshipRecord relationship, RecordConsumer<RelationshipRecord> consumer ) throws InterruptedException\n+{\n+            int qIndex1 = ( int) Math.min( maxAvailableThread, Math.abs( relationship.getFirstNode() ) / recordsPerCpu );\n+            int qIndex2 = ( int) Math.min( maxAvailableThread, Math.abs( relationship.getSecondNode() ) / recordsPerCpu );\n             try\n             {\n                 consumer.accept( relationship, qIndex1 );\n@@ -117,10 +116,8 @@ public interface QueueDistribution\n             }\n             catch ( ArrayIndexOutOfBoundsException e )\n             {\n-                throw Exceptions.withMessage( e, e.getMessage() + \", recordsPerCPU:\" + recordsPerCpu +\n-                        \", relationship:\" + relationship +\n-                        \", number of threads: \" + numberOfThreads );\n-            }\n+                throw Exceptions.withMessage( e, e.getMessage() + \", recordsPerCPU:\" + recordsPerCpu + \", relationship:\" + relationship + \", number of threads: \" + numberOfThreads );\n+    }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}