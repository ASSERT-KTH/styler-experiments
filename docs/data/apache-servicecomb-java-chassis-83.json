{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "83",
    "information": {
        "violations": [
            {
                "line": "73",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /*\n      as the data is returned, we can block the thread at a short time. consider that if the multiple verticles were deployed\n      and if we use pull mode and push mode at the same time , we must share a common lock with all methods which would\n      change the config setting\n     */",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/83/ParseConfigUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/83/ParseConfigUtils.java\nindex b20262a554e..47a4e5a53b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/83/ParseConfigUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/83/ParseConfigUtils.java\n@@ -80,7 +80,7 @@ public class ParseConfigUtils {\n       String oldRevision = currentVersionInfo;\n       currentVersionInfo =\n           remoteItems.getOrDefault(\"revision\", new HashMap<>()).getOrDefault(\"version\", \"default\").toString();\n-      //make sure the currentVersionInfo != \"\"\n+//make sure the currentVersionInfo != \"\"\n       currentVersionInfo = currentVersionInfo.equals(\"\") ? \"default\" : currentVersionInfo;\n       //the key revision is not the config setting\n       boolean newVersion = (remoteItems.remove(\"revision\") != null);\n@@ -109,8 +109,7 @@ public class ParseConfigUtils {\n       configLock.lock();\n       if (\"UPDATE\".equals(action.get(\"action\"))) {\n         try {\n-          multiDimensionItems.put((String) action.get(\"key\"), JsonUtils.OBJ_MAPPER\n-              .readValue(action.get(\"value\").toString(), new TypeReference<Map<String, Object>>() {\n+          multiDimensionItems.put((String) action.get(\"key\"), JsonUtils.OBJ_MAPPER.readValue(action.get(\"value\").toString(), new TypeReference<Map<String, Object>>() {\n               }));\n         } catch (IOException e) {\n           LOGGER.error(\"parse config change action fail\");\n@@ -180,4 +179,4 @@ public class ParseConfigUtils {\n     updateHandler.handle(\"set\", itemsModified);\n     updateHandler.handle(\"delete\", itemsDeleted);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/83/ParseConfigUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/83/ParseConfigUtils.java\nindex b20262a554e..1a9e7024786 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/83/ParseConfigUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/83/ParseConfigUtils.java\n@@ -26,19 +26,17 @@ import java.util.Set;\n import java.util.TreeSet;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n-\n import org.apache.servicecomb.config.archaius.sources.ConfigCenterConfigurationSourceImpl.UpdateHandler;\n import org.apache.servicecomb.foundation.common.utils.JsonUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.fasterxml.jackson.core.type.TypeReference;\n \n /**\n  * Created by on 2017/1/5.\n  */\n-public class ParseConfigUtils {\n \n+public class ParseConfigUtils {\n   private static final Logger LOGGER = LoggerFactory.getLogger(ParseConfigUtils.class);\n \n   private static final ParseConfigUtils INSTANCE = new ParseConfigUtils();\n@@ -46,6 +44,7 @@ public class ParseConfigUtils {\n   private LinkedHashMap<String, Map<String, Object>> multiDimensionItems = new LinkedHashMap<>();\n \n   //it's dangerous to make flatItems public\n+\n   private final Map<String, Object> flatItems = new HashMap<>();\n \n   private String currentVersionInfo = \"default\";\n@@ -55,6 +54,7 @@ public class ParseConfigUtils {\n   private Lock configLock = new ReentrantLock();\n \n   //for compatibility with other modules and JunitTest\n+\n   public ParseConfigUtils(UpdateHandler updateHandler) {\n     this.updateHandler = updateHandler;\n   }\n@@ -66,6 +66,7 @@ public class ParseConfigUtils {\n     if (updateHandler == null) {\n       LOGGER.error(\"when init ParseConfigUtils, updateHandler can not be null\");\n     }\n+\n     this.updateHandler = updateHandler;\n   }\n \n@@ -74,22 +75,26 @@ public class ParseConfigUtils {\n       and if we use pull mode and push mode at the same time , we must share a common lock with all methods which would\n       change the config setting\n      */\n+\n   public void refreshConfigItems(Map<String, Map<String, Object>> remoteItems) {\n     try {\n       configLock.lock();\n+\n       String oldRevision = currentVersionInfo;\n-      currentVersionInfo =\n-          remoteItems.getOrDefault(\"revision\", new HashMap<>()).getOrDefault(\"version\", \"default\").toString();\n+      currentVersionInfo = remoteItems.getOrDefault(\"revision\", new HashMap<>()).getOrDefault(\"version\", \"default\")\n+                                                                                .toString();\n       //make sure the currentVersionInfo != \"\"\n       currentVersionInfo = currentVersionInfo.equals(\"\") ? \"default\" : currentVersionInfo;\n       //the key revision is not the config setting\n+\n       boolean newVersion = (remoteItems.remove(\"revision\") != null);\n       multiDimensionItems.clear();\n       multiDimensionItems.putAll(remoteItems);\n       doRefreshItems();\n       if (newVersion) {\n-        LOGGER.info(\"Updating remote config is done. revision has changed from {} to {}\", oldRevision,\n-            currentVersionInfo);\n+        LOGGER.info(\"Updating remote config is done. revision has changed from {} to {}\",\n+oldRevision,\n+currentVersionInfo);\n       }\n     } finally {\n       configLock.unlock();\n@@ -109,12 +114,13 @@ public class ParseConfigUtils {\n       configLock.lock();\n       if (\"UPDATE\".equals(action.get(\"action\"))) {\n         try {\n-          multiDimensionItems.put((String) action.get(\"key\"), JsonUtils.OBJ_MAPPER\n-              .readValue(action.get(\"value\").toString(), new TypeReference<Map<String, Object>>() {\n-              }));\n+          multiDimensionItems.put((String) action.get(\"key\"),\n+JsonUtils.OBJ_MAPPER.readValue(action.get(\"value\").toString(), new TypeReference<Map<String, Object>>() {\n+                                                              }));\n         } catch (IOException e) {\n           LOGGER.error(\"parse config change action fail\");\n         }\n+\n         doRefreshItems();\n       } else if (\"DELETE\".equals(action.get(\"action\"))) {\n         multiDimensionItems.remove(action.get(\"key\"));\n@@ -139,13 +145,14 @@ public class ParseConfigUtils {\n       flatMap.putAll(items.get(\"application\"));\n       keySet.remove(\"application\");\n     }\n+\n     if (!keySet.isEmpty()) {\n       TreeSet<String> sortedKeys = new TreeSet<String>(new Comparator<String>() {\n-        @Override\n-        public int compare(String o1, String o2) {\n-          return o1.length() - o2.length();\n-        }\n-      });\n+                                     @Override\n+                                     public int compare(String o1, String o2) {\n+                                       return o1.length() - o2.length();\n+                                     }\n+                                   });\n       sortedKeys.addAll(keySet);\n       sortedKeys.forEach(key -> flatMap.putAll(items.get(key)));\n     }\n@@ -160,10 +167,12 @@ public class ParseConfigUtils {\n       updateHandler.handle(\"create\", after);\n       return;\n     }\n+\n     if (after == null || after.isEmpty()) {\n       updateHandler.handle(\"delete\", before);\n       return;\n     }\n+\n     for (String itemKey : after.keySet()) {\n       if (!before.containsKey(itemKey)) {\n         itemsCreated.put(itemKey, after.get(itemKey));\n@@ -171,13 +180,15 @@ public class ParseConfigUtils {\n         itemsModified.put(itemKey, after.get(itemKey));\n       }\n     }\n+\n     for (String itemKey : before.keySet()) {\n       if (!after.containsKey(itemKey)) {\n         itemsDeleted.put(itemKey, \"\");\n       }\n     }\n+\n     updateHandler.handle(\"create\", itemsCreated);\n     updateHandler.handle(\"set\", itemsModified);\n     updateHandler.handle(\"delete\", itemsDeleted);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}