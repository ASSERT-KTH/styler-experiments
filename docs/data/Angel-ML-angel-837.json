{
    "project_name": "Angel-ML-angel",
    "violation_id": "837",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 104).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  * https://opensource.org/licenses/BSD-3-Clause\n  *\n  * Unless required by applicable law or agreed to in writing, software distributed under the License is\n  * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/837/PartClockVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/837/PartClockVector.java\nindex 5cb271e9d4c..ee8ace864f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/837/PartClockVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/837/PartClockVector.java\n@@ -1,18 +1,18 @@\n /*\n  * Tencent is pleased to support the open source community by making Angel available.\n-  *\n-  * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n-  *\n-  * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n-  * compliance with the License. You may obtain a copy of the License at\n-  *\n-  * https://opensource.org/licenses/BSD-3-Clause\n-  *\n-  * Unless required by applicable law or agreed to in writing, software distributed under the License is\n-  * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n-  * either express or implied. See the License for the specific language governing permissions and\n-  * limitations under the License.\n-  */\n+ *\n+ * Copyright (C) 2017 THL A29 Limited, a Tencent company. All rights reserved.\n+ *\n+ * Licensed under the BSD 3-Clause License (the \"License\"); you may not use this file except in\n+ * compliance with the License. You may obtain a copy of the License at\n+ *\n+ * https://opensource.org/licenses/BSD-3-Clause\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License is\n+ * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n+ * either express or implied. See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n \n package com.tencent.angel.ps.impl;\n \n@@ -29,135 +29,140 @@ import java.util.concurrent.locks.ReentrantReadWriteLock;\n  * Matrix partition clock vector\n  */\n public class PartClockVector {\n-  private static final Log LOG = LogFactory.getLog(PartClockVector.class);\n-  /**\n-   * Min clock value for this partition\n-   */\n-  private int minClock;\n-\n-  /**\n-   * Task id to clock value map\n-   */\n-  private final Int2IntOpenHashMap taskIndexToClockMap;\n-  private final ReadWriteLock lock;\n-\n-  /**\n-   * Total task number\n-   */\n-  private final int taskNum;\n-\n-  /**\n-   * Create a PartClockVector\n-   * @param taskNum total task number\n-   */\n-  public PartClockVector(int taskNum) {\n-    this.taskNum = taskNum;\n-    minClock = 0;\n-    taskIndexToClockMap = new Int2IntOpenHashMap(taskNum);\n-    for(int i = 0; i < taskNum; i++) {\n-      taskIndexToClockMap.put(i, 0);\n-    }\n-    lock = new ReentrantReadWriteLock();\n-  }\n-\n-  /**\n-   * Update a task clock value\n-   * @param taskIndex task index\n-   * @param clock clock value\n-   */\n-  public void updateClock(int taskIndex, int clock) {\n-    try {\n-      lock.writeLock().lock();\n-      if (!taskIndexToClockMap.containsKey(taskIndex)) {\n-        taskIndexToClockMap.put(taskIndex, clock);\n-      } else {\n-        int oldClock = taskIndexToClockMap.get(taskIndex);\n-        if (oldClock < clock) {\n-          taskIndexToClockMap.put(taskIndex, clock);\n+    private static final Log LOG = LogFactory.getLog(PartClockVector.class);\n+    /**\n+     * Min clock value for this partition\n+     */\n+    private int minClock;\n+\n+    /**\n+     * Task id to clock value map\n+     */\n+    private final Int2IntOpenHashMap taskIndexToClockMap;\n+    private final ReadWriteLock lock;\n+\n+    /**\n+     * Total task number\n+     */\n+    private final int taskNum;\n+\n+    /**\n+     * Create a PartClockVector\n+     *\n+     * @param taskNum total task number\n+     */\n+    public PartClockVector(int taskNum) {\n+        this.taskNum = taskNum;\n+        minClock = 0;\n+        taskIndexToClockMap = new Int2IntOpenHashMap(taskNum);\n+        for (int i = 0; i < taskNum; i++) {\n+            taskIndexToClockMap.put(i, 0);\n         }\n-      }\n-\n-      if (minClock < clock) {\n-        refreshMinClock();\n-      }\n-    } finally {\n-      lock.writeLock().unlock();\n+        lock = new ReentrantReadWriteLock();\n     }\n-  }\n \n-  private void refreshMinClock() {\n-    if (taskIndexToClockMap.size() < taskNum) {\n-      minClock = 0;\n-      return;\n+    /**\n+     * Update a task clock value\n+     *\n+     * @param taskIndex task index\n+     * @param clock     clock value\n+     */\n+    public void updateClock(int taskIndex, int clock) {\n+        try {\n+            lock.writeLock().lock();\n+            if (!taskIndexToClockMap.containsKey(taskIndex)) {\n+                taskIndexToClockMap.put(taskIndex, clock);\n+            } else {\n+                int oldClock = taskIndexToClockMap.get(taskIndex);\n+                if (oldClock < clock) {\n+                    taskIndexToClockMap.put(taskIndex, clock);\n+                }\n+            }\n+\n+            if (minClock < clock) {\n+                refreshMinClock();\n+            }\n+        } finally {\n+            lock.writeLock().unlock();\n+        }\n     }\n \n-    int min = Integer.MAX_VALUE;\n-    for (Int2IntMap.Entry entry : taskIndexToClockMap.int2IntEntrySet()) {\n-      if (entry.getIntValue() < min) {\n-        min = entry.getIntValue();\n-      }\n+    private void refreshMinClock() {\n+        if (taskIndexToClockMap.size() < taskNum) {\n+            minClock = 0;\n+            return;\n+        }\n+\n+        int min = Integer.MAX_VALUE;\n+        for (Int2IntMap.Entry entry : taskIndexToClockMap.int2IntEntrySet()) {\n+            if (entry.getIntValue() < min) {\n+                min = entry.getIntValue();\n+            }\n+        }\n+\n+        if (minClock < min) {\n+            minClock = min;\n+        }\n     }\n \n-    if (minClock < min) {\n-      minClock = min;\n+    /**\n+     * Gets represented clock.\n+     *\n+     * @return the clock\n+     */\n+    public int getClock() {\n+        try {\n+            lock.readLock().lock();\n+            return minClock;\n+        } finally {\n+            lock.readLock().unlock();\n+        }\n     }\n-  }\n-\n-  /**\n-   * Gets represented clock.\n-   *\n-   * @return the clock\n-   */\n-  public int getClock() {\n-    try {\n-      lock.readLock().lock();\n-      return minClock;\n-    } finally {\n-      lock.readLock().unlock();\n+\n+    /**\n+     * Get min clock\n+     *\n+     * @return min clock\n+     */\n+    public int getMinClock() {\n+        return minClock;\n     }\n-  }\n-\n-  /**\n-   * Get min clock\n-   * @return min clock\n-   */\n-  public int getMinClock() {\n-    return minClock;\n-  }\n-\n-  /**\n-   * Get clock vector\n-   * @return clock vector\n-   */\n-  public Int2IntOpenHashMap getClockVec() {\n-    try {\n-      lock.readLock().lock();\n-      return taskIndexToClockMap.clone();\n-    } finally {\n-      lock.readLock().unlock();\n+\n+    /**\n+     * Get clock vector\n+     *\n+     * @return clock vector\n+     */\n+    public Int2IntOpenHashMap getClockVec() {\n+        try {\n+            lock.readLock().lock();\n+            return taskIndexToClockMap.clone();\n+        } finally {\n+            lock.readLock().unlock();\n+        }\n     }\n-  }\n-\n-  /**\n-   * Set clock vector\n-   * @param clockVec clock vector\n-   */\n-  public void setClockVec(Int2IntOpenHashMap clockVec) {\n-    try {\n-      lock.writeLock().lock();\n-      ObjectIterator<Int2IntMap.Entry> iter = clockVec.int2IntEntrySet().fastIterator();\n-      Int2IntMap.Entry item;\n-      while(iter.hasNext()) {\n-        item = iter.next();\n-        if(!taskIndexToClockMap.containsKey(item.getIntKey())\n-          || (taskIndexToClockMap.containsKey(item.getIntKey())\n-          && taskIndexToClockMap.get(item.getIntKey()) < item.getIntValue())) {\n-          taskIndexToClockMap.put(item.getIntKey(), item.getIntValue());\n+\n+    /**\n+     * Set clock vector\n+     *\n+     * @param clockVec clock vector\n+     */\n+    public void setClockVec(Int2IntOpenHashMap clockVec) {\n+        try {\n+            lock.writeLock().lock();\n+            ObjectIterator<Int2IntMap.Entry> iter = clockVec.int2IntEntrySet().fastIterator();\n+            Int2IntMap.Entry item;\n+            while (iter.hasNext()) {\n+                item = iter.next();\n+                if (!taskIndexToClockMap.containsKey(item.getIntKey())\n+                        || (taskIndexToClockMap.containsKey(item.getIntKey())\n+                        && taskIndexToClockMap.get(item.getIntKey()) < item.getIntValue())) {\n+                    taskIndexToClockMap.put(item.getIntKey(), item.getIntValue());\n+                }\n+            }\n+            refreshMinClock();\n+        } finally {\n+            lock.writeLock().unlock();\n         }\n-      }\n-      refreshMinClock();\n-    } finally {\n-      lock.writeLock().unlock();\n     }\n-  }\n }\n",
            "diff_size": 178
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/837/PartClockVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/837/PartClockVector.java\nindex 5cb271e9d4c..1fd863b7bc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/837/PartClockVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/837/PartClockVector.java\n@@ -54,7 +54,7 @@ public class PartClockVector {\n     this.taskNum = taskNum;\n     minClock = 0;\n     taskIndexToClockMap = new Int2IntOpenHashMap(taskNum);\n-    for(int i = 0; i < taskNum; i++) {\n+    for (int i = 0; i < taskNum; i++) {\n       taskIndexToClockMap.put(i, 0);\n     }\n     lock = new ReentrantReadWriteLock();\n@@ -147,11 +147,10 @@ public class PartClockVector {\n       lock.writeLock().lock();\n       ObjectIterator<Int2IntMap.Entry> iter = clockVec.int2IntEntrySet().fastIterator();\n       Int2IntMap.Entry item;\n-      while(iter.hasNext()) {\n+      while (iter.hasNext()) {\n         item = iter.next();\n-        if(!taskIndexToClockMap.containsKey(item.getIntKey())\n-          || (taskIndexToClockMap.containsKey(item.getIntKey())\n-          && taskIndexToClockMap.get(item.getIntKey()) < item.getIntValue())) {\n+        if(!taskIndexToClockMap.containsKey(item.getIntKey()) || (taskIndexToClockMap.containsKey(item.getIntKey())\n+    && taskIndexToClockMap.get(item.getIntKey()) < item.getIntValue())) {\n           taskIndexToClockMap.put(item.getIntKey(), item.getIntValue());\n         }\n       }\n@@ -160,4 +159,4 @@ public class PartClockVector {\n       lock.writeLock().unlock();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/837/PartClockVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/837/PartClockVector.java\nindex 5cb271e9d4c..79edeecf6ac 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/837/PartClockVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/837/PartClockVector.java\n@@ -21,14 +21,15 @@ import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n import java.util.concurrent.locks.ReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n \n /**\n  * Matrix partition clock vector\n  */\n+\n public class PartClockVector {\n+\n   private static final Log LOG = LogFactory.getLog(PartClockVector.class);\n   /**\n    * Min clock value for this partition\n@@ -50,11 +51,12 @@ public class PartClockVector {\n    * Create a PartClockVector\n    * @param taskNum total task number\n    */\n+\n   public PartClockVector(int taskNum) {\n     this.taskNum = taskNum;\n     minClock = 0;\n     taskIndexToClockMap = new Int2IntOpenHashMap(taskNum);\n-    for(int i = 0; i < taskNum; i++) {\n+    for (int i = 0; i < taskNum; i++) {\n       taskIndexToClockMap.put(i, 0);\n     }\n     lock = new ReentrantReadWriteLock();\n@@ -65,6 +67,7 @@ public class PartClockVector {\n    * @param taskIndex task index\n    * @param clock clock value\n    */\n+\n   public void updateClock(int taskIndex, int clock) {\n     try {\n       lock.writeLock().lock();\n@@ -108,6 +111,7 @@ public class PartClockVector {\n    *\n    * @return the clock\n    */\n+\n   public int getClock() {\n     try {\n       lock.readLock().lock();\n@@ -121,6 +125,7 @@ public class PartClockVector {\n    * Get min clock\n    * @return min clock\n    */\n+\n   public int getMinClock() {\n     return minClock;\n   }\n@@ -129,6 +134,7 @@ public class PartClockVector {\n    * Get clock vector\n    * @return clock vector\n    */\n+\n   public Int2IntOpenHashMap getClockVec() {\n     try {\n       lock.readLock().lock();\n@@ -142,16 +148,15 @@ public class PartClockVector {\n    * Set clock vector\n    * @param clockVec clock vector\n    */\n+\n   public void setClockVec(Int2IntOpenHashMap clockVec) {\n     try {\n       lock.writeLock().lock();\n       ObjectIterator<Int2IntMap.Entry> iter = clockVec.int2IntEntrySet().fastIterator();\n       Int2IntMap.Entry item;\n-      while(iter.hasNext()) {\n+      while (iter.hasNext()) {\n         item = iter.next();\n-        if(!taskIndexToClockMap.containsKey(item.getIntKey())\n-          || (taskIndexToClockMap.containsKey(item.getIntKey())\n-          && taskIndexToClockMap.get(item.getIntKey()) < item.getIntValue())) {\n+        if (!taskIndexToClockMap.containsKey(item.getIntKey()) || (taskIndexToClockMap.containsKey(item.getIntKey()) && taskIndexToClockMap.get(item.getIntKey()) < item.getIntValue())) {\n           taskIndexToClockMap.put(item.getIntKey(), item.getIntValue());\n         }\n       }\n@@ -160,4 +165,4 @@ public class PartClockVector {\n       lock.writeLock().unlock();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}