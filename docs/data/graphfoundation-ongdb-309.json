{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "309",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/309/Alias.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/309/Alias.java\nindex 730c95e4a41..81af331aa53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/309/Alias.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/309/Alias.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.apps;\n \n import org.neo4j.helpers.Service;\n@@ -28,49 +29,48 @@ import org.neo4j.shell.Output;\n import org.neo4j.shell.Session;\n import org.neo4j.shell.impl.AbstractApp;\n \n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Alias extends AbstractApp\n {\n \n-    @Override\n-    public String getDescription()\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Adds an alias so that it can be used later as a command.\\n\" +\n+        \"Usage: alias <key>=<value>\";\n+  }\n+\n+  @Override\n+  public Continuation execute(AppCommandParser parser, Session session,\n+                              Output out) throws Exception\n+  {\n+    String line = parser.getLineWithoutApp();\n+    if (line.trim().length() == 0)\n     {\n-        return \"Adds an alias so that it can be used later as a command.\\n\" +\n-                \"Usage: alias <key>=<value>\";\n+      printAllAliases(session, out);\n+      return Continuation.INPUT_COMPLETE;\n     }\n \n-    @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-                                 Output out ) throws Exception\n+    Pair<String, String> keyValue = Export.splitInKeyEqualsValue(line);\n+    String key = keyValue.first();\n+    String value = keyValue.other();\n+    if (value == null || value.trim().length() == 0)\n     {\n-        String line = parser.getLineWithoutApp();\n-        if ( line.trim().length() == 0 )\n-        {\n-            printAllAliases( session, out );\n-            return Continuation.INPUT_COMPLETE;\n-        }\n-\n-        Pair<String, String> keyValue = Export.splitInKeyEqualsValue( line );\n-        String key = keyValue.first();\n-        String value = keyValue.other();\n-        if ( value == null || value.trim().length() == 0 )\n-        {\n-            session.removeAlias( key );\n-        }\n-        else\n-        {\n-            session.setAlias( key, value );\n-        }\n-        return Continuation.INPUT_COMPLETE;\n+      session.removeAlias(key);\n+    } else\n+    {\n+      session.setAlias(key, value);\n     }\n+    return Continuation.INPUT_COMPLETE;\n+  }\n \n-    private void printAllAliases( Session session, Output out )\n-            throws Exception\n+  private void printAllAliases(Session session, Output out)\n+      throws Exception\n+  {\n+    for (String key : session.getAliasKeys())\n     {\n-        for ( String key : session.getAliasKeys() )\n-        {\n-            out.println( \"alias \" + key + \"='\" + session.getAlias( key ) +\n-                    \"'\" );\n-        }\n+      out.println(\"alias \" + key + \"='\" + session.getAlias(key) +\n+          \"'\");\n     }\n+  }\n }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/309/Alias.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/309/Alias.java\nindex 730c95e4a41..c161ee4a612 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/309/Alias.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/309/Alias.java\n@@ -31,18 +31,15 @@ import org.neo4j.shell.impl.AbstractApp;\n @Service.Implementation( App.class )\n public class Alias extends AbstractApp\n {\n-\n     @Override\n     public String getDescription()\n     {\n-        return \"Adds an alias so that it can be used later as a command.\\n\" +\n-                \"Usage: alias <key>=<value>\";\n+        return \"Adds an alias so that it can be used later as a command.\\n\" + \"Usage: alias <key>=<value>\";\n     }\n \n     @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-                                 Output out ) throws Exception\n-    {\n+    public Continuation execute( AppCommandParser parser, Session session, Output out ) throws Exception\n+{\n         String line = parser.getLineWithoutApp();\n         if ( line.trim().length() == 0 )\n         {\n@@ -50,7 +47,7 @@ public class Alias extends AbstractApp\n             return Continuation.INPUT_COMPLETE;\n         }\n \n-        Pair<String, String> keyValue = Export.splitInKeyEqualsValue( line );\n+        Pair<String,String> keyValue = Export.splitInKeyEqualsValue( line );\n         String key = keyValue.first();\n         String value = keyValue.other();\n         if ( value == null || value.trim().length() == 0 )\n@@ -61,16 +58,15 @@ public class Alias extends AbstractApp\n         {\n             session.setAlias( key, value );\n         }\n-        return Continuation.INPUT_COMPLETE;\n+\n+return Continuation.INPUT_COMPLETE;\n     }\n \n-    private void printAllAliases( Session session, Output out )\n-            throws Exception\n-    {\n+    private void printAllAliases( Session session, Output out ) throws Exception\n+{\n         for ( String key : session.getAliasKeys() )\n         {\n-            out.println( \"alias \" + key + \"='\" + session.getAlias( key ) +\n-                    \"'\" );\n-        }\n+            out.println( \"alias \" + key + \"='\" + session.getAlias( key ) + \"'\" );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}