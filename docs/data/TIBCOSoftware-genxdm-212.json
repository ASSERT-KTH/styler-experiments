{
    "project_name": "TIBCOSoftware-genxdm",
    "violation_id": "212",
    "information": {
        "violations": [
            {
                "line": "38",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    implements Function\n{\n\tprivate final static boolean isLowSurrogate(char c)\n\t{\n\t\treturn (c & 0xFC00) == 0xD800;\n\t}",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/212/SubstringFunction.java\nindex 78635d7d13f..692d2be7ef6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/212/SubstringFunction.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n public final class SubstringFunction \r\n     implements Function\r\n {\r\n-\tprivate final static boolean isLowSurrogate(char c)\r\n+private final static boolean isLowSurrogate(char c)\r\n \t{\r\n \t\treturn (c & 0xFC00) == 0xD800;\r\n \t}\r\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/212/SubstringFunction.java\nindex 78635d7d13f..8a896e86275 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/212/SubstringFunction.java\n@@ -3,7 +3,7 @@\n  * license details\r\n  * Portions copyright (c) 2002, Bill Lindsey : see copying.txt for license\r\n  * details\r\n- * \r\n+ *\r\n  * Portions copyright (c) 2009-2011 TIBCO Software Inc.\r\n  *\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n@@ -18,6 +18,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.processor.xpath.v10.functions;\r\n \r\n import org.genxdm.Model;\r\n@@ -32,61 +33,57 @@ import org.genxdm.xpath.v10.StringExpr;\n import org.genxdm.xpath.v10.extend.Function;\r\n import org.genxdm.xpath.v10.extend.ConvertibleExpr;\r\n \r\n-public final class SubstringFunction \r\n-    implements Function\r\n-{\r\n-\tprivate final static boolean isLowSurrogate(char c)\r\n-\t{\r\n-\t\treturn (c & 0xFC00) == 0xD800;\r\n-\t}\r\n+public final class SubstringFunction\r\n+    implements Function {\r\n+    private final static boolean isLowSurrogate(char c) {\r\n+        return (c & 0xFC00) == 0xD800;\r\n+    }\r\n \r\n-\tstatic final private String substring(final String str, double start, double len)\r\n-\t{\r\n-\t\tstart = Math.floor(start + 0.5);\r\n-\t\tdouble end = start + Math.floor(len + 0.5);\r\n-\t\tint strLen = str.length();\r\n-\t\tint pos = 1;\r\n-\t\tint firstIndex = -1;\r\n-\t\tint lastIndex = -1;\r\n-\t\tfor (int i = 0; i < strLen; i++, pos++)\r\n-\t\t{\r\n-\t\t\tif (pos >= start && pos < end)\r\n-\t\t\t{\r\n-\t\t\t\tif (firstIndex < 0)\r\n-\t\t\t\t\tfirstIndex = i;\r\n-\t\t\t\tif (isLowSurrogate(str.charAt(i)))\r\n-\t\t\t\t\t++i;\r\n-\t\t\t\tlastIndex = i;\r\n-\t\t\t}\r\n-\t\t\telse if (isLowSurrogate(str.charAt(i)))\r\n-\t\t\t\t++i;\r\n-\t\t}\r\n-\t\tif (firstIndex >= 0)\r\n-\t\t{\r\n-\t\t\treturn str.substring(firstIndex, lastIndex + 1);\r\n-\t\t}\r\n-\t\treturn \"\";\r\n-\t}\r\n+    static final private String substring(final String str, double start, double len) {\r\n+        start = Math.floor(start + 0.5);\r\n+        double end = start + Math.floor(len + 0.5);\r\n+        int strLen = str.length();\r\n+        int pos = 1;\r\n+        int firstIndex = -1;\r\n+        int lastIndex = -1;\r\n+        for (int i = 0; i < strLen; i++, pos++) {\r\n+            if (pos >= start && pos < end) {\r\n+                if (firstIndex < 0) {\r\n+                    firstIndex = i;\r\n+                }\r\n+                if (isLowSurrogate(str.charAt(i))) {\r\n+                    ++i;\r\n+                }\r\n+                lastIndex = i;\r\n+            } else if (isLowSurrogate(str.charAt(i))) {\r\n+                ++i;\r\n+            }\r\n+        }\r\n+        if (firstIndex >= 0) {\r\n+            return str.substring(firstIndex, lastIndex + 1);\r\n+        }\r\n+        return \"\";\r\n+    }\r\n \r\n-\tpublic ConvertibleExpr makeCallExpr(final ConvertibleExpr[] args, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tif (args.length < 2 || args.length > 3)\r\n-\t\t{\r\n-\t\t\tthrow new ExprParseException(\"expected 2 or 3 arguments\");\r\n-\t\t}\r\n-\t\tfinal StringExpr se = args[0].makeStringExpr(statEnv);\r\n-\t\tfinal NumberExpr ne1 = args[1].makeNumberExpr(statEnv);\r\n-\t\tfinal NumberExpr ne2 = (args.length == 2 ? new NumberConstantExpr(1.0 / 0.0) : args[2].makeNumberExpr(statEnv));\r\n+    public ConvertibleExpr makeCallExpr(final ConvertibleExpr[] args,\r\n+                                        final ExprContextStatic statEnv) throws ExprParseException {\r\n+        if (args.length < 2 || args.length > 3) {\r\n+            throw new ExprParseException(\"expected 2 or 3 arguments\");\r\n+        }\r\n+        final StringExpr se = args[0].makeStringExpr(statEnv);\r\n+        final NumberExpr ne1 = args[1].makeNumberExpr(statEnv);\r\n+        final NumberExpr ne2 = (args.length == 2 ? new NumberConstantExpr(1.0 / 0.0) :\r\n+            args[2].makeNumberExpr(statEnv));\r\n \r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn substring(se.stringFunction(model, node, dynEnv),\r\n-\t\t\t\t\t\tne1.numberFunction(model, node, dynEnv),\r\n-\t\t\t\t\t\tne2.numberFunction(model, node, dynEnv));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n+        return new ConvertibleStringExpr() {\r\n+            public <N> String stringFunction(Model<N> model, final N node,\r\n+                                             final ExprContextDynamic<N> dynEnv)\r\n+                throws ExprException {\r\n+                return substring(se.stringFunction(model, node, dynEnv),\r\n+                    ne1.numberFunction(model, node, dynEnv),\r\n+                    ne2.numberFunction(model, node, dynEnv));\r\n+            }\r\n+        };\r\n+    }\r\n \r\n }\r\n",
            "diff_size": 55
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/212/SubstringFunction.java\nindex 78635d7d13f..4ab2225d7bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/naturalize/212/SubstringFunction.java\n@@ -34,59 +34,56 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n \r\n public final class SubstringFunction \r\n     implements Function\r\n-{\r\n-\tprivate final static boolean isLowSurrogate(char c)\r\n-\t{\r\n-\t\treturn (c & 0xFC00) == 0xD800;\r\n-\t}\r\n+{\n+    private final static boolean isLowSurrogate(char c)\r\n+\t{\n+    return (c & 0xFC00) == 0xD800;\n+    }\r\n \r\n \tstatic final private String substring(final String str, double start, double len)\r\n-\t{\r\n-\t\tstart = Math.floor(start + 0.5);\r\n+\t{\n+    start = Math.floor(start + 0.5);\r\n \t\tdouble end = start + Math.floor(len + 0.5);\r\n \t\tint strLen = str.length();\r\n \t\tint pos = 1;\r\n \t\tint firstIndex = -1;\r\n \t\tint lastIndex = -1;\r\n \t\tfor (int i = 0; i < strLen; i++, pos++)\r\n-\t\t{\r\n-\t\t\tif (pos >= start && pos < end)\r\n-\t\t\t{\r\n-\t\t\t\tif (firstIndex < 0)\r\n-\t\t\t\t\tfirstIndex = i;\r\n-\t\t\t\tif (isLowSurrogate(str.charAt(i)))\r\n-\t\t\t\t\t++i;\r\n-\t\t\t\tlastIndex = i;\r\n-\t\t\t}\r\n-\t\t\telse if (isLowSurrogate(str.charAt(i)))\r\n-\t\t\t\t++i;\r\n-\t\t}\r\n+\t\t{\n+    if (pos >= start && pos < end)\r\n+\t\t\t{\n+    if (firstIndex < 0)\n+    firstIndex = i;\n+if (isLowSurrogate(str.charAt(i)))\n+    ++i;\n+lastIndex = i;\n+    }\r\n+\t\t\telse if (isLowSurrogate(str.charAt(i)))\n+    ++i;\n+    }\r\n \t\tif (firstIndex >= 0)\r\n-\t\t{\r\n-\t\t\treturn str.substring(firstIndex, lastIndex + 1);\r\n-\t\t}\r\n-\t\treturn \"\";\r\n-\t}\r\n+\t\t{\n+    return str.substring(firstIndex, lastIndex + 1);\n+    }\r\n+\t\treturn \"\";\n+    }\r\n \r\n \tpublic ConvertibleExpr makeCallExpr(final ConvertibleExpr[] args, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tif (args.length < 2 || args.length > 3)\r\n-\t\t{\r\n-\t\t\tthrow new ExprParseException(\"expected 2 or 3 arguments\");\r\n-\t\t}\r\n+\t{\n+    if (args.length < 2 || args.length > 3)\r\n+\t\t{\n+    throw new ExprParseException(\"expected 2 or 3 arguments\");\n+    }\r\n \t\tfinal StringExpr se = args[0].makeStringExpr(statEnv);\r\n \t\tfinal NumberExpr ne1 = args[1].makeNumberExpr(statEnv);\r\n \t\tfinal NumberExpr ne2 = (args.length == 2 ? new NumberConstantExpr(1.0 / 0.0) : args[2].makeNumberExpr(statEnv));\r\n \r\n \t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn substring(se.stringFunction(model, node, dynEnv),\r\n-\t\t\t\t\t\tne1.numberFunction(model, node, dynEnv),\r\n-\t\t\t\t\t\tne2.numberFunction(model, node, dynEnv));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-\r\n-}\r\n+\t\t{\n+    public <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n+\t\t\t{\n+    return substring(se.stringFunction(model, node, dynEnv), ne1.numberFunction(model, node, dynEnv), ne2.numberFunction(model, node, dynEnv));\n+    }\n+    };\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/212/SubstringFunction.java\nindex 78635d7d13f..c2f1be4feba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/212/SubstringFunction.java\n@@ -18,75 +18,72 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.processor.xpath.v10.functions;\r\n-\r\n-import org.genxdm.Model;\r\n-import org.genxdm.processor.xpath.v10.expressions.ConvertibleStringExpr;\r\n-import org.genxdm.processor.xpath.v10.expressions.NumberConstantExpr;\r\n-import org.genxdm.xpath.v10.ExprContextDynamic;\r\n-import org.genxdm.xpath.v10.ExprContextStatic;\r\n-import org.genxdm.xpath.v10.ExprException;\r\n-import org.genxdm.xpath.v10.ExprParseException;\r\n-import org.genxdm.xpath.v10.NumberExpr;\r\n-import org.genxdm.xpath.v10.StringExpr;\r\n-import org.genxdm.xpath.v10.extend.Function;\r\n-import org.genxdm.xpath.v10.extend.ConvertibleExpr;\r\n-\r\n-public final class SubstringFunction \r\n-    implements Function\r\n-{\r\n-\tprivate final static boolean isLowSurrogate(char c)\r\n-\t{\r\n-\t\treturn (c & 0xFC00) == 0xD800;\r\n-\t}\r\n-\r\n-\tstatic final private String substring(final String str, double start, double len)\r\n-\t{\r\n-\t\tstart = Math.floor(start + 0.5);\r\n-\t\tdouble end = start + Math.floor(len + 0.5);\r\n-\t\tint strLen = str.length();\r\n-\t\tint pos = 1;\r\n-\t\tint firstIndex = -1;\r\n-\t\tint lastIndex = -1;\r\n-\t\tfor (int i = 0; i < strLen; i++, pos++)\r\n-\t\t{\r\n-\t\t\tif (pos >= start && pos < end)\r\n-\t\t\t{\r\n-\t\t\t\tif (firstIndex < 0)\r\n-\t\t\t\t\tfirstIndex = i;\r\n-\t\t\t\tif (isLowSurrogate(str.charAt(i)))\r\n-\t\t\t\t\t++i;\r\n-\t\t\t\tlastIndex = i;\r\n-\t\t\t}\r\n-\t\t\telse if (isLowSurrogate(str.charAt(i)))\r\n-\t\t\t\t++i;\r\n-\t\t}\r\n-\t\tif (firstIndex >= 0)\r\n-\t\t{\r\n-\t\t\treturn str.substring(firstIndex, lastIndex + 1);\r\n-\t\t}\r\n-\t\treturn \"\";\r\n-\t}\r\n-\r\n-\tpublic ConvertibleExpr makeCallExpr(final ConvertibleExpr[] args, final ExprContextStatic statEnv) throws ExprParseException\r\n-\t{\r\n-\t\tif (args.length < 2 || args.length > 3)\r\n-\t\t{\r\n-\t\t\tthrow new ExprParseException(\"expected 2 or 3 arguments\");\r\n-\t\t}\r\n-\t\tfinal StringExpr se = args[0].makeStringExpr(statEnv);\r\n-\t\tfinal NumberExpr ne1 = args[1].makeNumberExpr(statEnv);\r\n-\t\tfinal NumberExpr ne2 = (args.length == 2 ? new NumberConstantExpr(1.0 / 0.0) : args[2].makeNumberExpr(statEnv));\r\n-\r\n-\t\treturn new ConvertibleStringExpr()\r\n-\t\t{\r\n-\t\t\tpublic <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\r\n-\t\t\t{\r\n-\t\t\t\treturn substring(se.stringFunction(model, node, dynEnv),\r\n-\t\t\t\t\t\tne1.numberFunction(model, node, dynEnv),\r\n-\t\t\t\t\t\tne2.numberFunction(model, node, dynEnv));\r\n-\t\t\t}\r\n-\t\t};\r\n-\t}\r\n-\r\n-}\r\n+package org.genxdm.processor.xpath.v10.functions;\n+\n+import org.genxdm.Model;\n+import org.genxdm.processor.xpath.v10.expressions.ConvertibleStringExpr;\n+import org.genxdm.processor.xpath.v10.expressions.NumberConstantExpr;\n+import org.genxdm.xpath.v10.ExprContextDynamic;\n+import org.genxdm.xpath.v10.ExprContextStatic;\n+import org.genxdm.xpath.v10.ExprException;\n+import org.genxdm.xpath.v10.ExprParseException;\n+import org.genxdm.xpath.v10.NumberExpr;\n+import org.genxdm.xpath.v10.StringExpr;\n+import org.genxdm.xpath.v10.extend.Function;\n+import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n+\n+public final class SubstringFunction implements Function\n+{\n+    private final static boolean isLowSurrogate(char c)\n+    {\n+        return (c & 0xFC00) == 0xD800;\n+    }\n+\n+    static final private String substring(final String str, double start, double len)\n+    {\n+        start = Math.floor(start + 0.5);\n+        double end = start + Math.floor(len + 0.5);\n+        int strLen = str.length();\n+        int pos = 1;\n+        int firstIndex = -1;\n+        int lastIndex = -1;\n+        for (int i = 0; i < strLen; i++, pos++)\n+        {\n+            if (pos >= start && pos < end)\n+            {\n+                if (firstIndex < 0)\n+                    firstIndex = i;\n+                if (isLowSurrogate(str.charAt(i)))\n+                ++i;\n+                lastIndex = i;\n+            }\n+            else if (isLowSurrogate(str.charAt(i)))\n+            ++i;\n+        }\n+        if (firstIndex >= 0)\n+        {\n+            return str.substring(firstIndex, lastIndex + 1);\n+        }\n+        return \"\";\n+    }\n+\n+    public ConvertibleExpr makeCallExpr(final ConvertibleExpr[] args, final ExprContextStatic statEnv)\n+        throws ExprParseException\n+    {\n+        if (args.length < 2 || args.length > 3)\n+        {\n+            throw new ExprParseException(\"expected 2 or 3 arguments\");\n+        }\n+\n+        final StringExpr se = args[0].makeStringExpr(statEnv);\n+        final NumberExpr ne1 = args[1].makeNumberExpr(statEnv);\n+        final NumberExpr ne2 = (args.length == 2 ? new NumberConstantExpr(1.0 / 0.0) : args[2].makeNumberExpr(statEnv));\n+        return new ConvertibleStringExpr()\n+        {\n+            public <N> String stringFunction(Model<N> model, final N node, final ExprContextDynamic<N> dynEnv) throws ExprException\n+            {\n+                return substring(se.stringFunction(model, node, dynEnv), ne1.numberFunction(model, node, dynEnv), ne2.numberFunction(model, node, dynEnv));\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/212/SubstringFunction.java\nindex 78635d7d13f..692d2be7ef6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/212/SubstringFunction.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n public final class SubstringFunction \r\n     implements Function\r\n {\r\n-\tprivate final static boolean isLowSurrogate(char c)\r\n+private final static boolean isLowSurrogate(char c)\r\n \t{\r\n \t\treturn (c & 0xFC00) == 0xD800;\r\n \t}\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "39",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/212/SubstringFunction.java\nindex 78635d7d13f..e602589b1a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/212/SubstringFunction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/212/SubstringFunction.java\n@@ -35,7 +35,7 @@ import org.genxdm.xpath.v10.extend.ConvertibleExpr;\n public final class SubstringFunction \r\n     implements Function\r\n {\r\n-\tprivate final static boolean isLowSurrogate(char c)\r\n+    private final static boolean isLowSurrogate(char c)\r\n \t{\r\n \t\treturn (c & 0xFC00) == 0xD800;\r\n \t}\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}