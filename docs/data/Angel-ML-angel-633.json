{
    "project_name": "Angel-ML-angel",
    "violation_id": "633",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/633/IntLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/633/IntLongVectorStorage.java\nindex 69f6ac4337d..8494a5e8fbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/633/IntLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/633/IntLongVectorStorage.java\n@@ -34,322 +34,324 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n  */\n public class IntLongVectorStorage extends IntLongStorage {\n \n-  private IntLongVector vector;\n-\n-  public IntLongVectorStorage(IntLongVector vector, long indexOffset) {\n-    super(indexOffset);\n-    this.vector = vector;\n-  }\n-\n-  public IntLongVectorStorage() {\n-    this(null, 0L);\n-  }\n-\n-  public IntLongVector getVector() {\n-    return vector;\n-  }\n-\n-  public void setVector(IntLongVector vector) {\n-    this.vector = vector;\n-  }\n-\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    switch (updateType) {\n-      case T_LONG_SPARSE:\n-      case T_LONG_SPARSE_COMPONENT:\n-        updateUseIntLongSparse(buf, op);\n-        break;\n-\n-      case T_INT_SPARSE:\n-      case T_INT_SPARSE_COMPONENT:\n-        updateUseIntIntSparse(buf, op);\n-        break;\n-\n-      case T_LONG_DENSE:\n-      case T_LONG_DENSE_COMPONENT:\n-        updateUseIntLongDense(buf, op);\n-        break;\n-\n-      case T_INT_DENSE:\n-      case T_INT_DENSE_COMPONENT:\n-        updateUseIntIntDense(buf, op);\n-        break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n-      }\n+    private IntLongVector vector;\n+\n+    public IntLongVectorStorage(IntLongVector vector, long indexOffset) {\n+        super(indexOffset);\n+        this.vector = vector;\n+    }\n+\n+    public IntLongVectorStorage() {\n+        this(null, 0L);\n     }\n \n-  }\n-\n-  private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        getVector().set(i, getVector().get(i) + buf.readLong());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        getVector().set(i, buf.readLong());\n-      }\n+    public IntLongVector getVector() {\n+        return vector;\n     }\n-  }\n-\n-  private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        getVector().set(i, getVector().get(i) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        getVector().set(i, buf.readInt());\n-      }\n+\n+    public void setVector(IntLongVector vector) {\n+        this.vector = vector;\n     }\n-  }\n-\n-  private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        getVector().set(index, getVector().get(index) + buf.readLong());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        getVector().set(buf.readInt(), buf.readLong());\n-      }\n+\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        switch (updateType) {\n+            case T_LONG_SPARSE:\n+            case T_LONG_SPARSE_COMPONENT:\n+                updateUseIntLongSparse(buf, op);\n+                break;\n+\n+            case T_INT_SPARSE:\n+            case T_INT_SPARSE_COMPONENT:\n+                updateUseIntIntSparse(buf, op);\n+                break;\n+\n+            case T_LONG_DENSE:\n+            case T_LONG_DENSE_COMPONENT:\n+                updateUseIntLongDense(buf, op);\n+                break;\n+\n+            case T_INT_DENSE:\n+            case T_INT_DENSE_COMPONENT:\n+                updateUseIntIntDense(buf, op);\n+                break;\n+\n+            default: {\n+                throw new UnsupportedOperationException(\n+                        \"Unsupport operation: update \" + updateType + \" to \" +\n+                                this.getClass().getName());\n+            }\n+        }\n+\n     }\n-  }\n-\n-\n-  private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      for (int i = 0; i < size; i++) {\n-        int index = buf.readInt();\n-        getVector().set(index, getVector().get(index) + buf.readInt());\n-      }\n-    } else {\n-      for (int i = 0; i < size; i++) {\n-        getVector().set(buf.readInt(), buf.readInt());\n-      }\n+\n+    private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                getVector().set(i, getVector().get(i) + buf.readLong());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                getVector().set(i, buf.readLong());\n+            }\n+        }\n     }\n-  }\n \n+    private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                getVector().set(i, getVector().get(i) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                getVector().set(i, buf.readInt());\n+            }\n+        }\n+    }\n \n-  @Override\n-  public long get(int index) {\n-    return getVector().get(index - (int) indexOffset);\n-  }\n+    private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                getVector().set(index, getVector().get(index) + buf.readLong());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                getVector().set(buf.readInt(), buf.readLong());\n+            }\n+        }\n+    }\n \n-  @Override\n-  public void set(int index, long value) {\n-    getVector().set(index - (int) indexOffset, value);\n-  }\n \n-  @Override\n-  public long[] get(int[] indices) {\n-    long[] values = new long[indices.length];\n-    for (int i = 0; i < indices.length; i++) {\n-      values[i] = get(indices[i]);\n+    private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            for (int i = 0; i < size; i++) {\n+                int index = buf.readInt();\n+                getVector().set(index, getVector().get(index) + buf.readInt());\n+            }\n+        } else {\n+            for (int i = 0; i < size; i++) {\n+                getVector().set(buf.readInt(), buf.readInt());\n+            }\n+        }\n     }\n-    return values;\n-  }\n-\n-  @Override\n-  public void set(int[] indices, long[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], values[i]);\n+\n+\n+    @Override\n+    public long get(int index) {\n+        return getVector().get(index - (int) indexOffset);\n     }\n-  }\n-\n-  @Override\n-  public void addTo(int index, long value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  @Override\n-  public void addTo(int[] indices, long[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      addTo(indices[i], values[i]);\n+\n+    @Override\n+    public void set(int index, long value) {\n+        getVector().set(index - (int) indexOffset, value);\n     }\n-  }\n-\n-  @Override\n-  public void mergeTo(IntLongVector mergedRow) {\n-    StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n-    switch (method) {\n-      case DENSE: {\n-        long[] values = getVector().getStorage().getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + (int) indexOffset, values[i]);\n-        }\n-        break;\n-      }\n-\n-      case SPARSE: {\n-        ObjectIterator<Entry> iter = getVector().getStorage().entryIterator();\n-        Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getLongValue());\n-        }\n \n-        break;\n-      }\n+    @Override\n+    public long[] get(int[] indices) {\n+        long[] values = new long[indices.length];\n+        for (int i = 0; i < indices.length; i++) {\n+            values[i] = get(indices[i]);\n+        }\n+        return values;\n+    }\n \n-      case SORTED: {\n-        int[] indices = getVector().getStorage().getIndices();\n-        long[] values = getVector().getStorage().getValues();\n+    @Override\n+    public void set(int[] indices, long[] values) {\n+        assert indices.length == values.length;\n         for (int i = 0; i < indices.length; i++) {\n-          mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n+            set(indices[i], values[i]);\n         }\n+    }\n \n-        break;\n-      }\n+    @Override\n+    public void addTo(int index, long value) {\n+        set(index, get(index) + value);\n+    }\n \n-      default:\n-        throw new UnsupportedOperationException(\"Unsupport storage method \" + method);\n+    @Override\n+    public void addTo(int[] indices, long[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            addTo(indices[i], values[i]);\n+        }\n     }\n-  }\n-\n-  @Override\n-  public long initAndGet(int index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      long value = (long) func.action();\n-      set(index, value);\n-      return value;\n+\n+    @Override\n+    public void mergeTo(IntLongVector mergedRow) {\n+        StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n+        switch (method) {\n+            case DENSE: {\n+                long[] values = getVector().getStorage().getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    mergedRow.set(i + (int) indexOffset, values[i]);\n+                }\n+                break;\n+            }\n+\n+            case SPARSE: {\n+                ObjectIterator<Entry> iter = getVector().getStorage().entryIterator();\n+                Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getLongValue());\n+                }\n+\n+                break;\n+            }\n+\n+            case SORTED: {\n+                int[] indices = getVector().getStorage().getIndices();\n+                long[] values = getVector().getStorage().getValues();\n+                for (int i = 0; i < indices.length; i++) {\n+                    mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n+                }\n+\n+                break;\n+            }\n+\n+            default:\n+                throw new UnsupportedOperationException(\"Unsupport storage method \" + method);\n+        }\n     }\n-  }\n-\n-  @Override\n-  public boolean exist(int index) {\n-    StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n-    if (method == StorageMethod.DENSE) {\n-      // TODO: just check the value is 0 or not now\n-      return getVector().get(index - (int) indexOffset) != 0;\n-    } else {\n-      return getVector().getStorage().hasKey(index - (int) indexOffset);\n+\n+    @Override\n+    public long initAndGet(int index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            long value = (long) func.action();\n+            set(index, value);\n+            return value;\n+        }\n     }\n-  }\n-\n-  @Override\n-  public void elemUpdate(LongElemUpdateFunc func) {\n-    StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n-    switch (method) {\n-      case DENSE: {\n-        long[] values = getVector().getStorage().getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          values[i] = func.update();\n+\n+    @Override\n+    public boolean exist(int index) {\n+        StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n+        if (method == StorageMethod.DENSE) {\n+            // TODO: just check the value is 0 or not now\n+            return getVector().get(index - (int) indexOffset) != 0;\n+        } else {\n+            return getVector().getStorage().hasKey(index - (int) indexOffset);\n         }\n-        break;\n-      }\n-\n-      case SPARSE: {\n-        // Just update the exist element now!!\n-        ObjectIterator<Entry> iter = getVector().getStorage().entryIterator();\n-        Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+    }\n+\n+    @Override\n+    public void elemUpdate(LongElemUpdateFunc func) {\n+        StorageMethod method = VectorStorageUtils.getStorageMethod(vector);\n+        switch (method) {\n+            case DENSE: {\n+                long[] values = getVector().getStorage().getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    values[i] = func.update();\n+                }\n+                break;\n+            }\n+\n+            case SPARSE: {\n+                // Just update the exist element now!!\n+                ObjectIterator<Entry> iter = getVector().getStorage().entryIterator();\n+                Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+                break;\n+            }\n+\n+            case SORTED: {\n+                // Just update the exist element now!!\n+                long[] values = getVector().getStorage().getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    values[i] = func.update();\n+                }\n+                break;\n+            }\n+\n+            default:\n+                throw new UnsupportedOperationException(\"Unsupport storage method \" + method);\n         }\n-        break;\n-      }\n-\n-      case SORTED: {\n-        // Just update the exist element now!!\n-        long[] values = getVector().getStorage().getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          values[i] = func.update();\n+    }\n+\n+    @Override\n+    public void clear() {\n+        VectorStorageUtils.clear(vector);\n+    }\n+\n+    @Override\n+    public IntLongVectorStorage deepClone() {\n+        return new IntLongVectorStorage(vector.copy(), indexOffset);\n+    }\n+\n+    @Override\n+    public int size() {\n+        return VectorStorageUtils.size(vector);\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return VectorStorageUtils.isDense(vector);\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return VectorStorageUtils.isSparse(vector);\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return VectorStorageUtils.isSorted(vector);\n+    }\n+\n+    @Override\n+    public IntLongVectorStorage adaptiveClone() {\n+        if (isSparse()) {\n+            return new IntLongVectorStorage(VFactory\n+                    .sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n+                            vector.getStorage().getValues()), indexOffset);\n+        } else {\n+            return this;\n         }\n-        break;\n-      }\n+    }\n \n-      default:\n-        throw new UnsupportedOperationException(\"Unsupport storage method \" + method);\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        super.serialize(buf);\n+        VectorStorageUtils.serialize(buf, vector);\n     }\n-  }\n-\n-  @Override\n-  public void clear() {\n-    VectorStorageUtils.clear(vector);\n-  }\n-\n-  @Override\n-  public IntLongVectorStorage deepClone() {\n-    return new IntLongVectorStorage(vector.copy(), indexOffset);\n-  }\n-\n-  @Override\n-  public int size() {\n-    return VectorStorageUtils.size(vector);\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return VectorStorageUtils.isDense(vector);\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return VectorStorageUtils.isSparse(vector);\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return VectorStorageUtils.isSorted(vector);\n-  }\n-\n-  @Override\n-  public IntLongVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n-      return new IntLongVectorStorage(VFactory\n-          .sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n-              vector.getStorage().getValues()), indexOffset);\n-    } else {\n-      return this;\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        super.deserialize(buf);\n+        vector = (IntLongVector) VectorStorageUtils.deserialize(buf);\n     }\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    super.serialize(buf);\n-    VectorStorageUtils.serialize(buf, vector);\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    super.deserialize(buf);\n-    vector = (IntLongVector) VectorStorageUtils.deserialize(buf);\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n-    if (indexType != IndexType.INT) {\n-      throw new UnsupportedOperationException(\n-          this.getClass().getName() + \" only support int type index now\");\n+\n+    @Override\n+    public int bufferLen() {\n+        return super.bufferLen() + VectorStorageUtils.bufferLen(vector);\n     }\n \n-    if (func != null) {\n-      for (int i = 0; i < indexSize; i++) {\n-        out.writeLong(initAndGet(in.readInt(), func));\n-      }\n-    } else {\n-      for (int i = 0; i < indexSize; i++) {\n-        out.writeLong(get(in.readInt()));\n-      }\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out,\n+                         InitFunc func) {\n+        if (indexType != IndexType.INT) {\n+            throw new UnsupportedOperationException(\n+                    this.getClass().getName() + \" only support int type index now\");\n+        }\n+\n+        if (func != null) {\n+            for (int i = 0; i < indexSize; i++) {\n+                out.writeLong(initAndGet(in.readInt(), func));\n+            }\n+        } else {\n+            for (int i = 0; i < indexSize; i++) {\n+                out.writeLong(get(in.readInt()));\n+            }\n+        }\n     }\n-  }\n }\n",
            "diff_size": 442
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "305",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/633/IntLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/633/IntLongVectorStorage.java\nindex 69f6ac4337d..184bcefd5de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/633/IntLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/633/IntLongVectorStorage.java\n@@ -60,25 +60,20 @@ public class IntLongVectorStorage extends IntLongStorage {\n       case T_LONG_SPARSE_COMPONENT:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n-      case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n       case T_INT_SPARSE_COMPONENT:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n-      case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n       case T_LONG_DENSE_COMPONENT:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n-      case T_INT_DENSE:\n+  case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n-      default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n \n@@ -139,8 +134,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public long get(int index) {\n     return getVector().get(index - (int) indexOffset);\n   }\n@@ -199,8 +193,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getLongValue());\n         }\n-\n-        break;\n+break;\n       }\n \n       case SORTED: {\n@@ -209,8 +202,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n-        break;\n+break;\n       }\n \n       default:\n@@ -310,10 +302,9 @@ public class IntLongVectorStorage extends IntLongStorage {\n   @Override\n   public IntLongVectorStorage adaptiveClone() {\n     if(isSparse()) {\n-      return new IntLongVectorStorage(VFactory\n-          .sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n+      return new IntLongVectorStorage(VFactory.sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n               vector.getStorage().getValues()), indexOffset);\n-    } else {\n+  } else {\n       return this;\n     }\n   }\n@@ -340,7 +331,7 @@ public class IntLongVectorStorage extends IntLongStorage {\n     if (indexType != IndexType.INT) {\n       throw new UnsupportedOperationException(\n           this.getClass().getName() + \" only support int type index now\");\n-    }\n+  }\n \n     if (func != null) {\n       for (int i = 0; i < indexSize; i++) {\n@@ -352,4 +343,4 @@ public class IntLongVectorStorage extends IntLongStorage {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "304",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "331",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/633/IntLongVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/633/IntLongVectorStorage.java\nindex 69f6ac4337d..bd7d11b97a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/633/IntLongVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/633/IntLongVectorStorage.java\n@@ -17,7 +17,6 @@\n \n package com.tencent.angel.ps.storage.vector.storage;\n \n-\n import com.tencent.angel.ml.math2.VFactory;\n import com.tencent.angel.ml.math2.vector.IntLongVector;\n import com.tencent.angel.ml.matrix.RowType;\n@@ -32,6 +31,7 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n /**\n  * A int key long value storage: use a IntFloatVector as storage\n  */\n+\n public class IntLongVectorStorage extends IntLongStorage {\n \n   private IntLongVector vector;\n@@ -54,34 +54,29 @@ public class IntLongVectorStorage extends IntLongStorage {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     switch (updateType) {\n       case T_LONG_SPARSE:\n       case T_LONG_SPARSE_COMPONENT:\n         updateUseIntLongSparse(buf, op);\n         break;\n-\n       case T_INT_SPARSE:\n       case T_INT_SPARSE_COMPONENT:\n         updateUseIntIntSparse(buf, op);\n         break;\n-\n       case T_LONG_DENSE:\n       case T_LONG_DENSE_COMPONENT:\n         updateUseIntLongDense(buf, op);\n         break;\n-\n       case T_INT_DENSE:\n       case T_INT_DENSE_COMPONENT:\n         updateUseIntIntDense(buf, op);\n         break;\n-\n       default: {\n-        throw new UnsupportedOperationException(\n-            \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+        throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n       }\n     }\n-\n   }\n \n   private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n@@ -124,7 +119,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n     }\n   }\n \n-\n   private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n@@ -139,7 +133,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n     }\n   }\n \n-\n   @Override\n   public long get(int index) {\n     return getVector().get(index - (int) indexOffset);\n@@ -199,7 +192,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n           entry = iter.next();\n           mergedRow.set(entry.getIntKey() + (int) indexOffset, entry.getLongValue());\n         }\n-\n         break;\n       }\n \n@@ -209,7 +201,6 @@ public class IntLongVectorStorage extends IntLongStorage {\n         for (int i = 0; i < indices.length; i++) {\n           mergedRow.set(indices[i] + (int) indexOffset, values[i]);\n         }\n-\n         break;\n       }\n \n@@ -309,10 +300,8 @@ public class IntLongVectorStorage extends IntLongStorage {\n \n   @Override\n   public IntLongVectorStorage adaptiveClone() {\n-    if(isSparse()) {\n-      return new IntLongVectorStorage(VFactory\n-          .sortedLongVector(vector.getDim(), vector.getStorage().getIndices(),\n-              vector.getStorage().getValues()), indexOffset);\n+    if (isSparse()) {\n+      return new IntLongVectorStorage(VFactory.sortedLongVector(vector.getDim(), vector.getStorage().getIndices(), vector.getStorage().getValues()), indexOffset);\n     } else {\n       return this;\n     }\n@@ -336,10 +325,10 @@ public class IntLongVectorStorage extends IntLongStorage {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) {\n     if (indexType != IndexType.INT) {\n-      throw new UnsupportedOperationException(\n-          this.getClass().getName() + \" only support int type index now\");\n+      throw new UnsupportedOperationException(this.getClass().getName() + \" only support int type index now\");\n     }\n \n     if (func != null) {\n@@ -352,4 +341,5 @@ public class IntLongVectorStorage extends IntLongStorage {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}