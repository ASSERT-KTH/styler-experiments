{
    "project_name": "junkdog-artemis-odb",
    "violation_id": "13",
    "information": {
        "violations": [
            {
                "line": "34",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 117).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map<Type, TypeVariableName> map) {\n        // like ParameterizedTypeName.get, but with TypeDescriptor support.\n        final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n        final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType)",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/13/PoetTypeNameResolver.java\nindex f77c072c5ff..7a603ed4be4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/13/PoetTypeNameResolver.java\n@@ -31,7 +31,9 @@ public class PoetTypeNameResolver {\n         return TypeName.get(type);\n     }\n \n-    private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map<Type, TypeVariableName> map) {\n+    private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map\n+\t\t\t\t\t<Type, TypeVariableName >map\n+    ) {\n         // like ParameterizedTypeName.get, but with TypeDescriptor support.\n         final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n         final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType)\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/13/PoetTypeNameResolver.java\nindex f77c072c5ff..b1942051917 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/13/PoetTypeNameResolver.java\n@@ -12,45 +12,46 @@ import java.util.Map;\n /**\n  * Extends JavaPoet with TypeName resolver with support for {@link TypeDescriptor}.\n  *\n- * @see TypeDescriptor\n  * @author Daan van Yperen\n+ * @see TypeDescriptor\n  */\n public class PoetTypeNameResolver {\n \n-    public TypeName get(Type type) {\n-        return get(type, new LinkedHashMap<Type, TypeVariableName>());\n-    }\n+  public TypeName get(Type type) {\n+    return get(type, new LinkedHashMap<Type, TypeVariableName>());\n+  }\n \n-    private TypeName get(Type type, Map<Type, TypeVariableName> map) {\n-        if (type instanceof TypeDescriptor) {\n-            return ClassName.bestGuess(type.toString());\n-        }\n-        if (type instanceof ParameterizedType) {\n-            return getForParameterizedTypes((ParameterizedType) type, map);\n-        }\n-        return TypeName.get(type);\n+  private TypeName get(Type type, Map<Type, TypeVariableName> map) {\n+    if (type instanceof TypeDescriptor) {\n+      return ClassName.bestGuess(type.toString());\n     }\n-\n-    private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map<Type, TypeVariableName> map) {\n-        // like ParameterizedTypeName.get, but with TypeDescriptor support.\n-        final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n-        final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType)\n-                && !java.lang.reflect.Modifier.isStatic(((Class<?>) type.getRawType()).getModifiers())\n-                ? (ParameterizedType) type.getOwnerType() : null;\n-        List<TypeName> typeArguments = list(type.getActualTypeArguments(), map);\n-        return (ownerType != null)\n-                ? getForParameterizedTypes(ownerType, map)\n-                .nestedClass(rawType.simpleName(), typeArguments)\n-                : new ParameterizedTypeName(null, rawType, typeArguments);\n-\n+    if (type instanceof ParameterizedType) {\n+      return getForParameterizedTypes((ParameterizedType) type, map);\n     }\n-\n-    private List<TypeName> list(Type[] types, Map<Type, TypeVariableName> map) {\n-        // TypeName.list, but with TypeDescriptor support.\n-        List<TypeName> result = new ArrayList<>(types.length);\n-        for (Type type : types) {\n-            result.add(get(type, map));\n-        }\n-        return result;\n+    return TypeName.get(type);\n+  }\n+\n+  private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type,\n+                                                         Map<Type, TypeVariableName> map) {\n+    // like ParameterizedTypeName.get, but with TypeDescriptor support.\n+    final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n+    final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType)\n+        && !java.lang.reflect.Modifier.isStatic(((Class<?>) type.getRawType()).getModifiers())\n+        ? (ParameterizedType) type.getOwnerType() : null;\n+    List<TypeName> typeArguments = list(type.getActualTypeArguments(), map);\n+    return (ownerType != null)\n+        ? getForParameterizedTypes(ownerType, map)\n+        .nestedClass(rawType.simpleName(), typeArguments)\n+        : new ParameterizedTypeName(null, rawType, typeArguments);\n+\n+  }\n+\n+  private List<TypeName> list(Type[] types, Map<Type, TypeVariableName> map) {\n+    // TypeName.list, but with TypeDescriptor support.\n+    List<TypeName> result = new ArrayList<>(types.length);\n+    for (Type type : types) {\n+      result.add(get(type, map));\n     }\n+    return result;\n+  }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/13/PoetTypeNameResolver.java\nindex f77c072c5ff..0478339732e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/13/PoetTypeNameResolver.java\n@@ -16,41 +16,39 @@ import java.util.Map;\n  * @author Daan van Yperen\n  */\n public class PoetTypeNameResolver {\n-\n-    public TypeName get(Type type) {\n-        return get(type, new LinkedHashMap<Type, TypeVariableName>());\n+\tpublic TypeName get(Type type) {\n+\treturn get(type, new LinkedHashMap<Type, TypeVariableName>());\n     }\n \n     private TypeName get(Type type, Map<Type, TypeVariableName> map) {\n-        if (type instanceof TypeDescriptor) {\n-            return ClassName.bestGuess(type.toString());\n-        }\n+\tif (type instanceof TypeDescriptor) {\n+\treturn ClassName.bestGuess(type.toString());\n+\t}\n         if (type instanceof ParameterizedType) {\n-            return getForParameterizedTypes((ParameterizedType) type, map);\n-        }\n+\treturn getForParameterizedTypes((ParameterizedType) type, map);\n+\t}\n         return TypeName.get(type);\n     }\n \n     private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map<Type, TypeVariableName> map) {\n-        // like ParameterizedTypeName.get, but with TypeDescriptor support.\n+\t// like ParameterizedTypeName.get, but with TypeDescriptor support.\n         final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n-        final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType)\n-                && !java.lang.reflect.Modifier.isStatic(((Class<?>) type.getRawType()).getModifiers())\n-                ? (ParameterizedType) type.getOwnerType() : null;\n-        List<TypeName> typeArguments = list(type.getActualTypeArguments(), map);\n+        final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType) && !java.lang.reflect.Modifier.isStatic(((Class<?>) type.getRawType()).getModifiers())\n+\t? (ParameterizedType) type.getOwnerType() : null;\n+\n+\tList<TypeName> typeArguments = list(type.getActualTypeArguments(), map);\n         return (ownerType != null)\n-                ? getForParameterizedTypes(ownerType, map)\n+\t? getForParameterizedTypes(ownerType, map)\n                 .nestedClass(rawType.simpleName(), typeArguments)\n                 : new ParameterizedTypeName(null, rawType, typeArguments);\n-\n-    }\n+\t}\n \n     private List<TypeName> list(Type[] types, Map<Type, TypeVariableName> map) {\n-        // TypeName.list, but with TypeDescriptor support.\n+\t// TypeName.list, but with TypeDescriptor support.\n         List<TypeName> result = new ArrayList<>(types.length);\n         for (Type type : types) {\n             result.add(get(type, map));\n-        }\n+\t}\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/13/PoetTypeNameResolver.java\nindex f77c072c5ff..4f04ba95570 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/13/PoetTypeNameResolver.java\n@@ -1,7 +1,6 @@\n package com.squareup.javapoet;\n \n import com.artemis.generator.model.type.TypeDescriptor;\n-\n import java.lang.reflect.ParameterizedType;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n@@ -15,42 +14,43 @@ import java.util.Map;\n  * @see TypeDescriptor\n  * @author Daan van Yperen\n  */\n+\n public class PoetTypeNameResolver {\n+ public TypeName get(Type type) {\n+  return get(type, new LinkedHashMap<Type, TypeVariableName>());\n+ }\n+\n+ private TypeName get(Type type, Map<Type, TypeVariableName> map) {\n+  if (type instanceof TypeDescriptor) {\n+   return ClassName.bestGuess(type.toString());\n+  }\n+\n+  if (type instanceof ParameterizedType) {\n+   return getForParameterizedTypes((ParameterizedType) type, map);\n+  }\n+\n+  return TypeName.get(type);\n+ }\n \n-    public TypeName get(Type type) {\n-        return get(type, new LinkedHashMap<Type, TypeVariableName>());\n-    }\n-\n-    private TypeName get(Type type, Map<Type, TypeVariableName> map) {\n-        if (type instanceof TypeDescriptor) {\n-            return ClassName.bestGuess(type.toString());\n-        }\n-        if (type instanceof ParameterizedType) {\n-            return getForParameterizedTypes((ParameterizedType) type, map);\n-        }\n-        return TypeName.get(type);\n-    }\n-\n-    private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map<Type, TypeVariableName> map) {\n+ private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map<Type, TypeVariableName> map) {\n         // like ParameterizedTypeName.get, but with TypeDescriptor support.\n-        final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n-        final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType)\n-                && !java.lang.reflect.Modifier.isStatic(((Class<?>) type.getRawType()).getModifiers())\n-                ? (ParameterizedType) type.getOwnerType() : null;\n-        List<TypeName> typeArguments = list(type.getActualTypeArguments(), map);\n-        return (ownerType != null)\n-                ? getForParameterizedTypes(ownerType, map)\n-                .nestedClass(rawType.simpleName(), typeArguments)\n-                : new ParameterizedTypeName(null, rawType, typeArguments);\n-\n-    }\n-\n-    private List<TypeName> list(Type[] types, Map<Type, TypeVariableName> map) {\n+  final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n+  final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType) && !java.lang.reflect.Modifier.isStatic(((Class<?>) type.getRawType()).getModifiers())\n+   ? (ParameterizedType) type.getOwnerType()\n+   : null;\n+  List<TypeName> typeArguments = list(type.getActualTypeArguments(), map);\n+  return (ownerType != null)\n+   ? getForParameterizedTypes(ownerType, map).nestedClass(rawType.simpleName(), typeArguments)\n+   : new ParameterizedTypeName(null, rawType, typeArguments);\n+ }\n+\n+ private List<TypeName> list(Type[] types, Map<Type, TypeVariableName> map) {\n         // TypeName.list, but with TypeDescriptor support.\n-        List<TypeName> result = new ArrayList<>(types.length);\n-        for (Type type : types) {\n-            result.add(get(type, map));\n-        }\n-        return result;\n-    }\n-}\n+  List<TypeName> result = new ArrayList< >(types.length);\n+  for (Type type : types) {\n+   result.add(get(type, map));\n+  }\n+\n+  return result;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/13/PoetTypeNameResolver.java\nindex f77c072c5ff..7a603ed4be4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/13/PoetTypeNameResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/13/PoetTypeNameResolver.java\n@@ -31,7 +31,9 @@ public class PoetTypeNameResolver {\n         return TypeName.get(type);\n     }\n \n-    private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map<Type, TypeVariableName> map) {\n+    private ParameterizedTypeName getForParameterizedTypes(ParameterizedType type, Map\n+\t\t\t\t\t<Type, TypeVariableName >map\n+    ) {\n         // like ParameterizedTypeName.get, but with TypeDescriptor support.\n         final ClassName rawType = ClassName.get((Class<?>) type.getRawType());\n         final ParameterizedType ownerType = (type.getOwnerType() instanceof ParameterizedType)\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}