{
    "project_name": "neo4j-neo4j",
    "violation_id": "545",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/545/GBPTreeInspection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/545/GBPTreeInspection.java\nindex 0fcdeeb2a8b..5418f941072 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/545/GBPTreeInspection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/545/GBPTreeInspection.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.eclipse.collections.api.list.primitive.ImmutableLongList;\n@@ -24,22 +25,23 @@ import org.eclipse.collections.api.list.primitive.ImmutableLongList;\n import java.util.List;\n import java.util.Map;\n \n-public class GBPTreeInspection<KEY,VALUE>\n+public class GBPTreeInspection<KEY, VALUE>\n {\n     private final ImmutableLongList internalNodes;\n     private final ImmutableLongList leafNodes;\n     private final ImmutableLongList allNodes;\n     private final ImmutableLongList offloadNodes;\n-    private final Map<Long,Integer> keyCounts;\n+    private final Map<Long, Integer> keyCounts;\n     private final List<ImmutableLongList> nodesPerLevel;\n     private final List<InspectingVisitor.FreelistEntry> allFreelistEntries;\n     private final long rootNode;\n     private final int lastLevel;\n     private final TreeState treeState;\n \n-    GBPTreeInspection( ImmutableLongList internalNodes, ImmutableLongList leafNodes, ImmutableLongList allNodes, ImmutableLongList offloadNodes,\n-            Map<Long,Integer> keyCounts, List<ImmutableLongList> nodesPerLevel, List<InspectingVisitor.FreelistEntry> allFreelistEntries, long rootNode,\n-            int lastLevel, TreeState treeState )\n+    GBPTreeInspection(ImmutableLongList internalNodes, ImmutableLongList leafNodes, ImmutableLongList allNodes, ImmutableLongList offloadNodes,\n+                      Map<Long, Integer> keyCounts, List<ImmutableLongList> nodesPerLevel, List<InspectingVisitor.FreelistEntry> allFreelistEntries,\n+                      long rootNode,\n+                      int lastLevel, TreeState treeState)\n     {\n         this.internalNodes = internalNodes;\n         this.leafNodes = leafNodes;\n@@ -73,7 +75,7 @@ public class GBPTreeInspection<KEY,VALUE>\n         return offloadNodes;\n     }\n \n-    public Map<Long,Integer> getKeyCounts()\n+    public Map<Long, Integer> getKeyCounts()\n     {\n         return keyCounts;\n     }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/545/GBPTreeInspection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/naturalize/545/GBPTreeInspection.java\nindex 0fcdeeb2a8b..4e2c763847a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/545/GBPTreeInspection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/naturalize/545/GBPTreeInspection.java\n@@ -102,4 +102,4 @@ public class GBPTreeInspection<KEY,VALUE>\n     {\n         return treeState;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}