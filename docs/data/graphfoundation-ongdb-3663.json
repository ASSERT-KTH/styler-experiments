{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "3663",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3663/TransactionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3663/TransactionRepresentation.java\nindex fdc23cca395..f0b662ca9e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3663/TransactionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3663/TransactionRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction;\n \n import org.neo4j.kernel.impl.locking.Locks;\n@@ -28,42 +29,42 @@ import org.neo4j.storageengine.api.CommandStream;\n  */\n public interface TransactionRepresentation extends CommandStream\n {\n-    /**\n-     * @return an additional header of this transaction. Just arbitrary bytes that means nothing\n-     * to this transaction representation.\n-     */\n-    byte[] additionalHeader();\n+  /**\n+   * @return an additional header of this transaction. Just arbitrary bytes that means nothing\n+   * to this transaction representation.\n+   */\n+  byte[] additionalHeader();\n \n-    /**\n-     * @return database instance id of current master in a potential database cluster at the time of committing\n-     * this transaction {@code -1} means no cluster.\n-     */\n-    int getMasterId();\n+  /**\n+   * @return database instance id of current master in a potential database cluster at the time of committing\n+   * this transaction {@code -1} means no cluster.\n+   */\n+  int getMasterId();\n \n-    /**\n-     * @return database instance id of the author of this transaction.\n-     */\n-    int getAuthorId();\n+  /**\n+   * @return database instance id of the author of this transaction.\n+   */\n+  int getAuthorId();\n \n-    /**\n-     * @return time when transaction was started, i.e. when the user started it, not when it was committed.\n-     * Reported in milliseconds.\n-     */\n-    long getTimeStarted();\n+  /**\n+   * @return time when transaction was started, i.e. when the user started it, not when it was committed.\n+   * Reported in milliseconds.\n+   */\n+  long getTimeStarted();\n \n-    /**\n-     * @return last committed transaction id at the time when this transaction was started.\n-     */\n-    long getLatestCommittedTxWhenStarted();\n+  /**\n+   * @return last committed transaction id at the time when this transaction was started.\n+   */\n+  long getLatestCommittedTxWhenStarted();\n \n-    /**\n-     * @return time when transaction was committed. Reported in milliseconds.\n-     */\n-    long getTimeCommitted();\n+  /**\n+   * @return time when transaction was committed. Reported in milliseconds.\n+   */\n+  long getTimeCommitted();\n \n-    /**\n-     * @return the identifier for the lock session associated with this transaction, or {@value Locks.Client#NO_LOCK_SESSION_ID} if none.\n-     * This is only used for slave commits.\n-     */\n-    int getLockSessionId();\n+  /**\n+   * @return the identifier for the lock session associated with this transaction, or {@value Locks.Client#NO_LOCK_SESSION_ID} if none.\n+   * This is only used for slave commits.\n+   */\n+  int getLockSessionId();\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3663/TransactionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3663/TransactionRepresentation.java\nindex fdc23cca395..8924cf57cdb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3663/TransactionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3663/TransactionRepresentation.java\n@@ -66,4 +66,4 @@ public interface TransactionRepresentation extends CommandStream\n      * This is only used for slave commits.\n      */\n     int getLockSessionId();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}