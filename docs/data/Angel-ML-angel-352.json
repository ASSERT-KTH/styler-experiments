{
    "project_name": "Angel-ML-angel",
    "violation_id": "352",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/352/NodeBinaryFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/352/NodeBinaryFormat.java\nindex 327fdd04b43..f4033a3b2ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/352/NodeBinaryFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/352/NodeBinaryFormat.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.common.data;\n \n import com.tencent.angel.ml.math2.matrix.Matrix;\n@@ -31,25 +32,25 @@ import org.apache.hadoop.fs.FSDataInputStream;\n \n public class NodeBinaryFormat extends RowBasedFormat {\n \n-  public NodeBinaryFormat(Configuration conf) {\n-    super(conf);\n-  }\n+    public NodeBinaryFormat(Configuration conf) {\n+        super(conf);\n+    }\n \n-  @Override\n-  public void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+    @Override\n+    public void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n+                     PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n \n-  }\n+    }\n \n-  @Override\n-  public void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+    @Override\n+    public void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n+                     PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n \n-  }\n+    }\n \n-  @Override\n-  public void load(Matrix matrix, MatrixPartitionMeta partMeta, MatrixLoadContext loadContext,\n-      FSDataInputStream in) throws IOException {\n+    @Override\n+    public void load(Matrix matrix, MatrixPartitionMeta partMeta, MatrixLoadContext loadContext,\n+                     FSDataInputStream in) throws IOException {\n \n-  }\n+    }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/352/NodeBinaryFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/352/NodeBinaryFormat.java\nindex 327fdd04b43..5a1bf72efee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/352/NodeBinaryFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/352/NodeBinaryFormat.java\n@@ -37,19 +37,13 @@ public class NodeBinaryFormat extends RowBasedFormat {\n \n   @Override\n   public void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n-\n-  }\n+      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {}\n \n   @Override\n   public void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n-\n-  }\n+      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {}\n \n   @Override\n   public void load(Matrix matrix, MatrixPartitionMeta partMeta, MatrixLoadContext loadContext,\n-      FSDataInputStream in) throws IOException {\n-\n-  }\n-}\n+      FSDataInputStream in) throws IOException {}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/352/NodeBinaryFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/352/NodeBinaryFormat.java\nindex 327fdd04b43..0653723d962 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/352/NodeBinaryFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/352/NodeBinaryFormat.java\n@@ -36,20 +36,15 @@ public class NodeBinaryFormat extends RowBasedFormat {\n   }\n \n   @Override\n-  public void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n-\n-  }\n+  public void load(\n+    RowBasedPartition part, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {}\n \n   @Override\n-  public void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n-\n-  }\n+  public void save(\n+    RowBasedPartition part, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {}\n \n   @Override\n-  public void load(Matrix matrix, MatrixPartitionMeta partMeta, MatrixLoadContext loadContext,\n-      FSDataInputStream in) throws IOException {\n+  public void load(\n+    Matrix matrix, MatrixPartitionMeta partMeta, MatrixLoadContext loadContext, FSDataInputStream in) throws IOException {}\n \n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}