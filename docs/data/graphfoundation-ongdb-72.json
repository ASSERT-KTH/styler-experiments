{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "72",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/72/CommittedTransactionSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/72/CommittedTransactionSerializer.java\nindex c55704557fd..9e725b23646 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/72/CommittedTransactionSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/72/CommittedTransactionSerializer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.com;\n \n import org.jboss.netty.buffer.ChannelBuffer;\n@@ -35,25 +36,25 @@ import org.neo4j.kernel.impl.transaction.log.entry.LogEntryWriter;\n  * network}.\n  * One serializer can be instantiated per response and is able to serialize one or many transactions.\n  */\n-public class CommittedTransactionSerializer implements Visitor<CommittedTransactionRepresentation,Exception>\n+public class CommittedTransactionSerializer implements Visitor<CommittedTransactionRepresentation, Exception>\n {\n-    private final LogEntryWriter writer;\n+  private final LogEntryWriter writer;\n \n-    public CommittedTransactionSerializer( FlushableChannel networkFlushableChannel )\n-    {\n-        this.writer = new LogEntryWriter( networkFlushableChannel );\n-    }\n+  public CommittedTransactionSerializer(FlushableChannel networkFlushableChannel)\n+  {\n+    this.writer = new LogEntryWriter(networkFlushableChannel);\n+  }\n \n-    @Override\n-    public boolean visit( CommittedTransactionRepresentation tx ) throws IOException\n-    {\n-        LogEntryStart startEntry = tx.getStartEntry();\n-        writer.writeStartEntry( startEntry.getMasterId(), startEntry.getLocalId(),\n-                startEntry.getTimeWritten(), startEntry.getLastCommittedTxWhenTransactionStarted(),\n-                startEntry.getAdditionalHeader() );\n-        writer.serialize( tx.getTransactionRepresentation() );\n-        LogEntryCommit commitEntry = tx.getCommitEntry();\n-        writer.writeCommitEntry( commitEntry.getTxId(), commitEntry.getTimeWritten() );\n-        return false;\n-    }\n+  @Override\n+  public boolean visit(CommittedTransactionRepresentation tx) throws IOException\n+  {\n+    LogEntryStart startEntry = tx.getStartEntry();\n+    writer.writeStartEntry(startEntry.getMasterId(), startEntry.getLocalId(),\n+        startEntry.getTimeWritten(), startEntry.getLastCommittedTxWhenTransactionStarted(),\n+        startEntry.getAdditionalHeader());\n+    writer.serialize(tx.getTransactionRepresentation());\n+    LogEntryCommit commitEntry = tx.getCommitEntry();\n+    writer.writeCommitEntry(commitEntry.getTxId(), commitEntry.getTimeWritten());\n+    return false;\n+  }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/72/CommittedTransactionSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/72/CommittedTransactionSerializer.java\nindex c55704557fd..2e7f0a5a096 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/72/CommittedTransactionSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/72/CommittedTransactionSerializer.java\n@@ -48,12 +48,10 @@ public class CommittedTransactionSerializer implements Visitor<CommittedTransact\n     public boolean visit( CommittedTransactionRepresentation tx ) throws IOException\n     {\n         LogEntryStart startEntry = tx.getStartEntry();\n-        writer.writeStartEntry( startEntry.getMasterId(), startEntry.getLocalId(),\n-                startEntry.getTimeWritten(), startEntry.getLastCommittedTxWhenTransactionStarted(),\n-                startEntry.getAdditionalHeader() );\n-        writer.serialize( tx.getTransactionRepresentation() );\n+        writer.writeStartEntry( startEntry.getMasterId(), startEntry.getLocalId(), startEntry.getTimeWritten(), startEntry.getLastCommittedTxWhenTransactionStarted(), startEntry.getAdditionalHeader() );\n+writer.serialize( tx.getTransactionRepresentation() );\n         LogEntryCommit commitEntry = tx.getCommitEntry();\n         writer.writeCommitEntry( commitEntry.getTxId(), commitEntry.getTimeWritten() );\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}