{
    "project_name": "Angel-ML-angel",
    "violation_id": "349",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/349/Sample.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/349/Sample.java\nindex c638734bd8a..0ceeac430fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/349/Sample.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/349/Sample.java\n@@ -40,64 +40,65 @@ import java.util.Random;\n  */\n public class Sample extends GetFunc {\n \n-  public Sample(SampleParam param) {\n-    super(param);\n-  }\n-\n-  public Sample() {\n-    this(null);\n-  }\n-\n-  @Override\n-  public PartitionGetResult partitionGet(PartitionGetParam partParam) {\n-    PartSampleParam param = (PartSampleParam) partParam;\n-    KeyPart keyPart = param.getIndicesPart();\n-    int sampleType = param.getSampleType();\n-\n-    long[] nodeIds = ((ILongKeyPartOp) keyPart).getKeys();\n-    Long2IntOpenHashMap nodeIdToSizes = new Long2IntOpenHashMap(nodeIds.length);\n-    for (int i = 0; i < nodeIds.length; i++) {\n-      nodeIdToSizes.addTo(nodeIds[i], 1);\n+    public Sample(SampleParam param) {\n+        super(param);\n     }\n \n-    ServerLongAnyRow row = GraphMatrixUtils.getPSLongKeyRow(psContext, param);\n-    Random r = new Random();\n-\n-    long[] distinctNodeIds = new long[nodeIdToSizes.size()];\n-    long[][] samples = new long[nodeIdToSizes.size()][];\n-    ObjectIterator<Entry> iter = nodeIdToSizes.long2IntEntrySet().fastIterator();\n-    int index = 0;\n-    while (iter.hasNext()) {\n-      Entry entry = iter.next();\n-      distinctNodeIds[index] = entry.getLongKey();\n-      TypeNeighborElement element = (TypeNeighborElement) row.get(distinctNodeIds[index]);\n-      samples[index] = element.sample(sampleType, r, distinctNodeIds[index], entry.getIntValue());\n-      index++;\n+    public Sample() {\n+        this(null);\n     }\n \n-    return new PartGetLongsResult(distinctNodeIds, samples);\n-  }\n-\n-  @Override\n-  public GetResult merge(List<PartitionGetResult> partResults) {\n-    int resultSize = 0;\n-    for (PartitionGetResult result : partResults) {\n-      resultSize += ((PartGetLongsResult) result).getData().length;\n+    @Override\n+    public PartitionGetResult partitionGet(PartitionGetParam partParam) {\n+        PartSampleParam param = (PartSampleParam) partParam;\n+        KeyPart keyPart = param.getIndicesPart();\n+        int sampleType = param.getSampleType();\n+\n+        long[] nodeIds = ((ILongKeyPartOp) keyPart).getKeys();\n+        Long2IntOpenHashMap nodeIdToSizes = new Long2IntOpenHashMap(nodeIds.length);\n+        for (int i = 0; i < nodeIds.length; i++) {\n+            nodeIdToSizes.addTo(nodeIds[i], 1);\n+        }\n+\n+        ServerLongAnyRow row = GraphMatrixUtils.getPSLongKeyRow(psContext, param);\n+        Random r = new Random();\n+\n+        long[] distinctNodeIds = new long[nodeIdToSizes.size()];\n+        long[][] samples = new long[nodeIdToSizes.size()][];\n+        ObjectIterator<Entry> iter = nodeIdToSizes.long2IntEntrySet().fastIterator();\n+        int index = 0;\n+        while (iter.hasNext()) {\n+            Entry entry = iter.next();\n+            distinctNodeIds[index] = entry.getLongKey();\n+            TypeNeighborElement element = (TypeNeighborElement) row.get(distinctNodeIds[index]);\n+            samples[index] =\n+                    element.sample(sampleType, r, distinctNodeIds[index], entry.getIntValue());\n+            index++;\n+        }\n+\n+        return new PartGetLongsResult(distinctNodeIds, samples);\n     }\n \n-    Long2ObjectOpenHashMap<long[]> nodeIdToNeighbors = new Long2ObjectOpenHashMap<>(resultSize);\n-\n-    for (PartitionGetResult result : partResults) {\n-      PartGetLongsResult partResult = (PartGetLongsResult) result;\n-      long[] nodeIds = partResult.getNodeIds();\n-      long[][] samples = partResult.getData();\n-      for (int i = 0; i < nodeIds.length; i++) {\n-        nodeIdToNeighbors.put(nodeIds[i], samples[i]);\n-      }\n+    @Override\n+    public GetResult merge(List<PartitionGetResult> partResults) {\n+        int resultSize = 0;\n+        for (PartitionGetResult result : partResults) {\n+            resultSize += ((PartGetLongsResult) result).getData().length;\n+        }\n+\n+        Long2ObjectOpenHashMap<long[]> nodeIdToNeighbors = new Long2ObjectOpenHashMap<>(resultSize);\n+\n+        for (PartitionGetResult result : partResults) {\n+            PartGetLongsResult partResult = (PartGetLongsResult) result;\n+            long[] nodeIds = partResult.getNodeIds();\n+            long[][] samples = partResult.getData();\n+            for (int i = 0; i < nodeIds.length; i++) {\n+                nodeIdToNeighbors.put(nodeIds[i], samples[i]);\n+            }\n+        }\n+\n+        return new GetLongsResult(nodeIdToNeighbors);\n     }\n-\n-    return new GetLongsResult(nodeIdToNeighbors);\n-  }\n }\n \n \n",
            "diff_size": 82
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/349/Sample.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/349/Sample.java\nindex c638734bd8a..5d977523c15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/349/Sample.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/349/Sample.java\n@@ -53,8 +53,7 @@ public class Sample extends GetFunc {\n     PartSampleParam param = (PartSampleParam) partParam;\n     KeyPart keyPart = param.getIndicesPart();\n     int sampleType = param.getSampleType();\n-\n-    long[] nodeIds = ((ILongKeyPartOp) keyPart).getKeys();\n+long[] nodeIds = ((ILongKeyPartOp) keyPart).getKeys();\n     Long2IntOpenHashMap nodeIdToSizes = new Long2IntOpenHashMap(nodeIds.length);\n     for (int i = 0; i < nodeIds.length; i++) {\n       nodeIdToSizes.addTo(nodeIds[i], 1);\n@@ -62,8 +61,7 @@ public class Sample extends GetFunc {\n \n     ServerLongAnyRow row = GraphMatrixUtils.getPSLongKeyRow(psContext, param);\n     Random r = new Random();\n-\n-    long[] distinctNodeIds = new long[nodeIdToSizes.size()];\n+long[] distinctNodeIds = new long[nodeIdToSizes.size()];\n     long[][] samples = new long[nodeIdToSizes.size()][];\n     ObjectIterator<Entry> iter = nodeIdToSizes.long2IntEntrySet().fastIterator();\n     int index = 0;\n@@ -98,6 +96,4 @@ public class Sample extends GetFunc {\n \n     return new GetLongsResult(nodeIdToNeighbors);\n   }\n-}\n-\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/349/Sample.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/349/Sample.java\nindex c638734bd8a..02586345a99 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/349/Sample.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/349/Sample.java\n@@ -38,6 +38,7 @@ import java.util.Random;\n /**\n  * Sample the neighbor\n  */\n+\n public class Sample extends GetFunc {\n \n   public Sample(SampleParam param) {\n@@ -53,7 +54,6 @@ public class Sample extends GetFunc {\n     PartSampleParam param = (PartSampleParam) partParam;\n     KeyPart keyPart = param.getIndicesPart();\n     int sampleType = param.getSampleType();\n-\n     long[] nodeIds = ((ILongKeyPartOp) keyPart).getKeys();\n     Long2IntOpenHashMap nodeIdToSizes = new Long2IntOpenHashMap(nodeIds.length);\n     for (int i = 0; i < nodeIds.length; i++) {\n@@ -62,7 +62,6 @@ public class Sample extends GetFunc {\n \n     ServerLongAnyRow row = GraphMatrixUtils.getPSLongKeyRow(psContext, param);\n     Random r = new Random();\n-\n     long[] distinctNodeIds = new long[nodeIdToSizes.size()];\n     long[][] samples = new long[nodeIdToSizes.size()][];\n     ObjectIterator<Entry> iter = nodeIdToSizes.long2IntEntrySet().fastIterator();\n@@ -74,7 +73,6 @@ public class Sample extends GetFunc {\n       samples[index] = element.sample(sampleType, r, distinctNodeIds[index], entry.getIntValue());\n       index++;\n     }\n-\n     return new PartGetLongsResult(distinctNodeIds, samples);\n   }\n \n@@ -86,7 +84,6 @@ public class Sample extends GetFunc {\n     }\n \n     Long2ObjectOpenHashMap<long[]> nodeIdToNeighbors = new Long2ObjectOpenHashMap<>(resultSize);\n-\n     for (PartitionGetResult result : partResults) {\n       PartGetLongsResult partResult = (PartGetLongsResult) result;\n       long[] nodeIds = partResult.getNodeIds();\n@@ -95,9 +92,7 @@ public class Sample extends GetFunc {\n         nodeIdToNeighbors.put(nodeIds[i], samples[i]);\n       }\n     }\n-\n     return new GetLongsResult(nodeIdToNeighbors);\n   }\n-}\n-\n \n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}