{
    "project_name": "Angel-ML-angel",
    "violation_id": "415",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/415/RobustRegLocalExample.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/415/RobustRegLocalExample.java\nindex 83c5deec7cb..2d0866e59ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/415/RobustRegLocalExample.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/415/RobustRegLocalExample.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.example.ml;\n \n import com.tencent.angel.conf.AngelConf;\n@@ -33,181 +34,181 @@ import java.io.File;\n import java.util.Scanner;\n \n public class RobustRegLocalExample {\n-  private static final Log LOG = LogFactory.getLog(RobustRegLocalExample.class);\n-  private static boolean inPackage = false;\n-  private static String CLASSBASE = \"com.tencent.angel.ml.regression.\";\n-\n-  static {\n-    File confFile = new File(\"../conf/log4j.properties\");\n-    if (confFile.exists()) {\n-      PropertyConfigurator.configure(\"../conf/log4j.properties\");\n-      inPackage = true;\n-    } else {\n-      PropertyConfigurator.configure(\"angel-ps/conf/log4j.properties\");\n+    private static final Log LOG = LogFactory.getLog(RobustRegLocalExample.class);\n+    private static boolean inPackage = false;\n+    private static String CLASSBASE = \"com.tencent.angel.ml.regression.\";\n+\n+    static {\n+        File confFile = new File(\"../conf/log4j.properties\");\n+        if (confFile.exists()) {\n+            PropertyConfigurator.configure(\"../conf/log4j.properties\");\n+            inPackage = true;\n+        } else {\n+            PropertyConfigurator.configure(\"angel-ps/conf/log4j.properties\");\n+        }\n     }\n-  }\n-\n-  private Configuration conf = new Configuration();\n-\n-  public static void main(String[] args) throws Exception {\n-    RobustRegLocalExample example = new RobustRegLocalExample();\n-    Scanner scanner = new Scanner(System.in);\n-    System.out.println(\"1-train 2-incTrain 3-predict\");\n-    System.out.println(\"Please input the mode:\");\n-    int mode = scanner.nextInt();\n-    switch (mode) {\n-      case 1:\n-        example.train();\n-        break;\n-      case 2:\n-        example.incTrain();\n-        break;\n-      case 3:\n-        example.predict();\n-        break;\n+\n+    private Configuration conf = new Configuration();\n+\n+    public static void main(String[] args) throws Exception {\n+        RobustRegLocalExample example = new RobustRegLocalExample();\n+        Scanner scanner = new Scanner(System.in);\n+        System.out.println(\"1-train 2-incTrain 3-predict\");\n+        System.out.println(\"Please input the mode:\");\n+        int mode = scanner.nextInt();\n+        switch (mode) {\n+            case 1:\n+                example.train();\n+                break;\n+            case 2:\n+                example.incTrain();\n+                break;\n+            case 3:\n+                example.predict();\n+                break;\n+        }\n+\n+        System.exit(0);\n     }\n \n-    System.exit(0);\n-  }\n+    public void setConf(int mode) {\n+\n+        String trainInput = \"\";\n+        String predictInput = \"\";\n+\n+        // Dataset\n+        if (inPackage) {\n+            trainInput = \"../data/abalone/abalone_8d_train.libsvm\";\n+            predictInput = \"../data/abalone/abalone_8d_train.libsvm\";\n+        } else {\n+            trainInput = \"data/abalone/abalone_8d_train.libsvm\";\n+            predictInput = \"data/abalone/abalone_8d_train.libsvm\";\n+        }\n+\n+        // Data format, libsvm or dummy\n+        String dataType = \"libsvm\";\n+        // Model type\n+        String modelType = String.valueOf(RowType.T_FLOAT_SPARSE);\n+\n+        // Feature number of train data\n+        int featureNum = 8;\n+        // Total iteration number\n+        int epochNum = 5;\n+        // Validation sample Ratio\n+        double vRatio = 0.3;\n+        //Model is classification\n+        boolean isClassification = false;\n+        // Train batch number per epoch.\n+        double spRatio = 1;\n+\n+        // Learning rate\n+        double learnRate = 2;\n+        // Decay of learning rate\n+        double decay = 2;\n+        // Regularization coefficient\n+        double reg = 0.0001;\n+\n+        String angelConfFile = null;\n+        if (inPackage) {\n+            angelConfFile = \"../examples/src/jsons/robustreg.json\";\n+        } else {\n+            angelConfFile = \"angel-ps/examples/src/jsons/robustreg.json\";\n+        }\n+\n+        // Set file system\n+        String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n+        String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n+\n+        // Set basic configuration keys\n+        conf.setBoolean(\"mapred.mapper.new-api\", true);\n+        conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n+        conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 50);\n+\n+        // Use local deploy mode and data format\n+        conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n+        conf.set(AngelMLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));\n+        conf.setStrings(AngelConf.ANGEL_ML_CONF, angelConfFile);\n+        conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());\n+\n+        // Set data path\n+        conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n+        if (mode == 1) {  // train mode\n+            conf.set(AngelConf.ANGEL_ACTION_TYPE, \"train\");\n+            conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n+            conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n+        } else if (mode == 2) { // incTrain mode\n+            conf.set(AngelConf.ANGEL_ACTION_TYPE, \"inctrain\");\n+            conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n+            conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n+            conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg-inc\");\n+        } else if (mode == 3) {  // predict mode\n+            conf.set(AngelConf.ANGEL_ACTION_TYPE, \"predict\");\n+            conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, predictInput);\n+            conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n+            conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict/RobustReg\");\n+        }\n+        conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n+\n+        // Set angel resource parameters #worker, #task, #PS\n+        conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n+        conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n+\n+        // Set LR algorithm parameters\n+        conf.set(AngelMLConf.ML_MODEL_TYPE(), modelType);\n+        conf.setBoolean(AngelMLConf.ML_MODEL_IS_CLASSIFICATION(), isClassification);\n+        conf.set(AngelMLConf.ML_FEATURE_INDEX_RANGE(), String.valueOf(featureNum));\n+        conf.set(AngelMLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));\n+        conf.set(AngelMLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));\n+        conf.set(AngelMLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));\n+        conf.set(AngelMLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n+        conf.set(AngelMLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));\n+        conf.set(AngelMLConf.ML_REG_L2(), String.valueOf(reg));\n+        conf.setLong(AngelMLConf.ML_MODEL_SIZE(), 124L);\n+\n+        // Set model class\n+        conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + \"RobustRegression\");\n \n-  public void setConf(int mode) {\n+    }\n \n-    String trainInput = \"\";\n-    String predictInput = \"\";\n+    public void train() {\n \n-    // Dataset\n-    if (inPackage) {\n-      trainInput = \"../data/abalone/abalone_8d_train.libsvm\";\n-      predictInput = \"../data/abalone/abalone_8d_train.libsvm\";\n-    } else {\n-      trainInput = \"data/abalone/abalone_8d_train.libsvm\";\n-      predictInput = \"data/abalone/abalone_8d_train.libsvm\";\n-    }\n+        try {\n+            setConf(1);\n \n-    // Data format, libsvm or dummy\n-    String dataType = \"libsvm\";\n-    // Model type\n-    String modelType = String.valueOf(RowType.T_FLOAT_SPARSE);\n-\n-    // Feature number of train data\n-    int featureNum = 8;\n-    // Total iteration number\n-    int epochNum = 5;\n-    // Validation sample Ratio\n-    double vRatio = 0.3;\n-    //Model is classification\n-    boolean isClassification = false;\n-    // Train batch number per epoch.\n-    double spRatio = 1;\n-\n-    // Learning rate\n-    double learnRate = 2;\n-    // Decay of learning rate\n-    double decay = 2;\n-    // Regularization coefficient\n-    double reg = 0.0001;\n-\n-    String angelConfFile = null;\n-    if (inPackage) {\n-      angelConfFile = \"../examples/src/jsons/robustreg.json\";\n-    } else {\n-      angelConfFile = \"angel-ps/examples/src/jsons/robustreg.json\";\n-    }\n+            GraphRunner runner = new GraphRunner();\n+            runner.train(conf);\n+        } catch (Exception e) {\n+            LOG.error(\"run LinearRegLocalExample:train failed.\", e);\n+            throw e;\n+        }\n \n-    // Set file system\n-    String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n-    String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n-\n-    // Set basic configuration keys\n-    conf.setBoolean(\"mapred.mapper.new-api\", true);\n-    conf.setBoolean(AngelConf.ANGEL_JOB_OUTPUT_PATH_DELETEONEXIST, true);\n-    conf.setInt(AngelConf.ANGEL_PSAGENT_CACHE_SYNC_TIMEINTERVAL_MS, 50);\n-\n-    // Use local deploy mode and data format\n-    conf.set(AngelConf.ANGEL_DEPLOY_MODE, \"LOCAL\");\n-    conf.set(AngelMLConf.ML_DATA_INPUT_FORMAT(), String.valueOf(dataType));\n-    conf.setStrings(AngelConf.ANGEL_ML_CONF, angelConfFile);\n-    conf.set(MLCoreConf.ML_OPTIMIZER_JSON_PROVIDER(), PSOptimizerProvider.class.getName());\n-\n-    // Set data path\n-    conf.set(AngelConf.ANGEL_INPUTFORMAT_CLASS, CombineTextInputFormat.class.getName());\n-    if (mode == 1) {  // train mode\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, \"train\");\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n-    } else if (mode == 2) { // incTrain mode\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, \"inctrain\");\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg-inc\");\n-    } else if (mode == 3) {  // predict mode\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, \"predict\");\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, predictInput);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict/RobustReg\");\n-    }\n-    conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n-\n-    // Set angel resource parameters #worker, #task, #PS\n-    conf.setInt(AngelConf.ANGEL_WORKERGROUP_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_WORKER_TASK_NUMBER, 1);\n-    conf.setInt(AngelConf.ANGEL_PS_NUMBER, 1);\n-\n-    // Set LR algorithm parameters\n-    conf.set(AngelMLConf.ML_MODEL_TYPE(), modelType);\n-    conf.setBoolean(AngelMLConf.ML_MODEL_IS_CLASSIFICATION(), isClassification);\n-    conf.set(AngelMLConf.ML_FEATURE_INDEX_RANGE(), String.valueOf(featureNum));\n-    conf.set(AngelMLConf.ML_EPOCH_NUM(), String.valueOf(epochNum));\n-    conf.set(AngelMLConf.ML_BATCH_SAMPLE_RATIO(), String.valueOf(spRatio));\n-    conf.set(AngelMLConf.ML_VALIDATE_RATIO(), String.valueOf(vRatio));\n-    conf.set(AngelMLConf.ML_LEARN_RATE(), String.valueOf(learnRate));\n-    conf.set(AngelMLConf.ML_OPT_DECAY_ALPHA(), String.valueOf(decay));\n-    conf.set(AngelMLConf.ML_REG_L2(), String.valueOf(reg));\n-    conf.setLong(AngelMLConf.ML_MODEL_SIZE(), 124L);\n-\n-    // Set model class\n-    conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + \"RobustRegression\");\n-\n-  }\n-\n-  public void train() {\n-\n-    try {\n-      setConf(1);\n-\n-      GraphRunner runner = new GraphRunner();\n-      runner.train(conf);\n-    } catch (Exception e) {\n-      LOG.error(\"run LinearRegLocalExample:train failed.\", e);\n-      throw e;\n     }\n \n-  }\n+    public void incTrain() {\n \n-  public void incTrain() {\n+        try {\n+            setConf(2);\n \n-    try {\n-      setConf(2);\n+            GraphRunner runner = new GraphRunner();\n+            runner.train(conf);\n+        } catch (Exception e) {\n+            LOG.error(\"run LinearRegLocalExample:incTrain failed.\", e);\n+            throw e;\n+        }\n \n-      GraphRunner runner = new GraphRunner();\n-      runner.train(conf);\n-    } catch (Exception e) {\n-      LOG.error(\"run LinearRegLocalExample:incTrain failed.\", e);\n-      throw e;\n     }\n \n-  }\n-\n-  public void predict() {\n+    public void predict() {\n \n-    try {\n-      setConf(3);\n+        try {\n+            setConf(3);\n \n-      GraphRunner runner = new GraphRunner();\n-      runner.predict(conf);\n-    } catch (Exception e) {\n-      LOG.error(\"run LinearRegLocalExample:predict failed.\", e);\n-      throw e;\n+            GraphRunner runner = new GraphRunner();\n+            runner.predict(conf);\n+        } catch (Exception e) {\n+            LOG.error(\"run LinearRegLocalExample:predict failed.\", e);\n+            throw e;\n+        }\n     }\n-  }\n }\n",
            "diff_size": 264
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/415/RobustRegLocalExample.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/415/RobustRegLocalExample.java\nindex 83c5deec7cb..8cc610e0978 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/415/RobustRegLocalExample.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/415/RobustRegLocalExample.java\n@@ -28,11 +28,11 @@ import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.LocalFileSystem;\n import org.apache.hadoop.mapreduce.lib.input.CombineTextInputFormat;\n import org.apache.log4j.PropertyConfigurator;\n-\n import java.io.File;\n import java.util.Scanner;\n \n public class RobustRegLocalExample {\n+\n   private static final Log LOG = LogFactory.getLog(RobustRegLocalExample.class);\n   private static boolean inPackage = false;\n   private static String CLASSBASE = \"com.tencent.angel.ml.regression.\";\n@@ -54,6 +54,7 @@ public class RobustRegLocalExample {\n     Scanner scanner = new Scanner(System.in);\n     System.out.println(\"1-train 2-incTrain 3-predict\");\n     System.out.println(\"Please input the mode:\");\n+\n     int mode = scanner.nextInt();\n     switch (mode) {\n       case 1:\n@@ -66,12 +67,10 @@ public class RobustRegLocalExample {\n         example.predict();\n         break;\n     }\n-\n     System.exit(0);\n   }\n \n   public void setConf(int mode) {\n-\n     String trainInput = \"\";\n     String predictInput = \"\";\n \n@@ -85,6 +84,7 @@ public class RobustRegLocalExample {\n     }\n \n     // Data format, libsvm or dummy\n+\n     String dataType = \"libsvm\";\n     // Model type\n     String modelType = String.valueOf(RowType.T_FLOAT_SPARSE);\n@@ -106,7 +106,6 @@ public class RobustRegLocalExample {\n     double decay = 2;\n     // Regularization coefficient\n     double reg = 0.0001;\n-\n     String angelConfFile = null;\n     if (inPackage) {\n       angelConfFile = \"../examples/src/jsons/robustreg.json\";\n@@ -115,6 +114,7 @@ public class RobustRegLocalExample {\n     }\n \n     // Set file system\n+\n     String LOCAL_FS = LocalFileSystem.DEFAULT_FS;\n     String TMP_PATH = System.getProperty(\"java.io.tmpdir\", \"/tmp\");\n \n@@ -136,16 +136,16 @@ public class RobustRegLocalExample {\n       conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n       conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n     } else if (mode == 2) { // incTrain mode\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, \"inctrain\");\n-      conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n-      conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg-inc\");\n+             conf.set(AngelConf.ANGEL_ACTION_TYPE, \"inctrain\");\n+             conf.set(AngelConf.ANGEL_TRAIN_DATA_PATH, trainInput);\n+             conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n+             conf.set(AngelConf.ANGEL_SAVE_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg-inc\");\n     } else if (mode == 3) {  // predict mode\n-      conf.set(AngelConf.ANGEL_ACTION_TYPE, \"predict\");\n-      conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, predictInput);\n-      conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n-      conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict/RobustReg\");\n-    }\n+             conf.set(AngelConf.ANGEL_ACTION_TYPE, \"predict\");\n+             conf.set(AngelConf.ANGEL_PREDICT_DATA_PATH, predictInput);\n+             conf.set(AngelConf.ANGEL_LOAD_MODEL_PATH, LOCAL_FS + TMP_PATH + \"/model/RobustReg\");\n+             conf.set(AngelConf.ANGEL_PREDICT_PATH, LOCAL_FS + TMP_PATH + \"/predict/RobustReg\");\n+           }\n     conf.set(AngelConf.ANGEL_LOG_PATH, LOCAL_FS + TMP_PATH + \"/log\");\n \n     // Set angel resource parameters #worker, #task, #PS\n@@ -167,42 +167,33 @@ public class RobustRegLocalExample {\n \n     // Set model class\n     conf.set(AngelMLConf.ML_MODEL_CLASS_NAME(), CLASSBASE + \"RobustRegression\");\n-\n   }\n \n   public void train() {\n-\n     try {\n       setConf(1);\n-\n       GraphRunner runner = new GraphRunner();\n       runner.train(conf);\n     } catch (Exception e) {\n       LOG.error(\"run LinearRegLocalExample:train failed.\", e);\n       throw e;\n     }\n-\n   }\n \n   public void incTrain() {\n-\n     try {\n       setConf(2);\n-\n       GraphRunner runner = new GraphRunner();\n       runner.train(conf);\n     } catch (Exception e) {\n       LOG.error(\"run LinearRegLocalExample:incTrain failed.\", e);\n       throw e;\n     }\n-\n   }\n \n   public void predict() {\n-\n     try {\n       setConf(3);\n-\n       GraphRunner runner = new GraphRunner();\n       runner.predict(conf);\n     } catch (Exception e) {\n@@ -210,4 +201,4 @@ public class RobustRegLocalExample {\n       throw e;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}