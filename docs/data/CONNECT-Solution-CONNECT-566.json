{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "566",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.redactionengine.adapter.AdapterRedactionEngineOrchImpl;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/566/AdapterRedactionEngineProxyJavaImpl.java\nindex b3c52350e14..6c782f9f5a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/566/AdapterRedactionEngineProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/566/AdapterRedactionEngineProxyJavaImpl.java\nindex b3c52350e14..920c377cf4e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/566/AdapterRedactionEngineProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -41,21 +42,21 @@ import org.slf4j.LoggerFactory;\n  * @author Neil Webb\n  */\n public class AdapterRedactionEngineProxyJavaImpl implements AdapterRedactionEngineProxy {\n-    private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyJavaImpl.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyJavaImpl.class);\n \n-    @Override\n-    public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n-            AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n-        LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n-        return new AdapterRedactionEngineOrchImpl().filterAdhocQueryResults(adhocQueryRequest, adhocQueryResponse);\n-    }\n+  @Override\n+  public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n+                                                    AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n+    LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n+    return new AdapterRedactionEngineOrchImpl().filterAdhocQueryResults(adhocQueryRequest, adhocQueryResponse);\n+  }\n \n-    @Override\n-    public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n-            RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n-            RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n-        LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n-        return new AdapterRedactionEngineOrchImpl().filterRetrieveDocumentSetResults(retrieveDocumentSetRequest,\n-                retrieveDocumentSetResponse);\n-    }\n+  @Override\n+  public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n+      RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n+      RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n+    LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n+    return new AdapterRedactionEngineOrchImpl().filterRetrieveDocumentSetResults(retrieveDocumentSetRequest,\n+        retrieveDocumentSetResponse);\n+  }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/566/AdapterRedactionEngineProxyJavaImpl.java\nindex b3c52350e14..56f181cd8d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/566/AdapterRedactionEngineProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -44,18 +45,17 @@ public class AdapterRedactionEngineProxyJavaImpl implements AdapterRedactionEngi\n     private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyJavaImpl.class);\n \n     @Override\n-    public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n-            AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n+    public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest, AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n         LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n-        return new AdapterRedactionEngineOrchImpl().filterAdhocQueryResults(adhocQueryRequest, adhocQueryResponse);\n+\n+return new AdapterRedactionEngineOrchImpl().filterAdhocQueryResults(adhocQueryRequest, adhocQueryResponse);\n     }\n \n     @Override\n     public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n-            RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n-            RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n+            RetrieveDocumentSetRequestType retrieveDocumentSetRequest, RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n         LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n-        return new AdapterRedactionEngineOrchImpl().filterRetrieveDocumentSetResults(retrieveDocumentSetRequest,\n-                retrieveDocumentSetResponse);\n+\n+return new AdapterRedactionEngineOrchImpl().filterRetrieveDocumentSetResults(retrieveDocumentSetRequest, retrieveDocumentSetResponse);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/566/AdapterRedactionEngineProxyJavaImpl.java\nindex b3c52350e14..e74736a05f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/566/AdapterRedactionEngineProxyJavaImpl.java\n@@ -40,22 +40,26 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author Neil Webb\n  */\n+\n+\n public class AdapterRedactionEngineProxyJavaImpl implements AdapterRedactionEngineProxy {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(AdapterRedactionEngineProxyJavaImpl.class);\n \n+\n     @Override\n     public AdhocQueryResponse filterAdhocQueryResults(AdhocQueryRequest adhocQueryRequest,\n-            AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n+        AdhocQueryResponse adhocQueryResponse, AssertionType assertion) {\n         LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n         return new AdapterRedactionEngineOrchImpl().filterAdhocQueryResults(adhocQueryRequest, adhocQueryResponse);\n     }\n \n+\n     @Override\n-    public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(\n-            RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n-            RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n+    public RetrieveDocumentSetResponseType filterRetrieveDocumentSetResults(RetrieveDocumentSetRequestType retrieveDocumentSetRequest,\n+        RetrieveDocumentSetResponseType retrieveDocumentSetResponse, AssertionType assertion) {\n         LOG.trace(\"Using Java Implementation for Adapter Redaction Engine Service\");\n-        return new AdapterRedactionEngineOrchImpl().filterRetrieveDocumentSetResults(retrieveDocumentSetRequest,\n-                retrieveDocumentSetResponse);\n+        return new AdapterRedactionEngineOrchImpl().filterRetrieveDocumentSetResults(retrieveDocumentSetRequest, retrieveDocumentSetResponse);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/566/AdapterRedactionEngineProxyJavaImpl.java\nindex b3c52350e14..6c782f9f5a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/566/AdapterRedactionEngineProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/566/AdapterRedactionEngineProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.redactionengine.adapter.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}