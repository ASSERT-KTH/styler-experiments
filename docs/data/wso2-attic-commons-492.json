{
    "project_name": "wso2-attic-commons",
    "violation_id": "492",
    "information": {
        "violations": [
            {
                "line": "68",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 130).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                .append(\"@\").append(CARBON_CLIENT_ID)\n                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                .toString();\n    }\n}",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/492/JNDIContext.java\nindex 66752563730..0a8789c32c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/492/JNDIContext.java\n@@ -65,7 +65,8 @@ public class JNDIContext {\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n                 .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).\n+                append(\"'\")\n                 .toString();\n     }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/492/JNDIContext.java\nindex 66752563730..633e7c2357d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/492/JNDIContext.java\n@@ -5,67 +5,74 @@ import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import java.util.Properties;\n+\n public class JNDIContext {\n-    public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n-    private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n-    private static final String CF_NAME = \"ConnectionFactory\";\n-    private static final String userName = \"admin\";\n-    private static final String password = \"admin\";\n-    private static String CARBON_CLIENT_ID = \"clientid\";\n-    private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n-    private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";\n-    private static String CARBON_DEFAULT_PORT = \"5673\";\n-    private InitialContext initContext = null;\n-    private TopicConnectionFactory topicConnectionFactory = null;\n-    public static JNDIContext instance = null;\n-    private JNDIContext() {\n-        createInitialContext();\n-        createConnectionFactory();\n-    }\n-    public InitialContext getInitContext() {\n-        return initContext;\n-    }\n-    public TopicConnectionFactory getTopicConnectionFactory() {\n-        return topicConnectionFactory;\n-    }\n-    public static JNDIContext getInstance() {\n-        if (instance == null) {\n-            instance = new JNDIContext();\n-        }\n-        return instance;\n-    }\n-    /**\n-     * Create Connection factory with initial context\n-     */\n-    private void createConnectionFactory() {\n-        try {\n-            topicConnectionFactory = (TopicConnectionFactory) initContext.lookup(\"ConnectionFactory\");\n-        } catch (NamingException e) {\n-            System.out.println(\"Can not create topic connection factory.\" + e);\n-        }\n+  public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n+  private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n+  private static final String CF_NAME = \"ConnectionFactory\";\n+  private static final String userName = \"admin\";\n+  private static final String password = \"admin\";\n+  private static String CARBON_CLIENT_ID = \"clientid\";\n+  private static String CARBON_VIRTUAL_HOST_NAME = \"carbon\";\n+  private static String CARBON_DEFAULT_HOSTNAME = \"localhost\";\n+  private static String CARBON_DEFAULT_PORT = \"5673\";\n+  private InitialContext initContext = null;\n+  private TopicConnectionFactory topicConnectionFactory = null;\n+  public static JNDIContext instance = null;\n+\n+  private JNDIContext() {\n+    createInitialContext();\n+    createConnectionFactory();\n+  }\n+\n+  public InitialContext getInitContext() {\n+    return initContext;\n+  }\n+\n+  public TopicConnectionFactory getTopicConnectionFactory() {\n+    return topicConnectionFactory;\n+  }\n+\n+  public static JNDIContext getInstance() {\n+    if (instance == null) {\n+      instance = new JNDIContext();\n     }\n-    /**\n-     * Create Initial Context with given configuration\n-     */\n-    private void createInitialContext() {\n- \n-        try {\n-            Properties properties = new Properties();\n-            properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n-            properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n-            System.out.println(\"TCPConnectionURL: = \" + getTCPConnectionURL(userName, password));\n-            initContext = new InitialContext(properties);\n-        } catch (NamingException e) {\n-            System.out.println(\"Can not create initial context with given parameters.\" + e);\n-        }\n+    return instance;\n+  }\n+\n+  /**\n+   * Create Connection factory with initial context\n+   */\n+  private void createConnectionFactory() {\n+    try {\n+      topicConnectionFactory = (TopicConnectionFactory) initContext.lookup(\"ConnectionFactory\");\n+    } catch (NamingException e) {\n+      System.out.println(\"Can not create topic connection factory.\" + e);\n     }\n- \n-    public String getTCPConnectionURL(String username, String password) {\n-        return new StringBuffer()\n-                .append(\"amqp://\").append(username).append(\":\").append(password)\n-                .append(\"@\").append(CARBON_CLIENT_ID)\n-                .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n-                .toString();\n+  }\n+\n+  /**\n+   * Create Initial Context with given configuration\n+   */\n+  private void createInitialContext() {\n+\n+    try {\n+      Properties properties = new Properties();\n+      properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n+      properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n+      System.out.println(\"TCPConnectionURL: = \" + getTCPConnectionURL(userName, password));\n+      initContext = new InitialContext(properties);\n+    } catch (NamingException e) {\n+      System.out.println(\"Can not create initial context with given parameters.\" + e);\n     }\n+  }\n+\n+  public String getTCPConnectionURL(String username, String password) {\n+    return new StringBuffer()\n+      .append(\"amqp://\").append(username).append(\":\").append(password)\n+      .append(\"@\").append(CARBON_CLIENT_ID)\n+      .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n+      .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+      .toString();\n+  }\n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/492/JNDIContext.java\nindex 66752563730..67713f82961 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/492/JNDIContext.java\n@@ -5,6 +5,7 @@ import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import java.util.Properties;\n+\n public class JNDIContext {\n     public static final String QPID_ICF = \"org.wso2.andes.jndi.PropertiesFileInitialContextFactory\";\n     private static final String CF_NAME_PREFIX = \"connectionfactory.\";\n@@ -48,8 +49,7 @@ public class JNDIContext {\n      * Create Initial Context with given configuration\n      */\n     private void createInitialContext() {\n- \n-        try {\n+    try {\n             Properties properties = new Properties();\n             properties.put(Context.INITIAL_CONTEXT_FACTORY, QPID_ICF);\n             properties.put(CF_NAME_PREFIX + CF_NAME, getTCPConnectionURL(userName, password));\n@@ -59,13 +59,13 @@ public class JNDIContext {\n             System.out.println(\"Can not create initial context with given parameters.\" + e);\n         }\n     }\n- \n-    public String getTCPConnectionURL(String username, String password) {\n-        return new StringBuffer()\n+\n+public String getTCPConnectionURL(String username, String password) {\n+    return new StringBuffer()\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n                 .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n                 .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                 .toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/492/JNDIContext.java\nindex 66752563730..0a8789c32c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/random/files-repaired/492/JNDIContext.java\n@@ -65,7 +65,8 @@ public class JNDIContext {\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n                 .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).\n+                append(\"'\")\n                 .toString();\n     }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/492/JNDIContext.java\nindex 66752563730..5093d81becb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/492/JNDIContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/492/JNDIContext.java\n@@ -65,7 +65,8 @@ public class JNDIContext {\n                 .append(\"amqp://\").append(username).append(\":\").append(password)\n                 .append(\"@\").append(CARBON_CLIENT_ID)\n                 .append(\"/\").append(CARBON_VIRTUAL_HOST_NAME)\n-                .append(\"?brokerlist='tcp://\").append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n+                .append(\"?brokerlist='tcp://\")\n+                .append(CARBON_DEFAULT_HOSTNAME).append(\":\").append(CARBON_DEFAULT_PORT).append(\"'\")\n                 .toString();\n     }\n }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}