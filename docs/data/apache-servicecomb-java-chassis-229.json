{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "229",
    "information": {
        "violations": [
            {
                "line": "128",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  /**\n   * Get property names from {@link EnumerablePropertySource}, and get property value from {@link ConfigurableEnvironment#getProperty(String)}\n   */\n  private void getProperties(ConfigurableEnvironment environment, PropertySource<?> propertySource,\n      Map<String, Object> configFromSpringBoot) {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/229/ConfigurationSpringInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/229/ConfigurationSpringInitializer.java\nindex 0288d93e6d4..800733ae269 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/229/ConfigurationSpringInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/229/ConfigurationSpringInitializer.java\n@@ -51,6 +51,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n \n   /**\n    * Get configurations from Spring, merge them into the configurations of ServiceComb.\n+   *\n    * @param environment From which to get the extra config.\n    */\n   @Override\n@@ -90,6 +91,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n \n   /**\n    * Try to get a name for identifying the environment.\n+   *\n    * @param environment the target that the name is generated for.\n    * @return The generated name for the environment.\n    */\n@@ -128,7 +130,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n    * Get property names from {@link EnumerablePropertySource}, and get property value from {@link ConfigurableEnvironment#getProperty(String)}\n    */\n   private void getProperties(ConfigurableEnvironment environment, PropertySource<?> propertySource,\n-      Map<String, Object> configFromSpringBoot) {\n+                             Map<String, Object> configFromSpringBoot) {\n     if (propertySource instanceof CompositePropertySource) {\n       // recursively get EnumerablePropertySource\n       CompositePropertySource compositePropertySource = (CompositePropertySource) propertySource;\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/229/ConfigurationSpringInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/229/ConfigurationSpringInitializer.java\nindex 0288d93e6d4..3395b1cd010 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/229/ConfigurationSpringInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/229/ConfigurationSpringInitializer.java\n@@ -145,4 +145,4 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n \n     LOGGER.debug(\"a none EnumerablePropertySource is ignored, propertySourceName = [{}]\", propertySource.getName());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/229/ConfigurationSpringInitializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/229/ConfigurationSpringInitializer.java\nindex 0288d93e6d4..cd291e943f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/229/ConfigurationSpringInitializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/229/ConfigurationSpringInitializer.java\n@@ -22,7 +22,6 @@ import java.util.HashMap;\n import java.util.Iterator;\n import java.util.Map;\n import java.util.Properties;\n-\n import org.apache.commons.configuration.AbstractConfiguration;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -35,7 +34,6 @@ import org.springframework.core.env.EnumerablePropertySource;\n import org.springframework.core.env.Environment;\n import org.springframework.core.env.PropertySource;\n import org.springframework.util.StringUtils;\n-\n import com.netflix.config.ConfigurationManager;\n import com.netflix.config.DynamicPropertyFactory;\n \n@@ -53,22 +51,20 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n    * Get configurations from Spring, merge them into the configurations of ServiceComb.\n    * @param environment From which to get the extra config.\n    */\n+\n   @Override\n   public void setEnvironment(Environment environment) {\n     String environmentName = generateNameForEnvironment(environment);\n     LOGGER.info(\"Environment received, will get configurations from [{}].\", environmentName);\n \n     Map<String, Object> extraConfig = getAllProperties(environment);\n-\n     ConfigUtil.addExtraConfig(EXTRA_CONFIG_SOURCE_PREFIX + environmentName, extraConfig);\n-\n     ConfigUtil.installDynamicConfig();\n   }\n \n   @Override\n   protected Properties mergeProperties() throws IOException {\n     Properties properties = super.mergeProperties();\n-\n     AbstractConfiguration config = ConfigurationManager.getConfigInstance();\n     Iterator<String> iter = config.getKeys();\n     while (iter.hasNext()) {\n@@ -83,7 +79,8 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n   protected String resolvePlaceholder(String placeholder, Properties props) {\n     String propertyValue = super.resolvePlaceholder(placeholder, props);\n     if (propertyValue == null) {\n-      return DynamicPropertyFactory.getInstance().getStringProperty(placeholder, null).get();\n+      return DynamicPropertyFactory.getInstance().getStringProperty(placeholder, null)\n+                                                 .get();\n     }\n     return propertyValue;\n   }\n@@ -93,6 +90,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n    * @param environment the target that the name is generated for.\n    * @return The generated name for the environment.\n    */\n+\n   private String generateNameForEnvironment(Environment environment) {\n     String environmentName = environment.getProperty(\"spring.config.name\");\n     if (!StringUtils.isEmpty(environmentName)) {\n@@ -103,16 +101,15 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n     if (!StringUtils.isEmpty(environmentName)) {\n       return environmentName;\n     }\n-\n     return environment.getClass().getName() + \"@\" + environment.hashCode();\n   }\n \n   /**\n    * Traversal all {@link PropertySource} of {@link ConfigurableEnvironment}, and try to get all properties.\n    */\n+\n   private Map<String, Object> getAllProperties(Environment environment) {\n     Map<String, Object> configFromSpringBoot = new HashMap<>();\n-\n     if (!(environment instanceof ConfigurableEnvironment)) {\n       return configFromSpringBoot;\n     }\n@@ -127,14 +124,16 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n   /**\n    * Get property names from {@link EnumerablePropertySource}, and get property value from {@link ConfigurableEnvironment#getProperty(String)}\n    */\n-  private void getProperties(ConfigurableEnvironment environment, PropertySource<?> propertySource,\n-      Map<String, Object> configFromSpringBoot) {\n+\n+  private void getProperties(ConfigurableEnvironment environment,\n+    PropertySource<?> propertySource, Map<String, Object> configFromSpringBoot) {\n     if (propertySource instanceof CompositePropertySource) {\n       // recursively get EnumerablePropertySource\n       CompositePropertySource compositePropertySource = (CompositePropertySource) propertySource;\n       compositePropertySource.getPropertySources().forEach(ps -> getProperties(environment, ps, configFromSpringBoot));\n       return;\n     }\n+\n     if (propertySource instanceof EnumerablePropertySource) {\n       EnumerablePropertySource<?> enumerablePropertySource = (EnumerablePropertySource<?>) propertySource;\n       for (String propertyName : enumerablePropertySource.getPropertyNames()) {\n@@ -143,6 +142,7 @@ public class ConfigurationSpringInitializer extends PropertyPlaceholderConfigure\n       return;\n     }\n \n-    LOGGER.debug(\"a none EnumerablePropertySource is ignored, propertySourceName = [{}]\", propertySource.getName());\n+    LOGGER.debug(\"a none EnumerablePropertySource is ignored, propertySourceName = [{}]\",\n+propertySource.getName());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "128",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}