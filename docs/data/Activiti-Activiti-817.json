{
    "project_name": "Activiti-Activiti",
    "violation_id": "817",
    "information": {
        "violations": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.converter.export;\n\nimport javax.xml.stream.XMLStreamWriter;\nimport org.activiti.bpmn.constants.BpmnXMLConstants;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/817/MultiInstanceExport.java\nindex 74400934085..cb06e59a5ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/817/MultiInstanceExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/817/MultiInstanceExport.java\nindex 74400934085..5b88282fce5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/817/MultiInstanceExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n@@ -24,52 +25,52 @@ import org.apache.commons.lang3.StringUtils;\n \n public class MultiInstanceExport implements BpmnXMLConstants {\n \n-  public static void writeMultiInstance(Activity activity, XMLStreamWriter xtw) throws Exception {\n-    if (activity.getLoopCharacteristics() != null) {\n-      MultiInstanceLoopCharacteristics multiInstanceObject = activity.getLoopCharacteristics();\n-      if (hasMultiInstanceElements(multiInstanceObject)) {\n-          xtw.writeStartElement(ELEMENT_MULTIINSTANCE);\n-          BpmnXMLUtil.writeDefaultAttribute(ATTRIBUTE_MULTIINSTANCE_SEQUENTIAL,\n-              String.valueOf(multiInstanceObject.isSequential()).toLowerCase(), xtw);\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem())) {\n-              BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_COLLECTION,\n-                  multiInstanceObject.getInputDataItem(), xtw);\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getElementVariable())) {\n-              BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_VARIABLE,\n-                  multiInstanceObject.getElementVariable(), xtw);\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getLoopCardinality())) {\n-              xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CARDINALITY);\n-              xtw.writeCharacters(multiInstanceObject.getLoopCardinality());\n-              xtw.writeEndElement();\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef())) {\n-              xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_DATA_OUTPUT);\n-              xtw.writeCharacters(multiInstanceObject.getLoopDataOutputRef());\n-              xtw.writeEndElement();\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem())) {\n-              xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_OUTPUT_DATA_ITEM);\n-              xtw.writeAttribute(ATTRIBUTE_NAME, multiInstanceObject.getOutputDataItem());\n-              xtw.writeEndElement();\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition())) {\n-              xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CONDITION);\n-              xtw.writeCharacters(multiInstanceObject.getCompletionCondition());\n-              xtw.writeEndElement();\n-          }\n-          xtw.writeEndElement();\n-      }\n+    public static void writeMultiInstance(Activity activity, XMLStreamWriter xtw) throws Exception {\n+        if (activity.getLoopCharacteristics() != null) {\n+            MultiInstanceLoopCharacteristics multiInstanceObject = activity.getLoopCharacteristics();\n+            if (hasMultiInstanceElements(multiInstanceObject)) {\n+                xtw.writeStartElement(ELEMENT_MULTIINSTANCE);\n+                BpmnXMLUtil.writeDefaultAttribute(ATTRIBUTE_MULTIINSTANCE_SEQUENTIAL,\n+                        String.valueOf(multiInstanceObject.isSequential()).toLowerCase(), xtw);\n+                if (StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem())) {\n+                    BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_COLLECTION,\n+                            multiInstanceObject.getInputDataItem(), xtw);\n+                }\n+                if (StringUtils.isNotEmpty(multiInstanceObject.getElementVariable())) {\n+                    BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_VARIABLE,\n+                            multiInstanceObject.getElementVariable(), xtw);\n+                }\n+                if (StringUtils.isNotEmpty(multiInstanceObject.getLoopCardinality())) {\n+                    xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CARDINALITY);\n+                    xtw.writeCharacters(multiInstanceObject.getLoopCardinality());\n+                    xtw.writeEndElement();\n+                }\n+                if (StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef())) {\n+                    xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_DATA_OUTPUT);\n+                    xtw.writeCharacters(multiInstanceObject.getLoopDataOutputRef());\n+                    xtw.writeEndElement();\n+                }\n+                if (StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem())) {\n+                    xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_OUTPUT_DATA_ITEM);\n+                    xtw.writeAttribute(ATTRIBUTE_NAME, multiInstanceObject.getOutputDataItem());\n+                    xtw.writeEndElement();\n+                }\n+                if (StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition())) {\n+                    xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CONDITION);\n+                    xtw.writeCharacters(multiInstanceObject.getCompletionCondition());\n+                    xtw.writeEndElement();\n+                }\n+                xtw.writeEndElement();\n+            }\n+        }\n     }\n-  }\n \n     private static boolean hasMultiInstanceElements(\n-        MultiInstanceLoopCharacteristics multiInstanceObject) {\n+            MultiInstanceLoopCharacteristics multiInstanceObject) {\n         return StringUtils.isNotEmpty(multiInstanceObject.getLoopCardinality()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem());\n+                StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem()) ||\n+                StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition()) ||\n+                StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef()) ||\n+                StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem());\n     }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 240 characters (found 351).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/817/MultiInstanceExport.java\nindex 74400934085..e01724ec15f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/817/MultiInstanceExport.java\n@@ -22,54 +22,52 @@ import org.activiti.bpmn.model.Activity;\n import org.activiti.bpmn.model.MultiInstanceLoopCharacteristics;\n import org.apache.commons.lang3.StringUtils;\n \n+\n public class MultiInstanceExport implements BpmnXMLConstants {\n \n   public static void writeMultiInstance(Activity activity, XMLStreamWriter xtw) throws Exception {\n     if (activity.getLoopCharacteristics() != null) {\n       MultiInstanceLoopCharacteristics multiInstanceObject = activity.getLoopCharacteristics();\n       if (hasMultiInstanceElements(multiInstanceObject)) {\n-          xtw.writeStartElement(ELEMENT_MULTIINSTANCE);\n-          BpmnXMLUtil.writeDefaultAttribute(ATTRIBUTE_MULTIINSTANCE_SEQUENTIAL,\n-              String.valueOf(multiInstanceObject.isSequential()).toLowerCase(), xtw);\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem())) {\n-              BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_COLLECTION,\n-                  multiInstanceObject.getInputDataItem(), xtw);\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getElementVariable())) {\n-              BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_VARIABLE,\n-                  multiInstanceObject.getElementVariable(), xtw);\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getLoopCardinality())) {\n-              xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CARDINALITY);\n-              xtw.writeCharacters(multiInstanceObject.getLoopCardinality());\n-              xtw.writeEndElement();\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef())) {\n-              xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_DATA_OUTPUT);\n-              xtw.writeCharacters(multiInstanceObject.getLoopDataOutputRef());\n-              xtw.writeEndElement();\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem())) {\n-              xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_OUTPUT_DATA_ITEM);\n-              xtw.writeAttribute(ATTRIBUTE_NAME, multiInstanceObject.getOutputDataItem());\n-              xtw.writeEndElement();\n-          }\n-          if (StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition())) {\n-              xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CONDITION);\n-              xtw.writeCharacters(multiInstanceObject.getCompletionCondition());\n-              xtw.writeEndElement();\n-          }\n+        xtw.writeStartElement(ELEMENT_MULTIINSTANCE);\n+        BpmnXMLUtil.writeDefaultAttribute(ATTRIBUTE_MULTIINSTANCE_SEQUENTIAL, String.valueOf(multiInstanceObject.isSequential()).toLowerCase(), xtw);\n+        if (StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem())) {\n+          BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_COLLECTION,\n+                                              multiInstanceObject.getInputDataItem(),\n+                                              xtw);\n+        }\n+        if (StringUtils.isNotEmpty(multiInstanceObject.getElementVariable())) {\n+          BpmnXMLUtil.writeQualifiedAttribute(ATTRIBUTE_MULTIINSTANCE_VARIABLE,\n+                                              multiInstanceObject.getElementVariable(),\n+                                              xtw);\n+        }\n+        if (StringUtils.isNotEmpty(multiInstanceObject.getLoopCardinality())) {\n+          xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CARDINALITY);\n+          xtw.writeCharacters(multiInstanceObject.getLoopCardinality());\n+          xtw.writeEndElement();\n+        }\n+        if (StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef())) {\n+          xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_DATA_OUTPUT);\n+          xtw.writeCharacters(multiInstanceObject.getLoopDataOutputRef());\n+          xtw.writeEndElement();\n+        }\n+        if (StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem())) {\n+          xtw.writeStartElement(ELEMENT_MULTI_INSTANCE_OUTPUT_DATA_ITEM);\n+          xtw.writeAttribute(ATTRIBUTE_NAME,\n+                             multiInstanceObject.getOutputDataItem());\n           xtw.writeEndElement();\n+        }\n+        if (StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition())) {\n+          xtw.writeStartElement(ELEMENT_MULTIINSTANCE_CONDITION);\n+          xtw.writeCharacters(multiInstanceObject.getCompletionCondition());\n+          xtw.writeEndElement();\n+        }\n+        xtw.writeEndElement();\n       }\n     }\n   }\n \n-    private static boolean hasMultiInstanceElements(\n-        MultiInstanceLoopCharacteristics multiInstanceObject) {\n-        return StringUtils.isNotEmpty(multiInstanceObject.getLoopCardinality()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef()) ||\n-            StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem());\n-    }\n-}\n+  private static boolean hasMultiInstanceElements(MultiInstanceLoopCharacteristics multiInstanceObject) {\n+    return StringUtils.isNotEmpty(multiInstanceObject.getLoopCardinality()) || StringUtils.isNotEmpty(multiInstanceObject.getInputDataItem()) || StringUtils.isNotEmpty(multiInstanceObject.getCompletionCondition()) || StringUtils.isNotEmpty(multiInstanceObject.getLoopDataOutputRef()) || StringUtils.isNotEmpty(multiInstanceObject.getOutputDataItem());\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/817/MultiInstanceExport.java\nindex 74400934085..cb06e59a5ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/817/MultiInstanceExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/817/MultiInstanceExport.java\nindex 74400934085..cb06e59a5ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/817/MultiInstanceExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/817/MultiInstanceExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}