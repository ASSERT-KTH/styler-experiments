{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "667",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/667/Neo4jTransactionalContextFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/667/Neo4jTransactionalContextFactory.java\nindex 38999750165..5607a6971a7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/667/Neo4jTransactionalContextFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/667/Neo4jTransactionalContextFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.query;\n \n import java.util.function.Supplier;\n@@ -38,80 +39,80 @@ import static org.neo4j.function.Suppliers.lazySingleton;\n \n public class Neo4jTransactionalContextFactory implements TransactionalContextFactory\n {\n-    private final Supplier<Statement> statementSupplier;\n-    private final Neo4jTransactionalContext.Creator contextCreator;\n+  private final Supplier<Statement> statementSupplier;\n+  private final Neo4jTransactionalContext.Creator contextCreator;\n \n-    public static TransactionalContextFactory create(\n-        GraphDatabaseFacade.SPI spi,\n-        Guard guard,\n-        ThreadToStatementContextBridge txBridge,\n-        PropertyContainerLocker locker )\n-    {\n-        Supplier<GraphDatabaseQueryService> queryService = lazySingleton( spi::queryService );\n-        Supplier<Kernel> kernel = lazySingleton( spi::kernel );\n-        Neo4jTransactionalContext.Creator contextCreator =\n-                ( tx, initialStatement, executingQuery ) -> new Neo4jTransactionalContext( queryService.get(),\n+  public static TransactionalContextFactory create(\n+      GraphDatabaseFacade.SPI spi,\n+      Guard guard,\n+      ThreadToStatementContextBridge txBridge,\n+      PropertyContainerLocker locker)\n+  {\n+    Supplier<GraphDatabaseQueryService> queryService = lazySingleton(spi::queryService);\n+    Supplier<Kernel> kernel = lazySingleton(spi::kernel);\n+    Neo4jTransactionalContext.Creator contextCreator =\n+        (tx, initialStatement, executingQuery) -> new Neo4jTransactionalContext(queryService.get(),\n \n-                        guard,\n-                    txBridge,\n-                    locker,\n-                    tx,\n-                    initialStatement,\n-                    executingQuery,\n-                    kernel.get()\n-                );\n+            guard,\n+            txBridge,\n+            locker,\n+            tx,\n+            initialStatement,\n+            executingQuery,\n+            kernel.get()\n+        );\n \n-        return new Neo4jTransactionalContextFactory( txBridge, contextCreator );\n-    }\n+    return new Neo4jTransactionalContextFactory(txBridge, contextCreator);\n+  }\n \n-    @Deprecated\n-    public static TransactionalContextFactory create(\n-        GraphDatabaseQueryService queryService,\n-        PropertyContainerLocker locker )\n-    {\n-        DependencyResolver resolver = queryService.getDependencyResolver();\n-        ThreadToStatementContextBridge txBridge = resolver.resolveDependency( ThreadToStatementContextBridge.class );\n-        Kernel kernel = resolver.resolveDependency( Kernel.class );\n-        Guard guard = resolver.resolveDependency( Guard.class );\n-        Neo4jTransactionalContext.Creator contextCreator =\n-                ( tx, initialStatement, executingQuery ) ->\n-                        new Neo4jTransactionalContext(\n-                                queryService,\n-                                guard,\n-                                txBridge,\n-                                locker,\n-                                tx,\n-                                initialStatement,\n-                                executingQuery,\n-                                kernel\n-                        );\n+  @Deprecated\n+  public static TransactionalContextFactory create(\n+      GraphDatabaseQueryService queryService,\n+      PropertyContainerLocker locker)\n+  {\n+    DependencyResolver resolver = queryService.getDependencyResolver();\n+    ThreadToStatementContextBridge txBridge = resolver.resolveDependency(ThreadToStatementContextBridge.class);\n+    Kernel kernel = resolver.resolveDependency(Kernel.class);\n+    Guard guard = resolver.resolveDependency(Guard.class);\n+    Neo4jTransactionalContext.Creator contextCreator =\n+        (tx, initialStatement, executingQuery) ->\n+            new Neo4jTransactionalContext(\n+                queryService,\n+                guard,\n+                txBridge,\n+                locker,\n+                tx,\n+                initialStatement,\n+                executingQuery,\n+                kernel\n+            );\n \n-        return new Neo4jTransactionalContextFactory( txBridge, contextCreator );\n-    }\n+    return new Neo4jTransactionalContextFactory(txBridge, contextCreator);\n+  }\n \n-    // Please use the factory methods above to actually construct an instance\n-    private Neo4jTransactionalContextFactory(\n-        Supplier<Statement> statementSupplier,\n-        Neo4jTransactionalContext.Creator contextCreator )\n-    {\n-        this.statementSupplier = statementSupplier;\n-        this.contextCreator = contextCreator;\n-    }\n+  // Please use the factory methods above to actually construct an instance\n+  private Neo4jTransactionalContextFactory(\n+      Supplier<Statement> statementSupplier,\n+      Neo4jTransactionalContext.Creator contextCreator)\n+  {\n+    this.statementSupplier = statementSupplier;\n+    this.contextCreator = contextCreator;\n+  }\n \n-    @Override\n-    public final Neo4jTransactionalContext newContext(\n-        ClientConnectionInfo clientConnection,\n-        InternalTransaction tx,\n-        String queryText,\n-        MapValue queryParameters\n-    )\n-    {\n-        Statement initialStatement = statementSupplier.get();\n-        ClientConnectionInfo connectionWithUserName = clientConnection.withUsername(\n-                tx.securityContext().subject().username() );\n-        ExecutingQuery executingQuery = initialStatement.queryRegistration().startQueryExecution(\n-                connectionWithUserName, queryText, queryParameters\n-        );\n-        return contextCreator.create( tx, initialStatement, executingQuery );\n-    }\n+  @Override\n+  public final Neo4jTransactionalContext newContext(\n+      ClientConnectionInfo clientConnection,\n+      InternalTransaction tx,\n+      String queryText,\n+      MapValue queryParameters\n+  )\n+  {\n+    Statement initialStatement = statementSupplier.get();\n+    ClientConnectionInfo connectionWithUserName = clientConnection.withUsername(\n+        tx.securityContext().subject().username());\n+    ExecutingQuery executingQuery = initialStatement.queryRegistration().startQueryExecution(\n+        connectionWithUserName, queryText, queryParameters\n+    );\n+    return contextCreator.create(tx, initialStatement, executingQuery);\n+  }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 216).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/667/Neo4jTransactionalContextFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/667/Neo4jTransactionalContextFactory.java\nindex 38999750165..fa9961d43cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/667/Neo4jTransactionalContextFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/667/Neo4jTransactionalContextFactory.java\n@@ -41,77 +41,48 @@ public class Neo4jTransactionalContextFactory implements TransactionalContextFac\n     private final Supplier<Statement> statementSupplier;\n     private final Neo4jTransactionalContext.Creator contextCreator;\n \n-    public static TransactionalContextFactory create(\n-        GraphDatabaseFacade.SPI spi,\n+    public static TransactionalContextFactory create( GraphDatabaseFacade.SPI spi,\n         Guard guard,\n         ThreadToStatementContextBridge txBridge,\n         PropertyContainerLocker locker )\n-    {\n+{\n         Supplier<GraphDatabaseQueryService> queryService = lazySingleton( spi::queryService );\n         Supplier<Kernel> kernel = lazySingleton( spi::kernel );\n-        Neo4jTransactionalContext.Creator contextCreator =\n-                ( tx, initialStatement, executingQuery ) -> new Neo4jTransactionalContext( queryService.get(),\n-\n-                        guard,\n-                    txBridge,\n-                    locker,\n-                    tx,\n-                    initialStatement,\n-                    executingQuery,\n-                    kernel.get()\n-                );\n-\n-        return new Neo4jTransactionalContextFactory( txBridge, contextCreator );\n+        Neo4jTransactionalContext.Creator contextCreator = ( tx, initialStatement, executingQuery ) -> new Neo4jTransactionalContext( queryService.get(), guard, txBridge, locker, tx, initialStatement, executingQuery,\n+                    kernel.get() );\n+return new Neo4jTransactionalContextFactory( txBridge, contextCreator );\n     }\n \n     @Deprecated\n-    public static TransactionalContextFactory create(\n-        GraphDatabaseQueryService queryService,\n+    public static TransactionalContextFactory create( GraphDatabaseQueryService queryService,\n         PropertyContainerLocker locker )\n-    {\n+{\n         DependencyResolver resolver = queryService.getDependencyResolver();\n         ThreadToStatementContextBridge txBridge = resolver.resolveDependency( ThreadToStatementContextBridge.class );\n         Kernel kernel = resolver.resolveDependency( Kernel.class );\n         Guard guard = resolver.resolveDependency( Guard.class );\n-        Neo4jTransactionalContext.Creator contextCreator =\n-                ( tx, initialStatement, executingQuery ) ->\n-                        new Neo4jTransactionalContext(\n-                                queryService,\n-                                guard,\n-                                txBridge,\n-                                locker,\n-                                tx,\n-                                initialStatement,\n-                                executingQuery,\n-                                kernel\n-                        );\n-\n-        return new Neo4jTransactionalContextFactory( txBridge, contextCreator );\n+        Neo4jTransactionalContext.Creator contextCreator = ( tx, initialStatement, executingQuery ) -> new Neo4jTransactionalContext( queryService, guard, txBridge, locker, tx, initialStatement, executingQuery,\n+                                kernel );\n+return new Neo4jTransactionalContextFactory( txBridge, contextCreator );\n     }\n \n     // Please use the factory methods above to actually construct an instance\n-    private Neo4jTransactionalContextFactory(\n-        Supplier<Statement> statementSupplier,\n+    private Neo4jTransactionalContextFactory( Supplier<Statement> statementSupplier,\n         Neo4jTransactionalContext.Creator contextCreator )\n-    {\n+{\n         this.statementSupplier = statementSupplier;\n         this.contextCreator = contextCreator;\n     }\n \n     @Override\n-    public final Neo4jTransactionalContext newContext(\n-        ClientConnectionInfo clientConnection,\n+    public final Neo4jTransactionalContext newContext( ClientConnectionInfo clientConnection,\n         InternalTransaction tx,\n         String queryText,\n-        MapValue queryParameters\n-    )\n+        MapValue queryParameters )\n     {\n         Statement initialStatement = statementSupplier.get();\n-        ClientConnectionInfo connectionWithUserName = clientConnection.withUsername(\n-                tx.securityContext().subject().username() );\n-        ExecutingQuery executingQuery = initialStatement.queryRegistration().startQueryExecution(\n-                connectionWithUserName, queryText, queryParameters\n-        );\n+        ClientConnectionInfo connectionWithUserName = clientConnection.withUsername( tx.securityContext().subject().username() );\n+ExecutingQuery executingQuery = initialStatement.queryRegistration().startQueryExecution( connectionWithUserName, queryText, queryParameters );\n         return contextCreator.create( tx, initialStatement, executingQuery );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}