{
    "project_name": "neo4j-neo4j",
    "violation_id": "1897",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1897/RecordStorageCommandReaderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1897/RecordStorageCommandReaderFactory.java\nindex f37201534cc..2ef4a707af5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1897/RecordStorageCommandReaderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1897/RecordStorageCommandReaderFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import org.neo4j.storageengine.api.CommandReader;\n@@ -27,20 +28,20 @@ public class RecordStorageCommandReaderFactory implements CommandReaderFactory\n     public static final CommandReaderFactory INSTANCE = new RecordStorageCommandReaderFactory();\n \n     @Override\n-    public CommandReader get( int logEntryVersion )\n+    public CommandReader get(int logEntryVersion)\n     {\n         // Historically the log entry version\n \n-        switch ( logEntryVersion )\n+        switch (logEntryVersion)\n         {\n-        case PhysicalLogCommandReaderV3_0_10.FORMAT_ID:\n-            return PhysicalLogCommandReaderV3_0_10.INSTANCE;\n-        case PhysicalLogCommandReaderV4_0.FORMAT_ID:\n-            return PhysicalLogCommandReaderV4_0.INSTANCE;\n-        case PhysicalLogCommandReaderV4_2.FORMAT_ID:\n-            return PhysicalLogCommandReaderV4_2.INSTANCE;\n-        default:\n-            throw new IllegalArgumentException( \"Unsupported command format [id=\" + logEntryVersion + \"]\" );\n+            case PhysicalLogCommandReaderV3_0_10.FORMAT_ID:\n+                return PhysicalLogCommandReaderV3_0_10.INSTANCE;\n+            case PhysicalLogCommandReaderV4_0.FORMAT_ID:\n+                return PhysicalLogCommandReaderV4_0.INSTANCE;\n+            case PhysicalLogCommandReaderV4_2.FORMAT_ID:\n+                return PhysicalLogCommandReaderV4_2.INSTANCE;\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported command format [id=\" + logEntryVersion + \"]\");\n         }\n     }\n }\n",
            "diff_size": 11
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}