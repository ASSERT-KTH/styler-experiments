{
    "project_name": "Activiti-Activiti",
    "violation_id": "146",
    "information": {
        "violations": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.jobexecutor;\n\nimport org.activiti.bpmn.model.FlowElement;\nimport org.activiti.engine.ActivitiException;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/146/TimerStartEventJobHandler.java\nindex 84259f26dd7..9ca7a831599 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/146/TimerStartEventJobHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.jobexecutor;\n \n import org.activiti.bpmn.model.FlowElement;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/146/TimerStartEventJobHandler.java\nindex 84259f26dd7..433e521f1a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/146/TimerStartEventJobHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.jobexecutor;\n \n import org.activiti.bpmn.model.FlowElement;\n@@ -28,52 +29,52 @@ import org.slf4j.LoggerFactory;\n \n public class TimerStartEventJobHandler extends TimerEventHandler implements JobHandler {\n \n-  private static Logger log = LoggerFactory.getLogger(TimerStartEventJobHandler.class);\n-\n-  public static final String TYPE = \"timer-start-event\";\n+    private static Logger log = LoggerFactory.getLogger(TimerStartEventJobHandler.class);\n \n-  public String getType() {\n-    return TYPE;\n-  }\n+    public static final String TYPE = \"timer-start-event\";\n \n-  public void execute(JobEntity job, String configuration, ExecutionEntity execution, CommandContext commandContext) {\n-    \n-    ProcessDefinitionEntity processDefinitionEntity = ProcessDefinitionUtil\n-        .getProcessDefinitionFromDatabase(job.getProcessDefinitionId()); // From DB -> need to get latest suspended state\n-    if (processDefinitionEntity == null) {\n-      throw new ActivitiException(\"Could not find process definition needed for timer start event\");\n+    public String getType() {\n+        return TYPE;\n     }\n \n-    try {\n-      if (!processDefinitionEntity.isSuspended()) {\n-        \n-        if (commandContext.getEventDispatcher().isEnabled()) {\n-          commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TIMER_FIRED, job));\n+    public void execute(JobEntity job, String configuration, ExecutionEntity execution, CommandContext commandContext) {\n+\n+        ProcessDefinitionEntity processDefinitionEntity = ProcessDefinitionUtil\n+                .getProcessDefinitionFromDatabase(job.getProcessDefinitionId()); // From DB -> need to get latest suspended state\n+        if (processDefinitionEntity == null) {\n+            throw new ActivitiException(\"Could not find process definition needed for timer start event\");\n         }\n-        \n-        // Find initial flow element matching the signal start event\n-        org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(job.getProcessDefinitionId());\n-        String activityId = TimerEventHandler.getActivityIdFromConfiguration(configuration);\n-        if (activityId != null) {\n-          FlowElement flowElement = process.getFlowElement(activityId, true);\n-          if (flowElement == null) {\n-            throw new ActivitiException(\"Could not find matching FlowElement for activityId \" + activityId);\n-          }\n-          ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();\n-          processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity, null, null, flowElement, process, null, null, true);\n-        } else {\n-          new StartProcessInstanceCmd(processDefinitionEntity.getKey(), null, null, null, job.getTenantId()).execute(commandContext);\n+\n+        try {\n+            if (!processDefinitionEntity.isSuspended()) {\n+\n+                if (commandContext.getEventDispatcher().isEnabled()) {\n+                    commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TIMER_FIRED, job));\n+                }\n+\n+                // Find initial flow element matching the signal start event\n+                org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(job.getProcessDefinitionId());\n+                String activityId = TimerEventHandler.getActivityIdFromConfiguration(configuration);\n+                if (activityId != null) {\n+                    FlowElement flowElement = process.getFlowElement(activityId, true);\n+                    if (flowElement == null) {\n+                        throw new ActivitiException(\"Could not find matching FlowElement for activityId \" + activityId);\n+                    }\n+                    ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();\n+                    processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity, null, null, flowElement, process, null, null, true);\n+                } else {\n+                    new StartProcessInstanceCmd(processDefinitionEntity.getKey(), null, null, null, job.getTenantId()).execute(commandContext);\n+                }\n+\n+            } else {\n+                log.debug(\"ignoring timer of suspended process definition {}\", processDefinitionEntity.getName());\n+            }\n+        } catch (RuntimeException e) {\n+            log.error(\"exception during timer execution\", e);\n+            throw e;\n+        } catch (Exception e) {\n+            log.error(\"exception during timer execution\", e);\n+            throw new ActivitiException(\"exception during timer execution: \" + e.getMessage(), e);\n         }\n-        \n-      } else {\n-        log.debug(\"ignoring timer of suspended process definition {}\", processDefinitionEntity.getName());\n-      }\n-    } catch (RuntimeException e) {\n-      log.error(\"exception during timer execution\", e);\n-      throw e;\n-    } catch (Exception e) {\n-      log.error(\"exception during timer execution\", e);\n-      throw new ActivitiException(\"exception during timer execution: \" + e.getMessage(), e);\n     }\n-  }\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/146/TimerStartEventJobHandler.java\nindex 84259f26dd7..65fc674106a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/146/TimerStartEventJobHandler.java\n@@ -26,32 +26,29 @@ import org.activiti.engine.impl.util.ProcessInstanceHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n public class TimerStartEventJobHandler extends TimerEventHandler implements JobHandler {\n \n   private static Logger log = LoggerFactory.getLogger(TimerStartEventJobHandler.class);\n-\n   public static final String TYPE = \"timer-start-event\";\n-\n   public String getType() {\n     return TYPE;\n   }\n \n   public void execute(JobEntity job, String configuration, ExecutionEntity execution, CommandContext commandContext) {\n-    \n-    ProcessDefinitionEntity processDefinitionEntity = ProcessDefinitionUtil\n-        .getProcessDefinitionFromDatabase(job.getProcessDefinitionId()); // From DB -> need to get latest suspended state\n+    ProcessDefinitionEntity processDefinitionEntity = ProcessDefinitionUtil.getProcessDefinitionFromDatabase(job.getProcessDefinitionId()); // From DB -> need to get latest suspended state\n     if (processDefinitionEntity == null) {\n       throw new ActivitiException(\"Could not find process definition needed for timer start event\");\n     }\n \n     try {\n       if (!processDefinitionEntity.isSuspended()) {\n-        \n         if (commandContext.getEventDispatcher().isEnabled()) {\n           commandContext.getEventDispatcher().dispatchEvent(ActivitiEventBuilder.createEntityEvent(ActivitiEventType.TIMER_FIRED, job));\n         }\n         \n         // Find initial flow element matching the signal start event\n+\n         org.activiti.bpmn.model.Process process = ProcessDefinitionUtil.getProcess(job.getProcessDefinitionId());\n         String activityId = TimerEventHandler.getActivityIdFromConfiguration(configuration);\n         if (activityId != null) {\n@@ -59,12 +56,23 @@ public class TimerStartEventJobHandler extends TimerEventHandler implements JobH\n           if (flowElement == null) {\n             throw new ActivitiException(\"Could not find matching FlowElement for activityId \" + activityId);\n           }\n+\n           ProcessInstanceHelper processInstanceHelper = commandContext.getProcessEngineConfiguration().getProcessInstanceHelper();\n-          processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity, null, null, flowElement, process, null, null, true);\n+          processInstanceHelper.createAndStartProcessInstanceWithInitialFlowElement(processDefinitionEntity,\n+                                                                                    null,\n+                                                                                    null,\n+                                                                                    flowElement,\n+                                                                                    process,\n+                                                                                    null,\n+                                                                                    null,\n+                                                                                    true);\n         } else {\n-          new StartProcessInstanceCmd(processDefinitionEntity.getKey(), null, null, null, job.getTenantId()).execute(commandContext);\n+          new StartProcessInstanceCmd(processDefinitionEntity.getKey(),\n+                                      null,\n+                                      null,\n+                                      null,\n+                                      job.getTenantId()).execute(commandContext);\n         }\n-        \n       } else {\n         log.debug(\"ignoring timer of suspended process definition {}\", processDefinitionEntity.getName());\n       }\n@@ -73,7 +81,8 @@ public class TimerStartEventJobHandler extends TimerEventHandler implements JobH\n       throw e;\n     } catch (Exception e) {\n       log.error(\"exception during timer execution\", e);\n-      throw new ActivitiException(\"exception during timer execution: \" + e.getMessage(), e);\n+      throw new ActivitiException(\"exception during timer execution: \" + e.getMessage(),\n+                                  e);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/146/TimerStartEventJobHandler.java\nindex 84259f26dd7..9ca7a831599 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/146/TimerStartEventJobHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.jobexecutor;\n \n import org.activiti.bpmn.model.FlowElement;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/146/TimerStartEventJobHandler.java\nindex 84259f26dd7..9ca7a831599 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/146/TimerStartEventJobHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/146/TimerStartEventJobHandler.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.jobexecutor;\n \n import org.activiti.bpmn.model.FlowElement;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}