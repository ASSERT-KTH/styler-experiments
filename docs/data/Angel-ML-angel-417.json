{
    "project_name": "Angel-ML-angel",
    "violation_id": "417",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/417/RowBasedFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/417/RowBasedFormat.java\nindex 313065c365b..20f632d35b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/417/RowBasedFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/417/RowBasedFormat.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.model.output.format;\n \n import com.tencent.angel.model.PSMatrixLoadContext;\n@@ -28,25 +29,27 @@ import org.apache.hadoop.conf.Configuration;\n \n public abstract class RowBasedFormat extends PSMatrixLoaderSaverImpl {\n \n-  public RowBasedFormat(Configuration conf) {\n-    super(conf);\n-  }\n+    public RowBasedFormat(Configuration conf) {\n+        super(conf);\n+    }\n \n-  @Override\n-  public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n-    save((RowBasedPartition) part, partMeta, saveContext, output);\n-  }\n+    @Override\n+    public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n+                     PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+        save((RowBasedPartition) part, partMeta, saveContext, output);\n+    }\n \n-  @Override\n-  public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n-    load((RowBasedPartition) part, partMeta, loadContext, input);\n-  }\n+    @Override\n+    public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n+                     PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+        load((RowBasedPartition) part, partMeta, loadContext, input);\n+    }\n \n-  public abstract void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException;\n+    public abstract void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n+                              PSMatrixLoadContext loadContext, DataInputStream input)\n+            throws IOException;\n \n-  public abstract void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException;\n+    public abstract void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n+                              PSMatrixSaveContext saveContext, DataOutputStream output)\n+            throws IOException;\n }\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/417/RowBasedFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/417/RowBasedFormat.java\nindex 313065c365b..95ff23646d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/417/RowBasedFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/417/RowBasedFormat.java\n@@ -35,18 +35,18 @@ public abstract class RowBasedFormat extends PSMatrixLoaderSaverImpl {\n   @Override\n   public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n       PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n-    save((RowBasedPartition) part, partMeta, saveContext, output);\n+  save((RowBasedPartition) part, partMeta, saveContext, output);\n   }\n \n   @Override\n   public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n       PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n-    load((RowBasedPartition) part, partMeta, loadContext, input);\n+  load((RowBasedPartition) part, partMeta, loadContext, input);\n   }\n \n   public abstract void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n       PSMatrixLoadContext loadContext, DataInputStream input) throws IOException;\n \n-  public abstract void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n+public abstract void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n       PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException;\n-}\n+  }\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/417/RowBasedFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/417/RowBasedFormat.java\nindex 313065c365b..d403313d257 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/417/RowBasedFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/417/RowBasedFormat.java\n@@ -33,20 +33,21 @@ public abstract class RowBasedFormat extends PSMatrixLoaderSaverImpl {\n   }\n \n   @Override\n-  public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  public void save(\n+    ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     save((RowBasedPartition) part, partMeta, saveContext, output);\n   }\n \n   @Override\n-  public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  public void load(\n+    ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     load((RowBasedPartition) part, partMeta, loadContext, input);\n   }\n \n-  public abstract void load(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixLoadContext loadContext, DataInputStream input) throws IOException;\n+  public abstract void load(\n+    RowBasedPartition part, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException;\n \n-  public abstract void save(RowBasedPartition part, MatrixPartitionMeta partMeta,\n-      PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException;\n-}\n+  public abstract void save(\n+    RowBasedPartition part, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException;\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}