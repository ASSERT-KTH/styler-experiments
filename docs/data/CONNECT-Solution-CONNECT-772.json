{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "772",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.direct.xdr.audit;\n\nimport gov.hhs.fha.nhinc.direct.xdr.SoapEdgeContext;\nimport java.util.Collection;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/772/DirectRIAuditor.java\nindex f4afb29f174..4850f5251da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/772/DirectRIAuditor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.xdr.audit;\n \n import gov.hhs.fha.nhinc.direct.xdr.SoapEdgeContext;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/772/DirectRIAuditor.java\nindex f4afb29f174..833d356e9ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/772/DirectRIAuditor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.xdr.audit;\n \n import gov.hhs.fha.nhinc.direct.xdr.SoapEdgeContext;\n@@ -38,59 +39,58 @@ import org.nhindirect.common.audit.DefaultAuditContext;\n \n /**\n  * @author mweaver\n- *\n  */\n public class DirectRIAuditor implements SoapEdgeAuditor {\n \n-    private Auditor auditor = null;\n+  private Auditor auditor = null;\n \n-    /**\n-     * Audits an event to the Direct RI audit logger. If a set of properties are provided, they will be audited as\n-     * additional contexts, otherwise only the principal, category, and message will be audited.\n-     *\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.direct.xdr.audit.SoapEdgeAuditor#audit(java.lang.String, java.lang.String,\n-     *      java.lang.String, gov.hhs.fha.nhinc.direct.xdr.audit.Auditable)\n-     */\n-    @Override\n-    public void audit(String principal, String category, String message, SoapEdgeContext properties) {\n+  /**\n+   * Audits an event to the Direct RI audit logger. If a set of properties are provided, they will be audited as\n+   * additional contexts, otherwise only the principal, category, and message will be audited.\n+   * <p>\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.direct.xdr.audit.SoapEdgeAuditor#audit(java.lang.String, java.lang.String,\n+   * java.lang.String, gov.hhs.fha.nhinc.direct.xdr.audit.Auditable)\n+   */\n+  @Override\n+  public void audit(String principal, String category, String message, SoapEdgeContext properties) {\n \n-        AuditEvent event = new AuditEvent(category, message);\n+    AuditEvent event = new AuditEvent(category, message);\n \n-        if (properties == null) {\n-            getAuditor().audit(principal, event);\n-        } else {\n-            getAuditor().audit(principal, event, getContexts(properties));\n-        }\n+    if (properties == null) {\n+      getAuditor().audit(principal, event);\n+    } else {\n+      getAuditor().audit(principal, event, getContexts(properties));\n     }\n+  }\n \n-    /**\n-     * Creates a set of AuditContext objects from and Auditable object.\n-     *\n-     * @param auditable A {@link Auditable} object, must not be null.\n-     * @return A Collection of @{link AuditContext} objects.\n-     */\n-    private static Collection<? extends AuditContext> getContexts(SoapEdgeContext auditable) {\n-        Collection<AuditContext> contexts = new LinkedList<>();\n+  /**\n+   * Creates a set of AuditContext objects from and Auditable object.\n+   *\n+   * @param auditable A {@link Auditable} object, must not be null.\n+   * @return A Collection of @{link AuditContext} objects.\n+   */\n+  private static Collection<? extends AuditContext> getContexts(SoapEdgeContext auditable) {\n+    Collection<AuditContext> contexts = new LinkedList<>();\n \n-        if (auditable.getAuditableValues() != null) {\n-            for (Map.Entry<String, String> entry : auditable.getAuditableValues().entrySet()) {\n-                AuditContext context = new DefaultAuditContext(entry.getKey(), entry.getValue());\n-                contexts.add(context);\n-            }\n-        }\n-        return contexts;\n+    if (auditable.getAuditableValues() != null) {\n+      for (Map.Entry<String, String> entry : auditable.getAuditableValues().entrySet()) {\n+        AuditContext context = new DefaultAuditContext(entry.getKey(), entry.getValue());\n+        contexts.add(context);\n+      }\n     }\n+    return contexts;\n+  }\n \n-    /**\n-     * @return A Direct RI Auditor from the Direct RI AuditorFactory.\n-     */\n-    protected Auditor getAuditor() {\n-        if (auditor == null) {\n-            auditor = AuditorFactory.createAuditor();\n-        }\n-        return auditor;\n+  /**\n+   * @return A Direct RI Auditor from the Direct RI AuditorFactory.\n+   */\n+  protected Auditor getAuditor() {\n+    if (auditor == null) {\n+      auditor = AuditorFactory.createAuditor();\n     }\n+    return auditor;\n+  }\n \n }\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/772/DirectRIAuditor.java\nindex f4afb29f174..d60de3238a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/772/DirectRIAuditor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.xdr.audit;\n \n import gov.hhs.fha.nhinc.direct.xdr.SoapEdgeContext;\n@@ -57,8 +58,7 @@ public class DirectRIAuditor implements SoapEdgeAuditor {\n     public void audit(String principal, String category, String message, SoapEdgeContext properties) {\n \n         AuditEvent event = new AuditEvent(category, message);\n-\n-        if (properties == null) {\n+if (properties == null) {\n             getAuditor().audit(principal, event);\n         } else {\n             getAuditor().audit(principal, event, getContexts(properties));\n@@ -73,8 +73,7 @@ public class DirectRIAuditor implements SoapEdgeAuditor {\n      */\n     private static Collection<? extends AuditContext> getContexts(SoapEdgeContext auditable) {\n         Collection<AuditContext> contexts = new LinkedList<>();\n-\n-        if (auditable.getAuditableValues() != null) {\n+if (auditable.getAuditableValues() != null) {\n             for (Map.Entry<String, String> entry : auditable.getAuditableValues().entrySet()) {\n                 AuditContext context = new DefaultAuditContext(entry.getKey(), entry.getValue());\n                 contexts.add(context);\n@@ -89,8 +88,9 @@ public class DirectRIAuditor implements SoapEdgeAuditor {\n     protected Auditor getAuditor() {\n         if (auditor == null) {\n             auditor = AuditorFactory.createAuditor();\n-        }\n+\n+    }\n         return auditor;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "65",
                    "column": "11",
                    "severity": "error",
                    "message": "'if' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/772/DirectRIAuditor.java\nindex f4afb29f174..b2a14ec2d60 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/772/DirectRIAuditor.java\n@@ -40,6 +40,8 @@ import org.nhindirect.common.audit.DefaultAuditContext;\n  * @author mweaver\n  *\n  */\n+\n+\n public class DirectRIAuditor implements SoapEdgeAuditor {\n \n     private Auditor auditor = null;\n@@ -53,14 +55,19 @@ public class DirectRIAuditor implements SoapEdgeAuditor {\n      * @see gov.hhs.fha.nhinc.direct.xdr.audit.SoapEdgeAuditor#audit(java.lang.String, java.lang.String,\n      *      java.lang.String, gov.hhs.fha.nhinc.direct.xdr.audit.Auditable)\n      */\n-    @Override\n-    public void audit(String principal, String category, String message, SoapEdgeContext properties) {\n \n-        AuditEvent event = new AuditEvent(category, message);\n \n-        if (properties == null) {\n+    @Override\n+    public void audit(String principal,\n+        String category,\n+        String message, SoapEdgeContext properties) {\n+        AuditEvent event = new AuditEvent(category, message);\n+        if(properties == null) {\n             getAuditor().audit(principal, event);\n-        } else {\n+        }\n+\n+\n+else {\n             getAuditor().audit(principal, event, getContexts(properties));\n         }\n     }\n@@ -71,9 +78,9 @@ public class DirectRIAuditor implements SoapEdgeAuditor {\n      * @param auditable A {@link Auditable} object, must not be null.\n      * @return A Collection of @{link AuditContext} objects.\n      */\n+\n     private static Collection<? extends AuditContext> getContexts(SoapEdgeContext auditable) {\n         Collection<AuditContext> contexts = new LinkedList<>();\n-\n         if (auditable.getAuditableValues() != null) {\n             for (Map.Entry<String, String> entry : auditable.getAuditableValues().entrySet()) {\n                 AuditContext context = new DefaultAuditContext(entry.getKey(), entry.getValue());\n@@ -86,11 +93,12 @@ public class DirectRIAuditor implements SoapEdgeAuditor {\n     /**\n      * @return A Direct RI Auditor from the Direct RI AuditorFactory.\n      */\n+\n+\n     protected Auditor getAuditor() {\n         if (auditor == null) {\n             auditor = AuditorFactory.createAuditor();\n         }\n         return auditor;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/772/DirectRIAuditor.java\nindex f4afb29f174..4850f5251da 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/772/DirectRIAuditor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/772/DirectRIAuditor.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.direct.xdr.audit;\n \n import gov.hhs.fha.nhinc.direct.xdr.SoapEdgeContext;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff",
        "styler_random"
    ]
}