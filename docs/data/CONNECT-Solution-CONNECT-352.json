{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "352",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.event;\n\n/**\n * EventDescriptionBuilder that delegates all work to the other builder. Concrete implementations should call",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/352/DelegatingEventDescriptionBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/352/DelegatingEventDescriptionBuilder.java\nindex bf7d84eeef2..4b8e8240864 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/352/DelegatingEventDescriptionBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/352/DelegatingEventDescriptionBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n /**\n@@ -34,136 +35,136 @@ package gov.hhs.fha.nhinc.event;\n  * All of the build* methods are final. They each delegate to the builder passed in via setDelegate.\n  */\n public abstract class DelegatingEventDescriptionBuilder implements EventDescriptionBuilder {\n-    private EventDescriptionBuilder delegate;\n-    private MessageRoutingAccessor msgRouting;\n-    private EventContextAccessor msgContext;\n-\n-    @Override\n-    public final void buildTimeStamp() {\n-        delegate.buildTimeStamp();\n-    }\n-\n-    @Override\n-    public final void buildStatuses() {\n-        delegate.buildStatuses();\n-    }\n-\n-    @Override\n-    public final void buildRespondingHCIDs() {\n-        delegate.buildRespondingHCIDs();\n-    }\n-\n-    @Override\n-    public final void buildPayloadTypes() {\n-        delegate.buildPayloadTypes();\n-    }\n-\n-    @Override\n-    public final void buildPayloadSizes() {\n-        delegate.buildPayloadSizes();\n-    }\n-\n-    @Override\n-    public final void buildNPI() {\n-        delegate.buildNPI();\n-    }\n-\n-    @Override\n-    public final void buildInitiatingHCID() {\n-        delegate.buildInitiatingHCID();\n-    }\n-\n-    @Override\n-    public final void buildErrorCodes() {\n-        delegate.buildErrorCodes();\n-    }\n-\n-    @Override\n-    public final void buildMessageId() {\n-        delegate.buildMessageId();\n-    }\n-\n-    @Override\n-    public final void buildTransactionId() {\n-        delegate.buildTransactionId();\n-    }\n-\n-    @Override\n-    public final void buildServiceType() {\n-        delegate.buildServiceType();\n-    }\n-\n-    @Override\n-    public final void buildResponseMsgIdList() {\n-        delegate.buildResponseMsgIdList();\n-    }\n-\n-    @Override\n-    public final void buildAction() {\n-        delegate.buildAction();\n-    }\n-\n-    @Override\n-    public final EventDescription getEventDescription() {\n-        return delegate.getEventDescription();\n-    }\n-\n-    @Override\n-    public final void createEventDescription() {\n-        delegate.createEventDescription();\n-    }\n-\n-    /**\n-     * For testing purposes.\n-     *\n-     * @return the delegate set by a previous call to <code>setDelegate</code>.\n-     */\n-    public final EventDescriptionBuilder getDelegate() {\n-        return delegate;\n-    }\n-\n-    /**\n-     * @param delegate The builder to delegate to, after transforming the arguments. Must not be null.\n-     */\n-    protected final void setDelegate(EventDescriptionBuilder delegate) {\n-        if (delegate == null) {\n-            throw new IllegalArgumentException(\"delegate cannot be null\");\n-        }\n-        this.delegate = delegate;\n-        setMsgObjects();\n-    }\n-\n-    @Override\n-    public final void setMsgRouting(MessageRoutingAccessor msgRouting) {\n-        this.msgRouting = msgRouting;\n-        setMsgObjects();\n-    }\n-\n-    @Override\n-    public final void setMsgContext(EventContextAccessor msgContext) {\n-        this.msgContext = msgContext;\n-        setMsgObjects();\n-    }\n-\n-    private void setMsgObjects() {\n-        if (delegate != null) {\n-            delegate.setMsgContext(msgContext);\n-            delegate.setMsgRouting(msgRouting);\n-        }\n-    }\n-\n-    @Override\n-    public final String getServiceType() {\n-        return delegate.getServiceType();\n-    }\n-\n-    @Override\n-    public final String getInitiatorHcid() {\n-        return delegate.getInitiatorHcid();\n-    }\n-\n-    @Override\n-    public final String getRespondingHcid() {\n-        return delegate.getRespondingHcid();\n-    }\n+  private EventDescriptionBuilder delegate;\n+  private MessageRoutingAccessor msgRouting;\n+  private EventContextAccessor msgContext;\n+\n+  @Override\n+  public final void buildTimeStamp() {\n+    delegate.buildTimeStamp();\n+  }\n+\n+  @Override\n+  public final void buildStatuses() {\n+    delegate.buildStatuses();\n+  }\n+\n+  @Override\n+  public final void buildRespondingHCIDs() {\n+    delegate.buildRespondingHCIDs();\n+  }\n+\n+  @Override\n+  public final void buildPayloadTypes() {\n+    delegate.buildPayloadTypes();\n+  }\n+\n+  @Override\n+  public final void buildPayloadSizes() {\n+    delegate.buildPayloadSizes();\n+  }\n+\n+  @Override\n+  public final void buildNPI() {\n+    delegate.buildNPI();\n+  }\n+\n+  @Override\n+  public final void buildInitiatingHCID() {\n+    delegate.buildInitiatingHCID();\n+  }\n+\n+  @Override\n+  public final void buildErrorCodes() {\n+    delegate.buildErrorCodes();\n+  }\n+\n+  @Override\n+  public final void buildMessageId() {\n+    delegate.buildMessageId();\n+  }\n+\n+  @Override\n+  public final void buildTransactionId() {\n+    delegate.buildTransactionId();\n+  }\n+\n+  @Override\n+  public final void buildServiceType() {\n+    delegate.buildServiceType();\n+  }\n+\n+  @Override\n+  public final void buildResponseMsgIdList() {\n+    delegate.buildResponseMsgIdList();\n+  }\n+\n+  @Override\n+  public final void buildAction() {\n+    delegate.buildAction();\n+  }\n+\n+  @Override\n+  public final EventDescription getEventDescription() {\n+    return delegate.getEventDescription();\n+  }\n+\n+  @Override\n+  public final void createEventDescription() {\n+    delegate.createEventDescription();\n+  }\n+\n+  /**\n+   * For testing purposes.\n+   *\n+   * @return the delegate set by a previous call to <code>setDelegate</code>.\n+   */\n+  public final EventDescriptionBuilder getDelegate() {\n+    return delegate;\n+  }\n+\n+  /**\n+   * @param delegate The builder to delegate to, after transforming the arguments. Must not be null.\n+   */\n+  protected final void setDelegate(EventDescriptionBuilder delegate) {\n+    if (delegate == null) {\n+      throw new IllegalArgumentException(\"delegate cannot be null\");\n+    }\n+    this.delegate = delegate;\n+    setMsgObjects();\n+  }\n+\n+  @Override\n+  public final void setMsgRouting(MessageRoutingAccessor msgRouting) {\n+    this.msgRouting = msgRouting;\n+    setMsgObjects();\n+  }\n+\n+  @Override\n+  public final void setMsgContext(EventContextAccessor msgContext) {\n+    this.msgContext = msgContext;\n+    setMsgObjects();\n+  }\n+\n+  private void setMsgObjects() {\n+    if (delegate != null) {\n+      delegate.setMsgContext(msgContext);\n+      delegate.setMsgRouting(msgRouting);\n+    }\n+  }\n+\n+  @Override\n+  public final String getServiceType() {\n+    return delegate.getServiceType();\n+  }\n+\n+  @Override\n+  public final String getInitiatorHcid() {\n+    return delegate.getInitiatorHcid();\n+  }\n+\n+  @Override\n+  public final String getRespondingHcid() {\n+    return delegate.getRespondingHcid();\n+  }\n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/352/DelegatingEventDescriptionBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/352/DelegatingEventDescriptionBuilder.java\nindex bf7d84eeef2..2f71c31d78e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/352/DelegatingEventDescriptionBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/352/DelegatingEventDescriptionBuilder.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.event;\n \n /**\n@@ -34,6 +35,7 @@ package gov.hhs.fha.nhinc.event;\n  * All of the build* methods are final. They each delegate to the builder passed in via setDelegate.\n  */\n public abstract class DelegatingEventDescriptionBuilder implements EventDescriptionBuilder {\n+\n     private EventDescriptionBuilder delegate;\n     private MessageRoutingAccessor msgRouting;\n     private EventContextAccessor msgContext;\n@@ -166,4 +168,4 @@ public abstract class DelegatingEventDescriptionBuilder implements EventDescript\n     public final String getRespondingHcid() {\n         return delegate.getRespondingHcid();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/352/DelegatingEventDescriptionBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/352/DelegatingEventDescriptionBuilder.java\nindex bf7d84eeef2..ad43c708f0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/352/DelegatingEventDescriptionBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/352/DelegatingEventDescriptionBuilder.java\n@@ -33,81 +33,99 @@ package gov.hhs.fha.nhinc.event;\n  * <p>\n  * All of the build* methods are final. They each delegate to the builder passed in via setDelegate.\n  */\n+\n+\n public abstract class DelegatingEventDescriptionBuilder implements EventDescriptionBuilder {\n+\n     private EventDescriptionBuilder delegate;\n     private MessageRoutingAccessor msgRouting;\n     private EventContextAccessor msgContext;\n \n+\n     @Override\n     public final void buildTimeStamp() {\n         delegate.buildTimeStamp();\n     }\n \n+\n     @Override\n     public final void buildStatuses() {\n         delegate.buildStatuses();\n     }\n \n+\n     @Override\n     public final void buildRespondingHCIDs() {\n         delegate.buildRespondingHCIDs();\n     }\n \n+\n     @Override\n     public final void buildPayloadTypes() {\n         delegate.buildPayloadTypes();\n     }\n \n+\n     @Override\n     public final void buildPayloadSizes() {\n         delegate.buildPayloadSizes();\n     }\n \n+\n     @Override\n     public final void buildNPI() {\n         delegate.buildNPI();\n     }\n \n+\n     @Override\n     public final void buildInitiatingHCID() {\n         delegate.buildInitiatingHCID();\n     }\n \n+\n     @Override\n     public final void buildErrorCodes() {\n         delegate.buildErrorCodes();\n     }\n \n+\n     @Override\n     public final void buildMessageId() {\n         delegate.buildMessageId();\n     }\n \n+\n     @Override\n     public final void buildTransactionId() {\n         delegate.buildTransactionId();\n     }\n \n+\n     @Override\n     public final void buildServiceType() {\n         delegate.buildServiceType();\n     }\n \n+\n     @Override\n     public final void buildResponseMsgIdList() {\n         delegate.buildResponseMsgIdList();\n     }\n \n+\n     @Override\n     public final void buildAction() {\n         delegate.buildAction();\n     }\n \n+\n     @Override\n     public final EventDescription getEventDescription() {\n         return delegate.getEventDescription();\n     }\n \n+\n     @Override\n     public final void createEventDescription() {\n         delegate.createEventDescription();\n@@ -118,6 +136,8 @@ public abstract class DelegatingEventDescriptionBuilder implements EventDescript\n      *\n      * @return the delegate set by a previous call to <code>setDelegate</code>.\n      */\n+\n+\n     public final EventDescriptionBuilder getDelegate() {\n         return delegate;\n     }\n@@ -125,6 +145,8 @@ public abstract class DelegatingEventDescriptionBuilder implements EventDescript\n     /**\n      * @param delegate The builder to delegate to, after transforming the arguments. Must not be null.\n      */\n+\n+\n     protected final void setDelegate(EventDescriptionBuilder delegate) {\n         if (delegate == null) {\n             throw new IllegalArgumentException(\"delegate cannot be null\");\n@@ -133,12 +155,14 @@ public abstract class DelegatingEventDescriptionBuilder implements EventDescript\n         setMsgObjects();\n     }\n \n+\n     @Override\n     public final void setMsgRouting(MessageRoutingAccessor msgRouting) {\n         this.msgRouting = msgRouting;\n         setMsgObjects();\n     }\n \n+\n     @Override\n     public final void setMsgContext(EventContextAccessor msgContext) {\n         this.msgContext = msgContext;\n@@ -152,18 +176,22 @@ public abstract class DelegatingEventDescriptionBuilder implements EventDescript\n         }\n     }\n \n+\n     @Override\n     public final String getServiceType() {\n         return delegate.getServiceType();\n     }\n \n+\n     @Override\n     public final String getInitiatorHcid() {\n         return delegate.getInitiatorHcid();\n     }\n \n+\n     @Override\n     public final String getRespondingHcid() {\n         return delegate.getRespondingHcid();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}