{
    "project_name": "Angel-ML-angel",
    "violation_id": "839",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/839/CSRIntMat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/839/CSRIntMat.java\nindex 7e1aa5630ff..acdc3ec72db 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/839/CSRIntMat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/839/CSRIntMat.java\n@@ -23,113 +23,121 @@ import com.tencent.angel.ml.math.TMatrix;\n  */\n public class CSRIntMat extends TMatrix {\n \n-  public int[] rs;\n-  public int[] cols;\n-  public int[] vals;\n-\n-  /**\n-   * Create a new empty matrix.\n-   *\n-   * @param row the row\n-   * @param col the col\n-   */\n-  public CSRIntMat(int row, int col) {\n-    super(row, col);\n-  }\n-\n-  /**\n-   * Create a new matrix with <code>vals</code>.\n-   *\n-   * @param row  the row\n-   * @param col  the col\n-   * @param rs   the rs\n-   * @param cols the cols\n-   * @param vals the vals\n-   */\n-  public CSRIntMat(int row, int col, int[] rs, int[] cols, int[] vals) {\n-    this(row, col);\n-    this.rs = rs;\n-    this.cols = cols;\n-    this.vals = vals;\n-  }\n-\n-  @Override public double sparsity() {\n-    return 0;\n-  }\n-\n-  @Override public long size() {\n-    return 0;\n-  }\n-\n-  @Override public void clear() {\n-    throw new UnsupportedOperationException(\"Unsupport operation\");\n-  }\n-\n-  @Override public void clear(int rowIndex) {\n-    throw new UnsupportedOperationException(\"Unsupport operation\");\n-  }\n-\n-  @Override public long nonZeroNum() {\n-    return 0;\n-  }\n-\n-  @Override public TMatrix plusBy(TMatrix other) {\n-    throw new UnsupportedOperationException(\"Unsupport operation\");\n-  }\n-\n-  //TODO Should be implemented\n-  @Override public Object getRow(int rowIndex) {\n-    return null;\n-  }\n-\n-  /**\n-   * convert to COOIntMatrix\n-   *\n-   * @return\n-   */\n-  public COOIntMatrix toCoo() {\n-    int len = cols.length;\n-    int[] rr = new int[len];\n-    int[] cc = new int[len];\n-    int[] vv = new int[len];\n-\n-    for (int r = 0; r < rs.length - 1; r++) {\n-      for (int j = rs[r]; j < rs[r + 1]; j++) {\n-        rr[j] = r;\n-        cc[j] = cols[j];\n-        vv[j] = vals[j];\n-      }\n+    public int[] rs;\n+    public int[] cols;\n+    public int[] vals;\n+\n+    /**\n+     * Create a new empty matrix.\n+     *\n+     * @param row the row\n+     * @param col the col\n+     */\n+    public CSRIntMat(int row, int col) {\n+        super(row, col);\n     }\n \n-    return new COOIntMatrix(row, (int)col, rr, cc, vv);\n-  }\n-\n-  /**\n-   * information about the matrix\n-   *\n-   * @return String\n-   */\n-  @Override public String toString() {\n-    StringBuilder builder = new StringBuilder();\n-    for (int r = 0; r < rs.length - 1; r++) {\n-      for (int j = rs[r]; j < rs[r + 1]; j++) {\n-        builder.append(String.format(\"%d %d %d\\n\", r, cols[j], vals[j]));\n-      }\n+    /**\n+     * Create a new matrix with <code>vals</code>.\n+     *\n+     * @param row  the row\n+     * @param col  the col\n+     * @param rs   the rs\n+     * @param cols the cols\n+     * @param vals the vals\n+     */\n+    public CSRIntMat(int row, int col, int[] rs, int[] cols, int[] vals) {\n+        this(row, col);\n+        this.rs = rs;\n+        this.cols = cols;\n+        this.vals = vals;\n     }\n-    return builder.toString();\n-  }\n-\n-  /**\n-   * information about the matrix by r index\n-   *\n-   * @param r\n-   * @return\n-   */\n-  public String str(int r) {\n-    StringBuilder builder = new StringBuilder();\n-    for (int j = rs[r]; j < rs[r + 1]; j++) {\n-      builder.append(String.format(\"%d %d %d\\n\", r, cols[j], vals[j]));\n+\n+    @Override\n+    public double sparsity() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public long size() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        throw new UnsupportedOperationException(\"Unsupport operation\");\n+    }\n+\n+    @Override\n+    public void clear(int rowIndex) {\n+        throw new UnsupportedOperationException(\"Unsupport operation\");\n+    }\n+\n+    @Override\n+    public long nonZeroNum() {\n+        return 0;\n+    }\n+\n+    @Override\n+    public TMatrix plusBy(TMatrix other) {\n+        throw new UnsupportedOperationException(\"Unsupport operation\");\n+    }\n+\n+    //TODO Should be implemented\n+    @Override\n+    public Object getRow(int rowIndex) {\n+        return null;\n+    }\n+\n+    /**\n+     * convert to COOIntMatrix\n+     *\n+     * @return\n+     */\n+    public COOIntMatrix toCoo() {\n+        int len = cols.length;\n+        int[] rr = new int[len];\n+        int[] cc = new int[len];\n+        int[] vv = new int[len];\n+\n+        for (int r = 0; r < rs.length - 1; r++) {\n+            for (int j = rs[r]; j < rs[r + 1]; j++) {\n+                rr[j] = r;\n+                cc[j] = cols[j];\n+                vv[j] = vals[j];\n+            }\n+        }\n+\n+        return new COOIntMatrix(row, (int) col, rr, cc, vv);\n+    }\n+\n+    /**\n+     * information about the matrix\n+     *\n+     * @return String\n+     */\n+    @Override\n+    public String toString() {\n+        StringBuilder builder = new StringBuilder();\n+        for (int r = 0; r < rs.length - 1; r++) {\n+            for (int j = rs[r]; j < rs[r + 1]; j++) {\n+                builder.append(String.format(\"%d %d %d\\n\", r, cols[j], vals[j]));\n+            }\n+        }\n+        return builder.toString();\n+    }\n+\n+    /**\n+     * information about the matrix by r index\n+     *\n+     * @param r\n+     * @return\n+     */\n+    public String str(int r) {\n+        StringBuilder builder = new StringBuilder();\n+        for (int j = rs[r]; j < rs[r + 1]; j++) {\n+            builder.append(String.format(\"%d %d %d\\n\", r, cols[j], vals[j]));\n+        }\n+        return builder.toString();\n     }\n-    return builder.toString();\n-  }\n }\n",
            "diff_size": 179
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/839/CSRIntMat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/839/CSRIntMat.java\nindex 7e1aa5630ff..109444b1b35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/839/CSRIntMat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/839/CSRIntMat.java\n@@ -53,32 +53,39 @@ public class CSRIntMat extends TMatrix {\n     this.vals = vals;\n   }\n \n-  @Override public double sparsity() {\n+  @Override\n+public double sparsity() {\n     return 0;\n   }\n \n-  @Override public long size() {\n+  @Override\n+public long size() {\n     return 0;\n   }\n \n-  @Override public void clear() {\n+  @Override\n+public void clear() {\n     throw new UnsupportedOperationException(\"Unsupport operation\");\n   }\n \n-  @Override public void clear(int rowIndex) {\n+  @Override\n+public void clear(int rowIndex) {\n     throw new UnsupportedOperationException(\"Unsupport operation\");\n   }\n \n-  @Override public long nonZeroNum() {\n+  @Override\n+public long nonZeroNum() {\n     return 0;\n   }\n \n-  @Override public TMatrix plusBy(TMatrix other) {\n+  @Override\n+public TMatrix plusBy(TMatrix other) {\n     throw new UnsupportedOperationException(\"Unsupport operation\");\n   }\n \n   //TODO Should be implemented\n-  @Override public Object getRow(int rowIndex) {\n+  @Override\n+public Object getRow(int rowIndex) {\n     return null;\n   }\n \n@@ -101,7 +108,7 @@ public class CSRIntMat extends TMatrix {\n       }\n     }\n \n-    return new COOIntMatrix(row, (int)col, rr, cc, vv);\n+    return new COOIntMatrix(row, (int) col, rr, cc, vv);\n   }\n \n   /**\n@@ -109,7 +116,8 @@ public class CSRIntMat extends TMatrix {\n    *\n    * @return String\n    */\n-  @Override public String toString() {\n+  @Override\n+public String toString() {\n     StringBuilder builder = new StringBuilder();\n     for (int r = 0; r < rs.length - 1; r++) {\n       for (int j = rs[r]; j < rs[r + 1]; j++) {\n@@ -132,4 +140,4 @@ public class CSRIntMat extends TMatrix {\n     }\n     return builder.toString();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/839/CSRIntMat.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/839/CSRIntMat.java\nindex 7e1aa5630ff..1d35377579f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/839/CSRIntMat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/839/CSRIntMat.java\n@@ -21,10 +21,13 @@ import com.tencent.angel.ml.math.TMatrix;\n /**\n  * The compressed sparse row of matrix.\n  */\n+\n public class CSRIntMat extends TMatrix {\n \n   public int[] rs;\n+\n   public int[] cols;\n+\n   public int[] vals;\n \n   /**\n@@ -33,6 +36,7 @@ public class CSRIntMat extends TMatrix {\n    * @param row the row\n    * @param col the col\n    */\n+\n   public CSRIntMat(int row, int col) {\n     super(row, col);\n   }\n@@ -46,6 +50,7 @@ public class CSRIntMat extends TMatrix {\n    * @param cols the cols\n    * @param vals the vals\n    */\n+\n   public CSRIntMat(int row, int col, int[] rs, int[] cols, int[] vals) {\n     this(row, col);\n     this.rs = rs;\n@@ -53,32 +58,40 @@ public class CSRIntMat extends TMatrix {\n     this.vals = vals;\n   }\n \n-  @Override public double sparsity() {\n+  @Override\n+  public double sparsity() {\n     return 0;\n   }\n \n-  @Override public long size() {\n+  @Override\n+  public long size() {\n     return 0;\n   }\n \n-  @Override public void clear() {\n+  @Override\n+  public void clear() {\n     throw new UnsupportedOperationException(\"Unsupport operation\");\n   }\n \n-  @Override public void clear(int rowIndex) {\n+  @Override\n+  public void clear(int rowIndex) {\n     throw new UnsupportedOperationException(\"Unsupport operation\");\n   }\n \n-  @Override public long nonZeroNum() {\n+  @Override\n+  public long nonZeroNum() {\n     return 0;\n   }\n \n-  @Override public TMatrix plusBy(TMatrix other) {\n+  @Override\n+  public TMatrix plusBy(TMatrix other) {\n     throw new UnsupportedOperationException(\"Unsupport operation\");\n   }\n \n   //TODO Should be implemented\n-  @Override public Object getRow(int rowIndex) {\n+\n+  @Override\n+  public Object getRow(int rowIndex) {\n     return null;\n   }\n \n@@ -87,12 +100,12 @@ public class CSRIntMat extends TMatrix {\n    *\n    * @return\n    */\n+\n   public COOIntMatrix toCoo() {\n     int len = cols.length;\n     int[] rr = new int[len];\n     int[] cc = new int[len];\n     int[] vv = new int[len];\n-\n     for (int r = 0; r < rs.length - 1; r++) {\n       for (int j = rs[r]; j < rs[r + 1]; j++) {\n         rr[j] = r;\n@@ -100,8 +113,7 @@ public class CSRIntMat extends TMatrix {\n         vv[j] = vals[j];\n       }\n     }\n-\n-    return new COOIntMatrix(row, (int)col, rr, cc, vv);\n+    return new COOIntMatrix(row, (int) col, rr, cc, vv);\n   }\n \n   /**\n@@ -109,7 +121,9 @@ public class CSRIntMat extends TMatrix {\n    *\n    * @return String\n    */\n-  @Override public String toString() {\n+\n+  @Override\n+  public String toString() {\n     StringBuilder builder = new StringBuilder();\n     for (int r = 0; r < rs.length - 1; r++) {\n       for (int j = rs[r]; j < rs[r + 1]; j++) {\n@@ -125,6 +139,7 @@ public class CSRIntMat extends TMatrix {\n    * @param r\n    * @return\n    */\n+\n   public String str(int r) {\n     StringBuilder builder = new StringBuilder();\n     for (int j = rs[r]; j < rs[r + 1]; j++) {\n@@ -132,4 +147,5 @@ public class CSRIntMat extends TMatrix {\n     }\n     return builder.toString();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}