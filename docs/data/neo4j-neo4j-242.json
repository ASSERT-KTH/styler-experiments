{
    "project_name": "neo4j-neo4j",
    "violation_id": "242",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/242/LogEntryParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/242/LogEntryParser.java\nindex 63e1e2463e1..897090a9440 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/242/LogEntryParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/242/LogEntryParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.entry;\n \n import java.io.IOException;\n@@ -28,14 +29,14 @@ import org.neo4j.storageengine.api.CommandReaderFactory;\n \n /**\n  * Reads and parses the next {@link LogEntry} from {@link ReadableChecksumChannel}, given the version.\n- *\n+ * <p>\n  * {@link #parse(byte, ReadableChecksumChannel, LogPositionMarker, CommandReaderFactory)}.\n  */\n public abstract class LogEntryParser\n {\n     private final byte type;\n \n-    public LogEntryParser( byte type )\n+    public LogEntryParser(byte type)\n     {\n         this.type = type;\n     }\n@@ -51,15 +52,15 @@ public abstract class LogEntryParser\n     /**\n      * Parses the next {@link LogEntry} read from the {@code channel}.\n      *\n-     * @param version version this log entry is determined to be of.\n-     * @param channel {@link ReadableChecksumChannel} to read the data from.\n-     * @param marker {@link LogPositionMarker} marking the position in the {@code channel} that is the\n-     * start of this entry.\n+     * @param version              version this log entry is determined to be of.\n+     * @param channel              {@link ReadableChecksumChannel} to read the data from.\n+     * @param marker               {@link LogPositionMarker} marking the position in the {@code channel} that is the\n+     *                             start of this entry.\n      * @param commandReaderFactory {@link CommandReaderFactory} for retrieving a {@link CommandReader}\n-     * for reading commands from, for log entry types that need that.\n+     *                             for reading commands from, for log entry types that need that.\n      * @return the next {@link LogEntry} read and parsed from the {@code channel}.\n      * @throws IOException I/O error from channel or if data was read past the end of the channel.\n      */\n-    abstract LogEntry parse( byte version, ReadableChecksumChannel channel, LogPositionMarker marker, CommandReaderFactory commandReaderFactory )\n-            throws IOException;\n+    abstract LogEntry parse(byte version, ReadableChecksumChannel channel, LogPositionMarker marker, CommandReaderFactory commandReaderFactory)\n+      throws IOException;\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}