{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "887",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.auditrepository.nhinc.proxy;\n\nimport gov.hhs.fha.nhinc.auditrepository.nhinc.proxy.service.AuditRepositorySecuredServicePortDescriptor;\nimport gov.hhs.fha.nhinc.common.auditlog.LogEventRequestType;",
    "results": [
        {
            "tool": "styler",
            "violations": null,
            "diff": null
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/887/AuditRepositoryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/887/AuditRepositoryProxyWebServiceSecuredImpl.java\nindex e4412379859..a9c888d58c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/887/AuditRepositoryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/887/AuditRepositoryProxyWebServiceSecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditrepository.nhinc.proxy;\n \n import gov.hhs.fha.nhinc.auditrepository.nhinc.proxy.service.AuditRepositorySecuredServicePortDescriptor;\n@@ -42,66 +43,64 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n- *\n  * @author akong\n- *\n  */\n public class AuditRepositoryProxyWebServiceSecuredImpl implements AuditRepositoryProxy {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AuditRepositoryProxyWebServiceSecuredImpl.class);\n-    private final WebServiceProxyHelper oProxyHelper = new WebServiceProxyHelper();\n-    private final String invokeMethodName = \"logEvent\";\n+  private static final Logger LOG = LoggerFactory.getLogger(AuditRepositoryProxyWebServiceSecuredImpl.class);\n+  private final WebServiceProxyHelper oProxyHelper = new WebServiceProxyHelper();\n+  private final String invokeMethodName = \"logEvent\";\n \n-    @Override\n-    public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n-        LOG.debug(\"Entering AuditRepositoryProxyWebServiceSecured.auditLog(...)\");\n-        AcknowledgementType result = new AcknowledgementType();\n+  @Override\n+  public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n+    LOG.debug(\"Entering AuditRepositoryProxyWebServiceSecured.auditLog(...)\");\n+    AcknowledgementType result = new AcknowledgementType();\n \n-        if (request.getAuditMessage() == null) {\n-            LOG.error(\"Audit Request Message is null\");\n-            synchronized (result) {\n-                return result;\n-            }\n-        }\n-        try {\n-            String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME);\n+    if (request.getAuditMessage() == null) {\n+      LOG.error(\"Audit Request Message is null\");\n+      synchronized (result) {\n+        return result;\n+      }\n+    }\n+    try {\n+      String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME);\n \n-            if (NullChecker.isNotNullish(url)) {\n+      if (NullChecker.isNotNullish(url)) {\n \n-                ServicePortDescriptor<AuditRepositoryManagerSecuredPortType> portDescriptor\n-                    = new AuditRepositorySecuredServicePortDescriptor();\n+        ServicePortDescriptor<AuditRepositoryManagerSecuredPortType> portDescriptor\n+            = new AuditRepositorySecuredServicePortDescriptor();\n \n-                CONNECTClient<AuditRepositoryManagerSecuredPortType> client = CONNECTCXFClientFactory.getInstance()\n-                    .getCONNECTClientSecured(portDescriptor, url, assertion);\n+        CONNECTClient<AuditRepositoryManagerSecuredPortType> client = CONNECTCXFClientFactory.getInstance()\n+            .getCONNECTClientSecured(portDescriptor, url, assertion);\n \n-                synchronized (result) {\n-                    result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerSecuredPortType.class,\n-                        invokeMethodName, createLogSecureEventRequestType(request));\n-                }\n-            }\n-        } catch (Exception e) {\n-            LOG.error(\"Failed to call the web service({}). An unexpected exception occurred. Exception: {}\",\n-                NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME, e.getLocalizedMessage(), e);\n+        synchronized (result) {\n+          result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerSecuredPortType.class,\n+              invokeMethodName, createLogSecureEventRequestType(request));\n         }\n+      }\n+    } catch (Exception e) {\n+      LOG.error(\"Failed to call the web service({}). An unexpected exception occurred. Exception: {}\",\n+          NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME, e.getLocalizedMessage(), e);\n+    }\n \n-        LOG.debug(\"In AuditRepositoryProxyWebServiceSecured.auditLog(...) - completed called to ConnectionManager to \"\n-            + \"retrieve endpoint.\");\n+    LOG.debug(\"In AuditRepositoryProxyWebServiceSecured.auditLog(...) - completed called to ConnectionManager to \"\n+        + \"retrieve endpoint.\");\n \n-        return result;\n-    }\n+    return result;\n+  }\n \n-    private LogEventSecureRequestType createLogSecureEventRequestType(LogEventRequestType request) {\n-        LogEventSecureRequestType secureRequest = new LogEventSecureRequestType();\n-        secureRequest.setAuditMessage(request.getAuditMessage());\n-        secureRequest.setDirection(request.getDirection());\n-        secureRequest.setRemoteHCID(request.getRemoteHCID());\n-        secureRequest.setEventType(request.getEventType());\n-        secureRequest.setEventID(request.getEventID());\n-        secureRequest.setEventOutcomeIndicator(request.getEventOutcomeIndicator());\n-        secureRequest.setEventTimestamp(request.getEventTimestamp());\n-        secureRequest.setUserId(request.getUserId());\n-        secureRequest.setRelatesTo(request.getRelatesTo());\n-        secureRequest.setRequestMessageId(request.getRequestMessageId());\n-        return secureRequest;\n-    }\n+  private LogEventSecureRequestType createLogSecureEventRequestType(LogEventRequestType request) {\n+    LogEventSecureRequestType secureRequest = new LogEventSecureRequestType();\n+    secureRequest.setAuditMessage(request.getAuditMessage());\n+    secureRequest.setDirection(request.getDirection());\n+    secureRequest.setRemoteHCID(request.getRemoteHCID());\n+    secureRequest.setEventType(request.getEventType());\n+    secureRequest.setEventID(request.getEventID());\n+    secureRequest.setEventOutcomeIndicator(request.getEventOutcomeIndicator());\n+    secureRequest.setEventTimestamp(request.getEventTimestamp());\n+    secureRequest.setUserId(request.getUserId());\n+    secureRequest.setRelatesTo(request.getRelatesTo());\n+    secureRequest.setRequestMessageId(request.getRequestMessageId());\n+    return secureRequest;\n+  }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/887/AuditRepositoryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/887/AuditRepositoryProxyWebServiceSecuredImpl.java\nindex e4412379859..a601bf5f3b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/887/AuditRepositoryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/887/AuditRepositoryProxyWebServiceSecuredImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.auditrepository.nhinc.proxy;\n \n import gov.hhs.fha.nhinc.auditrepository.nhinc.proxy.service.AuditRepositorySecuredServicePortDescriptor;\n@@ -56,8 +57,7 @@ public class AuditRepositoryProxyWebServiceSecuredImpl implements AuditRepositor\n     public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n         LOG.debug(\"Entering AuditRepositoryProxyWebServiceSecured.auditLog(...)\");\n         AcknowledgementType result = new AcknowledgementType();\n-\n-        if (request.getAuditMessage() == null) {\n+if (request.getAuditMessage() == null) {\n             LOG.error(\"Audit Request Message is null\");\n             synchronized (result) {\n                 return result;\n@@ -65,29 +65,22 @@ public class AuditRepositoryProxyWebServiceSecuredImpl implements AuditRepositor\n         }\n         try {\n             String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME);\n-\n-            if (NullChecker.isNotNullish(url)) {\n-\n-                ServicePortDescriptor<AuditRepositoryManagerSecuredPortType> portDescriptor\n-                    = new AuditRepositorySecuredServicePortDescriptor();\n-\n-                CONNECTClient<AuditRepositoryManagerSecuredPortType> client = CONNECTCXFClientFactory.getInstance()\n-                    .getCONNECTClientSecured(portDescriptor, url, assertion);\n+if (NullChecker.isNotNullish(url)) {\n+    ServicePortDescriptor<AuditRepositoryManagerSecuredPortType> portDescriptor = new AuditRepositorySecuredServicePortDescriptor();\n+CONNECTClient<AuditRepositoryManagerSecuredPortType> client = CONNECTCXFClientFactory.getInstance().getCONNECTClientSecured(portDescriptor, url, assertion);\n \n                 synchronized (result) {\n                     result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerSecuredPortType.class,\n                         invokeMethodName, createLogSecureEventRequestType(request));\n-                }\n+    }\n             }\n         } catch (Exception e) {\n-            LOG.error(\"Failed to call the web service({}). An unexpected exception occurred. Exception: {}\",\n-                NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME, e.getLocalizedMessage(), e);\n-        }\n+            LOG.error(\"Failed to call the web service({}). An unexpected exception occurred. Exception: {}\", NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME, e.getLocalizedMessage(), e);\n+    }\n \n-        LOG.debug(\"In AuditRepositoryProxyWebServiceSecured.auditLog(...) - completed called to ConnectionManager to \"\n-            + \"retrieve endpoint.\");\n+        LOG.debug(\"In AuditRepositoryProxyWebServiceSecured.auditLog(...) - completed called to ConnectionManager to \" + \"retrieve endpoint.\");\n \n-        return result;\n+return result;\n     }\n \n     private LogEventSecureRequestType createLogSecureEventRequestType(LogEventRequestType request) {\n@@ -102,6 +95,7 @@ public class AuditRepositoryProxyWebServiceSecuredImpl implements AuditRepositor\n         secureRequest.setUserId(request.getUserId());\n         secureRequest.setRelatesTo(request.getRelatesTo());\n         secureRequest.setRequestMessageId(request.getRequestMessageId());\n-        return secureRequest;\n+\n+return secureRequest;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "64",
                    "column": "25",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "column": "29",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/887/AuditRepositoryProxyWebServiceSecuredImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/887/AuditRepositoryProxyWebServiceSecuredImpl.java\nindex e4412379859..57697022312 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/887/AuditRepositoryProxyWebServiceSecuredImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/887/AuditRepositoryProxyWebServiceSecuredImpl.java\n@@ -46,47 +46,39 @@ import org.slf4j.LoggerFactory;\n  * @author akong\n  *\n  */\n+\n+\n public class AuditRepositoryProxyWebServiceSecuredImpl implements AuditRepositoryProxy {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AuditRepositoryProxyWebServiceSecuredImpl.class);\n     private final WebServiceProxyHelper oProxyHelper = new WebServiceProxyHelper();\n     private final String invokeMethodName = \"logEvent\";\n \n+\n     @Override\n     public AcknowledgementType auditLog(LogEventRequestType request, AssertionType assertion) {\n         LOG.debug(\"Entering AuditRepositoryProxyWebServiceSecured.auditLog(...)\");\n         AcknowledgementType result = new AcknowledgementType();\n-\n         if (request.getAuditMessage() == null) {\n             LOG.error(\"Audit Request Message is null\");\n-            synchronized (result) {\n+            synchronized(result) {\n                 return result;\n             }\n         }\n         try {\n             String url = oProxyHelper.getUrlLocalHomeCommunity(NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME);\n-\n             if (NullChecker.isNotNullish(url)) {\n-\n-                ServicePortDescriptor<AuditRepositoryManagerSecuredPortType> portDescriptor\n-                    = new AuditRepositorySecuredServicePortDescriptor();\n-\n-                CONNECTClient<AuditRepositoryManagerSecuredPortType> client = CONNECTCXFClientFactory.getInstance()\n-                    .getCONNECTClientSecured(portDescriptor, url, assertion);\n-\n-                synchronized (result) {\n-                    result = (AcknowledgementType) client.invokePort(AuditRepositoryManagerSecuredPortType.class,\n-                        invokeMethodName, createLogSecureEventRequestType(request));\n+                ServicePortDescriptor<AuditRepositoryManagerSecuredPortType> portDescriptor = new AuditRepositorySecuredServicePortDescriptor();\n+                CONNECTClient<AuditRepositoryManagerSecuredPortType> client = CONNECTCXFClientFactory.getInstance().getCONNECTClientSecured(portDescriptor, url, assertion);\n+                synchronized(result) {\n+                                     result = (AcknowledgementType)\n+                                                  client.invokePort(AuditRepositoryManagerSecuredPortType.class, invokeMethodName, createLogSecureEventRequestType(request));\n                 }\n             }\n         } catch (Exception e) {\n-            LOG.error(\"Failed to call the web service({}). An unexpected exception occurred. Exception: {}\",\n-                NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME, e.getLocalizedMessage(), e);\n+            LOG.error(\"Failed to call the web service({}). An unexpected exception occurred. Exception: {}\", NhincConstants.AUDIT_REPO_SECURE_SERVICE_NAME, e.getLocalizedMessage(), e);\n         }\n-\n-        LOG.debug(\"In AuditRepositoryProxyWebServiceSecured.auditLog(...) - completed called to ConnectionManager to \"\n-            + \"retrieve endpoint.\");\n-\n+        LOG.debug(\"In AuditRepositoryProxyWebServiceSecured.auditLog(...) - completed called to ConnectionManager to \" + \"retrieve endpoint.\");\n         return result;\n     }\n \n@@ -104,4 +96,5 @@ public class AuditRepositoryProxyWebServiceSecuredImpl implements AuditRepositor\n         secureRequest.setRequestMessageId(request.getRequestMessageId());\n         return secureRequest;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}