{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "3920",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3920/ParameterTypeVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3920/ParameterTypeVisitor.java\nindex beac4e4cec0..6def17f51b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3920/ParameterTypeVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3920/ParameterTypeVisitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.tooling.procedure.visitors;\n \n import java.util.function.Predicate;\n@@ -29,30 +30,30 @@ import javax.lang.model.util.Types;\n import org.neo4j.tooling.procedure.compilerutils.TypeMirrorUtils;\n import org.neo4j.tooling.procedure.validators.AllowedTypesValidator;\n \n-class ParameterTypeVisitor extends SimpleTypeVisitor8<Boolean,Void>\n+class ParameterTypeVisitor extends SimpleTypeVisitor8<Boolean, Void>\n {\n \n-    private final Predicate<TypeMirror> allowedTypesValidator;\n-\n-    ParameterTypeVisitor( Types typeUtils, TypeMirrorUtils typeMirrors )\n-    {\n-        allowedTypesValidator = new AllowedTypesValidator( typeMirrors, typeUtils );\n-    }\n-\n-    @Override\n-    public Boolean visitDeclared( DeclaredType parameterType, Void ignored )\n-    {\n-        return validate( parameterType );\n-    }\n-\n-    @Override\n-    public Boolean visitPrimitive( PrimitiveType primitive, Void ignored )\n-    {\n-        return validate( primitive );\n-    }\n-\n-    private Boolean validate( TypeMirror typeMirror )\n-    {\n-        return allowedTypesValidator.test( typeMirror );\n-    }\n+  private final Predicate<TypeMirror> allowedTypesValidator;\n+\n+  ParameterTypeVisitor(Types typeUtils, TypeMirrorUtils typeMirrors)\n+  {\n+    allowedTypesValidator = new AllowedTypesValidator(typeMirrors, typeUtils);\n+  }\n+\n+  @Override\n+  public Boolean visitDeclared(DeclaredType parameterType, Void ignored)\n+  {\n+    return validate(parameterType);\n+  }\n+\n+  @Override\n+  public Boolean visitPrimitive(PrimitiveType primitive, Void ignored)\n+  {\n+    return validate(primitive);\n+  }\n+\n+  private Boolean validate(TypeMirror typeMirror)\n+  {\n+    return allowedTypesValidator.test(typeMirror);\n+  }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3920/ParameterTypeVisitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3920/ParameterTypeVisitor.java\nindex beac4e4cec0..98282330813 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3920/ParameterTypeVisitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3920/ParameterTypeVisitor.java\n@@ -31,7 +31,6 @@ import org.neo4j.tooling.procedure.validators.AllowedTypesValidator;\n \n class ParameterTypeVisitor extends SimpleTypeVisitor8<Boolean,Void>\n {\n-\n     private final Predicate<TypeMirror> allowedTypesValidator;\n \n     ParameterTypeVisitor( Types typeUtils, TypeMirrorUtils typeMirrors )\n@@ -55,4 +54,4 @@ class ParameterTypeVisitor extends SimpleTypeVisitor8<Boolean,Void>\n     {\n         return allowedTypesValidator.test( typeMirror );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}