{
    "project_name": "TIBCOSoftware-genxdm",
    "violation_id": "176",
    "information": {
        "violations": [
            {
                "line": "35",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\npublic class Performance {\n\tprivate static final String CSV_OUTPUT = \"-csv\";\n\t\n\tpublic static void main(String[] args)\n\t{",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/176/Performance.java\nindex a53d8266907..b371e111def 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/176/Performance.java\n@@ -32,7 +32,7 @@ import org.xml.sax.XMLReader;\n import org.xml.sax.helpers.XMLReaderFactory;\n \n public class Performance {\n-\tprivate static final String CSV_OUTPUT = \"-csv\";\n+private static final String CSV_OUTPUT = \"-csv\";\n \t\n \tpublic static void main(String[] args)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/176/Performance.java\nindex a53d8266907..c9ae67103e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/176/Performance.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.samples.performance;\n \n import java.io.IOException;\n@@ -32,472 +33,455 @@ import org.xml.sax.XMLReader;\n import org.xml.sax.helpers.XMLReaderFactory;\n \n public class Performance {\n-\tprivate static final String CSV_OUTPUT = \"-csv\";\n-\t\n-\tpublic static void main(String[] args)\n-\t{\n-\t\tif(args.length < 1)\n-\t\t{\n-\t\t\tSystem.out.println(\"No performance input file specified.\");\n-\t\t\tSystem.exit(0);\n-\t\t}\n-\t\t// Let each test variation execute setup, so that we don't have a failure\n-\t\t// on the last run & waste time.\n-\t\tArrayList<Performance> pList = new ArrayList<Performance>();\n-\t\t\n-\t\tboolean csvOut = false;\n-\t\ttry\n-\t\t{\n-\t\t\tfor(String arg : args)\n-\t\t\t{\n-\t\t\t\tif(CSV_OUTPUT.equalsIgnoreCase(arg))\n-\t\t\t\t{\n-\t\t\t\t\tcsvOut = true;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tpList.add(new Performance(arg));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfor(Performance p : pList)\n-\t\t\t{\n-\t\t\t\tp.runTests(csvOut);\n-\t\t\t}\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-\tpublic static final Boolean DEBUG = false;\n-\tprivate String m_name;\n-\tprivate int m_reportSubtaskLevels = 2;\n-\tprivate boolean m_reportMemoryUsage = false;\n-\tprivate final String m_inputFilename;\n-\tprivate final Iterable<Module> m_modules;\n-\tprivate final ArrayList<String> m_bridges = new ArrayList<String>();\n-\n-\tpublic Performance(String inputFile) throws SAXException, IOException {\n-\t\tm_inputFilename = inputFile;\n-\t\tm_modules = configure(inputFile, m_bridges);\n-\t}\n-\t/**\n-\t * Performs the tests.\n-\t * \n-\t * @throws Exception because any uncaught exception should stop the test\n-\t */\n-\tpublic final void runTests(boolean csvOut) throws Exception {\n-\t\t\n-\t    TaskTimer ttTotal = new TaskTimer(m_name, m_reportMemoryUsage);\n-\t    ttTotal.addNote(\"property file = \" + m_inputFilename);\n-\t    ttTotal.addNote(\"timestamp = \" + new Timestamp(System.currentTimeMillis()).toString());\n-\t    \n-\t    for(String bridgeFactoryClassName : m_bridges)\n-\t    {\n-\t\t\tfor(Module module : m_modules)\n-\t\t\t{\n-\t\t\t\t//System.out.println(\"Module: \" + module.getName() + \": cnt = \" + module.getTestConfig().mi_cnt);\n-\t\t\t    //ttTotal.addNote(\"module: \" + module.getName());\n-\t\t\t    TaskTimer ttModule = ttTotal.newChild(module.getName());\n-\t\t\t    \n-\t\t\t\tfor(PerfTestWrapper testWrapper : module.getTestWrappers())\n-\t\t\t\t{\n-\t\t\t\t\tPerfTest test = testWrapper.getTest();\n-\t\t\t\t\t//System.out.println(\"   test: \" + test.getName() + \": input = \" + testWrapper.mi_props.get(\"document\"));\n-\t\t\t\t\t\n-\t\t\t\t\ttry \n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Provide the specific bridge factory here.\n-\t\t\t\t\t\ttestWrapper.getProperties().put(BaseBridgePerfTest.BRIDGE_FACTORY_CLASS, bridgeFactoryClassName);\n-\t\t\t\t\t    test.initialSetup(testWrapper.getProperties());\n-\t\t\t\t\t    \n-\t\t\t\t\t    TaskTimer ttBridge = ttModule.newChild(test.getBridgeName() + \".\" + test.getBridgeVersion());\n-\t\t\t\t\t    TaskTimer ttTest = ttBridge.newChild(test.getTestName());\n-\t\t\t\t\t    if(testWrapper.getTestConfig().mi_excludeOneRun)\n-\t\t\t\t\t    {\n-\t\t\t\t\t    \ttest.iterativeSetup();\n-\t\t\t\t\t    \ttest.execute();\n-\t\t\t\t\t    \ttest.iterativeTeardown();\n-\t\t\t\t\t    }\n-\t\t\t\t\t    for(int icnt = 0; icnt < module.getTestConfig().mi_cnt; icnt++)\n-\t\t\t\t\t    {\n-\t\t\t\t\t    \tTaskTimer ttRun = ttTest.newChild(\"run[\" + icnt + \"]\");\n-\t\t\t\t\t    \ttest.iterativeSetup();\n-\t\t\t\t\t        ttRun.startTimer();\n-\t\t\t\t\t        test.execute();\n-\t\t\t\t\t        ttRun.stopTimer();\n-\t\t\t\t\t    \tIterable<String> notes = test.iterativeTeardown();\n-\t\t\t\t\t    \tif(notes != null)\n-\t\t\t\t\t    \t{\n-\t\t\t\t\t    \t\tfor(String note : notes)\n-\t\t\t\t\t    \t\t{\n-\t\t\t\t\t    \t\t\tttRun.addNote(note);\n-\t\t\t\t\t    \t\t}\n-\t\t\t\t\t    \t}\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (UnsupportedOperationException ex)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tSystem.out.println(ex.getMessage());\n-\t\t\t\t\t}\n-\t\t\t\t\tfinally\n-\t\t\t\t\t{\n-\t\t\t\t\t    test.finalTeardown();\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t    }\n-\t\tif(csvOut)\n-\t\t{\n-\t\t\tttTotal.setPrintTimeUnits(false);\n-\t\t\tSystem.out.println(ttTotal.toCsvMillis(m_reportSubtaskLevels));\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tSystem.out.println(\"----------------------------------------------------\");\n-\t\t\tSystem.out.println(ttTotal.toPrettyStringMillis(\"\", m_reportSubtaskLevels));\n-\t\t\tSystem.out.println(\"----------------------------------------------------\");\n-\t\t}\n-\t}\n-\tprotected Iterable<Module> configure(String inputFile, List<String> bridges) throws SAXException, IOException\n-\t{\n-\t\tXMLReader parser = XMLReaderFactory.createXMLReader();\n-\t\tConfigParser cp = new ConfigParser(bridges);\n-\t\tparser.setContentHandler(cp);\n-\t\tparser.parse(new InputSource(inputFile));\n-\t\treturn cp.getModules();\n-\t}\n-\tclass ConfigParser implements ContentHandler\n-\t{\n-\t\tpublic static final String PERFORMANCE_ELEM_NAME = \"Performance\";\n-\t\tpublic static final String COUNT_ATT_NAME = \"cnt\";\n-\t\tpublic static final String EXCLUDE_ONE_RUN_ATT_NAME = \"excludeOneRun\";\n-\t\tpublic static final String REPORT_SUBTASK_LEVELS_ATT_NAME = \"reportSubtaskLevels\";\n-\t\tpublic static final String REPORT_MEM_USAGE_ATT_NAME = \"reportMemoryUsage\";\n-\t\t\n-\t\tpublic static final String MODULE_ELEM_NAME = \"Module\";\n-\t\tpublic static final String BRIDGES_ELEM_NAME = \"Bridges\";\n-\t\tpublic static final String BRIDGE_ELEM_NAME = \"Bridge\";\n-\t\tpublic static final String BRIDGE_FACTORY_ATT_NAME = \"factory\";\n-\t\tpublic static final String TEST_ELEM_NAME = \"Test\";\n-\t\tpublic static final String PROP_ELEM_NAME = \"Prop\";\n-\t\tpublic static final String CLASS_NAME_ATT_NAME = \"className\";\n-\t\tpublic static final String NAME_ATT_NAME = \"name\";\n-\t\tpublic static final String VALUE_ATT_NAME = \"value\";\n-\t\t\n-\t\tfinal ArrayList<Module> mi_modules = new ArrayList<Module>();\n-\t\tprivate boolean isPerf = false;\n-\t\tprivate boolean isModule = false;\n-\t\tprivate boolean isBridges = false;\n-\t\tprivate boolean isTest = false;\n-\t\tprivate TestConfig mi_perfTestConfig;\n-\t\tprivate final List<String> mi_bridges;\n-\t\t\n-\t\tpublic ConfigParser(List<String> bridges) {\n-\t\t\tmi_bridges = bridges;\n-\t\t}\n-\t\t\n-\t\tpublic Iterable<Module> getModules() \n-\t\t{\n-\t\t\treturn mi_modules;\n-\t\t}\n-\t\tprivate TestConfig createTestConfig(TestConfig backer, Attributes atts)\n-\t\t{\n-\t\t\tTestConfig tc = new TestConfig();\n-\t\t\t\n-\t\t\tString value = atts.getValue(COUNT_ATT_NAME);\n-\t\t\ttc.mi_cnt = value != null ? Integer.parseInt(value) : backer.mi_cnt;\n-\n-\t\t\tvalue = atts.getValue(EXCLUDE_ONE_RUN_ATT_NAME);\n-\t\t\ttc.mi_excludeOneRun = value != null ? Boolean.parseBoolean(value) : backer.mi_excludeOneRun;\n-\t\t\t\n-\t\t\treturn tc;\n-\t\t}\n-\t\t@SuppressWarnings(\"unchecked\") // for cast of object to List<Object>\n-\t\t@Override\n-\t\tpublic void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n-\t\t\tif(isPerf)\n-\t\t\t{\n-\t\t\t\tif(isBridges)\n-\t\t\t\t{\n-\t\t\t\t\tif(BRIDGE_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tString factoryName = atts.getValue(BRIDGE_FACTORY_ATT_NAME);\n-\t\t\t\t\t\tif(factoryName == null)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + BRIDGE_FACTORY_ATT_NAME + \" attribute.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tmi_bridges.add(factoryName);\n-\t\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + BRIDGE_ELEM_NAME + \" element.\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse if(isModule)\n-\t\t\t\t{\n-\t\t\t\t\tif(isTest)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif(PROP_ELEM_NAME.equals(localName))\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tString propName = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\t\tString propValue = atts.getValue(VALUE_ATT_NAME);\n-\t\t\t\t\t\t\tif(propName != null && propValue != null)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tModule module = mi_modules.get(mi_modules.size() - 1);\n-\t\t\t\t\t\t\t\tHashMap<String, Object> props = module.getLastPerfTestWrapper().getProperties();\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tif(props.get(propName) instanceof String)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tArrayList<Object> list = new ArrayList<Object>();\n-\t\t\t\t\t\t\t\t\tlist.add(props.get(propName));\n-\t\t\t\t\t\t\t\t\tlist.add(propValue);\n-\t\t\t\t\t\t\t\t\tprops.put(propName, list);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\telse if(props.get(propName) instanceof List)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t((List<Object>)props.get(propName)).add(propValue);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tprops.put(propName, propValue);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tthrow new SAXException(\"Prop specification requires both name and value.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Invalid element: \" + localName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\telse if(PROP_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tString propName = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\tString propValue = atts.getValue(VALUE_ATT_NAME);\n-\t\t\t\t\t\tif(propName != null && propValue != null)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tHashMap<String, Object> props = mi_modules.get(mi_modules.size() - 1).getProperties();\n-\t\t\t\t\t\t\tif(props.get(propName) instanceof String)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tArrayList<Object> list = new ArrayList<Object>();\n-\t\t\t\t\t\t\t\tlist.add(props.get(propName));\n-\t\t\t\t\t\t\t\tlist.add(propValue);\n-\t\t\t\t\t\t\t\tprops.put(propName, list);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if(props.get(propName) instanceof List)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t((List<Object>)props.get(propName)).add(propValue);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tprops.put(propName, propValue);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Prop specification requires both name and value.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif(TEST_ELEM_NAME.equals(localName))\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tisTest = true;\n-\t\t\t\t\t\t\tModule mod = mi_modules.get(mi_modules.size() - 1);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\tString testClassName = atts.getValue(CLASS_NAME_ATT_NAME);\n-\t\t\t\t\t\t\tTestConfig tc = createTestConfig(mod.getTestConfig(), atts);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tClass<?> clazz = Performance.class.getClassLoader().loadClass(testClassName);\n-\t\t\t\t\t\t\t\tPerfTest perfTest = (PerfTest)clazz.newInstance();\n-\t\t\t\t\t\t\t\tPerfTestWrapper wrapper = new PerfTestWrapper(perfTest, tc);\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t// Add the properties from the module to the PerfTestWrapper...\n-\t\t\t\t\t\t\t\tHashMap<String,Object> modProps = mod.getProperties();\n-\t\t\t\t\t\t\t\tHashMap<String,Object> props = wrapper.getProperties();\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tfor(String key : modProps.keySet())\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tprops.put(key, modProps.get(key));\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tmod.addTestWrapper(wrapper);\n-\t\t\t\t\t\t\t} catch (ClassNotFoundException e) {\n-\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t\t\t\t\t} catch (InstantiationException e) {\n-\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t\t\t\t\t} catch (IllegalAccessException e) {\n-\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + TEST_ELEM_NAME + \" element.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tif(BRIDGES_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tisBridges = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if(MODULE_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tisModule = true;\n-\t\t\t\t\t\tisBridges = false;\n-\t\t\t\t\t\tString modName = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\tTestConfig tc = createTestConfig(mi_perfTestConfig, atts);\n-\t\t\t\t\t\tModule mod = new Module(modName, tc);\n-\t\t\t\t\t\tmi_modules.add(mod);\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + MODULE_ELEM_NAME + \" element.\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tif(PERFORMANCE_ELEM_NAME.equals(localName))\n-\t\t\t\t{\n-\t\t\t\t\tisPerf = true;\n-\t\t\t\t\tm_name = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\n-\t\t\t\t\tString value = atts.getValue(REPORT_SUBTASK_LEVELS_ATT_NAME);\n-\t\t\t\t\tif(value != null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_reportSubtaskLevels = Integer.parseInt(value);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tvalue = atts.getValue(REPORT_MEM_USAGE_ATT_NAME);\n-\t\t\t\t\tif(value != null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_reportMemoryUsage = Boolean.parseBoolean(value);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\tmi_perfTestConfig = createTestConfig(new TestConfig(), atts);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + PERFORMANCE_ELEM_NAME + \" root element.\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void endElement(String uri, String localName, String qName) throws SAXException {\n-\t\t\tif(PERFORMANCE_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisPerf = false;\n-\t\t\t}\n-\t\t\telse if(BRIDGES_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisBridges = false;\n-\t\t\t}\n-\t\t\telse if(MODULE_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisModule = false;\n-\t\t\t}\n-\t\t\telse if(TEST_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisTest = false;\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t@Override\n-\t\tpublic void characters(char[] ch, int start, int length) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void setDocumentLocator(Locator locator) {}\n-\t\t@Override\n-\t\tpublic void startDocument() throws SAXException {}\n-\t\t@Override\n-\t\tpublic void endDocument() throws SAXException {}\n-\t\t@Override\n-\t\tpublic void startPrefixMapping(String prefix, String uri) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void endPrefixMapping(String prefix) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void processingInstruction(String target, String data) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void skippedEntity(String name) throws SAXException {}\n-\t}\n-\tclass Module \n-\t{\n-\t\tprivate final String mi_name;\n-\t\tprivate final TestConfig mi_config;\n-\t\tprivate final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n-\t\tprivate final ArrayList<PerfTestWrapper> mi_tests = new ArrayList<PerfTestWrapper>();\n-\t\tpublic Module(String name, TestConfig tc) \n-\t\t{\n-\t\t\tmi_name = PreCondition.assertArgumentNotNull(name);\n-\t\t\tmi_config = PreCondition.assertArgumentNotNull(tc);\n-\t\t}\n-\t\tpublic String getName()\n-\t\t{\n-\t\t\treturn mi_name;\n-\t\t}\n-\t\tpublic TestConfig getTestConfig()\n-\t\t{\n-\t\t\treturn mi_config;\n-\t\t}\n-\t\tpublic void addTestWrapper(PerfTestWrapper testWrapper)\n-\t\t{\n-\t\t\tmi_tests.add(PreCondition.assertArgumentNotNull(testWrapper));\n-\t\t}\n-\t\tpublic PerfTestWrapper getLastPerfTestWrapper()\n-\t\t{\n-\t\t\treturn mi_tests.get(mi_tests.size() - 1);\n-\t\t}\n-\t\tpublic Iterable<PerfTestWrapper> getTestWrappers()\n-\t\t{\n-\t\t\treturn mi_tests;\n-\t\t}\n-\t\tpublic HashMap<String, Object> getProperties()\n-\t\t{\n-\t\t\treturn mi_props;\n-\t\t}\n-\t}\n-\tclass PerfTestWrapper\n-\t{\n-\t\tprivate final PerfTest mi_test;\n-\t\tprivate final TestConfig mi_config;\n-\t\tprivate final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n-\t\tpublic PerfTestWrapper(PerfTest perfTest, TestConfig tc)\n-\t\t{\n-\t\t\tmi_test = PreCondition.assertArgumentNotNull(perfTest);\n-\t\t\tmi_config = PreCondition.assertArgumentNotNull(tc);\n-\t\t}\n-\t\tpublic PerfTest getTest()\n-\t\t{\n-\t\t\treturn mi_test;\n-\t\t}\n-\t\tpublic TestConfig getTestConfig()\n-\t\t{\n-\t\t\treturn mi_config;\n-\t\t}\n-\t\tpublic HashMap<String, Object> getProperties()\n-\t\t{\n-\t\t\treturn mi_props;\n-\t\t}\n-\t\tpublic PerfTestWrapper copy()\n-\t\t{\n-\t\t\tPerfTestWrapper retval = new PerfTestWrapper(mi_test, mi_config);\n-\t\t\treturn retval;\n-\t\t}\n-\t}\n-\tclass TestConfig\n-\t{\n-\t\tpublic int mi_cnt = 1;\n-\t\tpublic boolean mi_excludeOneRun = true;\n-\t}\n+    private static final String CSV_OUTPUT = \"-csv\";\n+\n+    public static void main(String[] args) {\n+        if (args.length < 1) {\n+            System.out.println(\"No performance input file specified.\");\n+            System.exit(0);\n+        }\n+        // Let each test variation execute setup, so that we don't have a failure\n+        // on the last run & waste time.\n+        ArrayList<Performance> pList = new ArrayList<Performance>();\n+\n+        boolean csvOut = false;\n+        try {\n+            for (String arg : args) {\n+                if (CSV_OUTPUT.equalsIgnoreCase(arg)) {\n+                    csvOut = true;\n+                } else {\n+                    pList.add(new Performance(arg));\n+                }\n+            }\n+            for (Performance p : pList) {\n+                p.runTests(csvOut);\n+            }\n+        } catch (Exception e) {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static final Boolean DEBUG = false;\n+\n+    private String m_name;\n+\n+    private int m_reportSubtaskLevels = 2;\n+\n+    private boolean m_reportMemoryUsage = false;\n+\n+    private final String m_inputFilename;\n+\n+    private final Iterable<Module> m_modules;\n+\n+    private final ArrayList<String> m_bridges = new ArrayList<String>();\n+\n+    public Performance(String inputFile) throws SAXException, IOException {\n+        m_inputFilename = inputFile;\n+        m_modules = configure(inputFile, m_bridges);\n+    }\n+\n+    /**\n+     * Performs the tests.\n+     *\n+     * @throws Exception because any uncaught exception should stop the test\n+     */\n+    public final void runTests(boolean csvOut) throws Exception {\n+\n+        TaskTimer ttTotal = new TaskTimer(m_name, m_reportMemoryUsage);\n+        ttTotal.addNote(\"property file = \" + m_inputFilename);\n+        ttTotal.addNote(\"timestamp = \" + new Timestamp(System.currentTimeMillis()).toString());\n+\n+        for (String bridgeFactoryClassName : m_bridges) {\n+            for (Module module : m_modules) {\n+                //System.out.println(\"Module: \" + module.getName() + \": cnt = \" + module.getTestConfig().mi_cnt);\n+                //ttTotal.addNote(\"module: \" + module.getName());\n+                TaskTimer ttModule = ttTotal.newChild(module.getName());\n+\n+                for (PerfTestWrapper testWrapper : module.getTestWrappers()) {\n+                    PerfTest test = testWrapper.getTest();\n+                    //System.out.println(\"   test: \" + test.getName() + \": input = \" + testWrapper.mi_props.get(\"document\"));\n+\n+                    try {\n+                        // Provide the specific bridge factory here.\n+                        testWrapper.getProperties()\n+                            .put(BaseBridgePerfTest.BRIDGE_FACTORY_CLASS, bridgeFactoryClassName);\n+                        test.initialSetup(testWrapper.getProperties());\n+\n+                        TaskTimer ttBridge =\n+                            ttModule.newChild(test.getBridgeName() + \".\" + test.getBridgeVersion());\n+                        TaskTimer ttTest = ttBridge.newChild(test.getTestName());\n+                        if (testWrapper.getTestConfig().mi_excludeOneRun) {\n+                            test.iterativeSetup();\n+                            test.execute();\n+                            test.iterativeTeardown();\n+                        }\n+                        for (int icnt = 0; icnt < module.getTestConfig().mi_cnt; icnt++) {\n+                            TaskTimer ttRun = ttTest.newChild(\"run[\" + icnt + \"]\");\n+                            test.iterativeSetup();\n+                            ttRun.startTimer();\n+                            test.execute();\n+                            ttRun.stopTimer();\n+                            Iterable<String> notes = test.iterativeTeardown();\n+                            if (notes != null) {\n+                                for (String note : notes) {\n+                                    ttRun.addNote(note);\n+                                }\n+                            }\n+                        }\n+                    } catch (UnsupportedOperationException ex) {\n+                        System.out.println(ex.getMessage());\n+                    } finally {\n+                        test.finalTeardown();\n+                    }\n+                }\n+            }\n+        }\n+        if (csvOut) {\n+            ttTotal.setPrintTimeUnits(false);\n+            System.out.println(ttTotal.toCsvMillis(m_reportSubtaskLevels));\n+        } else {\n+            System.out.println(\"----------------------------------------------------\");\n+            System.out.println(ttTotal.toPrettyStringMillis(\"\", m_reportSubtaskLevels));\n+            System.out.println(\"----------------------------------------------------\");\n+        }\n+    }\n+\n+    protected Iterable<Module> configure(String inputFile, List<String> bridges)\n+        throws SAXException, IOException {\n+        XMLReader parser = XMLReaderFactory.createXMLReader();\n+        ConfigParser cp = new ConfigParser(bridges);\n+        parser.setContentHandler(cp);\n+        parser.parse(new InputSource(inputFile));\n+        return cp.getModules();\n+    }\n+\n+    class ConfigParser implements ContentHandler {\n+        public static final String PERFORMANCE_ELEM_NAME = \"Performance\";\n+\n+        public static final String COUNT_ATT_NAME = \"cnt\";\n+\n+        public static final String EXCLUDE_ONE_RUN_ATT_NAME = \"excludeOneRun\";\n+\n+        public static final String REPORT_SUBTASK_LEVELS_ATT_NAME = \"reportSubtaskLevels\";\n+\n+        public static final String REPORT_MEM_USAGE_ATT_NAME = \"reportMemoryUsage\";\n+\n+        public static final String MODULE_ELEM_NAME = \"Module\";\n+\n+        public static final String BRIDGES_ELEM_NAME = \"Bridges\";\n+\n+        public static final String BRIDGE_ELEM_NAME = \"Bridge\";\n+\n+        public static final String BRIDGE_FACTORY_ATT_NAME = \"factory\";\n+\n+        public static final String TEST_ELEM_NAME = \"Test\";\n+\n+        public static final String PROP_ELEM_NAME = \"Prop\";\n+\n+        public static final String CLASS_NAME_ATT_NAME = \"className\";\n+\n+        public static final String NAME_ATT_NAME = \"name\";\n+\n+        public static final String VALUE_ATT_NAME = \"value\";\n+\n+        final ArrayList<Module> mi_modules = new ArrayList<Module>();\n+\n+        private boolean isPerf = false;\n+\n+        private boolean isModule = false;\n+\n+        private boolean isBridges = false;\n+\n+        private boolean isTest = false;\n+\n+        private TestConfig mi_perfTestConfig;\n+\n+        private final List<String> mi_bridges;\n+\n+        public ConfigParser(List<String> bridges) {\n+            mi_bridges = bridges;\n+        }\n+\n+        public Iterable<Module> getModules() {\n+            return mi_modules;\n+        }\n+\n+        private TestConfig createTestConfig(TestConfig backer, Attributes atts) {\n+            TestConfig tc = new TestConfig();\n+\n+            String value = atts.getValue(COUNT_ATT_NAME);\n+            tc.mi_cnt = value != null ? Integer.parseInt(value) : backer.mi_cnt;\n+\n+            value = atts.getValue(EXCLUDE_ONE_RUN_ATT_NAME);\n+            tc.mi_excludeOneRun =\n+                value != null ? Boolean.parseBoolean(value) : backer.mi_excludeOneRun;\n+\n+            return tc;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\") // for cast of object to List<Object>\n+        @Override\n+        public void startElement(String uri, String localName, String qName, Attributes atts)\n+            throws SAXException {\n+            if (isPerf) {\n+                if (isBridges) {\n+                    if (BRIDGE_ELEM_NAME.equals(localName)) {\n+                        String factoryName = atts.getValue(BRIDGE_FACTORY_ATT_NAME);\n+                        if (factoryName == null) {\n+                            throw new SAXException(\n+                                \"Invalid input: missing \" + BRIDGE_FACTORY_ATT_NAME +\n+                                    \" attribute.\");\n+                        }\n+                        mi_bridges.add(factoryName);\n+\n+                    } else {\n+                        throw new SAXException(\n+                            \"Invalid input: missing \" + BRIDGE_ELEM_NAME + \" element.\");\n+                    }\n+                } else if (isModule) {\n+                    if (isTest) {\n+                        if (PROP_ELEM_NAME.equals(localName)) {\n+                            String propName = atts.getValue(NAME_ATT_NAME);\n+                            String propValue = atts.getValue(VALUE_ATT_NAME);\n+                            if (propName != null && propValue != null) {\n+                                Module module = mi_modules.get(mi_modules.size() - 1);\n+                                HashMap<String, Object> props =\n+                                    module.getLastPerfTestWrapper().getProperties();\n+\n+                                if (props.get(propName) instanceof String) {\n+                                    ArrayList<Object> list = new ArrayList<Object>();\n+                                    list.add(props.get(propName));\n+                                    list.add(propValue);\n+                                    props.put(propName, list);\n+                                } else if (props.get(propName) instanceof List) {\n+                                    ((List<Object>) props.get(propName)).add(propValue);\n+                                } else {\n+                                    props.put(propName, propValue);\n+                                }\n+                            } else {\n+                                throw new SAXException(\n+                                    \"Prop specification requires both name and value.\");\n+                            }\n+                        } else {\n+                            throw new SAXException(\"Invalid element: \" + localName);\n+                        }\n+                    } else if (PROP_ELEM_NAME.equals(localName)) {\n+                        String propName = atts.getValue(NAME_ATT_NAME);\n+                        String propValue = atts.getValue(VALUE_ATT_NAME);\n+                        if (propName != null && propValue != null) {\n+                            HashMap<String, Object> props =\n+                                mi_modules.get(mi_modules.size() - 1).getProperties();\n+                            if (props.get(propName) instanceof String) {\n+                                ArrayList<Object> list = new ArrayList<Object>();\n+                                list.add(props.get(propName));\n+                                list.add(propValue);\n+                                props.put(propName, list);\n+                            } else if (props.get(propName) instanceof List) {\n+                                ((List<Object>) props.get(propName)).add(propValue);\n+                            } else {\n+                                props.put(propName, propValue);\n+                            }\n+                        } else {\n+                            throw new SAXException(\n+                                \"Prop specification requires both name and value.\");\n+                        }\n+                    } else {\n+                        if (TEST_ELEM_NAME.equals(localName)) {\n+                            isTest = true;\n+                            Module mod = mi_modules.get(mi_modules.size() - 1);\n+\n+                            String testClassName = atts.getValue(CLASS_NAME_ATT_NAME);\n+                            TestConfig tc = createTestConfig(mod.getTestConfig(), atts);\n+\n+                            try {\n+                                Class<?> clazz =\n+                                    Performance.class.getClassLoader().loadClass(testClassName);\n+                                PerfTest perfTest = (PerfTest) clazz.newInstance();\n+                                PerfTestWrapper wrapper = new PerfTestWrapper(perfTest, tc);\n+\n+                                // Add the properties from the module to the PerfTestWrapper...\n+                                HashMap<String, Object> modProps = mod.getProperties();\n+                                HashMap<String, Object> props = wrapper.getProperties();\n+\n+                                for (String key : modProps.keySet()) {\n+                                    props.put(key, modProps.get(key));\n+                                }\n+\n+                                mod.addTestWrapper(wrapper);\n+                            } catch (ClassNotFoundException e) {\n+                                throw new RuntimeException(e);\n+                            } catch (InstantiationException e) {\n+                                throw new RuntimeException(e);\n+                            } catch (IllegalAccessException e) {\n+                                throw new RuntimeException(e);\n+                            }\n+                        } else {\n+                            throw new SAXException(\n+                                \"Invalid input: missing \" + TEST_ELEM_NAME + \" element.\");\n+                        }\n+                    }\n+                } else {\n+                    if (BRIDGES_ELEM_NAME.equals(localName)) {\n+                        isBridges = true;\n+                    } else if (MODULE_ELEM_NAME.equals(localName)) {\n+                        isModule = true;\n+                        isBridges = false;\n+                        String modName = atts.getValue(NAME_ATT_NAME);\n+                        TestConfig tc = createTestConfig(mi_perfTestConfig, atts);\n+                        Module mod = new Module(modName, tc);\n+                        mi_modules.add(mod);\n+                    } else {\n+                        throw new SAXException(\n+                            \"Invalid input: missing \" + MODULE_ELEM_NAME + \" element.\");\n+                    }\n+                }\n+            } else {\n+                if (PERFORMANCE_ELEM_NAME.equals(localName)) {\n+                    isPerf = true;\n+                    m_name = atts.getValue(NAME_ATT_NAME);\n+\n+                    String value = atts.getValue(REPORT_SUBTASK_LEVELS_ATT_NAME);\n+                    if (value != null) {\n+                        m_reportSubtaskLevels = Integer.parseInt(value);\n+                    }\n+\n+                    value = atts.getValue(REPORT_MEM_USAGE_ATT_NAME);\n+                    if (value != null) {\n+                        m_reportMemoryUsage = Boolean.parseBoolean(value);\n+                    }\n+\n+\n+                    mi_perfTestConfig = createTestConfig(new TestConfig(), atts);\n+                } else {\n+                    throw new SAXException(\n+                        \"Invalid input: missing \" + PERFORMANCE_ELEM_NAME + \" root element.\");\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName) throws SAXException {\n+            if (PERFORMANCE_ELEM_NAME.equals(localName)) {\n+                isPerf = false;\n+            } else if (BRIDGES_ELEM_NAME.equals(localName)) {\n+                isBridges = false;\n+            } else if (MODULE_ELEM_NAME.equals(localName)) {\n+                isModule = false;\n+            } else if (TEST_ELEM_NAME.equals(localName)) {\n+                isTest = false;\n+            }\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length) throws SAXException {\n+        }\n+\n+        @Override\n+        public void setDocumentLocator(Locator locator) {\n+        }\n+\n+        @Override\n+        public void startDocument() throws SAXException {\n+        }\n+\n+        @Override\n+        public void endDocument() throws SAXException {\n+        }\n+\n+        @Override\n+        public void startPrefixMapping(String prefix, String uri) throws SAXException {\n+        }\n+\n+        @Override\n+        public void endPrefixMapping(String prefix) throws SAXException {\n+        }\n+\n+        @Override\n+        public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {\n+        }\n+\n+        @Override\n+        public void processingInstruction(String target, String data) throws SAXException {\n+        }\n+\n+        @Override\n+        public void skippedEntity(String name) throws SAXException {\n+        }\n+    }\n+\n+    class Module {\n+        private final String mi_name;\n+\n+        private final TestConfig mi_config;\n+\n+        private final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n+\n+        private final ArrayList<PerfTestWrapper> mi_tests = new ArrayList<PerfTestWrapper>();\n+\n+        public Module(String name, TestConfig tc) {\n+            mi_name = PreCondition.assertArgumentNotNull(name);\n+            mi_config = PreCondition.assertArgumentNotNull(tc);\n+        }\n+\n+        public String getName() {\n+            return mi_name;\n+        }\n+\n+        public TestConfig getTestConfig() {\n+            return mi_config;\n+        }\n+\n+        public void addTestWrapper(PerfTestWrapper testWrapper) {\n+            mi_tests.add(PreCondition.assertArgumentNotNull(testWrapper));\n+        }\n+\n+        public PerfTestWrapper getLastPerfTestWrapper() {\n+            return mi_tests.get(mi_tests.size() - 1);\n+        }\n+\n+        public Iterable<PerfTestWrapper> getTestWrappers() {\n+            return mi_tests;\n+        }\n+\n+        public HashMap<String, Object> getProperties() {\n+            return mi_props;\n+        }\n+    }\n+\n+    class PerfTestWrapper {\n+        private final PerfTest mi_test;\n+\n+        private final TestConfig mi_config;\n+\n+        private final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n+\n+        public PerfTestWrapper(PerfTest perfTest, TestConfig tc) {\n+            mi_test = PreCondition.assertArgumentNotNull(perfTest);\n+            mi_config = PreCondition.assertArgumentNotNull(tc);\n+        }\n+\n+        public PerfTest getTest() {\n+            return mi_test;\n+        }\n+\n+        public TestConfig getTestConfig() {\n+            return mi_config;\n+        }\n+\n+        public HashMap<String, Object> getProperties() {\n+            return mi_props;\n+        }\n+\n+        public PerfTestWrapper copy() {\n+            PerfTestWrapper retval = new PerfTestWrapper(mi_test, mi_config);\n+            return retval;\n+        }\n+    }\n+\n+    class TestConfig {\n+        public int mi_cnt = 1;\n+\n+        public boolean mi_excludeOneRun = true;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 473
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/176/Performance.java\nindex a53d8266907..c85892dceb6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/176/Performance.java\n@@ -20,7 +20,6 @@ import java.sql.Timestamp;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.samples.performance.bridges.BaseBridgePerfTest;\n import org.xml.sax.Attributes;\n@@ -31,473 +30,543 @@ import org.xml.sax.SAXException;\n import org.xml.sax.XMLReader;\n import org.xml.sax.helpers.XMLReaderFactory;\n \n-public class Performance {\n-\tprivate static final String CSV_OUTPUT = \"-csv\";\n-\t\n-\tpublic static void main(String[] args)\n-\t{\n-\t\tif(args.length < 1)\n-\t\t{\n-\t\t\tSystem.out.println(\"No performance input file specified.\");\n-\t\t\tSystem.exit(0);\n-\t\t}\n-\t\t// Let each test variation execute setup, so that we don't have a failure\n-\t\t// on the last run & waste time.\n-\t\tArrayList<Performance> pList = new ArrayList<Performance>();\n-\t\t\n-\t\tboolean csvOut = false;\n-\t\ttry\n-\t\t{\n-\t\t\tfor(String arg : args)\n-\t\t\t{\n-\t\t\t\tif(CSV_OUTPUT.equalsIgnoreCase(arg))\n-\t\t\t\t{\n-\t\t\t\t\tcsvOut = true;\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tpList.add(new Performance(arg));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfor(Performance p : pList)\n-\t\t\t{\n-\t\t\t\tp.runTests(csvOut);\n-\t\t\t}\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\t// TODO Auto-generated catch block\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-\tpublic static final Boolean DEBUG = false;\n-\tprivate String m_name;\n-\tprivate int m_reportSubtaskLevels = 2;\n-\tprivate boolean m_reportMemoryUsage = false;\n-\tprivate final String m_inputFilename;\n-\tprivate final Iterable<Module> m_modules;\n-\tprivate final ArrayList<String> m_bridges = new ArrayList<String>();\n-\n-\tpublic Performance(String inputFile) throws SAXException, IOException {\n-\t\tm_inputFilename = inputFile;\n-\t\tm_modules = configure(inputFile, m_bridges);\n-\t}\n-\t/**\n-\t * Performs the tests.\n-\t * \n-\t * @throws Exception because any uncaught exception should stop the test\n-\t */\n-\tpublic final void runTests(boolean csvOut) throws Exception {\n-\t\t\n-\t    TaskTimer ttTotal = new TaskTimer(m_name, m_reportMemoryUsage);\n-\t    ttTotal.addNote(\"property file = \" + m_inputFilename);\n-\t    ttTotal.addNote(\"timestamp = \" + new Timestamp(System.currentTimeMillis()).toString());\n-\t    \n-\t    for(String bridgeFactoryClassName : m_bridges)\n-\t    {\n-\t\t\tfor(Module module : m_modules)\n-\t\t\t{\n-\t\t\t\t//System.out.println(\"Module: \" + module.getName() + \": cnt = \" + module.getTestConfig().mi_cnt);\n-\t\t\t    //ttTotal.addNote(\"module: \" + module.getName());\n-\t\t\t    TaskTimer ttModule = ttTotal.newChild(module.getName());\n-\t\t\t    \n-\t\t\t\tfor(PerfTestWrapper testWrapper : module.getTestWrappers())\n-\t\t\t\t{\n-\t\t\t\t\tPerfTest test = testWrapper.getTest();\n-\t\t\t\t\t//System.out.println(\"   test: \" + test.getName() + \": input = \" + testWrapper.mi_props.get(\"document\"));\n-\t\t\t\t\t\n-\t\t\t\t\ttry \n-\t\t\t\t\t{\n-\t\t\t\t\t\t// Provide the specific bridge factory here.\n-\t\t\t\t\t\ttestWrapper.getProperties().put(BaseBridgePerfTest.BRIDGE_FACTORY_CLASS, bridgeFactoryClassName);\n-\t\t\t\t\t    test.initialSetup(testWrapper.getProperties());\n-\t\t\t\t\t    \n-\t\t\t\t\t    TaskTimer ttBridge = ttModule.newChild(test.getBridgeName() + \".\" + test.getBridgeVersion());\n-\t\t\t\t\t    TaskTimer ttTest = ttBridge.newChild(test.getTestName());\n-\t\t\t\t\t    if(testWrapper.getTestConfig().mi_excludeOneRun)\n-\t\t\t\t\t    {\n-\t\t\t\t\t    \ttest.iterativeSetup();\n-\t\t\t\t\t    \ttest.execute();\n-\t\t\t\t\t    \ttest.iterativeTeardown();\n-\t\t\t\t\t    }\n-\t\t\t\t\t    for(int icnt = 0; icnt < module.getTestConfig().mi_cnt; icnt++)\n-\t\t\t\t\t    {\n-\t\t\t\t\t    \tTaskTimer ttRun = ttTest.newChild(\"run[\" + icnt + \"]\");\n-\t\t\t\t\t    \ttest.iterativeSetup();\n-\t\t\t\t\t        ttRun.startTimer();\n-\t\t\t\t\t        test.execute();\n-\t\t\t\t\t        ttRun.stopTimer();\n-\t\t\t\t\t    \tIterable<String> notes = test.iterativeTeardown();\n-\t\t\t\t\t    \tif(notes != null)\n-\t\t\t\t\t    \t{\n-\t\t\t\t\t    \t\tfor(String note : notes)\n-\t\t\t\t\t    \t\t{\n-\t\t\t\t\t    \t\t\tttRun.addNote(note);\n-\t\t\t\t\t    \t\t}\n-\t\t\t\t\t    \t}\n-\t\t\t\t\t    }\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (UnsupportedOperationException ex)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tSystem.out.println(ex.getMessage());\n-\t\t\t\t\t}\n-\t\t\t\t\tfinally\n-\t\t\t\t\t{\n-\t\t\t\t\t    test.finalTeardown();\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t    }\n-\t\tif(csvOut)\n-\t\t{\n-\t\t\tttTotal.setPrintTimeUnits(false);\n-\t\t\tSystem.out.println(ttTotal.toCsvMillis(m_reportSubtaskLevels));\n-\t\t}\n-\t\telse\n-\t\t{\n-\t\t\tSystem.out.println(\"----------------------------------------------------\");\n-\t\t\tSystem.out.println(ttTotal.toPrettyStringMillis(\"\", m_reportSubtaskLevels));\n-\t\t\tSystem.out.println(\"----------------------------------------------------\");\n-\t\t}\n-\t}\n-\tprotected Iterable<Module> configure(String inputFile, List<String> bridges) throws SAXException, IOException\n-\t{\n-\t\tXMLReader parser = XMLReaderFactory.createXMLReader();\n-\t\tConfigParser cp = new ConfigParser(bridges);\n-\t\tparser.setContentHandler(cp);\n-\t\tparser.parse(new InputSource(inputFile));\n-\t\treturn cp.getModules();\n-\t}\n-\tclass ConfigParser implements ContentHandler\n-\t{\n-\t\tpublic static final String PERFORMANCE_ELEM_NAME = \"Performance\";\n-\t\tpublic static final String COUNT_ATT_NAME = \"cnt\";\n-\t\tpublic static final String EXCLUDE_ONE_RUN_ATT_NAME = \"excludeOneRun\";\n-\t\tpublic static final String REPORT_SUBTASK_LEVELS_ATT_NAME = \"reportSubtaskLevels\";\n-\t\tpublic static final String REPORT_MEM_USAGE_ATT_NAME = \"reportMemoryUsage\";\n-\t\t\n-\t\tpublic static final String MODULE_ELEM_NAME = \"Module\";\n-\t\tpublic static final String BRIDGES_ELEM_NAME = \"Bridges\";\n-\t\tpublic static final String BRIDGE_ELEM_NAME = \"Bridge\";\n-\t\tpublic static final String BRIDGE_FACTORY_ATT_NAME = \"factory\";\n-\t\tpublic static final String TEST_ELEM_NAME = \"Test\";\n-\t\tpublic static final String PROP_ELEM_NAME = \"Prop\";\n-\t\tpublic static final String CLASS_NAME_ATT_NAME = \"className\";\n-\t\tpublic static final String NAME_ATT_NAME = \"name\";\n-\t\tpublic static final String VALUE_ATT_NAME = \"value\";\n-\t\t\n-\t\tfinal ArrayList<Module> mi_modules = new ArrayList<Module>();\n-\t\tprivate boolean isPerf = false;\n-\t\tprivate boolean isModule = false;\n-\t\tprivate boolean isBridges = false;\n-\t\tprivate boolean isTest = false;\n-\t\tprivate TestConfig mi_perfTestConfig;\n-\t\tprivate final List<String> mi_bridges;\n-\t\t\n-\t\tpublic ConfigParser(List<String> bridges) {\n-\t\t\tmi_bridges = bridges;\n-\t\t}\n-\t\t\n-\t\tpublic Iterable<Module> getModules() \n-\t\t{\n-\t\t\treturn mi_modules;\n-\t\t}\n-\t\tprivate TestConfig createTestConfig(TestConfig backer, Attributes atts)\n-\t\t{\n-\t\t\tTestConfig tc = new TestConfig();\n-\t\t\t\n-\t\t\tString value = atts.getValue(COUNT_ATT_NAME);\n-\t\t\ttc.mi_cnt = value != null ? Integer.parseInt(value) : backer.mi_cnt;\n-\n-\t\t\tvalue = atts.getValue(EXCLUDE_ONE_RUN_ATT_NAME);\n-\t\t\ttc.mi_excludeOneRun = value != null ? Boolean.parseBoolean(value) : backer.mi_excludeOneRun;\n-\t\t\t\n-\t\t\treturn tc;\n-\t\t}\n-\t\t@SuppressWarnings(\"unchecked\") // for cast of object to List<Object>\n-\t\t@Override\n-\t\tpublic void startElement(String uri, String localName, String qName, Attributes atts) throws SAXException {\n-\t\t\tif(isPerf)\n-\t\t\t{\n-\t\t\t\tif(isBridges)\n-\t\t\t\t{\n-\t\t\t\t\tif(BRIDGE_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tString factoryName = atts.getValue(BRIDGE_FACTORY_ATT_NAME);\n-\t\t\t\t\t\tif(factoryName == null)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + BRIDGE_FACTORY_ATT_NAME + \" attribute.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tmi_bridges.add(factoryName);\n-\t\t\t\t\t\t\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + BRIDGE_ELEM_NAME + \" element.\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse if(isModule)\n-\t\t\t\t{\n-\t\t\t\t\tif(isTest)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif(PROP_ELEM_NAME.equals(localName))\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tString propName = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\t\tString propValue = atts.getValue(VALUE_ATT_NAME);\n-\t\t\t\t\t\t\tif(propName != null && propValue != null)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tModule module = mi_modules.get(mi_modules.size() - 1);\n-\t\t\t\t\t\t\t\tHashMap<String, Object> props = module.getLastPerfTestWrapper().getProperties();\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tif(props.get(propName) instanceof String)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tArrayList<Object> list = new ArrayList<Object>();\n-\t\t\t\t\t\t\t\t\tlist.add(props.get(propName));\n-\t\t\t\t\t\t\t\t\tlist.add(propValue);\n-\t\t\t\t\t\t\t\t\tprops.put(propName, list);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\telse if(props.get(propName) instanceof List)\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\t((List<Object>)props.get(propName)).add(propValue);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tprops.put(propName, propValue);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tthrow new SAXException(\"Prop specification requires both name and value.\");\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Invalid element: \" + localName);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\telse if(PROP_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tString propName = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\tString propValue = atts.getValue(VALUE_ATT_NAME);\n-\t\t\t\t\t\tif(propName != null && propValue != null)\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tHashMap<String, Object> props = mi_modules.get(mi_modules.size() - 1).getProperties();\n-\t\t\t\t\t\t\tif(props.get(propName) instanceof String)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tArrayList<Object> list = new ArrayList<Object>();\n-\t\t\t\t\t\t\t\tlist.add(props.get(propName));\n-\t\t\t\t\t\t\t\tlist.add(propValue);\n-\t\t\t\t\t\t\t\tprops.put(propName, list);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse if(props.get(propName) instanceof List)\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t((List<Object>)props.get(propName)).add(propValue);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\telse\n-\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\tprops.put(propName, propValue);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Prop specification requires both name and value.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\tif(TEST_ELEM_NAME.equals(localName))\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tisTest = true;\n-\t\t\t\t\t\t\tModule mod = mi_modules.get(mi_modules.size() - 1);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\tString testClassName = atts.getValue(CLASS_NAME_ATT_NAME);\n-\t\t\t\t\t\t\tTestConfig tc = createTestConfig(mod.getTestConfig(), atts);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tClass<?> clazz = Performance.class.getClassLoader().loadClass(testClassName);\n-\t\t\t\t\t\t\t\tPerfTest perfTest = (PerfTest)clazz.newInstance();\n-\t\t\t\t\t\t\t\tPerfTestWrapper wrapper = new PerfTestWrapper(perfTest, tc);\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\t// Add the properties from the module to the PerfTestWrapper...\n-\t\t\t\t\t\t\t\tHashMap<String,Object> modProps = mod.getProperties();\n-\t\t\t\t\t\t\t\tHashMap<String,Object> props = wrapper.getProperties();\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tfor(String key : modProps.keySet())\n-\t\t\t\t\t\t\t\t{\n-\t\t\t\t\t\t\t\t\tprops.put(key, modProps.get(key));\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\t\n-\t\t\t\t\t\t\t\tmod.addTestWrapper(wrapper);\n-\t\t\t\t\t\t\t} catch (ClassNotFoundException e) {\n-\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t\t\t\t\t} catch (InstantiationException e) {\n-\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t\t\t\t\t} catch (IllegalAccessException e) {\n-\t\t\t\t\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse\n-\t\t\t\t\t\t{\n-\t\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + TEST_ELEM_NAME + \" element.\");\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tif(BRIDGES_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tisBridges = true;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if(MODULE_ELEM_NAME.equals(localName))\n-\t\t\t\t\t{\n-\t\t\t\t\t\tisModule = true;\n-\t\t\t\t\t\tisBridges = false;\n-\t\t\t\t\t\tString modName = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\tTestConfig tc = createTestConfig(mi_perfTestConfig, atts);\n-\t\t\t\t\t\tModule mod = new Module(modName, tc);\n-\t\t\t\t\t\tmi_modules.add(mod);\n-\t\t\t\t\t}\n-\t\t\t\t\telse\n-\t\t\t\t\t{\n-\t\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + MODULE_ELEM_NAME + \" element.\");\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\tif(PERFORMANCE_ELEM_NAME.equals(localName))\n-\t\t\t\t{\n-\t\t\t\t\tisPerf = true;\n-\t\t\t\t\tm_name = atts.getValue(NAME_ATT_NAME);\n-\t\t\t\t\t\n-\t\t\t\t\tString value = atts.getValue(REPORT_SUBTASK_LEVELS_ATT_NAME);\n-\t\t\t\t\tif(value != null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_reportSubtaskLevels = Integer.parseInt(value);\n-\t\t\t\t\t}\n-\n-\t\t\t\t\tvalue = atts.getValue(REPORT_MEM_USAGE_ATT_NAME);\n-\t\t\t\t\tif(value != null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tm_reportMemoryUsage = Boolean.parseBoolean(value);\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\t\n-\t\t\t\t\tmi_perfTestConfig = createTestConfig(new TestConfig(), atts);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tthrow new SAXException(\"Invalid input: missing \" + PERFORMANCE_ELEM_NAME + \" root element.\");\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void endElement(String uri, String localName, String qName) throws SAXException {\n-\t\t\tif(PERFORMANCE_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisPerf = false;\n-\t\t\t}\n-\t\t\telse if(BRIDGES_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisBridges = false;\n-\t\t\t}\n-\t\t\telse if(MODULE_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisModule = false;\n-\t\t\t}\n-\t\t\telse if(TEST_ELEM_NAME.equals(localName))\n-\t\t\t{\n-\t\t\t\tisTest = false;\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\t@Override\n-\t\tpublic void characters(char[] ch, int start, int length) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void setDocumentLocator(Locator locator) {}\n-\t\t@Override\n-\t\tpublic void startDocument() throws SAXException {}\n-\t\t@Override\n-\t\tpublic void endDocument() throws SAXException {}\n-\t\t@Override\n-\t\tpublic void startPrefixMapping(String prefix, String uri) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void endPrefixMapping(String prefix) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void processingInstruction(String target, String data) throws SAXException {}\n-\t\t@Override\n-\t\tpublic void skippedEntity(String name) throws SAXException {}\n-\t}\n-\tclass Module \n-\t{\n-\t\tprivate final String mi_name;\n-\t\tprivate final TestConfig mi_config;\n-\t\tprivate final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n-\t\tprivate final ArrayList<PerfTestWrapper> mi_tests = new ArrayList<PerfTestWrapper>();\n-\t\tpublic Module(String name, TestConfig tc) \n-\t\t{\n-\t\t\tmi_name = PreCondition.assertArgumentNotNull(name);\n-\t\t\tmi_config = PreCondition.assertArgumentNotNull(tc);\n-\t\t}\n-\t\tpublic String getName()\n-\t\t{\n-\t\t\treturn mi_name;\n-\t\t}\n-\t\tpublic TestConfig getTestConfig()\n-\t\t{\n-\t\t\treturn mi_config;\n-\t\t}\n-\t\tpublic void addTestWrapper(PerfTestWrapper testWrapper)\n-\t\t{\n-\t\t\tmi_tests.add(PreCondition.assertArgumentNotNull(testWrapper));\n-\t\t}\n-\t\tpublic PerfTestWrapper getLastPerfTestWrapper()\n-\t\t{\n-\t\t\treturn mi_tests.get(mi_tests.size() - 1);\n-\t\t}\n-\t\tpublic Iterable<PerfTestWrapper> getTestWrappers()\n-\t\t{\n-\t\t\treturn mi_tests;\n-\t\t}\n-\t\tpublic HashMap<String, Object> getProperties()\n-\t\t{\n-\t\t\treturn mi_props;\n-\t\t}\n-\t}\n-\tclass PerfTestWrapper\n-\t{\n-\t\tprivate final PerfTest mi_test;\n-\t\tprivate final TestConfig mi_config;\n-\t\tprivate final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n-\t\tpublic PerfTestWrapper(PerfTest perfTest, TestConfig tc)\n-\t\t{\n-\t\t\tmi_test = PreCondition.assertArgumentNotNull(perfTest);\n-\t\t\tmi_config = PreCondition.assertArgumentNotNull(tc);\n-\t\t}\n-\t\tpublic PerfTest getTest()\n-\t\t{\n-\t\t\treturn mi_test;\n-\t\t}\n-\t\tpublic TestConfig getTestConfig()\n-\t\t{\n-\t\t\treturn mi_config;\n-\t\t}\n-\t\tpublic HashMap<String, Object> getProperties()\n-\t\t{\n-\t\t\treturn mi_props;\n-\t\t}\n-\t\tpublic PerfTestWrapper copy()\n-\t\t{\n-\t\t\tPerfTestWrapper retval = new PerfTestWrapper(mi_test, mi_config);\n-\t\t\treturn retval;\n-\t\t}\n-\t}\n-\tclass TestConfig\n-\t{\n-\t\tpublic int mi_cnt = 1;\n-\t\tpublic boolean mi_excludeOneRun = true;\n-\t}\n+public class Performance\n+{\n+    private static final String CSV_OUTPUT = \"-csv\";\n+    public static void main(String[] args)\n+    {\n+        if (args.length < 1)\n+        {\n+            System.out.println(\"No performance input file specified.\");\n+            System.exit(0);\n+        }\n+        // Let each test variation execute setup, so that we don't have a failure\n+        // on the last run & waste time.\n+        ArrayList<Performance> pList = new ArrayList<Performance>();\n+        boolean csvOut = false;\n+        try\n+        {\n+            for (String arg : args)\n+            {\n+                if (CSV_OUTPUT.equalsIgnoreCase(arg))\n+                {\n+                    csvOut = true;\n+                }\n+                else\n+                {\n+                    pList.add(new Performance(arg));\n+                }\n+            }\n+            for (Performance p : pList)\n+            {\n+                p.runTests(csvOut);\n+            }\n+        }\n+        catch (Exception e)\n+        {\n+            // TODO Auto-generated catch block\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static final Boolean DEBUG = false;\n+    private String m_name;\n+    private int m_reportSubtaskLevels = 2;\n+    private boolean m_reportMemoryUsage = false;\n+    private final String m_inputFilename;\n+    private final Iterable<Module> m_modules;\n+    private final ArrayList<String> m_bridges = new ArrayList<String>();\n+\n+    public Performance(String inputFile) throws SAXException, IOException\n+    {\n+        m_inputFilename = inputFile;\n+        m_modules = configure(inputFile, m_bridges);\n+    }\n+    /**\n+     * Performs the tests.\n+     * \n+     * @throws Exception because any uncaught exception should stop the test\n+     */\n+\n+    public final void runTests(boolean csvOut)\n+        throws Exception\n+    {\n+        TaskTimer ttTotal = new TaskTimer(m_name, m_reportMemoryUsage);\n+        ttTotal.addNote(\"property file = \" + m_inputFilename);\n+        ttTotal.addNote(\"timestamp = \" + new Timestamp(System.currentTimeMillis()).toString());\n+        for (String bridgeFactoryClassName : m_bridges)\n+        {\n+            for (Module module : m_modules)\n+            {\n+                //System.out.println(\"Module: \" + module.getName() + \": cnt = \" + module.getTestConfig().mi_cnt);\n+                //ttTotal.addNote(\"module: \" + module.getName());\n+                TaskTimer ttModule = ttTotal.newChild(module.getName());\n+                for (PerfTestWrapper testWrapper : module.getTestWrappers())\n+                {\n+                    PerfTest test = testWrapper.getTest();\n+                    //System.out.println(\"   test: \" + test.getName() + \": input = \" + testWrapper.mi_props.get(\"document\"));\n+                    try\n+                    {\n+                        // Provide the specific bridge factory here.\n+                        testWrapper.getProperties().put(BaseBridgePerfTest.BRIDGE_FACTORY_CLASS,\n+bridgeFactoryClassName);\n+                        test.initialSetup(testWrapper.getProperties());\n+                        TaskTimer ttBridge = ttModule.newChild(test.getBridgeName() + \".\" + test.getBridgeVersion());\n+                        TaskTimer ttTest = ttBridge.newChild(test.getTestName());\n+                        if (testWrapper.getTestConfig().mi_excludeOneRun)\n+                        {\n+                            test.iterativeSetup();\n+                            test.execute();\n+                            test.iterativeTeardown();\n+                        }\n+                        for (int icnt = 0; icnt < module.getTestConfig().mi_cnt; icnt++)\n+                        {\n+                            TaskTimer ttRun = ttTest.newChild(\"run[\" + icnt + \"]\");\n+                            test.iterativeSetup();\n+                            ttRun.startTimer();\n+                            test.execute();\n+                            ttRun.stopTimer();\n+                            Iterable<String> notes = test.iterativeTeardown();\n+                            if (notes != null)\n+                            {\n+                                for (String note : notes)\n+                                {\n+                                    ttRun.addNote(note);\n+                                }\n+                            }\n+                        }\n+                    }\n+                    catch (UnsupportedOperationException ex)\n+                    {\n+                        System.out.println(ex.getMessage());\n+                    }\n+                    finally\n+                    {\n+                        test.finalTeardown();\n+                    }\n+                }\n+            }\n+        }\n+        if (csvOut)\n+        {\n+            ttTotal.setPrintTimeUnits(false);\n+            System.out.println(ttTotal.toCsvMillis(m_reportSubtaskLevels));\n+        }\n+        else\n+        {\n+            System.out.println(\"----------------------------------------------------\");\n+            System.out.println(ttTotal.toPrettyStringMillis(\"\", m_reportSubtaskLevels));\n+            System.out.println(\"----------------------------------------------------\");\n+        }\n+    }\n+\n+    protected Iterable<Module> configure(String inputFile, List<String> bridges)\n+        throws SAXException, IOException\n+    {\n+        XMLReader parser = XMLReaderFactory.createXMLReader();\n+        ConfigParser cp = new ConfigParser(bridges);\n+        parser.setContentHandler(cp);\n+        parser.parse(new InputSource(inputFile));\n+        return cp.getModules();\n+    }\n+\n+    class ConfigParser implements ContentHandler\n+    {\n+        public static final String PERFORMANCE_ELEM_NAME = \"Performance\";\n+        public static final String COUNT_ATT_NAME = \"cnt\";\n+        public static final String EXCLUDE_ONE_RUN_ATT_NAME = \"excludeOneRun\";\n+        public static final String REPORT_SUBTASK_LEVELS_ATT_NAME = \"reportSubtaskLevels\";\n+        public static final String REPORT_MEM_USAGE_ATT_NAME = \"reportMemoryUsage\";\n+        public static final String MODULE_ELEM_NAME = \"Module\";\n+        public static final String BRIDGES_ELEM_NAME = \"Bridges\";\n+        public static final String BRIDGE_ELEM_NAME = \"Bridge\";\n+        public static final String BRIDGE_FACTORY_ATT_NAME = \"factory\";\n+        public static final String TEST_ELEM_NAME = \"Test\";\n+        public static final String PROP_ELEM_NAME = \"Prop\";\n+        public static final String CLASS_NAME_ATT_NAME = \"className\";\n+        public static final String NAME_ATT_NAME = \"name\";\n+        public static final String VALUE_ATT_NAME = \"value\";\n+\n+        final ArrayList<Module> mi_modules = new ArrayList<Module>();\n+        private boolean isPerf = false;\n+        private boolean isModule = false;\n+        private boolean isBridges = false;\n+        private boolean isTest = false;\n+        private TestConfig mi_perfTestConfig;\n+        private final List<String> mi_bridges;\n+\n+        public ConfigParser(List<String> bridges)\n+        {\n+            mi_bridges = bridges;\n+        }\n+\n+        public Iterable<Module> getModules()\n+        {\n+            return mi_modules;\n+        }\n+\n+        private TestConfig createTestConfig(TestConfig backer, Attributes atts)\n+        {\n+            TestConfig tc = new TestConfig();\n+            String value = atts.getValue(COUNT_ATT_NAME);\n+            tc.mi_cnt = value != null ? Integer.parseInt(value) : backer.mi_cnt;\n+            value = atts.getValue(EXCLUDE_ONE_RUN_ATT_NAME);\n+            tc.mi_excludeOneRun = value != null ? Boolean.parseBoolean(value) : backer.mi_excludeOneRun;\n+            return tc;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\") // for cast of object to List<Object>\n+        @Override\n+        public void startElement(String uri, String localName, String qName, Attributes atts)\n+            throws SAXException\n+        {\n+            if (isPerf)\n+            {\n+                if (isBridges)\n+                {\n+                    if (BRIDGE_ELEM_NAME.equals(localName))\n+                    {\n+                        String factoryName = atts.getValue(BRIDGE_FACTORY_ATT_NAME);\n+                        if (factoryName == null)\n+                        {\n+                            throw new SAXException(\"Invalid input: missing \" + BRIDGE_FACTORY_ATT_NAME + \" attribute.\");\n+                        }\n+                        mi_bridges.add(factoryName);\n+                    }\n+                    else\n+                    {\n+                        throw new SAXException(\"Invalid input: missing \" + BRIDGE_ELEM_NAME + \" element.\");\n+                    }\n+                }\n+                else if (isModule)\n+                {\n+                    if (isTest)\n+                    {\n+                        if (PROP_ELEM_NAME.equals(localName))\n+                        {\n+                            String propName = atts.getValue(NAME_ATT_NAME);\n+                            String propValue = atts.getValue(VALUE_ATT_NAME);\n+                            if (propName != null && propValue != null)\n+                            {\n+                                Module module = mi_modules.get(mi_modules.size() - 1);\n+                                HashMap<String, Object> props = module.getLastPerfTestWrapper().getProperties();\n+                                if (props.get(propName) instanceof String)\n+                                {\n+                                    ArrayList<Object> list = new ArrayList<Object>();\n+                                    list.add(props.get(propName));\n+                                    list.add(propValue);\n+                                    props.put(propName, list);\n+                                }\n+                                else if (props.get(propName) instanceof List)\n+                                {\n+                                    ((List<Object>)props.get(propName)).add(propValue);\n+                                }\n+                                else\n+                                {\n+                                    props.put(propName, propValue);\n+                                }\n+                            }\n+                            else\n+                            {\n+                                throw new SAXException(\"Prop specification requires both name and value.\");\n+                            }\n+                        }\n+                        else\n+                        {\n+                            throw new SAXException(\"Invalid element: \" + localName);\n+                        }\n+                    }\n+                    else if (PROP_ELEM_NAME.equals(localName))\n+                    {\n+                        String propName = atts.getValue(NAME_ATT_NAME);\n+                        String propValue = atts.getValue(VALUE_ATT_NAME);\n+                        if (propName != null && propValue != null)\n+                        {\n+                            HashMap<String, Object> props = mi_modules.get(mi_modules.size() - 1).getProperties();\n+                            if (props.get(propName) instanceof String)\n+                            {\n+                                ArrayList<Object> list = new ArrayList<Object>();\n+                                list.add(props.get(propName));\n+                                list.add(propValue);\n+                                props.put(propName, list);\n+                            }\n+                            else if (props.get(propName) instanceof List)\n+                            {\n+                                ((List<Object>)props.get(propName)).add(propValue);\n+                            }\n+                            else\n+                            {\n+                                props.put(propName, propValue);\n+                            }\n+                        }\n+                        else\n+                        {\n+                            throw new SAXException(\"Prop specification requires both name and value.\");\n+                        }\n+                    }\n+                    else\n+                    {\n+                        if (TEST_ELEM_NAME.equals(localName))\n+                        {\n+                            isTest = true;\n+                            Module mod = mi_modules.get(mi_modules.size() - 1);\n+                            String testClassName = atts.getValue(CLASS_NAME_ATT_NAME);\n+                            TestConfig tc = createTestConfig(mod.getTestConfig(), atts);\n+                            try\n+                            {\n+                                Class<?> clazz = Performance.class.getClassLoader().loadClass(testClassName);\n+                                PerfTest perfTest = (PerfTest)clazz.newInstance();\n+                                PerfTestWrapper wrapper = new PerfTestWrapper(perfTest, tc);\n+                                \n+                                // Add the properties from the module to the PerfTestWrapper...\n+                                HashMap<String, Object> modProps = mod.getProperties();\n+                                HashMap<String, Object> props = wrapper.getProperties();\n+                                for (String key : modProps.keySet())\n+                                {\n+                                    props.put(key, modProps.get(key));\n+                                }\n+                                mod.addTestWrapper(wrapper);\n+                            }\n+                            catch (ClassNotFoundException e)\n+                            {\n+                                throw new RuntimeException(e);\n+                            }\n+                            catch (InstantiationException e)\n+                            {\n+                                throw new RuntimeException(e);\n+                            }\n+                            catch (IllegalAccessException e)\n+                            {\n+                                throw new RuntimeException(e);\n+                            }\n+                        }\n+                        else\n+                        {\n+                            throw new SAXException(\"Invalid input: missing \" + TEST_ELEM_NAME + \" element.\");\n+                        }\n+                    }\n+                }\n+                else\n+                {\n+                    if (BRIDGES_ELEM_NAME.equals(localName))\n+                    {\n+                        isBridges = true;\n+                    }\n+                    else if (MODULE_ELEM_NAME.equals(localName))\n+                    {\n+                        isModule = true;\n+                        isBridges = false;\n+                        String modName = atts.getValue(NAME_ATT_NAME);\n+                        TestConfig tc = createTestConfig(mi_perfTestConfig, atts);\n+                        Module mod = new Module(modName, tc);\n+                        mi_modules.add(mod);\n+                    }\n+                    else\n+                    {\n+                        throw new SAXException(\"Invalid input: missing \" + MODULE_ELEM_NAME + \" element.\");\n+                    }\n+                }\n+            }\n+            else\n+            {\n+                if (PERFORMANCE_ELEM_NAME.equals(localName))\n+                {\n+                    isPerf = true;\n+                    m_name = atts.getValue(NAME_ATT_NAME);\n+                    String value = atts.getValue(REPORT_SUBTASK_LEVELS_ATT_NAME);\n+                    if (value != null)\n+                    {\n+                        m_reportSubtaskLevels = Integer.parseInt(value);\n+                    }\n+                    value = atts.getValue(REPORT_MEM_USAGE_ATT_NAME);\n+                    if (value != null)\n+                    {\n+                        m_reportMemoryUsage = Boolean.parseBoolean(value);\n+                    }\n+                    mi_perfTestConfig = createTestConfig(new TestConfig(), atts);\n+                }\n+                else\n+                {\n+                    throw new SAXException(\"Invalid input: missing \" + PERFORMANCE_ELEM_NAME + \" root element.\");\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void endElement(String uri, String localName, String qName)\n+            throws SAXException\n+        {\n+            if (PERFORMANCE_ELEM_NAME.equals(localName))\n+            {\n+                isPerf = false;\n+            }\n+            else if (BRIDGES_ELEM_NAME.equals(localName))\n+            {\n+                isBridges = false;\n+            }\n+            else if (MODULE_ELEM_NAME.equals(localName))\n+            {\n+                isModule = false;\n+            }\n+            else if (TEST_ELEM_NAME.equals(localName))\n+            {\n+                isTest = false;\n+            }\n+        }\n+\n+        @Override\n+        public void characters(char[] ch, int start, int length)\n+            throws SAXException\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void setDocumentLocator(Locator locator)\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void startDocument()\n+            throws SAXException\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void endDocument()\n+            throws SAXException\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void startPrefixMapping(String prefix, String uri)\n+            throws SAXException\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void endPrefixMapping(String prefix)\n+            throws SAXException\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void ignorableWhitespace(char[] ch, int start, int length)\n+            throws SAXException\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void processingInstruction(String target, String data)\n+            throws SAXException\n+        {\n+\n+\n+        }\n+\n+        @Override\n+        public void skippedEntity(String name)\n+            throws SAXException\n+        {\n+\n+\n+        }\n+    }\n+\n+    class Module\n+    {\n+        private final String mi_name;\n+        private final TestConfig mi_config;\n+        private final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n+        private final ArrayList<PerfTestWrapper> mi_tests = new ArrayList<PerfTestWrapper>();\n+\n+        public Module(String name, TestConfig tc)\n+        {\n+            mi_name = PreCondition.assertArgumentNotNull(name);\n+            mi_config = PreCondition.assertArgumentNotNull(tc);\n+        }\n+\n+        public String getName()\n+        {\n+            return mi_name;\n+        }\n+\n+        public TestConfig getTestConfig()\n+        {\n+            return mi_config;\n+        }\n+\n+        public void addTestWrapper(PerfTestWrapper testWrapper)\n+        {\n+            mi_tests.add(PreCondition.assertArgumentNotNull(testWrapper));\n+        }\n+\n+        public PerfTestWrapper getLastPerfTestWrapper()\n+        {\n+            return mi_tests.get(mi_tests.size() - 1);\n+        }\n+\n+        public Iterable<PerfTestWrapper> getTestWrappers()\n+        {\n+            return mi_tests;\n+        }\n+\n+        public HashMap<String, Object> getProperties()\n+        {\n+            return mi_props;\n+        }\n+    }\n+\n+    class PerfTestWrapper\n+    {\n+        private final PerfTest mi_test;\n+        private final TestConfig mi_config;\n+        private final HashMap<String, Object> mi_props = new HashMap<String, Object>();\n+\n+        public PerfTestWrapper(PerfTest perfTest, TestConfig tc)\n+        {\n+            mi_test = PreCondition.assertArgumentNotNull(perfTest);\n+            mi_config = PreCondition.assertArgumentNotNull(tc);\n+        }\n+\n+        public PerfTest getTest()\n+        {\n+            return mi_test;\n+        }\n+\n+        public TestConfig getTestConfig()\n+        {\n+            return mi_config;\n+        }\n+\n+        public HashMap<String, Object> getProperties()\n+        {\n+            return mi_props;\n+        }\n+\n+        public PerfTestWrapper copy()\n+        {\n+            PerfTestWrapper retval = new PerfTestWrapper(mi_test, mi_config);\n+            return retval;\n+        }\n+    }\n+\n+    class TestConfig\n+    {\n+        public int mi_cnt = 1;\n+        public boolean mi_excludeOneRun = true;\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 540
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/176/Performance.java\nindex a53d8266907..b371e111def 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/176/Performance.java\n@@ -32,7 +32,7 @@ import org.xml.sax.XMLReader;\n import org.xml.sax.helpers.XMLReaderFactory;\n \n public class Performance {\n-\tprivate static final String CSV_OUTPUT = \"-csv\";\n+private static final String CSV_OUTPUT = \"-csv\";\n \t\n \tpublic static void main(String[] args)\n \t{\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/176/Performance.java\nindex a53d8266907..31f18983537 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/176/Performance.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/176/Performance.java\n@@ -32,7 +32,7 @@ import org.xml.sax.XMLReader;\n import org.xml.sax.helpers.XMLReaderFactory;\n \n public class Performance {\n-\tprivate static final String CSV_OUTPUT = \"-csv\";\n+    private static final String CSV_OUTPUT = \"-csv\";\n \t\n \tpublic static void main(String[] args)\n \t{\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}