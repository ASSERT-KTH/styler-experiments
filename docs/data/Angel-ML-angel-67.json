{
    "project_name": "Angel-ML-angel",
    "violation_id": "67",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/67/ServerLongDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/67/ServerLongDoubleRow.java\nindex 784e43d4793..b8a5260b7a0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/67/ServerLongDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/67/ServerLongDoubleRow.java\n@@ -39,831 +39,845 @@ import java.io.IOException;\n  */\n public class ServerLongDoubleRow extends ServerDoubleRow {\n \n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   * @param innerRow the inner row\n-   */\n-  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      DoubleVector innerRow) {\n-    super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n-  }\n-\n-  /**\n-   * Create a new ServerIntDoubleRow\n-   *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n-  }\n-\n-  /**\n-   * Create a new ServerLongDoubleRow\n-   */\n-  public ServerLongDoubleRow(RowType rowType) {\n-    this(0, rowType, 0, 0, 0);\n-  }\n-\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-  //Methods with out lock operation, you must call startWrite/startRead before using these methods\n-  // and call endWrite/endRead after\n-  //////////////////////////////////////////////////////////////////////////////////////////////////\n-\n-  /**\n-   * Get a element value with out lock operation\n-   *\n-   * @param index element index\n-   * @return element value\n-   */\n-  public double get(long index) {\n-    if (useIntKey) {\n-      return ((IntDoubleVector) row).get((int) (index - startCol));\n-    } else {\n-      return ((LongDoubleVector) row).get(index - startCol);\n-    }\n-  }\n-\n-  /**\n-   * Set a element value without lock operation\n-   *\n-   * @param index element index\n-   * @param value element new value\n-   */\n-  public void set(long index, double value) {\n-    if (useIntKey) {\n-      ((IntDoubleVector) row).set((int) (index - startCol), value);\n-    } else {\n-      ((LongDoubleVector) row).set(index - startCol, value);\n-    }\n-  }\n-\n-  /**\n-   * Get a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @return elements values\n-   */\n-  public double[] get(long[] indices) {\n-    double[] values = new double[indices.length];\n-    if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((IntDoubleVector) row).get((int) (indices[i] - startCol));\n-      }\n-    } else {\n-      for (int i = 0; i < indices.length; i++) {\n-        values[i] = ((LongDoubleVector) row).get(indices[i] - startCol);\n-      }\n-    }\n-\n-    return values;\n-  }\n-\n-  /**\n-   * Set a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements values\n-   */\n-  public void set(long[] indices, double[] values) {\n-    assert indices.length == values.length;\n-    if (useIntKey) {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((IntDoubleVector) row).set((int) (indices[i] - startCol), values[i]);\n-      }\n-    } else {\n-      for (int i = 0; i < indices.length; i++) {\n-        ((LongDoubleVector) row).set(indices[i] - startCol, values[i]);\n-      }\n-    }\n-  }\n-\n-  /**\n-   * Add a element value without lock\n-   *\n-   * @param index element index\n-   * @param value element plus value\n-   */\n-  public void addTo(long index, double value) {\n-    set(index, get(index) + value);\n-  }\n-\n-  /**\n-   * Add a batch elements values without lock\n-   *\n-   * @param indices elements indices\n-   * @param values elements plus values\n-   */\n-  public void addTo(long[] indices, double[] values) {\n-    assert indices.length == values.length;\n-    for (int i = 0; i < indices.length; i++) {\n-      set(indices[i], get(indices[i]) + values[i]);\n-    }\n-  }\n-\n-  /**\n-   * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n-   *\n-   * @return all element values\n-   */\n-  private double[] getValues() {\n-    if (useIntKey) {\n-      return ((IntDoubleVector) row).getStorage().getValues();\n-    } else {\n-      return ((LongDoubleVector) row).getStorage().getValues();\n-    }\n-  }\n-\n-  @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n-    startWrite();\n-    try {\n-      switch (updateType) {\n-        case T_DOUBLE_SPARSE_LONGKEY:\n-        case T_DOUBLE_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongDoubleSparse(buf, op);\n-          break;\n-\n-        case T_FLOAT_SPARSE_LONGKEY:\n-        case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongFloatSparse(buf, op);\n-          break;\n-\n-        case T_LONG_SPARSE_LONGKEY:\n-        case T_LONG_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongLongSparse(buf, op);\n-          break;\n-\n-        case T_INT_SPARSE_LONGKEY:\n-        case T_INT_SPARSE_LONGKEY_COMPONENT:\n-          updateUseLongIntSparse(buf, op);\n-          break;\n-\n-        case T_DOUBLE_SPARSE:\n-        case T_DOUBLE_SPARSE_COMPONENT:\n-          updateUseIntDoubleSparse(buf, op);\n-          break;\n-\n-        case T_FLOAT_SPARSE:\n-        case T_FLOAT_SPARSE_COMPONENT:\n-          updateUseIntFloatSparse(buf, op);\n-          break;\n-\n-        case T_LONG_SPARSE:\n-        case T_LONG_SPARSE_COMPONENT:\n-          updateUseIntLongSparse(buf, op);\n-          break;\n-\n-        case T_INT_SPARSE:\n-        case T_INT_SPARSE_COMPONENT:\n-          updateUseIntIntSparse(buf, op);\n-          break;\n-\n-        case T_DOUBLE_DENSE:\n-        case T_DOUBLE_DENSE_COMPONENT:\n-          updateUseIntDoubleDense(buf, op);\n-          break;\n-\n-        case T_FLOAT_DENSE:\n-        case T_FLOAT_DENSE_COMPONENT:\n-          updateUseIntFloatDense(buf, op);\n-          break;\n-\n-        case T_LONG_DENSE:\n-        case T_LONG_DENSE_COMPONENT:\n-          updateUseIntLongDense(buf, op);\n-          break;\n-\n-        case T_INT_DENSE:\n-        case T_INT_DENSE_COMPONENT:\n-          updateUseIntIntDense(buf, op);\n-          break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n-        }\n-      }\n-\n-      updateRowVersion();\n-    } finally {\n-      endWrite();\n-    }\n-  }\n-\n-  private void updateUseLongDoubleSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readDouble());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set((int) buf.readLong(), buf.readDouble());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readLong(), buf.readDouble());\n-        }\n-      }\n-    }\n-  }\n-\n-  private void updateUseLongFloatSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set((int) buf.readLong(), buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readLong(), buf.readFloat());\n-        }\n-      }\n-    }\n-  }\n-\n-  private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set((int) buf.readLong(), buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readLong(), buf.readLong());\n-        }\n-      }\n-    }\n-  }\n-\n-  private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = (int) buf.readLong();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set((int) buf.readLong(), buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readLong(), buf.readInt());\n-        }\n-      }\n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     * @param innerRow   the inner row\n+     */\n+    public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol,\n+                               int estElemNum,\n+                               DoubleVector innerRow) {\n+        super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     }\n-  }\n \n+    /**\n+     * Create a new ServerIntDoubleRow\n+     *\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol,\n+                               int estElemNum) {\n+        this(rowId, rowType, startCol, endCol, estElemNum, null);\n+    }\n \n-  private void updateUseIntDoubleSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readDouble());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(buf.readInt(), buf.readDouble());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readInt(), buf.readDouble());\n-        }\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(buf.readInt(), buf.readFloat());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readInt(), buf.readFloat());\n-        }\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(buf.readInt(), buf.readLong());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readInt(), buf.readLong());\n-        }\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          int index = buf.readInt();\n-          ((IntDoubleVector) row).set(index, ((IntDoubleVector) row).get(index) + buf.readInt());\n-        }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n-        }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(buf.readInt(), buf.readInt());\n+    /**\n+     * Create a new ServerLongDoubleRow\n+     */\n+    public ServerLongDoubleRow(RowType rowType) {\n+        this(0, rowType, 0, 0, 0);\n+    }\n+\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+    //Methods with out lock operation, you must call startWrite/startRead before using these methods\n+    // and call endWrite/endRead after\n+    //////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+    /**\n+     * Get a element value with out lock operation\n+     *\n+     * @param index element index\n+     * @return element value\n+     */\n+    public double get(long index) {\n+        if (useIntKey) {\n+            return ((IntDoubleVector) row).get((int) (index - startCol));\n+        } else {\n+            return ((LongDoubleVector) row).get(index - startCol);\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(buf.readInt(), buf.readInt());\n+    }\n+\n+    /**\n+     * Set a element value without lock operation\n+     *\n+     * @param index element index\n+     * @param value element new value\n+     */\n+    public void set(long index, double value) {\n+        if (useIntKey) {\n+            ((IntDoubleVector) row).set((int) (index - startCol), value);\n+        } else {\n+            ((LongDoubleVector) row).set(index - startCol, value);\n         }\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntDoubleDense(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, ((IntDoubleVector) row).get(i) + buf.readDouble());\n+    }\n+\n+    /**\n+     * Get a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @return elements values\n+     */\n+    public double[] get(long[] indices) {\n+        double[] values = new double[indices.length];\n+        if (useIntKey) {\n+            for (int i = 0; i < indices.length; i++) {\n+                values[i] = ((IntDoubleVector) row).get((int) (indices[i] - startCol));\n+            }\n+        } else {\n+            for (int i = 0; i < indices.length; i++) {\n+                values[i] = ((LongDoubleVector) row).get(indices[i] - startCol);\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readDouble());\n+\n+        return values;\n+    }\n+\n+    /**\n+     * Set a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements values\n+     */\n+    public void set(long[] indices, double[] values) {\n+        assert indices.length == values.length;\n+        if (useIntKey) {\n+            for (int i = 0; i < indices.length; i++) {\n+                ((IntDoubleVector) row).set((int) (indices[i] - startCol), values[i]);\n+            }\n+        } else {\n+            for (int i = 0; i < indices.length; i++) {\n+                ((LongDoubleVector) row).set(indices[i] - startCol, values[i]);\n+            }\n         }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, buf.readDouble());\n+    }\n+\n+    /**\n+     * Add a element value without lock\n+     *\n+     * @param index element index\n+     * @param value element plus value\n+     */\n+    public void addTo(long index, double value) {\n+        set(index, get(index) + value);\n+    }\n+\n+    /**\n+     * Add a batch elements values without lock\n+     *\n+     * @param indices elements indices\n+     * @param values  elements plus values\n+     */\n+    public void addTo(long[] indices, double[] values) {\n+        assert indices.length == values.length;\n+        for (int i = 0; i < indices.length; i++) {\n+            set(indices[i], get(indices[i]) + values[i]);\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(i, buf.readDouble());\n+    }\n+\n+    /**\n+     * Get all element values without lock, you must check the storage is dense first use \"isDense\"\n+     *\n+     * @return all element values\n+     */\n+    private double[] getValues() {\n+        if (useIntKey) {\n+            return ((IntDoubleVector) row).getStorage().getValues();\n+        } else {\n+            return ((LongDoubleVector) row).getStorage().getValues();\n         }\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, ((IntDoubleVector) row).get(i) + buf.readFloat());\n+    }\n+\n+    @Override\n+    public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+        startWrite();\n+        try {\n+            switch (updateType) {\n+                case T_DOUBLE_SPARSE_LONGKEY:\n+                case T_DOUBLE_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseLongDoubleSparse(buf, op);\n+                    break;\n+\n+                case T_FLOAT_SPARSE_LONGKEY:\n+                case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseLongFloatSparse(buf, op);\n+                    break;\n+\n+                case T_LONG_SPARSE_LONGKEY:\n+                case T_LONG_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseLongLongSparse(buf, op);\n+                    break;\n+\n+                case T_INT_SPARSE_LONGKEY:\n+                case T_INT_SPARSE_LONGKEY_COMPONENT:\n+                    updateUseLongIntSparse(buf, op);\n+                    break;\n+\n+                case T_DOUBLE_SPARSE:\n+                case T_DOUBLE_SPARSE_COMPONENT:\n+                    updateUseIntDoubleSparse(buf, op);\n+                    break;\n+\n+                case T_FLOAT_SPARSE:\n+                case T_FLOAT_SPARSE_COMPONENT:\n+                    updateUseIntFloatSparse(buf, op);\n+                    break;\n+\n+                case T_LONG_SPARSE:\n+                case T_LONG_SPARSE_COMPONENT:\n+                    updateUseIntLongSparse(buf, op);\n+                    break;\n+\n+                case T_INT_SPARSE:\n+                case T_INT_SPARSE_COMPONENT:\n+                    updateUseIntIntSparse(buf, op);\n+                    break;\n+\n+                case T_DOUBLE_DENSE:\n+                case T_DOUBLE_DENSE_COMPONENT:\n+                    updateUseIntDoubleDense(buf, op);\n+                    break;\n+\n+                case T_FLOAT_DENSE:\n+                case T_FLOAT_DENSE_COMPONENT:\n+                    updateUseIntFloatDense(buf, op);\n+                    break;\n+\n+                case T_LONG_DENSE:\n+                case T_LONG_DENSE_COMPONENT:\n+                    updateUseIntLongDense(buf, op);\n+                    break;\n+\n+                case T_INT_DENSE:\n+                case T_INT_DENSE_COMPONENT:\n+                    updateUseIntIntDense(buf, op);\n+                    break;\n+\n+                default: {\n+                    throw new UnsupportedOperationException(\n+                            \"Unsupport operation: update \" + updateType + \" to \" +\n+                                    this.getClass().getName());\n+                }\n+            }\n+\n+            updateRowVersion();\n+        } finally {\n+            endWrite();\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readFloat());\n+    }\n+\n+    private void updateUseLongDoubleSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readDouble());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set((int) buf.readLong(), buf.readDouble());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readLong(), buf.readDouble());\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, buf.readFloat());\n+    }\n+\n+    private void updateUseLongFloatSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set((int) buf.readLong(), buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readLong(), buf.readFloat());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(i, buf.readFloat());\n+    }\n+\n+    private void updateUseLongLongSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set((int) buf.readLong(), buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readLong(), buf.readLong());\n+                }\n+            }\n         }\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, ((IntDoubleVector) row).get(i) + buf.readLong());\n+    }\n+\n+    private void updateUseLongIntSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = (int) buf.readLong();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readLong();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set((int) buf.readLong(), buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readLong(), buf.readInt());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readLong());\n+    }\n+\n+\n+    private void updateUseIntDoubleSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readDouble());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(buf.readInt(), buf.readDouble());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readInt(), buf.readDouble());\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, buf.readLong());\n+    }\n+\n+    private void updateUseIntFloatSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(buf.readInt(), buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readInt(), buf.readFloat());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(i, buf.readLong());\n+    }\n+\n+    private void updateUseIntLongSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(buf.readInt(), buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readInt(), buf.readLong());\n+                }\n+            }\n         }\n-      }\n-    }\n-  }\n-\n-  private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n-    // TODO:default value\n-    //buf.readDouble();\n-    int size = buf.readInt();\n-    if (op == UpdateOp.PLUS) {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, ((IntDoubleVector) row).get(i) + buf.readInt());\n+    }\n+\n+    private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    int index = buf.readInt();\n+                    ((IntDoubleVector) row).set(index,\n+                            ((IntDoubleVector) row).get(index) + buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    long index = buf.readInt();\n+                    ((LongDoubleVector) row)\n+                            .set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(buf.readInt(), buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(buf.readInt(), buf.readInt());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readInt());\n+    }\n+\n+    private void updateUseIntDoubleDense(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i,\n+                            ((IntDoubleVector) row).get(i) + buf.readDouble());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row)\n+                            .set(i, ((LongDoubleVector) row).get(i) + buf.readDouble());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i, buf.readDouble());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(i, buf.readDouble());\n+                }\n+            }\n         }\n-      }\n-    } else {\n-      if (useIntKey) {\n-        for (int i = 0; i < size; i++) {\n-          ((IntDoubleVector) row).set(i, buf.readInt());\n+    }\n+\n+    private void updateUseIntFloatDense(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i,\n+                            ((IntDoubleVector) row).get(i) + buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row)\n+                            .set(i, ((LongDoubleVector) row).get(i) + buf.readFloat());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i, buf.readFloat());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(i, buf.readFloat());\n+                }\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row).set(i, buf.readInt());\n+    }\n+\n+    private void updateUseIntLongDense(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i, ((IntDoubleVector) row).get(i) + buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row)\n+                            .set(i, ((LongDoubleVector) row).get(i) + buf.readLong());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i, buf.readLong());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(i, buf.readLong());\n+                }\n+            }\n         }\n-      }\n-    }\n-  }\n-\n-\n-  @Override\n-  public int size() {\n-    if (useIntKey) {\n-      return ((IntDoubleVector) row).size();\n-    } else {\n-      return (int) ((LongDoubleVector) row).size();\n-    }\n-  }\n-\n-  /**\n-   * Merge this row split to a row\n-   *\n-   * @param mergedRow the dest row\n-   */\n-  public void mergeTo(LongDoubleVector mergedRow) {\n-    startRead();\n-    try {\n-      if (isDense()) {\n-        double[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          mergedRow.set(i + startCol, values[i]);\n+    }\n+\n+    private void updateUseIntIntDense(ByteBuf buf, UpdateOp op) {\n+        // TODO:default value\n+        //buf.readDouble();\n+        int size = buf.readInt();\n+        if (op == UpdateOp.PLUS) {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i, ((IntDoubleVector) row).get(i) + buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row)\n+                            .set(i, ((LongDoubleVector) row).get(i) + buf.readInt());\n+                }\n+            }\n+        } else {\n+            if (useIntKey) {\n+                for (int i = 0; i < size; i++) {\n+                    ((IntDoubleVector) row).set(i, buf.readInt());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    ((LongDoubleVector) row).set(i, buf.readInt());\n+                }\n+            }\n         }\n-      } else {\n+    }\n+\n+\n+    @Override\n+    public int size() {\n         if (useIntKey) {\n-          ObjectIterator<Int2DoubleMap.Entry> iter =\n-              ((IntDoubleVector) row).getStorage().entryIterator();\n-          Int2DoubleMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getIntKey() + startCol, entry.getDoubleValue());\n-          }\n+            return ((IntDoubleVector) row).size();\n         } else {\n-          ObjectIterator<Long2DoubleMap.Entry> iter =\n-              ((LongDoubleVector) row).getStorage().entryIterator();\n-          Long2DoubleMap.Entry entry;\n-          while (iter.hasNext()) {\n-            entry = iter.next();\n-            mergedRow.set(entry.getLongKey() + startCol, entry.getDoubleValue());\n-          }\n+            return (int) ((LongDoubleVector) row).size();\n         }\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  protected void serializeRow(ByteBuf buf) {\n-    if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        double[] values = getValues();\n-        for (int i = 0; i < values.length; i++) {\n-          buf.writeDouble(values[i]);\n-        }\n-      } else {\n-        ObjectIterator<Int2DoubleMap.Entry> iter =\n-            ((IntDoubleVector) row).getStorage().entryIterator();\n-        Int2DoubleMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeDouble(entry.getDoubleValue());\n+    }\n+\n+    /**\n+     * Merge this row split to a row\n+     *\n+     * @param mergedRow the dest row\n+     */\n+    public void mergeTo(LongDoubleVector mergedRow) {\n+        startRead();\n+        try {\n+            if (isDense()) {\n+                double[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    mergedRow.set(i + startCol, values[i]);\n+                }\n+            } else {\n+                if (useIntKey) {\n+                    ObjectIterator<Int2DoubleMap.Entry> iter =\n+                            ((IntDoubleVector) row).getStorage().entryIterator();\n+                    Int2DoubleMap.Entry entry;\n+                    while (iter.hasNext()) {\n+                        entry = iter.next();\n+                        mergedRow.set(entry.getIntKey() + startCol, entry.getDoubleValue());\n+                    }\n+                } else {\n+                    ObjectIterator<Long2DoubleMap.Entry> iter =\n+                            ((LongDoubleVector) row).getStorage().entryIterator();\n+                    Long2DoubleMap.Entry entry;\n+                    while (iter.hasNext()) {\n+                        entry = iter.next();\n+                        mergedRow.set(entry.getLongKey() + startCol, entry.getDoubleValue());\n+                    }\n+                }\n+            }\n+        } finally {\n+            endRead();\n         }\n-      }\n-    } else {\n-      ObjectIterator<Long2DoubleMap.Entry> iter =\n-          ((LongDoubleVector) row).getStorage().entryIterator();\n-      Long2DoubleMap.Entry entry;\n-      while (iter.hasNext()) {\n-        entry = iter.next();\n-        buf.writeLong(entry.getLongKey());\n-        buf.writeDouble(entry.getDoubleValue());\n-      }\n-    }\n-  }\n-\n-  @Override\n-  protected void deserializeRow(ByteBuf buf) {\n-    if (useIntKeySerialize()) {\n-      IntDoubleVector intDoubleRow = (IntDoubleVector) row;\n-      if (useDenseSerialize()) {\n-        for (int i = 0; i < size; i++) {\n-          intDoubleRow.set(i, buf.readDouble());\n+    }\n+\n+    @Override\n+    protected void serializeRow(ByteBuf buf) {\n+        if (useIntKeySerialize()) {\n+            if (useDenseSerialize()) {\n+                double[] values = getValues();\n+                for (int i = 0; i < values.length; i++) {\n+                    buf.writeDouble(values[i]);\n+                }\n+            } else {\n+                ObjectIterator<Int2DoubleMap.Entry> iter =\n+                        ((IntDoubleVector) row).getStorage().entryIterator();\n+                Int2DoubleMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeInt(entry.getIntKey());\n+                    buf.writeDouble(entry.getDoubleValue());\n+                }\n+            }\n+        } else {\n+            ObjectIterator<Long2DoubleMap.Entry> iter =\n+                    ((LongDoubleVector) row).getStorage().entryIterator();\n+            Long2DoubleMap.Entry entry;\n+            while (iter.hasNext()) {\n+                entry = iter.next();\n+                buf.writeLong(entry.getLongKey());\n+                buf.writeDouble(entry.getDoubleValue());\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < size; i++) {\n-          intDoubleRow.set(buf.readInt(), buf.readDouble());\n+    }\n+\n+    @Override\n+    protected void deserializeRow(ByteBuf buf) {\n+        if (useIntKeySerialize()) {\n+            IntDoubleVector intDoubleRow = (IntDoubleVector) row;\n+            if (useDenseSerialize()) {\n+                for (int i = 0; i < size; i++) {\n+                    intDoubleRow.set(i, buf.readDouble());\n+                }\n+            } else {\n+                for (int i = 0; i < size; i++) {\n+                    intDoubleRow.set(buf.readInt(), buf.readDouble());\n+                }\n+            }\n+        } else {\n+            LongDoubleVector longDoubleRow = (LongDoubleVector) row;\n+            for (int i = 0; i < size; i++) {\n+                longDoubleRow.set(buf.readLong(), buf.readDouble());\n+            }\n         }\n-      }\n-    } else {\n-      LongDoubleVector longDoubleRow = (LongDoubleVector) row;\n-      for (int i = 0; i < size; i++) {\n-        longDoubleRow.set(buf.readLong(), buf.readDouble());\n-      }\n-    }\n-  }\n-\n-  @Override\n-  protected int getRowSpace() {\n-    if (useIntKeySerialize()) {\n-      if (useDenseSerialize()) {\n-        return size * 8;\n-      } else {\n-        return size * 12;\n-      }\n-    } else {\n-      return size * 16;\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow clone() {\n-    startRead();\n-    try {\n-      if (useIntKey) {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntDoubleVector) row).clone());\n-      } else {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongDoubleVector) row).clone());\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n-    try {\n-      if (useIntKey) {\n-        if (row.isSparse()) {\n-          return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedDoubleVector((int) (endCol - startCol),\n-                  ((IntDoubleVector) row).getStorage().getIndices(),\n-                  ((IntDoubleVector) row).getStorage().getValues()));\n+    }\n+\n+    @Override\n+    protected int getRowSpace() {\n+        if (useIntKeySerialize()) {\n+            if (useDenseSerialize()) {\n+                return size * 8;\n+            } else {\n+                return size * 12;\n+            }\n         } else {\n-          return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              (IntDoubleVector) row);\n+            return size * 16;\n         }\n-      } else {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyDoubleVector((int) (endCol - startCol),\n-                ((LongDoubleVector) row).getStorage().getIndices(),\n-                ((LongDoubleVector) row).getStorage().getValues()));\n-      }\n-    } finally {\n-      endRead();\n-    }\n-  }\n-\n-  /**\n-   * Check the vector contains the index or not\n-   *\n-   * @param index element index\n-   * @return true means exist\n-   */\n-  public boolean exist(long index) {\n-    if (useIntKey) {\n-      if (row.isSparse()) {\n-        return ((IntDoubleVector) row).getStorage().hasKey((int) (index - startCol));\n-      } else {\n-        return ((IntDoubleVector) row).getStorage().get((int) (index - startCol)) != 0.0;\n-      }\n-    } else {\n-      if (row.isSparse()) {\n-        return ((LongDoubleVector) row).getStorage().hasKey(index - startCol);\n-      } else {\n-        return ((LongDoubleVector) row).getStorage().get(index - startCol) != 0.0;\n-      }\n-    }\n-  }\n-\n-  public double initAndGet(long index, InitFunc func) {\n-    if (exist(index)) {\n-      return get(index);\n-    } else {\n-      double value = func.action();\n-      set(index, value);\n-      return value;\n-    }\n-  }\n-\n-  @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n-    if (func != null) {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeDouble(initAndGet(in.readInt(), func));\n+    }\n+\n+    @Override\n+    public ServerRow clone() {\n+        startRead();\n+        try {\n+            if (useIntKey) {\n+                return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        ((IntDoubleVector) row).clone());\n+            } else {\n+                return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        ((LongDoubleVector) row).clone());\n+            }\n+        } finally {\n+            endRead();\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeDouble(initAndGet(in.readLong(), func));\n+    }\n+\n+    @Override\n+    public ServerRow\n+    adaptiveClone() {\n+        startRead();\n+        try {\n+            if (useIntKey) {\n+                if (row.isSparse()) {\n+                    return new ServerLongDoubleRow(rowId, rowType, startCol, endCol,\n+                            (int) estElemNum,\n+                            VFactory.sortedDoubleVector((int) (endCol - startCol),\n+                                    ((IntDoubleVector) row).getStorage().getIndices(),\n+                                    ((IntDoubleVector) row).getStorage().getValues()));\n+                } else {\n+                    return new ServerLongDoubleRow(rowId, rowType, startCol, endCol,\n+                            (int) estElemNum,\n+                            (IntDoubleVector) row);\n+                }\n+            } else {\n+                return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n+                        VFactory.sortedLongKeyDoubleVector((int) (endCol - startCol),\n+                                ((LongDoubleVector) row).getStorage().getIndices(),\n+                                ((LongDoubleVector) row).getStorage().getValues()));\n+            }\n+        } finally {\n+            endRead();\n         }\n-      }\n-    } else {\n-      if (indexType == IndexType.INT) {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeDouble(get(in.readInt()));\n+    }\n+\n+    /**\n+     * Check the vector contains the index or not\n+     *\n+     * @param index element index\n+     * @return true means exist\n+     */\n+    public boolean exist(long index) {\n+        if (useIntKey) {\n+            if (row.isSparse()) {\n+                return ((IntDoubleVector) row).getStorage().hasKey((int) (index - startCol));\n+            } else {\n+                return ((IntDoubleVector) row).getStorage().get((int) (index - startCol)) != 0.0;\n+            }\n+        } else {\n+            if (row.isSparse()) {\n+                return ((LongDoubleVector) row).getStorage().hasKey(index - startCol);\n+            } else {\n+                return ((LongDoubleVector) row).getStorage().get(index - startCol) != 0.0;\n+            }\n         }\n-      } else {\n-        for (int i = 0; i < indexSize; i++) {\n-          out.writeDouble(get(in.readLong()));\n+    }\n+\n+    public double initAndGet(long index, InitFunc func) {\n+        if (exist(index)) {\n+            return get(index);\n+        } else {\n+            double value = func.action();\n+            set(index, value);\n+            return value;\n         }\n-      }\n-    }\n-  }\n-\n-  //TODO\n-  public double defaultReturnValue() {\n-    return 0.0;\n-  }\n-\n-  public void setDefaultValue(double defaultValue) {\n-\n-  }\n-\n-  @Override\n-  public void setSplit(Vector row) {\n-    super.setSplit(row);\n-  }\n-\n-  @Override\n-  public void elemUpdate(DoubleElemUpdateFunc func) {\n-    if (isDense()) {\n-      double[] values = getValues();\n-      for (int i = 0; i < values.length; i++) {\n-        values[i] = func.update();\n-      }\n-    } else {\n-      if (useIntKey) {\n-        ObjectIterator<Int2DoubleMap.Entry> iter =\n-            ((IntDoubleVector) row).getStorage().entryIterator();\n-        Int2DoubleMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+    }\n+\n+    @Override\n+    public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n+            throws IOException {\n+        if (func != null) {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeDouble(initAndGet(in.readInt(), func));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeDouble(initAndGet(in.readLong(), func));\n+                }\n+            }\n+        } else {\n+            if (indexType == IndexType.INT) {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeDouble(get(in.readInt()));\n+                }\n+            } else {\n+                for (int i = 0; i < indexSize; i++) {\n+                    out.writeDouble(get(in.readLong()));\n+                }\n+            }\n         }\n-      } else {\n-        ObjectIterator<Long2DoubleMap.Entry> iter =\n-            ((LongDoubleVector) row).getStorage().entryIterator();\n-        Long2DoubleMap.Entry entry;\n-        while (iter.hasNext()) {\n-          entry = iter.next();\n-          entry.setValue(func.update());\n+    }\n+\n+    //TODO\n+    public double defaultReturnValue() {\n+        return 0.0;\n+    }\n+\n+    public void setDefaultValue(double defaultValue) {\n+\n+    }\n+\n+    @Override\n+    public void setSplit(Vector row) {\n+        super.setSplit(row);\n+    }\n+\n+    @Override\n+    public void elemUpdate(DoubleElemUpdateFunc func) {\n+        if (isDense()) {\n+            double[] values = getValues();\n+            for (int i = 0; i < values.length; i++) {\n+                values[i] = func.update();\n+            }\n+        } else {\n+            if (useIntKey) {\n+                ObjectIterator<Int2DoubleMap.Entry> iter =\n+                        ((IntDoubleVector) row).getStorage().entryIterator();\n+                Int2DoubleMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+            } else {\n+                ObjectIterator<Long2DoubleMap.Entry> iter =\n+                        ((LongDoubleVector) row).getStorage().entryIterator();\n+                Long2DoubleMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    entry.setValue(func.update());\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n }\n",
            "diff_size": 1315
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "239",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "717",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "719",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "733",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "740",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/67/ServerLongDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/67/ServerLongDoubleRow.java\nindex 784e43d4793..2b3ed640bdd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/67/ServerLongDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/67/ServerLongDoubleRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -63,9 +62,8 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n-    this(rowId, rowType, startCol, endCol, estElemNum, null);\n+  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n+  this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n@@ -193,65 +191,52 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         case T_DOUBLE_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongDoubleSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_SPARSE_LONGKEY:\n+  case T_FLOAT_SPARSE_LONGKEY:\n         case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE_LONGKEY:\n+  case T_LONG_SPARSE_LONGKEY:\n         case T_LONG_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE_LONGKEY:\n+  case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongIntSparse(buf, op);\n           break;\n-\n-        case T_DOUBLE_SPARSE:\n+  case T_DOUBLE_SPARSE:\n         case T_DOUBLE_SPARSE_COMPONENT:\n           updateUseIntDoubleSparse(buf, op);\n           break;\n-\n-        case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n-        case T_LONG_SPARSE:\n+  case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_DOUBLE_DENSE:\n+  case T_DOUBLE_DENSE:\n         case T_DOUBLE_DENSE_COMPONENT:\n           updateUseIntDoubleDense(buf, op);\n           break;\n-\n-        case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -614,8 +599,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n     }\n   }\n \n-\n-  @Override\n+@Override\n   public int size() {\n     if (useIntKey) {\n       return ((IntDoubleVector) row).size();\n@@ -730,11 +714,9 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntDoubleVector) row).clone());\n-      } else {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongDoubleVector) row).clone());\n+        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntDoubleVector) row).clone());\n+  } else {\n+        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongDoubleVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -742,25 +724,20 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (useIntKey) {\n         if (row.isSparse()) {\n           return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedDoubleVector((int) (endCol - startCol),\n-                  ((IntDoubleVector) row).getStorage().getIndices(),\n-                  ((IntDoubleVector) row).getStorage().getValues()));\n-        } else {\n+              VFactory.sortedDoubleVector((int) (endCol - startCol), ((IntDoubleVector) row).getStorage().getIndices(), ((IntDoubleVector) row).getStorage().getValues()));\n+  } else {\n           return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              (IntDoubleVector) row);\n+(IntDoubleVector) row);\n         }\n       } else {\n         return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyDoubleVector((int) (endCol - startCol),\n-                ((LongDoubleVector) row).getStorage().getIndices(),\n-                ((LongDoubleVector) row).getStorage().getValues()));\n+            VFactory.sortedLongKeyDoubleVector((int) (endCol - startCol), ((LongDoubleVector) row).getStorage().getIndices(), ((LongDoubleVector) row).getStorage().getValues()));\n       }\n     } finally {\n       endRead();\n@@ -802,7 +779,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeDouble(initAndGet(in.readInt(), func));\n@@ -866,4 +843,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "272",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "388",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "417",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "624",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "631",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "653",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "662",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "711",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "713",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "726",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 250).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "728",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "731",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 257).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "819",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "826",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/67/ServerLongDoubleRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/67/ServerLongDoubleRow.java\nindex 784e43d4793..9616164886f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/67/ServerLongDoubleRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/67/ServerLongDoubleRow.java\n@@ -37,6 +37,7 @@ import java.io.IOException;\n /**\n  * The row with \"long\" index type and \"double\" value type in PS\n  */\n+\n public class ServerLongDoubleRow extends ServerDoubleRow {\n \n   /**\n@@ -49,8 +50,8 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow the inner row\n    */\n-  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum,\n-      DoubleVector innerRow) {\n+\n+  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum, DoubleVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n   }\n \n@@ -63,14 +64,15 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol,\n-      int estElemNum) {\n+\n+  public ServerLongDoubleRow(int rowId, RowType rowType, long startCol, long endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n \n   /**\n    * Create a new ServerLongDoubleRow\n    */\n+\n   public ServerLongDoubleRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -86,6 +88,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public double get(long index) {\n     if (useIntKey) {\n       return ((IntDoubleVector) row).get((int) (index - startCol));\n@@ -100,6 +103,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(long index, double value) {\n     if (useIntKey) {\n       ((IntDoubleVector) row).set((int) (index - startCol), value);\n@@ -114,6 +118,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public double[] get(long[] indices) {\n     double[] values = new double[indices.length];\n     if (useIntKey) {\n@@ -125,7 +130,6 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         values[i] = ((LongDoubleVector) row).get(indices[i] - startCol);\n       }\n     }\n-\n     return values;\n   }\n \n@@ -135,6 +139,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(long[] indices, double[] values) {\n     assert indices.length == values.length;\n     if (useIntKey) {\n@@ -154,6 +159,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(long index, double value) {\n     set(index, get(index) + value);\n   }\n@@ -164,6 +170,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(long[] indices, double[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -176,6 +183,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    *\n    * @return all element values\n    */\n+\n   private double[] getValues() {\n     if (useIntKey) {\n       return ((IntDoubleVector) row).getStorage().getValues();\n@@ -185,7 +193,8 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n   }\n \n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -193,68 +202,54 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         case T_DOUBLE_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongDoubleSparse(buf, op);\n           break;\n-\n         case T_FLOAT_SPARSE_LONGKEY:\n         case T_FLOAT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongFloatSparse(buf, op);\n           break;\n-\n         case T_LONG_SPARSE_LONGKEY:\n         case T_LONG_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE_LONGKEY:\n         case T_INT_SPARSE_LONGKEY_COMPONENT:\n           updateUseLongIntSparse(buf, op);\n           break;\n-\n         case T_DOUBLE_SPARSE:\n         case T_DOUBLE_SPARSE_COMPONENT:\n           updateUseIntDoubleSparse(buf, op);\n           break;\n-\n         case T_FLOAT_SPARSE:\n         case T_FLOAT_SPARSE_COMPONENT:\n           updateUseIntFloatSparse(buf, op);\n           break;\n-\n         case T_LONG_SPARSE:\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n         case T_DOUBLE_DENSE:\n         case T_DOUBLE_DENSE_COMPONENT:\n           updateUseIntDoubleDense(buf, op);\n           break;\n-\n         case T_FLOAT_DENSE:\n         case T_FLOAT_DENSE_COMPONENT:\n           updateUseIntFloatDense(buf, op);\n           break;\n-\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n-\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -274,8 +269,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n         }\n       }\n     } else {\n@@ -304,8 +298,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n         }\n       }\n     } else {\n@@ -334,8 +327,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n         }\n       }\n     } else {\n@@ -364,8 +356,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readLong();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n         }\n       }\n     } else {\n@@ -381,7 +372,6 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n     }\n   }\n \n-\n   private void updateUseIntDoubleSparse(ByteBuf buf, UpdateOp op) {\n     // TODO:default value\n     //buf.readDouble();\n@@ -395,8 +385,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readDouble());\n         }\n       }\n     } else {\n@@ -425,8 +414,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readFloat());\n         }\n       }\n     } else {\n@@ -455,8 +443,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readLong());\n         }\n       }\n     } else {\n@@ -485,8 +472,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n       } else {\n         for (int i = 0; i < size; i++) {\n           long index = buf.readInt();\n-          ((LongDoubleVector) row)\n-              .set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n+          ((LongDoubleVector) row).set(index, ((LongDoubleVector) row).get(index) + buf.readInt());\n         }\n       }\n     } else {\n@@ -513,8 +499,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readDouble());\n+          ((LongDoubleVector) row).set(i, ((LongDoubleVector) row).get(i) + buf.readDouble());\n         }\n       }\n     } else {\n@@ -541,8 +526,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readFloat());\n+          ((LongDoubleVector) row).set(i, ((LongDoubleVector) row).get(i) + buf.readFloat());\n         }\n       }\n     } else {\n@@ -569,8 +553,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readLong());\n+          ((LongDoubleVector) row).set(i, ((LongDoubleVector) row).get(i) + buf.readLong());\n         }\n       }\n     } else {\n@@ -597,8 +580,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         }\n       } else {\n         for (int i = 0; i < size; i++) {\n-          ((LongDoubleVector) row)\n-              .set(i, ((LongDoubleVector) row).get(i) + buf.readInt());\n+          ((LongDoubleVector) row).set(i, ((LongDoubleVector) row).get(i) + buf.readInt());\n         }\n       }\n     } else {\n@@ -614,7 +596,6 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n     }\n   }\n \n-\n   @Override\n   public int size() {\n     if (useIntKey) {\n@@ -629,6 +610,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n    *\n    * @param mergedRow the dest row\n    */\n+\n   public void mergeTo(LongDoubleVector mergedRow) {\n     startRead();\n     try {\n@@ -639,16 +621,14 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         }\n       } else {\n         if (useIntKey) {\n-          ObjectIterator<Int2DoubleMap.Entry> iter =\n-              ((IntDoubleVector) row).getStorage().entryIterator();\n+          ObjectIterator<Int2DoubleMap.Entry> iter = ((IntDoubleVector) row).getStorage().entryIterator();\n           Int2DoubleMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n             mergedRow.set(entry.getIntKey() + startCol, entry.getDoubleValue());\n           }\n         } else {\n-          ObjectIterator<Long2DoubleMap.Entry> iter =\n-              ((LongDoubleVector) row).getStorage().entryIterator();\n+          ObjectIterator<Long2DoubleMap.Entry> iter = ((LongDoubleVector) row).getStorage().entryIterator();\n           Long2DoubleMap.Entry entry;\n           while (iter.hasNext()) {\n             entry = iter.next();\n@@ -670,8 +650,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n           buf.writeDouble(values[i]);\n         }\n       } else {\n-        ObjectIterator<Int2DoubleMap.Entry> iter =\n-            ((IntDoubleVector) row).getStorage().entryIterator();\n+        ObjectIterator<Int2DoubleMap.Entry> iter = ((IntDoubleVector) row).getStorage().entryIterator();\n         Int2DoubleMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n@@ -680,8 +659,7 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n         }\n       }\n     } else {\n-      ObjectIterator<Long2DoubleMap.Entry> iter =\n-          ((LongDoubleVector) row).getStorage().entryIterator();\n+      ObjectIterator<Long2DoubleMap.Entry> iter = ((LongDoubleVector) row).getStorage().entryIterator();\n       Long2DoubleMap.Entry entry;\n       while (iter.hasNext()) {\n         entry = iter.next();\n@@ -730,11 +708,9 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n     startRead();\n     try {\n       if (useIntKey) {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((IntDoubleVector) row).clone());\n+        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((IntDoubleVector) row).clone());\n       } else {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            ((LongDoubleVector) row).clone());\n+        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum, ((LongDoubleVector) row).clone());\n       }\n     } finally {\n       endRead();\n@@ -742,25 +718,17 @@ public class ServerLongDoubleRow extends ServerDoubleRow {\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       if (useIntKey) {\n         if (row.isSparse()) {\n-          return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              VFactory.sortedDoubleVector((int) (endCol - startCol),\n-                  ((IntDoubleVector) row).getStorage().getIndices(),\n-                  ((IntDoubleVector) row).getStorage().getValues()));\n+          return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedDoubleVector((int) (endCol - startCol), ((IntDoubleVector) row).getStorage().getIndices(), ((IntDoubleVector) row).getStorage().getValues()));\n         } else {\n-          return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-              (IntDoubleVector) row);\n+          return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum, (IntDoubleVector) row);\n         }\n       } else {\n-        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum,\n-            VFactory.sortedLongKeyDoubleVector((int) (endCol - startCol),\n-                ((LongDoubleVector) row).getStorage().getIndices(),\n-                ((LongDoubleVector) row).getStorage().getValues()));\n+        return new ServerLongDoubleRow(rowId, rowType, startCol, endCol, (int) estElemNum, VFactory.sortedLongKeyDoubleVector((int) (endCol - startCol), ((LongDoubleVector) row).getStorage().getIndices(), ((LongDoubleVector) row).getStorage().getValues()));\n       }\n     } finally {\n       endRead();\n@@ -773,6 +741,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(long index) {\n     if (useIntKey) {\n       if (row.isSparse()) {\n@@ -800,8 +769,8 @@ adaptiveClone() {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -826,13 +795,12 @@ adaptiveClone() {\n   }\n \n   //TODO\n+\n   public double defaultReturnValue() {\n     return 0.0;\n   }\n \n-  public void setDefaultValue(double defaultValue) {\n-\n-  }\n+  public void setDefaultValue(double defaultValue) {}\n \n   @Override\n   public void setSplit(Vector row) {\n@@ -848,16 +816,14 @@ adaptiveClone() {\n       }\n     } else {\n       if (useIntKey) {\n-        ObjectIterator<Int2DoubleMap.Entry> iter =\n-            ((IntDoubleVector) row).getStorage().entryIterator();\n+        ObjectIterator<Int2DoubleMap.Entry> iter = ((IntDoubleVector) row).getStorage().entryIterator();\n         Int2DoubleMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n           entry.setValue(func.update());\n         }\n       } else {\n-        ObjectIterator<Long2DoubleMap.Entry> iter =\n-            ((LongDoubleVector) row).getStorage().entryIterator();\n+        ObjectIterator<Long2DoubleMap.Entry> iter = ((LongDoubleVector) row).getStorage().entryIterator();\n         Long2DoubleMap.Entry entry;\n         while (iter.hasNext()) {\n           entry = iter.next();\n@@ -866,4 +832,5 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 95
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}