{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "203",
    "information": {
        "violations": [
            {
                "line": "288",
                "column": "87",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "            .build()\n    );\n    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ?\n        null : serviceCache.getInstances();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/203/RegistryUtils.java\nindex 28e881dc6eb..2ccca8db0b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/203/RegistryUtils.java\n@@ -285,8 +285,8 @@ public final class RegistryUtils {\n             .appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n             .build()\n     );\n-    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ?\n-        null : serviceCache.getInstances();\n+    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus())\n+        ? null : serviceCache.getInstances();\n   }\n \n   // update microservice instance properties\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "288",
                    "column": "87",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/203/RegistryUtils.java\nindex 28e881dc6eb..5b61f9b64e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/203/RegistryUtils.java\n@@ -279,7 +279,7 @@ public final class RegistryUtils {\n   }\n \n   public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n+                                                               String versionRule) {\n     MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(\n         MicroserviceCacheKey.builder()\n             .appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n@@ -304,7 +304,7 @@ public final class RegistryUtils {\n   }\n \n   public static MicroserviceInstances findServiceInstances(String appId, String serviceName,\n-      String versionRule, String revision) {\n+                                                           String versionRule, String revision) {\n     MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(\n         MicroserviceCacheKey.builder().appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n             .build());\n@@ -390,7 +390,7 @@ public final class RegistryUtils {\n   }\n \n   /**\n-   * @throws NullPointerException serviceRegistryConfig is null\n+   * @throws NullPointerException     serviceRegistryConfig is null\n    * @throws IllegalArgumentException config value is illegal\n    */\n   public static void validateRegistryConfig(ServiceRegistryConfig serviceRegistryConfig) {\n@@ -400,6 +400,7 @@ public final class RegistryUtils {\n \n   /**\n    * To validate whether the name is legal value.\n+   *\n    * @param name name of the {@link ServiceRegistry}\n    * @throws IllegalArgumentException the input value is illegal\n    */\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "286",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/203/RegistryUtils.java\nindex 28e881dc6eb..a93dce07225 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/203/RegistryUtils.java\n@@ -110,8 +110,7 @@ public final class RegistryUtils {\n     aggregateServiceRegistryCache.setCacheRefreshedWatcher(refreshedCaches -> appManager.pullInstances());\n \n     executeOnEachServiceRegistry(\n-        serviceRegistry -> serviceRegistry\n-            .getEventBus()\n+        serviceRegistry -> serviceRegistry.getEventBus()\n             .register(aggregateServiceRegistryCache));\n   }\n \n@@ -274,7 +273,7 @@ public final class RegistryUtils {\n     int publishPortSetting = DynamicPropertyFactory.getInstance()\n         .getIntProperty(publishPortKey, 0)\n         .get();\n-    int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n+int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n     return new IpPort(publicAddressSetting, publishPort);\n   }\n \n@@ -283,10 +282,8 @@ public final class RegistryUtils {\n     MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(\n         MicroserviceCacheKey.builder()\n             .appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n-            .build()\n-    );\n-    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ?\n-        null : serviceCache.getInstances();\n+            .build());\n+    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ? null : serviceCache.getInstances();\n   }\n \n   // update microservice instance properties\n@@ -338,7 +335,7 @@ public final class RegistryUtils {\n         return microserviceInstances;\n       default:\n         return null;\n-    }\n+  }\n   }\n \n   public static String calcSchemaSummary(String schemaContent) {\n@@ -439,4 +436,4 @@ public final class RegistryUtils {\n       EventManager.getEventBus().post(microserviceInstanceRegisterTask);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "203",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "257",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "269",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "271",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "272",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "290",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "292",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "293",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "294",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "338",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "405",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/203/RegistryUtils.java\nindex 28e881dc6eb..9cdb7388802 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/203/RegistryUtils.java\n@@ -29,7 +29,6 @@ import java.util.concurrent.atomic.AtomicInteger;\n import java.util.function.Consumer;\n import java.util.function.Function;\n import java.util.regex.Matcher;\n-\n import org.apache.http.client.utils.URIBuilder;\n import org.apache.servicecomb.config.ConfigUtil;\n import org.apache.servicecomb.config.archaius.sources.MicroserviceConfigLoader;\n@@ -57,7 +56,6 @@ import org.apache.servicecomb.serviceregistry.task.MicroserviceInstanceRegisterT\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.google.common.base.Charsets;\n import com.google.common.eventbus.Subscribe;\n import com.google.common.hash.Hashing;\n@@ -69,9 +67,11 @@ public final class RegistryUtils {\n   /**\n    * The default ServiceRegistry instance\n    */\n+\n   private static volatile ServiceRegistry serviceRegistry;\n \n   // value is ip or {interface name}\n+\n   public static final String PUBLISH_ADDRESS = \"servicecomb.service.publishAddress\";\n \n   private static final String PUBLISH_PORT = \"servicecomb.{transport_name}.publishPort\";\n@@ -99,7 +99,6 @@ public final class RegistryUtils {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n     initializeServiceRegistries(microserviceDefinition);\n-\n     initAggregateServiceRegistryCache();\n   }\n \n@@ -108,16 +107,11 @@ public final class RegistryUtils {\n     executeOnEachServiceRegistry(serviceRegistries::add);\n     aggregateServiceRegistryCache = new AggregateServiceRegistryCache(serviceRegistries);\n     aggregateServiceRegistryCache.setCacheRefreshedWatcher(refreshedCaches -> appManager.pullInstances());\n-\n-    executeOnEachServiceRegistry(\n-        serviceRegistry -> serviceRegistry\n-            .getEventBus()\n-            .register(aggregateServiceRegistryCache));\n+    executeOnEachServiceRegistry(serviceRegistry -> serviceRegistry.getEventBus().register(aggregateServiceRegistryCache));\n   }\n \n   private static void initializeServiceRegistries(MicroserviceDefinition microserviceDefinition) {\n-    serviceRegistry =\n-        ServiceRegistryFactory.create(ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n+    serviceRegistry = ServiceRegistryFactory.create(ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n     EXTRA_SERVICE_REGISTRY_CONFIGS.forEach((k, v) -> {\n       ServiceRegistry serviceRegistry = ServiceRegistryFactory.create(v, microserviceDefinition);\n       addExtraServiceRegistry(serviceRegistry);\n@@ -137,6 +131,7 @@ public final class RegistryUtils {\n   /**\n    * @deprecated Replace by {@link #destroy()}\n    */\n+\n   @Deprecated\n   public static void destory() {\n     destroy();\n@@ -181,37 +176,32 @@ public final class RegistryUtils {\n   }\n \n   public static String getPublishAddress() {\n-    String publicAddressSetting =\n-        DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n+    String publicAddressSetting = DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\")\n+                                                                      .get();\n     publicAddressSetting = publicAddressSetting.trim();\n     if (publicAddressSetting.isEmpty()) {\n       return NetUtils.getHostAddress();\n     }\n \n     // placeholder is network interface name\n+\n     if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      return NetUtils\n-          .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostAddress();\n+      return NetUtils.ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1)).getHostAddress();\n     }\n-\n     return publicAddressSetting;\n   }\n \n   public static String getPublishHostName() {\n-    String publicAddressSetting =\n-        DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n+    String publicAddressSetting = DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\")\n+                                                                      .get();\n     publicAddressSetting = publicAddressSetting.trim();\n     if (publicAddressSetting.isEmpty()) {\n       return NetUtils.getHostName();\n     }\n \n     if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      return NetUtils\n-          .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostName();\n+      return NetUtils.ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1)).getHostName();\n     }\n-\n     return publicAddressSetting;\n   }\n \n@@ -221,6 +211,7 @@ public final class RegistryUtils {\n    *\n    * @return the publish address, or {@code null} if the param {@code address} is null.\n    */\n+\n   public static String getPublishAddress(String schema, String address) {\n     if (address == null) {\n       return address;\n@@ -236,7 +227,9 @@ public final class RegistryUtils {\n \n       IpPort publishIpPort = genPublishIpPort(schema, ipPort);\n       URIBuilder builder = new URIBuilder(originalURI);\n-      return builder.setHost(publishIpPort.getHostOrIp()).setPort(publishIpPort.getPort()).build().toString();\n+      return builder.setHost(publishIpPort.getHostOrIp()).setPort(publishIpPort.getPort())\n+                                                         .build()\n+                                                         .toString();\n     } catch (URISyntaxException e) {\n       LOGGER.warn(\"address {} not valid.\", address);\n       return null;\n@@ -244,52 +237,43 @@ public final class RegistryUtils {\n   }\n \n   private static IpPort genPublishIpPort(String schema, IpPort ipPort) {\n-    String publicAddressSetting = DynamicPropertyFactory.getInstance()\n-        .getStringProperty(PUBLISH_ADDRESS, \"\")\n-        .get();\n+    String publicAddressSetting = DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\")\n+                                                                      .get();\n     publicAddressSetting = publicAddressSetting.trim();\n-\n     if (publicAddressSetting.isEmpty()) {\n       InetSocketAddress socketAddress = ipPort.getSocketAddress();\n       if (socketAddress.getAddress().isAnyLocalAddress()) {\n         String host = NetUtils.getHostAddress();\n         LOGGER.warn(\"address {}, auto select a host address to publish {}:{}, maybe not the correct one\",\n-            socketAddress,\n-            host,\n-            socketAddress.getPort());\n+socketAddress,\n+host,\n+socketAddress.getPort());\n         return new IpPort(host, ipPort.getPort());\n       }\n-\n       return ipPort;\n     }\n \n     if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      publicAddressSetting = NetUtils\n-          .ensureGetInterfaceAddress(\n-              publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostAddress();\n+      publicAddressSetting = NetUtils.ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1)).getHostAddress();\n     }\n \n     String publishPortKey = PUBLISH_PORT.replace(\"{transport_name}\", schema);\n-    int publishPortSetting = DynamicPropertyFactory.getInstance()\n-        .getIntProperty(publishPortKey, 0)\n-        .get();\n+    int publishPortSetting = DynamicPropertyFactory.getInstance().getIntProperty(publishPortKey, 0)\n+                                                                 .get();\n     int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n     return new IpPort(publicAddressSetting, publishPort);\n   }\n \n-  public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n-    MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(\n-        MicroserviceCacheKey.builder()\n-            .appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n-            .build()\n-    );\n-    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ?\n-        null : serviceCache.getInstances();\n+  public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName, String versionRule) {\n+    MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(MicroserviceCacheKey.builder().appId(appId)\n+                                                                                                                  .serviceName(serviceName)\n+                                                                                                                  .env(getMicroservice().getEnvironment())\n+                                                                                                                  .build());\n+    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ? null : serviceCache.getInstances();\n   }\n \n   // update microservice instance properties\n+\n   public static boolean updateInstanceProperties(Map<String, String> instanceProperties) {\n     Holder<Boolean> resultHolder = new Holder<>(true);\n     executeOnEachServiceRegistry(sr -> {\n@@ -303,17 +287,18 @@ public final class RegistryUtils {\n     return getResultFromFirstValidServiceRegistry(sr -> sr.getRemoteMicroservice(microserviceId));\n   }\n \n-  public static MicroserviceInstances findServiceInstances(String appId, String serviceName,\n-      String versionRule, String revision) {\n-    MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(\n-        MicroserviceCacheKey.builder().appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n-            .build());\n+  public static MicroserviceInstances findServiceInstances(String appId, String serviceName, String versionRule, String revision) {\n+    MicroserviceCache serviceCache = aggregateServiceRegistryCache.findServiceCache(MicroserviceCacheKey.builder().appId(appId)\n+                                                                                                                  .serviceName(serviceName)\n+                                                                                                                  .env(getMicroservice().getEnvironment())\n+                                                                                                                  .build());\n     return convertCacheToMicroserviceInstances(serviceCache);\n   }\n \n   /**\n    * for compatibility\n    */\n+\n   public static MicroserviceInstances convertCacheToMicroserviceInstances(MicroserviceCache microserviceCache) {\n     MicroserviceInstances microserviceInstances = new MicroserviceInstances();\n     switch (microserviceCache.getStatus()) {\n@@ -332,6 +317,7 @@ public final class RegistryUtils {\n         microserviceInstances.setMicroserviceNotExist(false);\n         microserviceInstances.setNeedRefresh(true);\n         microserviceInstances.setRevision(microserviceCache.getRevisionId());\n+\n         FindInstancesResponse findInstancesResponse = new FindInstancesResponse();\n         findInstancesResponse.setInstances(new ArrayList<>(microserviceCache.getInstances()));\n         microserviceInstances.setInstancesResponse(findInstancesResponse);\n@@ -342,17 +328,18 @@ public final class RegistryUtils {\n   }\n \n   public static String calcSchemaSummary(String schemaContent) {\n-    return Hashing.sha256().newHasher().putString(schemaContent, Charsets.UTF_8).hash().toString();\n+    return Hashing.sha256().newHasher()\n+                           .putString(schemaContent, Charsets.UTF_8)\n+                           .hash()\n+                           .toString();\n   }\n \n   public static String getAggregatedSchema(String microserviceId, String schemaId) {\n-    return getResultFromFirstValidServiceRegistry(\n-        sr -> sr.getServiceRegistryClient().getAggregatedSchema(microserviceId, schemaId));\n+    return getResultFromFirstValidServiceRegistry(sr -> sr.getServiceRegistryClient().getAggregatedSchema(microserviceId, schemaId));\n   }\n \n   public static Microservice getAggregatedRemoteMicroservice(String microserviceId) {\n-    return getResultFromFirstValidServiceRegistry(\n-        sr -> sr.getAggregatedRemoteMicroservice(microserviceId));\n+    return getResultFromFirstValidServiceRegistry(sr -> sr.getAggregatedRemoteMicroservice(microserviceId));\n   }\n \n   public static <T> T getResultFromFirstValidServiceRegistry(Function<ServiceRegistry, T> action) {\n@@ -369,6 +356,7 @@ public final class RegistryUtils {\n     if (null != getServiceRegistry()) {\n       action.accept(getServiceRegistry());\n     }\n+\n     if (!EXTRA_SERVICE_REGISTRIES.isEmpty()) {\n       EXTRA_SERVICE_REGISTRIES.forEach((k, v) -> action.accept(v));\n     }\n@@ -376,7 +364,9 @@ public final class RegistryUtils {\n \n   public static void addExtraServiceRegistry(ServiceRegistry serviceRegistry) {\n     Objects.requireNonNull(serviceRegistry);\n-    LOGGER.info(\"extra ServiceRegistry added: [{}], [{}]\", serviceRegistry.getName(), serviceRegistry.getClass());\n+    LOGGER.info(\"extra ServiceRegistry added: [{}], [{}]\",\n+serviceRegistry.getName(),\n+serviceRegistry.getClass());\n     EXTRA_SERVICE_REGISTRIES.put(serviceRegistry.getName(), serviceRegistry);\n   }\n \n@@ -384,6 +374,7 @@ public final class RegistryUtils {\n    * Add the configuration object of {@link ServiceRegistry}.\n    * The corresponding {@link ServiceRegistry} instances are instantiated later in {@link #init()}\n    */\n+\n   public static void addExtraServiceRegistryConfig(ServiceRegistryConfig serviceRegistryConfig) {\n     validateRegistryConfig(serviceRegistryConfig);\n     EXTRA_SERVICE_REGISTRY_CONFIGS.put(serviceRegistryConfig.getRegistryName(), serviceRegistryConfig);\n@@ -393,6 +384,7 @@ public final class RegistryUtils {\n    * @throws NullPointerException serviceRegistryConfig is null\n    * @throws IllegalArgumentException config value is illegal\n    */\n+\n   public static void validateRegistryConfig(ServiceRegistryConfig serviceRegistryConfig) {\n     Objects.requireNonNull(serviceRegistryConfig);\n     validateRegistryName(serviceRegistryConfig.getRegistryName());\n@@ -403,13 +395,14 @@ public final class RegistryUtils {\n    * @param name name of the {@link ServiceRegistry}\n    * @throws IllegalArgumentException the input value is illegal\n    */\n+\n   public static void validateRegistryName(String name) {\n     Objects.requireNonNull(name, \"null value is not allowed for the name of ServiceRegistry\");\n+\n     Matcher checkMatcher = ServiceRegistry.REGISTRY_NAME_PATTERN.matcher(name);\n     boolean isNameValid = checkMatcher.matches();\n     if (!isNameValid) {\n-      throw new IllegalArgumentException(\n-          \"Illegal registry name, the format should be \" + ServiceRegistry.REGISTRY_NAME_FORMAT);\n+      throw new IllegalArgumentException(\"Illegal registry name, the format should be \" + ServiceRegistry.REGISTRY_NAME_FORMAT);\n     }\n   }\n \n@@ -425,18 +418,20 @@ public final class RegistryUtils {\n \n     @Subscribe\n     public void afterRegistryInstance(MicroserviceInstanceRegisterTask microserviceInstanceRegisterTask) {\n-      LOGGER.info(\"receive MicroserviceInstanceRegisterTask event of [{}]\", serviceRegistry.getName());\n+      LOGGER.info(\"receive MicroserviceInstanceRegisterTask event of [{}]\",\n+serviceRegistry.getName());\n       if (StringUtils.isEmpty(serviceRegistry.getMicroserviceInstance().getInstanceId())) {\n         return;\n       }\n \n-      LOGGER.info(\"ServiceRegistry[{}] has completed instance registry\", serviceRegistry.getName());\n+      LOGGER.info(\"ServiceRegistry[{}] has completed instance registry\",\n+serviceRegistry.getName());\n       EventManager.unregister(this);\n-\n       if (instanceRegisterCounter.decrementAndGet() > 0) {\n         return;\n       }\n+\n       EventManager.getEventBus().post(microserviceInstanceRegisterTask);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 87
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/203/RegistryUtils.java\nindex 28e881dc6eb..2ccca8db0b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/203/RegistryUtils.java\n@@ -285,8 +285,8 @@ public final class RegistryUtils {\n             .appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n             .build()\n     );\n-    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ?\n-        null : serviceCache.getInstances();\n+    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus())\n+        ? null : serviceCache.getInstances();\n   }\n \n   // update microservice instance properties\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/203/RegistryUtils.java\nindex 28e881dc6eb..2ccca8db0b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/203/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/203/RegistryUtils.java\n@@ -285,8 +285,8 @@ public final class RegistryUtils {\n             .appId(appId).serviceName(serviceName).env(getMicroservice().getEnvironment())\n             .build()\n     );\n-    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus()) ?\n-        null : serviceCache.getInstances();\n+    return MicroserviceCacheStatus.SERVICE_NOT_FOUND.equals(serviceCache.getStatus())\n+        ? null : serviceCache.getInstances();\n   }\n \n   // update microservice instance properties\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}