{
    "project_name": "EMResearch-EMB",
    "violation_id": "61",
    "information": {
        "violations": [
            {
                "line": "29",
                "column": "59",
                "severity": "warning",
                "message": "'||' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "    StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n    for (StackTraceElement element : stackTrace) {\n      if (element.getClassName().startsWith(\"org.junit.\") ||\n              element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n        return true;\n      }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/61/TestHackHelper.java\nindex f20b9260e63..870bbffb6fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/61/TestHackHelper.java\n@@ -26,8 +26,8 @@ final class TestHackHelper {\n   static boolean isJUnitTest() {\n     StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n     for (StackTraceElement element : stackTrace) {\n-      if (element.getClassName().startsWith(\"org.junit.\") ||\n-              element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n+      if (element.getClassName().startsWith(\"org.junit.\")\n+        || element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n         return true;\n       }\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "30",
                    "column": "65",
                    "severity": "warning",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/61/TestHackHelper.java\nindex f20b9260e63..467a5c00fdd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/61/TestHackHelper.java\n@@ -16,21 +16,22 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules;\n \n final class TestHackHelper {\n \n-  private TestHackHelper() {\n-  }\n+    private TestHackHelper() {\n+    }\n \n-  static boolean isJUnitTest() {\n-    StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n-    for (StackTraceElement element : stackTrace) {\n-      if (element.getClassName().startsWith(\"org.junit.\") ||\n-              element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n-        return true;\n-      }\n+    static boolean isJUnitTest() {\n+        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n+        for (StackTraceElement element : stackTrace) {\n+            if (element.getClassName().startsWith(\"org.junit.\") ||\n+                element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "29",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/61/TestHackHelper.java\nindex f20b9260e63..9fec08dd25b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/61/TestHackHelper.java\n@@ -26,11 +26,10 @@ final class TestHackHelper {\n   static boolean isJUnitTest() {\n     StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n     for (StackTraceElement element : stackTrace) {\n-      if (element.getClassName().startsWith(\"org.junit.\") ||\n-              element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n-        return true;\n+      if (element.getClassName().startsWith(\"org.junit.\") || element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n+    return true;\n       }\n     }\n     return false;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/61/TestHackHelper.java\nindex f20b9260e63..f0334e33568 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/61/TestHackHelper.java\n@@ -18,19 +18,20 @@\n  */\n package org.languagetool.rules;\n \n+\n final class TestHackHelper {\n \n-  private TestHackHelper() {\n-  }\n+    private TestHackHelper() {\n+\n+    }\n \n-  static boolean isJUnitTest() {\n-    StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n-    for (StackTraceElement element : stackTrace) {\n-      if (element.getClassName().startsWith(\"org.junit.\") ||\n-              element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n-        return true;\n-      }\n+    static boolean isJUnitTest() {\n+        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n+        for (StackTraceElement element : stackTrace) {\n+            if (element.getClassName().startsWith(\"org.junit.\") || element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/61/TestHackHelper.java\nindex f20b9260e63..870bbffb6fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/61/TestHackHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/61/TestHackHelper.java\n@@ -26,8 +26,8 @@ final class TestHackHelper {\n   static boolean isJUnitTest() {\n     StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();\n     for (StackTraceElement element : stackTrace) {\n-      if (element.getClassName().startsWith(\"org.junit.\") ||\n-              element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n+      if (element.getClassName().startsWith(\"org.junit.\")\n+        || element.getClassName().equals(\"org.languagetool.rules.patterns.PatternRuleTest\")) {\n         return true;\n       }\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "29",
                    "column": "59",
                    "severity": "warning",
                    "message": "'||' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}