{
    "project_name": "IQSS-dataverse",
    "violation_id": "66",
    "information": {
        "violations": [
            {
                "line": "57",
                "column": "5",
                "severity": "error",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "\n    public boolean isDisplayIdentifier()\n    {\n        return false;\n    }",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/IQSS-dataverse/styler/05_predictions/final/files-repaired/66/MicrosoftOAuth2AP.java\nindex da260a9fb0e..f2dfa6eb147 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/IQSS-dataverse/styler/05_predictions/final/files-repaired/66/MicrosoftOAuth2AP.java\n@@ -53,8 +53,7 @@ public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider{\n         }\n     }\n \n-    public boolean isDisplayIdentifier()\n-    {\n+    public boolean isDisplayIdentifier() {\n         return false;\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/66/MicrosoftOAuth2AP.java\nindex da260a9fb0e..a302fd6d4e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/checkstyle_idea/66/MicrosoftOAuth2AP.java\n@@ -14,47 +14,46 @@ import javax.json.JsonReader;\n import edu.harvard.iq.dataverse.authorization.AuthenticatedUserDisplayInfo;\n \n /**\n- *\n  * @author\n  */\n-public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider{\n-\n-    private static final Logger logger = Logger.getLogger(MicrosoftOAuth2AP.class.getCanonicalName());\n-\n-    public MicrosoftOAuth2AP(String aClientId, String aClientSecret){\n-        this.id = \"microsoft\";\n-        this.title = \"Microsoft\";\n-        this.clientId = aClientId;\n-        this.clientSecret = aClientSecret;\n-        this.scope = Arrays.asList(\"User.Read\");\n-        this.baseUserEndpoint = \"https://graph.microsoft.com/v1.0/me\";\n-    }\n-\n-    @Override\n-    public DefaultApi20 getApiInstance(){\n-        return MicrosoftAzureActiveDirectory20Api.instance();\n+public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider {\n+\n+  private static final Logger logger = Logger.getLogger(MicrosoftOAuth2AP.class.getCanonicalName());\n+\n+  public MicrosoftOAuth2AP(String aClientId, String aClientSecret) {\n+    this.id = \"microsoft\";\n+    this.title = \"Microsoft\";\n+    this.clientId = aClientId;\n+    this.clientSecret = aClientSecret;\n+    this.scope = Arrays.asList(\"User.Read\");\n+    this.baseUserEndpoint = \"https://graph.microsoft.com/v1.0/me\";\n+  }\n+\n+  @Override\n+  public DefaultApi20 getApiInstance() {\n+    return MicrosoftAzureActiveDirectory20Api.instance();\n+  }\n+\n+  @Override\n+  protected ParsedUserResponse parseUserResponse(final String responseBody) {\n+    try (StringReader rdr = new StringReader(responseBody);\n+         JsonReader jrdr = Json.createReader(rdr)) {\n+      JsonObject response = jrdr.readObject();\n+      AuthenticatedUserDisplayInfo displayInfo = new AuthenticatedUserDisplayInfo(\n+        response.getString(\"givenName\", \"\"),\n+        response.getString(\"surname\", \"\"),\n+        response.getString(\"userPrincipalName\", \"\"),\n+        \"\", \"\");\n+      String persistentUserId = response.getString(\"id\");\n+      String username = response.getString(\"userPrincipalName\");\n+      return new ParsedUserResponse(displayInfo, persistentUserId, username,\n+        (displayInfo.getEmailAddress().length() > 0 ? Collections.singletonList(displayInfo.getEmailAddress()) :\n+          Collections.emptyList())\n+      );\n     }\n+  }\n \n-    @Override\n-    protected ParsedUserResponse parseUserResponse(final String responseBody) {\n-        try ( StringReader rdr = new StringReader(responseBody);\n-              JsonReader jrdr = Json.createReader(rdr) )  {\n-            JsonObject response = jrdr.readObject();\n-            AuthenticatedUserDisplayInfo displayInfo = new AuthenticatedUserDisplayInfo(\n-                    response.getString(\"givenName\", \"\"),\n-                    response.getString(\"surname\", \"\"),\n-                    response.getString(\"userPrincipalName\", \"\"),\n-                    \"\", \"\");\n-            String persistentUserId = response.getString(\"id\");\n-            String username = response.getString(\"userPrincipalName\");\n-            return new ParsedUserResponse(displayInfo, persistentUserId, username,\n-                    (displayInfo.getEmailAddress().length() > 0 ? Collections.singletonList(displayInfo.getEmailAddress()) : Collections.emptyList() )\n-            );\n-        }\n-    }\n-\n-    public boolean isDisplayIdentifier()\n-    {\n-        return false;\n-    }\n+  public boolean isDisplayIdentifier() {\n+    return false;\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/codebuff/66/MicrosoftOAuth2AP.java\nindex da260a9fb0e..8928c4e554c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/codebuff/66/MicrosoftOAuth2AP.java\n@@ -3,7 +3,6 @@ package edu.harvard.iq.dataverse.authorization.providers.oauth2.impl;\n import com.github.scribejava.apis.MicrosoftAzureActiveDirectory20Api;\n import com.github.scribejava.core.builder.api.DefaultApi20;\n import edu.harvard.iq.dataverse.authorization.providers.oauth2.AbstractOAuth2AuthenticationProvider;\n-\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.logging.Logger;\n@@ -17,11 +16,13 @@ import edu.harvard.iq.dataverse.authorization.AuthenticatedUserDisplayInfo;\n  *\n  * @author\n  */\n-public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider{\n+\n+\n+public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider {\n \n     private static final Logger logger = Logger.getLogger(MicrosoftOAuth2AP.class.getCanonicalName());\n \n-    public MicrosoftOAuth2AP(String aClientId, String aClientSecret){\n+    public MicrosoftOAuth2AP(String aClientId, String aClientSecret) {\n         this.id = \"microsoft\";\n         this.title = \"Microsoft\";\n         this.clientId = aClientId;\n@@ -31,30 +32,28 @@ public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider{\n     }\n \n     @Override\n-    public DefaultApi20 getApiInstance(){\n+    public DefaultApi20 getApiInstance() {\n         return MicrosoftAzureActiveDirectory20Api.instance();\n     }\n \n     @Override\n     protected ParsedUserResponse parseUserResponse(final String responseBody) {\n         try ( StringReader rdr = new StringReader(responseBody);\n-              JsonReader jrdr = Json.createReader(rdr) )  {\n+              JsonReader jrdr = Json.createReader(rdr) ) {\n             JsonObject response = jrdr.readObject();\n-            AuthenticatedUserDisplayInfo displayInfo = new AuthenticatedUserDisplayInfo(\n-                    response.getString(\"givenName\", \"\"),\n-                    response.getString(\"surname\", \"\"),\n-                    response.getString(\"userPrincipalName\", \"\"),\n-                    \"\", \"\");\n+            AuthenticatedUserDisplayInfo displayInfo = new AuthenticatedUserDisplayInfo(response.getString(\"givenName\", \"\"),\n+response.getString(\"surname\", \"\"),\n+response.getString(\"userPrincipalName\", \"\"),\n+   \"\",\n+       \"\");\n             String persistentUserId = response.getString(\"id\");\n             String username = response.getString(\"userPrincipalName\");\n-            return new ParsedUserResponse(displayInfo, persistentUserId, username,\n-                    (displayInfo.getEmailAddress().length() > 0 ? Collections.singletonList(displayInfo.getEmailAddress()) : Collections.emptyList() )\n-            );\n+            return new ParsedUserResponse(displayInfo, persistentUserId, username, (displayInfo.getEmailAddress().length() > 0 ? Collections.singletonList(displayInfo.getEmailAddress()) : Collections.emptyList()));\n         }\n     }\n \n-    public boolean isDisplayIdentifier()\n-    {\n+    public boolean isDisplayIdentifier() {\n         return false;\n     }\n+\n }\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/random/files-repaired/66/MicrosoftOAuth2AP.java\nindex da260a9fb0e..f2dfa6eb147 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/random/files-repaired/66/MicrosoftOAuth2AP.java\n@@ -53,8 +53,7 @@ public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider{\n         }\n     }\n \n-    public boolean isDisplayIdentifier()\n-    {\n+    public boolean isDisplayIdentifier() {\n         return false;\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/three_grams/files-repaired/66/MicrosoftOAuth2AP.java\nindex da260a9fb0e..cb2eb9ef223 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/violations/66/MicrosoftOAuth2AP.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/IQSS-dataverse/styler/05_predictions/three_grams/files-repaired/66/MicrosoftOAuth2AP.java\n@@ -53,8 +53,7 @@ public class MicrosoftOAuth2AP extends AbstractOAuth2AuthenticationProvider{\n         }\n     }\n \n-    public boolean isDisplayIdentifier()\n-    {\n+    public boolean isDisplayIdentifier(){\n         return false;\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}