{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "1103",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "31",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "33",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1103/MemoryAllocator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1103/MemoryAllocator.java\nindex a42f31dc05f..83876a43d6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1103/MemoryAllocator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1103/MemoryAllocator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.mem;\n \n import org.neo4j.io.ByteUnit;\n@@ -27,27 +28,28 @@ import org.neo4j.memory.MemoryAllocationTracker;\n  */\n public interface MemoryAllocator\n {\n-    static MemoryAllocator createAllocator( String expectedMemory, MemoryAllocationTracker memoryTracker )\n-    {\n-        return new GrabAllocator( ByteUnit.parse( expectedMemory ), memoryTracker );\n-    }\n+  static MemoryAllocator createAllocator(String expectedMemory, MemoryAllocationTracker memoryTracker)\n+  {\n+    return new GrabAllocator(ByteUnit.parse(expectedMemory), memoryTracker);\n+  }\n \n-    /**\n-     * @return The sum, in bytes, of all the memory currently allocating through this allocator.\n-     */\n-    long usedMemory();\n+  /**\n+   * @return The sum, in bytes, of all the memory currently allocating through this allocator.\n+   */\n+  long usedMemory();\n \n-    /**\n-     * @return The amount of available memory, in bytes.\n-     */\n-    long availableMemory();\n+  /**\n+   * @return The amount of available memory, in bytes.\n+   */\n+  long availableMemory();\n \n-    /**\n-     * Allocate a contiguous, aligned region of memory of the given size in bytes.\n-     * @param bytes the number of bytes to allocate.\n-     * @param alignment The byte multiple that the allocated pointers have to be aligned at.\n-     * @return A pointer to the allocated memory.\n-     * @throws OutOfMemoryError if the requested memory could not be allocated.\n-     */\n-    long allocateAligned( long bytes, long alignment );\n+  /**\n+   * Allocate a contiguous, aligned region of memory of the given size in bytes.\n+   *\n+   * @param bytes     the number of bytes to allocate.\n+   * @param alignment The byte multiple that the allocated pointers have to be aligned at.\n+   * @return A pointer to the allocated memory.\n+   * @throws OutOfMemoryError if the requested memory could not be allocated.\n+   */\n+  long allocateAligned(long bytes, long alignment);\n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1103/MemoryAllocator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1103/MemoryAllocator.java\nindex a42f31dc05f..863626261c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1103/MemoryAllocator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1103/MemoryAllocator.java\n@@ -50,4 +50,4 @@ public interface MemoryAllocator\n      * @throws OutOfMemoryError if the requested memory could not be allocated.\n      */\n     long allocateAligned( long bytes, long alignment );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}