{
    "project_name": "Angel-ML-angel",
    "violation_id": "579",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/579/ServerLongAnyRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/579/ServerLongAnyRow.java\nindex b32e4dd2a88..3c882acd5fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/579/ServerLongAnyRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/579/ServerLongAnyRow.java\n@@ -27,93 +27,93 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n \n public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongElementOp {\n \n-  /**\n-   * Create a new ServerLongAnyRow\n-   *\n-   * @param valueType element value type class\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   * @param storage vector storage\n-   */\n-  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum,\n-      LongElementStorage storage, RouterType routerType) {\n-    super(valueType, rowId, rowType, startCol, endCol, estElemNum, storage, routerType);\n-  }\n-\n-  /**\n-   * Create a new ServerLongAnyRow\n-   *\n-   * @param valueType element value type class\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n-   * @param estElemNum the estimate element number\n-   */\n-  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum, RouterType routerType) {\n-    this(valueType, rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n-  }\n-\n-  /**\n-   * Create a new empty ServerLongAnyRow\n-   */\n-  public ServerLongAnyRow(RowType rowType) {\n-    this(null, 0, rowType, 0, 0, 0, null);\n-  }\n-\n-  @Override\n-  public LongElementStorage getStorage() {\n-    return (LongElementStorage) storage;\n-  }\n-\n-  @Override\n-  public int size() {\n-    return getStorage().size();\n-  }\n-\n-  public ObjectIterator<Long2ObjectMap.Entry<IElement>> iterator() {\n-    return this.getStorage().iterator();\n-  }\n-\n-  @Override\n-  public ServerRow adaptiveClone() {\n-    return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().adaptiveClone(), routerType);\n-  }\n-\n-  @Override\n-  public ServerRow deepClone() {\n-    return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().deepClone(), routerType);\n-  }\n-\n-  @Override\n-  public IElement get(long index) {\n-    return getStorage().get(index);\n-  }\n-\n-  @Override\n-  public void set(long index, IElement value) {\n-    getStorage().set(index, value);\n-  }\n-\n-  @Override\n-  public IElement[] get(long[] indices) {\n-    return getStorage().get(indices);\n-  }\n-\n-  @Override\n-  public void set(long[] indices, IElement[] values) {\n-    getStorage().set(indices, values);\n-  }\n-\n-  @Override\n-  public boolean exist(long index) {\n-    return getStorage().exist(index);\n-  }\n+    /**\n+     * Create a new ServerLongAnyRow\n+     *\n+     * @param valueType  element value type class\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     * @param storage    vector storage\n+     */\n+    public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n+                            long startCol, long endCol, long estElemNum,\n+                            LongElementStorage storage, RouterType routerType) {\n+        super(valueType, rowId, rowType, startCol, endCol, estElemNum, storage, routerType);\n+    }\n+\n+    /**\n+     * Create a new ServerLongAnyRow\n+     *\n+     * @param valueType  element value type class\n+     * @param rowId      row index\n+     * @param rowType    row type\n+     * @param startCol   start position\n+     * @param endCol     end position\n+     * @param estElemNum the estimate element number\n+     */\n+    public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n+                            long startCol, long endCol, long estElemNum, RouterType routerType) {\n+        this(valueType, rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n+    }\n+\n+    /**\n+     * Create a new empty ServerLongAnyRow\n+     */\n+    public ServerLongAnyRow(RowType rowType) {\n+        this(null, 0, rowType, 0, 0, 0, null);\n+    }\n+\n+    @Override\n+    public LongElementStorage getStorage() {\n+        return (LongElementStorage) storage;\n+    }\n+\n+    @Override\n+    public int size() {\n+        return getStorage().size();\n+    }\n+\n+    public ObjectIterator<Long2ObjectMap.Entry<IElement>> iterator() {\n+        return this.getStorage().iterator();\n+    }\n+\n+    @Override\n+    public ServerRow adaptiveClone() {\n+        return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n+                (LongElementStorage) getStorage().adaptiveClone(), routerType);\n+    }\n+\n+    @Override\n+    public ServerRow deepClone() {\n+        return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n+                (LongElementStorage) getStorage().deepClone(), routerType);\n+    }\n+\n+    @Override\n+    public IElement get(long index) {\n+        return getStorage().get(index);\n+    }\n+\n+    @Override\n+    public void set(long index, IElement value) {\n+        getStorage().set(index, value);\n+    }\n+\n+    @Override\n+    public IElement[] get(long[] indices) {\n+        return getStorage().get(indices);\n+    }\n+\n+    @Override\n+    public void set(long[] indices, IElement[] values) {\n+        getStorage().set(indices, values);\n+    }\n+\n+    @Override\n+    public boolean exist(long index) {\n+        return getStorage().exist(index);\n+    }\n }\n",
            "diff_size": 89
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/579/ServerLongAnyRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/579/ServerLongAnyRow.java\nindex b32e4dd2a88..3d1d6a66e6f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/579/ServerLongAnyRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/579/ServerLongAnyRow.java\n@@ -39,7 +39,7 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param storage vector storage\n    */\n   public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum,\n+long startCol, long endCol, long estElemNum,\n       LongElementStorage storage, RouterType routerType) {\n     super(valueType, rowId, rowType, startCol, endCol, estElemNum, storage, routerType);\n   }\n@@ -55,8 +55,8 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param estElemNum the estimate element number\n    */\n   public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum, RouterType routerType) {\n-    this(valueType, rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n+long startCol, long endCol, long estElemNum, RouterType routerType) {\n+  this(valueType, rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n   }\n \n   /**\n@@ -83,13 +83,13 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   @Override\n   public ServerRow adaptiveClone() {\n     return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().adaptiveClone(), routerType);\n+(LongElementStorage) getStorage().adaptiveClone(), routerType);\n   }\n \n   @Override\n   public ServerRow deepClone() {\n     return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().deepClone(), routerType);\n+(LongElementStorage) getStorage().deepClone(), routerType);\n   }\n \n   @Override\n@@ -116,4 +116,4 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   public boolean exist(long index) {\n     return getStorage().exist(index);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/579/ServerLongAnyRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/579/ServerLongAnyRow.java\nindex b32e4dd2a88..f1fc9912483 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/579/ServerLongAnyRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/579/ServerLongAnyRow.java\n@@ -38,9 +38,8 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param estElemNum the estimate element number\n    * @param storage vector storage\n    */\n-  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum,\n-      LongElementStorage storage, RouterType routerType) {\n+\n+  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType, long startCol, long endCol, long estElemNum, LongElementStorage storage, RouterType routerType) {\n     super(valueType, rowId, rowType, startCol, endCol, estElemNum, storage, routerType);\n   }\n \n@@ -54,14 +53,19 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n-  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId, RowType rowType,\n-      long startCol, long endCol, long estElemNum, RouterType routerType) {\n+\n+  public ServerLongAnyRow(Class<? extends IElement> valueType, int rowId,\n+                          RowType rowType,\n+                          long startCol,\n+                          long endCol,\n+                          long estElemNum, RouterType routerType) {\n     this(valueType, rowId, rowType, startCol, endCol, estElemNum, null, routerType);\n   }\n \n   /**\n    * Create a new empty ServerLongAnyRow\n    */\n+\n   public ServerLongAnyRow(RowType rowType) {\n     this(null, 0, rowType, 0, 0, 0, null);\n   }\n@@ -83,13 +87,13 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   @Override\n   public ServerRow adaptiveClone() {\n     return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().adaptiveClone(), routerType);\n+      (LongElementStorage) getStorage().adaptiveClone(), routerType);\n   }\n \n   @Override\n   public ServerRow deepClone() {\n     return new ServerLongAnyRow(valueType, rowId, rowType, startCol, endCol, estElemNum,\n-        (LongElementStorage) getStorage().deepClone(), routerType);\n+      (LongElementStorage) getStorage().deepClone(), routerType);\n   }\n \n   @Override\n@@ -116,4 +120,4 @@ public class ServerLongAnyRow extends ServerComplexTypeRow implements ILongEleme\n   public boolean exist(long index) {\n     return getStorage().exist(index);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}