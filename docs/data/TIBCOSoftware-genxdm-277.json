{
    "project_name": "TIBCOSoftware-genxdm",
    "violation_id": "277",
    "information": {
        "violations": [
            {
                "line": "39",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n{\n\tpublic SAXContentValidatorImpl(final VxValidator<A> kernel)\n\t{\n\t\tm_kernel = kernel;\n\t}",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "40",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/277/SAXContentValidatorImpl.java\nindex a6672027c04..6db10ba4b58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/final/files-repaired/277/SAXContentValidatorImpl.java\n@@ -36,7 +36,7 @@ import org.xml.sax.SAXException;\n \n public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n {\n-\tpublic SAXContentValidatorImpl(final VxValidator<A> kernel)\n+public SAXContentValidatorImpl(final VxValidator<A> kernel)\n \t{\n \t\tm_kernel = kernel;\n \t}\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/277/SAXContentValidatorImpl.java\nindex a6672027c04..1809f865659 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/checkstyle_idea/277/SAXContentValidatorImpl.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.genxdm.processor.w3c.xs.validation;\n \n import java.net.URI;\n@@ -34,178 +35,141 @@ import org.xml.sax.Locator;\n import org.xml.sax.SAXException;\n \n \n-public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n-{\n-\tpublic SAXContentValidatorImpl(final VxValidator<A> kernel)\n-\t{\n-\t\tm_kernel = kernel;\n-\t}\n-\n-\tpublic void characters(final char ch[], final int start, final int length) throws SAXException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.characters(ch, start, length);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void endDocument() throws SAXException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.endDocument();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void endElement(final String uri, final String localName, final String qName) throws SAXException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.endElement();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\te.printStackTrace();\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void endPrefixMapping(final String prefix)\n-\t{\n-\t}\n-\n-\tpublic void ignorableWhitespace(final char ch[], final int start, final int length)\n-\t{\n-\t\t// Ignore\n-\t}\n-\n-\tpublic void processingInstruction(final String target, final String data)\n-\t{\n-\t\t// Ignore\n-\t}\n-\n-\tpublic void reset()\n-\t{\n-\t\tm_kernel.reset();\n-\t}\n-\n-\tpublic void setDocumentLocator(final Locator locator)\n-\t{\n-\t\tm_locator = locator;\n-\t}\n-\n-\tpublic void skippedEntity(final String name)\n-\t{\n-\t}\n-\n-\tpublic void startDocument() throws SAXException\n-\t{\n+public final class SAXContentValidatorImpl<A> implements SAXValidator<A> {\n+    public SAXContentValidatorImpl(final VxValidator<A> kernel) {\n+        m_kernel = kernel;\n+    }\n+\n+    public void characters(final char ch[], final int start, final int length) throws SAXException {\n+        try {\n+            m_kernel.characters(ch, start, length);\n+        } catch (final Exception e) {\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void endDocument() throws SAXException {\n+        try {\n+            m_kernel.endDocument();\n+        } catch (final Exception e) {\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void endElement(final String uri, final String localName, final String qName)\n+        throws SAXException {\n+        try {\n+            m_kernel.endElement();\n+        } catch (final Exception e) {\n+            e.printStackTrace();\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void endPrefixMapping(final String prefix) {\n+    }\n+\n+    public void ignorableWhitespace(final char ch[], final int start, final int length) {\n+        // Ignore\n+    }\n+\n+    public void processingInstruction(final String target, final String data) {\n+        // Ignore\n+    }\n+\n+    public void reset() {\n+        m_kernel.reset();\n+    }\n+\n+    public void setDocumentLocator(final Locator locator) {\n+        m_locator = locator;\n+    }\n+\n+    public void skippedEntity(final String name) {\n+    }\n+\n+    public void startDocument() throws SAXException {\n //System.out.println(\"Here's a document.\");\n-\t\tfinal URI documentURI;\n-\t\ttry\n-\t\t{\n-\t\t\tdocumentURI = (m_locator != null) ? ((m_locator.getSystemId() != null) ? new URI(m_locator.getSystemId()) : null) : null;\n-\t\t}\n-\t\tcatch (final URISyntaxException e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.startDocument(documentURI);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException\n-\t{\n+        final URI documentURI;\n+        try {\n+            documentURI = (m_locator != null) ?\n+                ((m_locator.getSystemId() != null) ? new URI(m_locator.getSystemId()) : null) :\n+                null;\n+        } catch (final URISyntaxException e) {\n+            throw new SAXException(e);\n+        }\n+\n+        try {\n+            m_kernel.startDocument(documentURI);\n+        } catch (final Exception e) {\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void startElement(final String uri, final String localName, final String qName,\n+                             final Attributes attributes) throws SAXException {\n         // here's an interesting factoid:\n-\t    // if you're dealing with something in the default (global) namespace,\n-\t    // such as the po.xml instance document from the schema primer,\n-\t    // SAX returns empty string for uri and localName, and puts the\n-\t    // name in qName.  this sort of needs to be handled, eh?\n-\t    final String ns = (uri == null) ? \"\" : uri;\n-\t    final String name = ( (localName == null) || (localName.length() == 0)) ? getLocalPart(qName) : localName;\n-\t\tm_attributes.clear();\n-\n-\t\tif ((attributes != null ) && (attributes.getLength() > 0))\n-\t\t{\n-\t\t\tfor (int i = 0; i < attributes.getLength(); i++)\n-\t\t\t{\n-\t\t\t\tfinal String attributeQN = attributes.getQName(i);\n-\n-\t\t\t\tif (isNamespaceAttribute(attributeQN))\n-\t\t\t\t{\n-\t\t\t\t\t// Ignore namespace attributes which are carried by prefix mappings.\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tfinal String attributeNS = attributes.getURI(i);\n-\t\t\t\t\tfinal String attributeLN = attributes.getLocalName(i);\n-\t\t\t\t\tfinal String attributePH = getPrefix(attributeQN);\n-\t\t\t\t\tfinal String attributeSV = attributes.getValue(i);\n-\n-\t\t\t\t\tfinal QName aqName = new QName(attributeNS, attributeLN, attributePH);\n-\n-\t\t\t\t\tm_attributes.add(new VxMapping<QName, String>(aqName, attributeSV));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.startElement(new QName(ns, name, getPrefix(qName)), m_namespaces, m_attributes);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\t//e.printStackTrace();\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t\tfinally\n-\t\t{\n-\t\t\tm_namespaces.clear();\n-\t\t\tm_attributes.clear();\n-\t\t}\n-\t}\n-\n-\tpublic void startPrefixMapping(final String prefix, final String uri)\n-\t{\n-\t\tm_namespaces.add(new VxMapping<String, String>(prefix, uri));\n-\t}\n+        // if you're dealing with something in the default (global) namespace,\n+        // such as the po.xml instance document from the schema primer,\n+        // SAX returns empty string for uri and localName, and puts the\n+        // name in qName.  this sort of needs to be handled, eh?\n+        final String ns = (uri == null) ? \"\" : uri;\n+        final String name =\n+            ((localName == null) || (localName.length() == 0)) ? getLocalPart(qName) : localName;\n+        m_attributes.clear();\n+\n+        if ((attributes != null) && (attributes.getLength() > 0)) {\n+            for (int i = 0; i < attributes.getLength(); i++) {\n+                final String attributeQN = attributes.getQName(i);\n+\n+                if (isNamespaceAttribute(attributeQN)) {\n+                    // Ignore namespace attributes which are carried by prefix mappings.\n+                } else {\n+                    final String attributeNS = attributes.getURI(i);\n+                    final String attributeLN = attributes.getLocalName(i);\n+                    final String attributePH = getPrefix(attributeQN);\n+                    final String attributeSV = attributes.getValue(i);\n+\n+                    final QName aqName = new QName(attributeNS, attributeLN, attributePH);\n+\n+                    m_attributes.add(new VxMapping<QName, String>(aqName, attributeSV));\n+                }\n+            }\n+        }\n+        try {\n+            m_kernel.startElement(new QName(ns, name, getPrefix(qName)), m_namespaces,\n+                m_attributes);\n+        } catch (final Exception e) {\n+            //e.printStackTrace();\n+            throw new SAXException(e);\n+        } finally {\n+            m_namespaces.clear();\n+            m_attributes.clear();\n+        }\n+    }\n+\n+    public void startPrefixMapping(final String prefix, final String uri) {\n+        m_namespaces.add(new VxMapping<String, String>(prefix, uri));\n+    }\n \n     @Override\n-    public SchemaExceptionHandler getSchemaExceptionHandler()\n-    {\n+    public SchemaExceptionHandler getSchemaExceptionHandler() {\n         // TODO Auto-generated method stub\n         return null;\n     }\n \n     @Override\n-    public void setSchema(Schema cache)\n-    {\n+    public void setSchema(Schema cache) {\n         m_kernel.setComponentProvider(cache.getComponentProvider());\n     }\n \n     @Override\n-    public void setSchemaExceptionHandler(SchemaExceptionHandler errors)\n-    {\n+    public void setSchemaExceptionHandler(SchemaExceptionHandler errors) {\n         m_kernel.setExceptionHandler(errors);\n     }\n \n     @Override\n-    public void setSequenceHandler(SequenceHandler<A> handler)\n-    {\n+    public void setSequenceHandler(SequenceHandler<A> handler) {\n         m_kernel.setOutputHandler(new OutputAdapter<A>(handler));\n     }\n \n@@ -213,40 +177,36 @@ public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n      * Determines if the attribute is in the \"http://www.w3.org/2000/xmlns/\" namespace. This is determined by seeing if\n      * the attribute qualified name string identically matches \"xmlns\" or whether it starts with \"xmlns\" and is followed\n      * by a colon. A null attribute qualified name string is defined to be an illegal argument.\n-     * \n+     *\n      * @param qname\n      *            The qualified name string of the attribute.\n      * @return <CODE>true</CODE> if the attribute is in this namespace, otherwise <CODE>false</CODE>.\n      * @throws IllegalArgumentException\n      *             If the qname is null.\n      */\n-    public static boolean isNamespaceAttribute(final String qname) throws IllegalArgumentException\n-    {\n+    public static boolean isNamespaceAttribute(final String qname) throws IllegalArgumentException {\n         PreCondition.assertArgumentNotNull(qname, \"qname\");\n-        if (XMLConstants.XMLNS_ATTRIBUTE.equals(qname))\n-        {\n+        if (XMLConstants.XMLNS_ATTRIBUTE.equals(qname)) {\n             return true;\n-        }\n-        else\n-        {\n+        } else {\n             return (qname.startsWith(XMLNS_COLON));\n         }\n     }\n \n-    private static String getPrefix(final String qualifiedName)\n-    {\n+    private static String getPrefix(final String qualifiedName) {\n         final int index = qualifiedName.indexOf(':');\n-        if (index == -1)\n+        if (index == -1) {\n             return XMLConstants.DEFAULT_NS_PREFIX;\n+        }\n         return qualifiedName.substring(0, index);\n     }\n-    \n-    private static String getLocalPart(final String qualifiedName)\n-    {\n+\n+    private static String getLocalPart(final String qualifiedName) {\n         final int index = qualifiedName.indexOf(':');\n-        if (index == -1)\n+        if (index == -1) {\n             return qualifiedName;\n-        return qualifiedName.substring(index+1);\n+        }\n+        return qualifiedName.substring(index + 1);\n     }\n \n     /**\n@@ -254,10 +214,14 @@ public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n      */\n     private static final String XMLNS_COLON = XMLConstants.XMLNS_ATTRIBUTE + \":\";\n \n-    private final LinkedList<VxMapping<QName, String>> m_attributes = new LinkedList<VxMapping<QName, String>>();\n+    private final LinkedList<VxMapping<QName, String>> m_attributes =\n+        new LinkedList<VxMapping<QName, String>>();\n+\n     private final VxValidator<A> m_kernel;\n+\n     private Locator m_locator;\n \n-    private final LinkedList<VxMapping<String, String>> m_namespaces = new LinkedList<VxMapping<String, String>>();\n+    private final LinkedList<VxMapping<String, String>> m_namespaces =\n+        new LinkedList<VxMapping<String, String>>();\n \n }\n",
            "diff_size": 184
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/277/SAXContentValidatorImpl.java\nindex a6672027c04..3dcf1d882b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/codebuff/277/SAXContentValidatorImpl.java\n@@ -18,10 +18,8 @@ package org.genxdm.processor.w3c.xs.validation;\n import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.LinkedList;\n-\n import javax.xml.XMLConstants;\n import javax.xml.namespace.QName;\n-\n import org.genxdm.exceptions.PreCondition;\n import org.genxdm.processor.w3c.xs.validation.api.VxMapping;\n import org.genxdm.processor.w3c.xs.validation.api.VxValidator;\n@@ -33,156 +31,164 @@ import org.xml.sax.Attributes;\n import org.xml.sax.Locator;\n import org.xml.sax.SAXException;\n \n-\n public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n {\n-\tpublic SAXContentValidatorImpl(final VxValidator<A> kernel)\n-\t{\n-\t\tm_kernel = kernel;\n-\t}\n-\n-\tpublic void characters(final char ch[], final int start, final int length) throws SAXException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.characters(ch, start, length);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void endDocument() throws SAXException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.endDocument();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void endElement(final String uri, final String localName, final String qName) throws SAXException\n-\t{\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.endElement();\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\te.printStackTrace();\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void endPrefixMapping(final String prefix)\n-\t{\n-\t}\n-\n-\tpublic void ignorableWhitespace(final char ch[], final int start, final int length)\n-\t{\n-\t\t// Ignore\n-\t}\n-\n-\tpublic void processingInstruction(final String target, final String data)\n-\t{\n-\t\t// Ignore\n-\t}\n-\n-\tpublic void reset()\n-\t{\n-\t\tm_kernel.reset();\n-\t}\n-\n-\tpublic void setDocumentLocator(final Locator locator)\n-\t{\n-\t\tm_locator = locator;\n-\t}\n-\n-\tpublic void skippedEntity(final String name)\n-\t{\n-\t}\n-\n-\tpublic void startDocument() throws SAXException\n-\t{\n+    public SAXContentValidatorImpl(final VxValidator<A> kernel)\n+    {\n+        m_kernel = kernel;\n+    }\n+\n+    public void characters(final char ch[], final int start, final int length)\n+        throws SAXException\n+    {\n+        try\n+        {\n+            m_kernel.characters(ch, start, length);\n+        }\n+        catch (final Exception e)\n+        {\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void endDocument()\n+        throws SAXException\n+    {\n+        try\n+        {\n+            m_kernel.endDocument();\n+        }\n+        catch (final Exception e)\n+        {\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void endElement(final String uri, final String localName, final String qName)\n+        throws SAXException\n+    {\n+        try\n+        {\n+            m_kernel.endElement();\n+        }\n+        catch (final Exception e)\n+        {\n+            e.printStackTrace();\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void endPrefixMapping(final String prefix)\n+    {\n+\n+\n+    }\n+\n+    public void ignorableWhitespace(final char ch[], final int start, final int length)\n+    {\n+        // Ignore\n+\n+\n+    }\n+\n+    public void processingInstruction(final String target, final String data)\n+    {\n+        // Ignore\n+\n+\n+    }\n+\n+    public void reset()\n+    {\n+        m_kernel.reset();\n+    }\n+\n+    public void setDocumentLocator(final Locator locator)\n+    {\n+        m_locator = locator;\n+    }\n+\n+    public void skippedEntity(final String name)\n+    {\n+\n+\n+    }\n+\n+    public void startDocument()\n+        throws SAXException\n+    {\n //System.out.println(\"Here's a document.\");\n-\t\tfinal URI documentURI;\n-\t\ttry\n-\t\t{\n-\t\t\tdocumentURI = (m_locator != null) ? ((m_locator.getSystemId() != null) ? new URI(m_locator.getSystemId()) : null) : null;\n-\t\t}\n-\t\tcatch (final URISyntaxException e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.startDocument(documentURI);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t}\n-\n-\tpublic void startElement(final String uri, final String localName, final String qName, final Attributes attributes) throws SAXException\n-\t{\n+        final URI documentURI;\n+        try\n+        {\n+            documentURI = (m_locator != null) ? ((m_locator.getSystemId() != null) ? new URI(m_locator.getSystemId()) : null) : null;\n+        }\n+        catch (final URISyntaxException e)\n+        {\n+            throw new SAXException(e);\n+        }\n+        try\n+        {\n+            m_kernel.startDocument(documentURI);\n+        }\n+        catch (final Exception e)\n+        {\n+            throw new SAXException(e);\n+        }\n+    }\n+\n+    public void startElement(final String uri, final String localName, final String qName, final Attributes attributes)\n+        throws SAXException\n+    {\n         // here's an interesting factoid:\n-\t    // if you're dealing with something in the default (global) namespace,\n-\t    // such as the po.xml instance document from the schema primer,\n-\t    // SAX returns empty string for uri and localName, and puts the\n-\t    // name in qName.  this sort of needs to be handled, eh?\n-\t    final String ns = (uri == null) ? \"\" : uri;\n-\t    final String name = ( (localName == null) || (localName.length() == 0)) ? getLocalPart(qName) : localName;\n-\t\tm_attributes.clear();\n-\n-\t\tif ((attributes != null ) && (attributes.getLength() > 0))\n-\t\t{\n-\t\t\tfor (int i = 0; i < attributes.getLength(); i++)\n-\t\t\t{\n-\t\t\t\tfinal String attributeQN = attributes.getQName(i);\n-\n-\t\t\t\tif (isNamespaceAttribute(attributeQN))\n-\t\t\t\t{\n-\t\t\t\t\t// Ignore namespace attributes which are carried by prefix mappings.\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tfinal String attributeNS = attributes.getURI(i);\n-\t\t\t\t\tfinal String attributeLN = attributes.getLocalName(i);\n-\t\t\t\t\tfinal String attributePH = getPrefix(attributeQN);\n-\t\t\t\t\tfinal String attributeSV = attributes.getValue(i);\n-\n-\t\t\t\t\tfinal QName aqName = new QName(attributeNS, attributeLN, attributePH);\n-\n-\t\t\t\t\tm_attributes.add(new VxMapping<QName, String>(aqName, attributeSV));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\ttry\n-\t\t{\n-\t\t\tm_kernel.startElement(new QName(ns, name, getPrefix(qName)), m_namespaces, m_attributes);\n-\t\t}\n-\t\tcatch (final Exception e)\n-\t\t{\n-\t\t\t//e.printStackTrace();\n-\t\t\tthrow new SAXException(e);\n-\t\t}\n-\t\tfinally\n-\t\t{\n-\t\t\tm_namespaces.clear();\n-\t\t\tm_attributes.clear();\n-\t\t}\n-\t}\n-\n-\tpublic void startPrefixMapping(final String prefix, final String uri)\n-\t{\n-\t\tm_namespaces.add(new VxMapping<String, String>(prefix, uri));\n-\t}\n+        // if you're dealing with something in the default (global) namespace,\n+        // such as the po.xml instance document from the schema primer,\n+        // SAX returns empty string for uri and localName, and puts the\n+        // name in qName.  this sort of needs to be handled, eh?\n+        final String ns = (uri == null) ? \"\" : uri;\n+        final String name = ((localName == null) || (localName.length() == 0)) ? getLocalPart(qName) : localName;\n+        m_attributes.clear();\n+        if ( (attributes != null) && (attributes.getLength() > 0))\n+        {\n+            for (int i = 0; i < attributes.getLength() ; i++)\n+            {\n+                final String attributeQN = attributes.getQName(i);\n+                if (isNamespaceAttribute(attributeQN))\n+                {\n+                    // Ignore namespace attributes which are carried by prefix mappings.\n+\n+                }\n+                else\n+                {\n+                    final String attributeNS = attributes.getURI(i);\n+                    final String attributeLN = attributes.getLocalName(i);\n+                    final String attributePH = getPrefix(attributeQN);\n+                    final String attributeSV = attributes.getValue(i);\n+                    final QName aqName = new QName(attributeNS, attributeLN, attributePH);\n+                    m_attributes.add(new VxMapping<QName, String>(aqName, attributeSV));\n+                }\n+            }\n+        }\n+        try\n+        {\n+            m_kernel.startElement(new QName(ns, name, getPrefix(qName)), m_namespaces, m_attributes);\n+        }\n+        catch (final Exception e)\n+        {\n+            //e.printStackTrace();\n+            throw new SAXException(e);\n+        }\n+        finally\n+        {\n+            m_namespaces.clear();\n+            m_attributes.clear();\n+        }\n+    }\n+\n+    public void startPrefixMapping(final String prefix, final String uri)\n+    {\n+        m_namespaces.add(new VxMapping<String, String>(prefix, uri));\n+    }\n \n     @Override\n     public SchemaExceptionHandler getSchemaExceptionHandler()\n@@ -220,7 +226,9 @@ public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n      * @throws IllegalArgumentException\n      *             If the qname is null.\n      */\n-    public static boolean isNamespaceAttribute(final String qname) throws IllegalArgumentException\n+\n+    public static boolean isNamespaceAttribute(final String qname)\n+        throws IllegalArgumentException\n     {\n         PreCondition.assertArgumentNotNull(qname, \"qname\");\n         if (XMLConstants.XMLNS_ATTRIBUTE.equals(qname))\n@@ -240,24 +248,22 @@ public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n             return XMLConstants.DEFAULT_NS_PREFIX;\n         return qualifiedName.substring(0, index);\n     }\n-    \n+\n     private static String getLocalPart(final String qualifiedName)\n     {\n         final int index = qualifiedName.indexOf(':');\n         if (index == -1)\n             return qualifiedName;\n-        return qualifiedName.substring(index+1);\n+        return qualifiedName.substring(index + 1);\n     }\n \n     /**\n      * The standard \"prefix\" for xmlns attributes followed by a colon.\n      */\n-    private static final String XMLNS_COLON = XMLConstants.XMLNS_ATTRIBUTE + \":\";\n \n+    private static final String XMLNS_COLON = XMLConstants.XMLNS_ATTRIBUTE + \":\";\n     private final LinkedList<VxMapping<QName, String>> m_attributes = new LinkedList<VxMapping<QName, String>>();\n     private final VxValidator<A> m_kernel;\n     private Locator m_locator;\n-\n     private final LinkedList<VxMapping<String, String>> m_namespaces = new LinkedList<VxMapping<String, String>>();\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 170
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "40",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/277/SAXContentValidatorImpl.java\nindex a6672027c04..6db10ba4b58 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/random/files-repaired/277/SAXContentValidatorImpl.java\n@@ -36,7 +36,7 @@ import org.xml.sax.SAXException;\n \n public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n {\n-\tpublic SAXContentValidatorImpl(final VxValidator<A> kernel)\n+public SAXContentValidatorImpl(final VxValidator<A> kernel)\n \t{\n \t\tm_kernel = kernel;\n \t}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "40",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/277/SAXContentValidatorImpl.java\nindex a6672027c04..664a3be820f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/violations/277/SAXContentValidatorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/TIBCOSoftware-genxdm/styler/05_predictions/three_grams/files-repaired/277/SAXContentValidatorImpl.java\n@@ -36,7 +36,7 @@ import org.xml.sax.SAXException;\n \n public final class SAXContentValidatorImpl<A> implements SAXValidator<A>\n {\n-\tpublic SAXContentValidatorImpl(final VxValidator<A> kernel)\n+    public SAXContentValidatorImpl(final VxValidator<A> kernel)\n \t{\n \t\tm_kernel = kernel;\n \t}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}