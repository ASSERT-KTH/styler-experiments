{
    "project_name": "neo4j-neo4j",
    "violation_id": "1610",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "141",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1610/ProcessRelationshipCountsDataStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1610/ProcessRelationshipCountsDataStep.java\nindex c05215a80f6..1f7a3dfedfa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/1610/ProcessRelationshipCountsDataStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/1610/ProcessRelationshipCountsDataStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import org.neo4j.common.ProgressReporter;\n@@ -38,14 +39,14 @@ import static java.lang.Math.toIntExact;\n  */\n public class ProcessRelationshipCountsDataStep extends RecordProcessorStep<RelationshipRecord>\n {\n-    public ProcessRelationshipCountsDataStep( StageControl control, NodeLabelsCache cache, Configuration config, int\n-            highLabelId, int highRelationshipTypeId,\n-            CountsAccessor.Updater countsUpdater, NumberArrayFactory cacheFactory,\n-            ProgressReporter progressReporter, PageCacheTracer pageCacheTracer, MemoryTracker memoryTracker )\n+    public ProcessRelationshipCountsDataStep(StageControl control, NodeLabelsCache cache, Configuration config, int\n+      highLabelId, int highRelationshipTypeId,\n+                                             CountsAccessor.Updater countsUpdater, NumberArrayFactory cacheFactory,\n+                                             ProgressReporter progressReporter, PageCacheTracer pageCacheTracer, MemoryTracker memoryTracker)\n     {\n-        super( control, \"COUNT\", config,\n-                () -> new RelationshipCountsProcessor( cache, highLabelId, highRelationshipTypeId, countsUpdater, cacheFactory, memoryTracker ), true,\n-                numberOfProcessors( config, cache, highLabelId, highRelationshipTypeId ), pageCacheTracer );\n+        super(control, \"COUNT\", config,\n+          () -> new RelationshipCountsProcessor(cache, highLabelId, highRelationshipTypeId, countsUpdater, cacheFactory, memoryTracker), true,\n+          numberOfProcessors(config, cache, highLabelId, highRelationshipTypeId), pageCacheTracer);\n     }\n \n     /**\n@@ -53,22 +54,22 @@ public class ProcessRelationshipCountsDataStep extends RecordProcessorStep<Relat\n      * Each processor will allocate such a data structure and so in extreme cases the number of processors will have to\n      * be limited to not surpass the available memory limits.\n      *\n-     * @param config {@link Configuration} holding things like max number of processors and max memory.\n-     * @param cache {@link NodeLabelsCache} which is the only other data structure occupying memory at this point.\n-     * @param highLabelId high label id for this store.\n+     * @param config                 {@link Configuration} holding things like max number of processors and max memory.\n+     * @param cache                  {@link NodeLabelsCache} which is the only other data structure occupying memory at this point.\n+     * @param highLabelId            high label id for this store.\n      * @param highRelationshipTypeId high relationship type id for this store.\n      * @return number of processors suitable for this step. In most cases this will be 0, which is the typical value used\n      * when just allowing the importer to grab up to {@link Configuration#maxNumberOfProcessors()}. The returned value\n      * will at least be 1.\n      */\n-    private static int numberOfProcessors( Configuration config, NodeLabelsCache cache, int highLabelId, int highRelationshipTypeId )\n+    private static int numberOfProcessors(Configuration config, NodeLabelsCache cache, int highLabelId, int highRelationshipTypeId)\n     {\n         GatheringMemoryStatsVisitor memVisitor = new GatheringMemoryStatsVisitor();\n-        cache.acceptMemoryStatsVisitor( memVisitor );\n+        cache.acceptMemoryStatsVisitor(memVisitor);\n \n         long availableMem = config.maxMemoryUsage() - memVisitor.getTotalUsage();\n-        long threadMem = RelationshipCountsProcessor.calculateMemoryUsage( highLabelId, highRelationshipTypeId );\n+        long threadMem = RelationshipCountsProcessor.calculateMemoryUsage(highLabelId, highRelationshipTypeId);\n         long possibleThreads = availableMem / threadMem;\n-        return possibleThreads >= config.maxNumberOfProcessors() ? 0 : toIntExact( max( 1, possibleThreads ) );\n+        return possibleThreads >= config.maxNumberOfProcessors() ? 0 : toIntExact(max(1, possibleThreads));\n     }\n }\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}