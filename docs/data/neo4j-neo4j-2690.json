{
    "project_name": "neo4j-neo4j",
    "violation_id": "2690",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2690/LuceneAllDocumentsReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2690/LuceneAllDocumentsReader.java\nindex 968cbcaa9ba..32e62a312dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2690/LuceneAllDocumentsReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2690/LuceneAllDocumentsReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index;\n \n import org.apache.lucene.document.Document;\n@@ -35,7 +36,7 @@ public class LuceneAllDocumentsReader implements BoundedIterable<Document>\n {\n     private final List<LucenePartitionAllDocumentsReader> partitionReaders;\n \n-    public LuceneAllDocumentsReader( List<LucenePartitionAllDocumentsReader> partitionReaders )\n+    public LuceneAllDocumentsReader(List<LucenePartitionAllDocumentsReader> partitionReaders)\n     {\n         this.partitionReaders = partitionReaders;\n     }\n@@ -43,23 +44,23 @@ public class LuceneAllDocumentsReader implements BoundedIterable<Document>\n     @Override\n     public long maxCount()\n     {\n-        return partitionReaders.stream().mapToLong( LucenePartitionAllDocumentsReader::maxCount ).sum();\n+        return partitionReaders.stream().mapToLong(LucenePartitionAllDocumentsReader::maxCount).sum();\n     }\n \n     @Override\n     public Iterator<Document> iterator()\n     {\n         Iterator<Iterator<Document>> iterators = partitionReaders.stream()\n-                .map( LucenePartitionAllDocumentsReader::iterator )\n-                .collect( toList() )\n-                .iterator();\n+          .map(LucenePartitionAllDocumentsReader::iterator)\n+          .collect(toList())\n+          .iterator();\n \n-        return Iterators.concat( iterators );\n+        return Iterators.concat(iterators);\n     }\n \n     @Override\n     public void close() throws IOException\n     {\n-        IOUtils.closeAll( partitionReaders );\n+        IOUtils.closeAll(partitionReaders);\n     }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}