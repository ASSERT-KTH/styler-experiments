{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "3948",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "49",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "52",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3948/PrimitiveRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3948/PrimitiveRecordCheck.java\nindex 55a842248fd..26b031c8113 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3948/PrimitiveRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/3948/PrimitiveRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import java.util.Arrays;\n@@ -29,55 +30,53 @@ import org.neo4j.kernel.impl.store.record.PrimitiveRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n \n public abstract class PrimitiveRecordCheck\n-        <RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-        implements OwningRecordCheck<RECORD, REPORT>\n+    <RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n+    implements OwningRecordCheck<RECORD, REPORT>\n {\n-    private final RecordField<RECORD, REPORT>[] fields;\n-    private final ComparativeRecordChecker<RECORD, PrimitiveRecord, REPORT> ownerCheck =\n-            ( record, other, engine, records ) ->\n-            {\n-                if ( record.getId() == other.getId() && record.getClass() == other.getClass() )\n-                {\n-                    // Owner identities match. Things are as they should be.\n-                    return;\n-                }\n-\n-                if ( other instanceof NodeRecord )\n-                {\n-                    engine.report().multipleOwners( (NodeRecord) other );\n-                }\n-                else if ( other instanceof RelationshipRecord )\n-                {\n-                    engine.report().multipleOwners( (RelationshipRecord) other );\n-                }\n-                else if ( other instanceof NeoStoreRecord )\n-                {\n-                    engine.report().multipleOwners( (NeoStoreRecord) other );\n-                }\n-            };\n-\n-    @SafeVarargs\n-    PrimitiveRecordCheck( RecordField<RECORD,REPORT>... fields )\n-    {\n-        this.fields = Arrays.copyOf( fields, fields.length );\n-    }\n-\n-    @Override\n-    public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n-    {\n-        if ( !record.inUse() )\n+  private final RecordField<RECORD, REPORT>[] fields;\n+  private final ComparativeRecordChecker<RECORD, PrimitiveRecord, REPORT> ownerCheck =\n+      (record, other, engine, records) ->\n+      {\n+        if (record.getId() == other.getId() && record.getClass() == other.getClass())\n         {\n-            return;\n+          // Owner identities match. Things are as they should be.\n+          return;\n         }\n-        for ( RecordField<RECORD, REPORT> field : fields )\n+\n+        if (other instanceof NodeRecord)\n         {\n-            field.checkConsistency( record, engine, records );\n+          engine.report().multipleOwners((NodeRecord) other);\n+        } else if (other instanceof RelationshipRecord)\n+        {\n+          engine.report().multipleOwners((RelationshipRecord) other);\n+        } else if (other instanceof NeoStoreRecord)\n+        {\n+          engine.report().multipleOwners((NeoStoreRecord) other);\n         }\n-    }\n+      };\n+\n+  @SafeVarargs\n+  PrimitiveRecordCheck(RecordField<RECORD, REPORT>... fields)\n+  {\n+    this.fields = Arrays.copyOf(fields, fields.length);\n+  }\n \n-    @Override\n-    public ComparativeRecordChecker<RECORD,PrimitiveRecord,REPORT> ownerCheck()\n+  @Override\n+  public void check(RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records)\n+  {\n+    if (!record.inUse())\n     {\n-        return ownerCheck;\n+      return;\n     }\n+    for (RecordField<RECORD, REPORT> field : fields)\n+    {\n+      field.checkConsistency(record, engine, records);\n+    }\n+  }\n+\n+  @Override\n+  public ComparativeRecordChecker<RECORD, PrimitiveRecord, REPORT> ownerCheck()\n+  {\n+    return ownerCheck;\n+  }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3948/PrimitiveRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3948/PrimitiveRecordCheck.java\nindex 55a842248fd..ad2c9d9c9ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/3948/PrimitiveRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/3948/PrimitiveRecordCheck.java\n@@ -28,13 +28,10 @@ import org.neo4j.kernel.impl.store.record.NodeRecord;\n import org.neo4j.kernel.impl.store.record.PrimitiveRecord;\n import org.neo4j.kernel.impl.store.record.RelationshipRecord;\n \n-public abstract class PrimitiveRecordCheck\n-        <RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-        implements OwningRecordCheck<RECORD, REPORT>\n+public abstract class PrimitiveRecordCheck<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> implements OwningRecordCheck<RECORD, REPORT>\n {\n     private final RecordField<RECORD, REPORT>[] fields;\n-    private final ComparativeRecordChecker<RECORD, PrimitiveRecord, REPORT> ownerCheck =\n-            ( record, other, engine, records ) ->\n+    private final ComparativeRecordChecker<RECORD, PrimitiveRecord, REPORT> ownerCheck = ( record, other, engine, records ) ->\n             {\n                 if ( record.getId() == other.getId() && record.getClass() == other.getClass() )\n                 {\n@@ -56,20 +53,20 @@ public abstract class PrimitiveRecordCheck\n                 }\n             };\n \n-    @SafeVarargs\n+@SafeVarargs\n     PrimitiveRecordCheck( RecordField<RECORD,REPORT>... fields )\n     {\n         this.fields = Arrays.copyOf( fields, fields.length );\n     }\n \n     @Override\n-    public void check( RECORD record, CheckerEngine<RECORD, REPORT> engine, RecordAccess records )\n+    public void check( RECORD record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n     {\n         if ( !record.inUse() )\n         {\n             return;\n         }\n-        for ( RecordField<RECORD, REPORT> field : fields )\n+        for ( RecordField<RECORD,REPORT> field : fields )\n         {\n             field.checkConsistency( record, engine, records );\n         }\n@@ -80,4 +77,4 @@ public abstract class PrimitiveRecordCheck\n     {\n         return ownerCheck;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}