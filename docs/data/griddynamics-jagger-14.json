{
    "project_name": "griddynamics-jagger",
    "violation_id": "14",
    "information": {
        "violations": [
            {
                "line": "38",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 183).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private final Service service;\n\n    public ListenableService(Service delegate, ExecutorService executor, String sessionId, String taskId, T task, DistributionListener listener, Map<NodeId, RemoteExecutor> remotes) {\n        this.executor = executor;\n        this.sessionId = sessionId;\n        this.taskId = taskId;",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'listener' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/griddynamics-jagger/styler/05_predictions/final/files-repaired/14/ListenableService.java\nindex fa023724a6a..6ccdc6e29ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/griddynamics-jagger/styler/05_predictions/final/files-repaired/14/ListenableService.java\n@@ -35,8 +35,9 @@ public class ListenableService<T extends Task> implements Service {\n     private final Map<NodeId, RemoteExecutor> remotes;\n     private final Service service;\n \n-    public ListenableService(Service delegate, ExecutorService executor, String sessionId, String taskId, T task, DistributionListener listener, Map<NodeId, RemoteExecutor> remotes) {\n-        this.executor = executor;\n+    public ListenableService(Service delegate, ExecutorService executor, String sessionId, String taskId, T task, DistributionListener\n+        listener, Map<NodeId, RemoteExecutor> remotes) {\n+         this.executor = executor;\n         this.sessionId = sessionId;\n         this.taskId = taskId;\n         this.task = task;\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/14/ListenableService.java\nindex fa023724a6a..42111ab19a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/checkstyle_idea/14/ListenableService.java\n@@ -35,7 +35,8 @@ public class ListenableService<T extends Task> implements Service {\n     private final Map<NodeId, RemoteExecutor> remotes;\n     private final Service service;\n \n-    public ListenableService(Service delegate, ExecutorService executor, String sessionId, String taskId, T task, DistributionListener listener, Map<NodeId, RemoteExecutor> remotes) {\n+    public ListenableService(Service delegate, ExecutorService executor, String sessionId, String taskId, T task, DistributionListener listener,\n+                             Map<NodeId, RemoteExecutor> remotes) {\n         this.executor = executor;\n         this.sessionId = sessionId;\n         this.taskId = taskId;\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "38",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/14/ListenableService.java\nindex fa023724a6a..6bf37731abc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/naturalize/14/ListenableService.java\n@@ -54,9 +54,7 @@ public class ListenableService<T extends Task> implements Service {\n                 return Nothing.INSTANCE;\n             }\n         }));\n-\n-\n-        return Futures.transform(runListener, new AsyncFunction<Nothing, State>() {\n+return Futures.transform(runListener, new AsyncFunction<Nothing, State>() {\n             @Override\n             public ListenableFuture<State> apply(Nothing input) {\n                 return doStart();\n@@ -151,4 +149,4 @@ public class ListenableService<T extends Task> implements Service {\n     public void addListener(Listener listener, Executor executor) {\n         service.addListener(listener, executor);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 89, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 93, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 93, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 89, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 85, expected level should be one of the following: 8, 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 19, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 23, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 19, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 15, expected level should be one of the following: 8, 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 19, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 23, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 23, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 23, expected level should be one of the following: 16, 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 19, expected level should be one of the following: 12, 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 15, expected level should be one of the following: 8, 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/14/ListenableService.java\nindex fa023724a6a..6d428ae481a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/codebuff/14/ListenableService.java\n@@ -10,7 +10,6 @@ import com.griddynamics.jagger.coordinator.NodeId;\n import com.griddynamics.jagger.coordinator.RemoteExecutor;\n import com.griddynamics.jagger.master.configuration.Task;\n import com.griddynamics.jagger.util.Nothing;\n-\n import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Executor;\n@@ -25,6 +24,8 @@ import java.util.concurrent.TimeoutException;\n  * Time: 12:57 PM\n  * To change this template use File | Settings | File Templates.\n  */\n+\n+\n public class ListenableService<T extends Task> implements Service {\n \n     private final ExecutorService executor;\n@@ -46,22 +47,19 @@ public class ListenableService<T extends Task> implements Service {\n     }\n \n     public ListenableFuture<State> start() {\n-\n         ListenableFuture<Nothing> runListener = JdkFutureAdapters.listenInPoolThread(executor.submit(new Callable<Nothing>() {\n-            @Override\n-            public Nothing call() {\n-                listener.onDistributionStarted(sessionId, taskId, task, remotes.keySet());\n-                return Nothing.INSTANCE;\n-            }\n-        }));\n-\n-\n+                                                                                         @Override\n+                                                                                         public Nothing call() {\n+                                                                                             listener.onDistributionStarted(sessionId, taskId, task, remotes.keySet());\n+                                                                                             return Nothing.INSTANCE;\n+                                                                                         }\n+                                                                                     }));\n         return Futures.transform(runListener, new AsyncFunction<Nothing, State>() {\n-            @Override\n-            public ListenableFuture<State> apply(Nothing input) {\n-                return doStart();\n-            }\n-        });\n+                   @Override\n+                   public ListenableFuture<State> apply(Nothing input) {\n+                       return doStart();\n+                   }\n+               });\n     }\n \n     @Override\n@@ -84,32 +82,29 @@ public class ListenableService<T extends Task> implements Service {\n         return service.state();\n     }\n \n-\n     private ListenableFuture<State> doStart() {\n         return service.start();\n     }\n \n     public ListenableFuture<State> stop() {\n         ListenableFuture<State> stop = service.stop();\n-\n         return Futures.transform(stop, new AsyncFunction<State, State>() {\n-            @Override\n-            public ListenableFuture<State> apply(final State input) {\n-\n-                final SettableFuture<State> result = SettableFuture.create();\n-                executor.execute(new Runnable() {\n-                    @Override\n-                    public void run() {\n-                        try {\n-                            listener.onTaskDistributionCompleted(sessionId, taskId, task);\n-                        } finally {\n-                            result.set(input);\n-                        }\n-                    }\n-                });\n-                return result;\n-            }\n-        });\n+                   @Override\n+                   public ListenableFuture<State> apply(final State input) {\n+                       final SettableFuture<State> result = SettableFuture.create();\n+                       executor.execute(new Runnable() {\n+                           @Override\n+                           public void run() {\n+                               try {\n+                                   listener.onTaskDistributionCompleted(sessionId, taskId, task);\n+                               } finally {\n+                                   result.set(input);\n+                               }\n+                           }\n+                       });\n+                       return result;\n+                   }\n+               });\n     }\n \n     @Override\n@@ -151,4 +146,4 @@ public class ListenableService<T extends Task> implements Service {\n     public void addListener(Listener listener, Executor executor) {\n         service.addListener(listener, executor);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "'listener' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'ctor def' child has incorrect indentation level 9, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/14/ListenableService.java\nindex fa023724a6a..6ccdc6e29ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/violations/14/ListenableService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/griddynamics-jagger/styler/05_predictions/three_grams/files-repaired/14/ListenableService.java\n@@ -35,8 +35,9 @@ public class ListenableService<T extends Task> implements Service {\n     private final Map<NodeId, RemoteExecutor> remotes;\n     private final Service service;\n \n-    public ListenableService(Service delegate, ExecutorService executor, String sessionId, String taskId, T task, DistributionListener listener, Map<NodeId, RemoteExecutor> remotes) {\n-        this.executor = executor;\n+    public ListenableService(Service delegate, ExecutorService executor, String sessionId, String taskId, T task, DistributionListener\n+        listener, Map<NodeId, RemoteExecutor> remotes) {\n+         this.executor = executor;\n         this.sessionId = sessionId;\n         this.taskId = taskId;\n         this.task = task;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}