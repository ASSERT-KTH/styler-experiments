{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "1898",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "118",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "290",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "298",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1898/CountsBuilderDecorator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1898/CountsBuilderDecorator.java\nindex 6b0ab8d71b0..dab64e8017e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1898/CountsBuilderDecorator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1898/CountsBuilderDecorator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.Set;\n@@ -58,309 +59,309 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n \n class CountsBuilderDecorator extends CheckDecorator.Adapter\n {\n-    private static final int WILDCARD = -1;\n-    private final MultiSet<CountsKey> nodeCounts = new MultiSet<>();\n-    private final MultiSet<CountsKey> relationshipCounts = new MultiSet<>();\n-    private final MultiPassAvoidanceCondition<NodeRecord> nodeCountBuildCondition;\n-    private final MultiPassAvoidanceCondition<RelationshipRecord> relationshipCountBuildCondition;\n-    private final NodeStore nodeStore;\n-    private final StoreAccess storeAccess;\n-    private final CountsEntry.CheckAdapter CHECK_NODE_COUNT = new CountsEntry.CheckAdapter()\n-    {\n-        @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n-                           RecordAccess records )\n-        {\n-            final long expectedCount = nodeCounts.count( record.getCountsKey() );\n-            if ( expectedCount != record.getCount() )\n-            {\n-                engine.report().inconsistentNodeCount( expectedCount );\n-            }\n-        }\n-    };\n-    private final CountsEntry.CheckAdapter CHECK_RELATIONSHIP_COUNT = new CountsEntry.CheckAdapter()\n-    {\n-        @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n-                           RecordAccess records )\n-        {\n-            final long expectedCount = relationshipCounts.count( record.getCountsKey() );\n-            if ( expectedCount != record.getCount() )\n-            {\n-                engine.report().inconsistentRelationshipCount( expectedCount );\n-            }\n-        }\n-    };\n-    private final CountsEntry.CheckAdapter CHECK_NODE_KEY_COUNT = new CountsEntry.CheckAdapter()\n-    {\n-        @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n-                           RecordAccess records )\n-        {\n-            final int expectedCount = nodeCounts.uniqueSize();\n-            if ( record.getCount() != expectedCount )\n-            {\n-                engine.report().inconsistentNumberOfNodeKeys( expectedCount );\n-            }\n-        }\n-    };\n-    private final CountsEntry.CheckAdapter CHECK_RELATIONSHIP_KEY_COUNT = new CountsEntry.CheckAdapter()\n-    {\n-        @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n-                           RecordAccess records )\n-        {\n-            final int expectedCount = relationshipCounts.uniqueSize();\n-            if ( record.getCount() != expectedCount )\n-            {\n-                engine.report().inconsistentNumberOfRelationshipKeys( expectedCount );\n-            }\n-        }\n-    };\n-\n-    CountsBuilderDecorator( StoreAccess storeAccess )\n+  private static final int WILDCARD = -1;\n+  private final MultiSet<CountsKey> nodeCounts = new MultiSet<>();\n+  private final MultiSet<CountsKey> relationshipCounts = new MultiSet<>();\n+  private final MultiPassAvoidanceCondition<NodeRecord> nodeCountBuildCondition;\n+  private final MultiPassAvoidanceCondition<RelationshipRecord> relationshipCountBuildCondition;\n+  private final NodeStore nodeStore;\n+  private final StoreAccess storeAccess;\n+  private final CountsEntry.CheckAdapter CHECK_NODE_COUNT = new CountsEntry.CheckAdapter()\n+  {\n+    @Override\n+    public void check(CountsEntry record,\n+                      CheckerEngine<CountsEntry, ConsistencyReport.CountsConsistencyReport> engine,\n+                      RecordAccess records)\n     {\n-        this.storeAccess = storeAccess;\n-        this.nodeStore = storeAccess.getRawNeoStores().getNodeStore();\n-        this.nodeCountBuildCondition = new MultiPassAvoidanceCondition<>( 0 );\n-        this.relationshipCountBuildCondition = new MultiPassAvoidanceCondition<>( 1 );\n+      final long expectedCount = nodeCounts.count(record.getCountsKey());\n+      if (expectedCount != record.getCount())\n+      {\n+        engine.report().inconsistentNodeCount(expectedCount);\n+      }\n     }\n-\n+  };\n+  private final CountsEntry.CheckAdapter CHECK_RELATIONSHIP_COUNT = new CountsEntry.CheckAdapter()\n+  {\n     @Override\n-    public void prepare()\n+    public void check(CountsEntry record,\n+                      CheckerEngine<CountsEntry, ConsistencyReport.CountsConsistencyReport> engine,\n+                      RecordAccess records)\n     {\n-        this.nodeCountBuildCondition.prepare();\n-        this.relationshipCountBuildCondition.prepare();\n+      final long expectedCount = relationshipCounts.count(record.getCountsKey());\n+      if (expectedCount != record.getCount())\n+      {\n+        engine.report().inconsistentRelationshipCount(expectedCount);\n+      }\n     }\n-\n+  };\n+  private final CountsEntry.CheckAdapter CHECK_NODE_KEY_COUNT = new CountsEntry.CheckAdapter()\n+  {\n     @Override\n-    public OwningRecordCheck<NodeRecord,NodeConsistencyReport> decorateNodeChecker(\n-            OwningRecordCheck<NodeRecord,NodeConsistencyReport> checker )\n+    public void check(CountsEntry record,\n+                      CheckerEngine<CountsEntry, ConsistencyReport.CountsConsistencyReport> engine,\n+                      RecordAccess records)\n     {\n-        return new NodeCounts( nodeStore, nodeCounts, nodeCountBuildCondition, checker );\n+      final int expectedCount = nodeCounts.uniqueSize();\n+      if (record.getCount() != expectedCount)\n+      {\n+        engine.report().inconsistentNumberOfNodeKeys(expectedCount);\n+      }\n     }\n-\n+  };\n+  private final CountsEntry.CheckAdapter CHECK_RELATIONSHIP_KEY_COUNT = new CountsEntry.CheckAdapter()\n+  {\n     @Override\n-    public OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> decorateRelationshipChecker(\n-            OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> checker )\n+    public void check(CountsEntry record,\n+                      CheckerEngine<CountsEntry, ConsistencyReport.CountsConsistencyReport> engine,\n+                      RecordAccess records)\n     {\n-        return new RelationshipCounts( storeAccess, relationshipCounts, relationshipCountBuildCondition, checker );\n+      final int expectedCount = relationshipCounts.uniqueSize();\n+      if (record.getCount() != expectedCount)\n+      {\n+        engine.report().inconsistentNumberOfRelationshipKeys(expectedCount);\n+      }\n     }\n+  };\n+\n+  CountsBuilderDecorator(StoreAccess storeAccess)\n+  {\n+    this.storeAccess = storeAccess;\n+    this.nodeStore = storeAccess.getRawNeoStores().getNodeStore();\n+    this.nodeCountBuildCondition = new MultiPassAvoidanceCondition<>(0);\n+    this.relationshipCountBuildCondition = new MultiPassAvoidanceCondition<>(1);\n+  }\n+\n+  @Override\n+  public void prepare()\n+  {\n+    this.nodeCountBuildCondition.prepare();\n+    this.relationshipCountBuildCondition.prepare();\n+  }\n+\n+  @Override\n+  public OwningRecordCheck<NodeRecord, NodeConsistencyReport> decorateNodeChecker(\n+      OwningRecordCheck<NodeRecord, NodeConsistencyReport> checker)\n+  {\n+    return new NodeCounts(nodeStore, nodeCounts, nodeCountBuildCondition, checker);\n+  }\n+\n+  @Override\n+  public OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> decorateRelationshipChecker(\n+      OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> checker)\n+  {\n+    return new RelationshipCounts(storeAccess, relationshipCounts, relationshipCountBuildCondition, checker);\n+  }\n \n-    public void checkCounts( CountsAccessor counts, final ConsistencyReporter reporter,\n-            ProgressMonitorFactory progressFactory )\n+  public void checkCounts(CountsAccessor counts, final ConsistencyReporter reporter,\n+                          ProgressMonitorFactory progressFactory)\n+  {\n+    final int nodes = nodeCounts.uniqueSize();\n+    final int relationships = relationshipCounts.uniqueSize();\n+    final int total = nodes + relationships;\n+    final AtomicInteger nodeEntries = new AtomicInteger(0);\n+    final AtomicInteger relationshipEntries = new AtomicInteger(0);\n+    final ProgressListener listener = progressFactory.singlePart(\"Checking node and relationship counts\", total);\n+    listener.started();\n+    counts.accept(new CountsVisitor.Adapter()\n     {\n-        final int nodes = nodeCounts.uniqueSize();\n-        final int relationships = relationshipCounts.uniqueSize();\n-        final int total = nodes + relationships;\n-        final AtomicInteger nodeEntries = new AtomicInteger( 0 );\n-        final AtomicInteger relationshipEntries = new AtomicInteger( 0 );\n-        final ProgressListener listener = progressFactory.singlePart( \"Checking node and relationship counts\", total );\n-        listener.started();\n-        counts.accept( new CountsVisitor.Adapter()\n-        {\n-            @Override\n-            public void visitNodeCount( int labelId, long count )\n-            {\n-                nodeEntries.incrementAndGet();\n-                reporter.forCounts( new CountsEntry( nodeKey( labelId ), count ), CHECK_NODE_COUNT );\n-                listener.add( 1 );\n-            }\n+      @Override\n+      public void visitNodeCount(int labelId, long count)\n+      {\n+        nodeEntries.incrementAndGet();\n+        reporter.forCounts(new CountsEntry(nodeKey(labelId), count), CHECK_NODE_COUNT);\n+        listener.add(1);\n+      }\n \n-            @Override\n-            public void visitRelationshipCount( int startLabelId, int relTypeId, int endLabelId, long count )\n-            {\n-                relationshipEntries.incrementAndGet();\n-                reporter.forCounts(\n-                        new CountsEntry( relationshipKey( startLabelId, relTypeId, endLabelId ), count ),\n-                        CHECK_RELATIONSHIP_COUNT );\n-                listener.add( 1 );\n-            }\n-        } );\n+      @Override\n+      public void visitRelationshipCount(int startLabelId, int relTypeId, int endLabelId, long count)\n+      {\n+        relationshipEntries.incrementAndGet();\n         reporter.forCounts(\n-                new CountsEntry( nodeKey( WILDCARD ), nodeEntries.get() ), CHECK_NODE_KEY_COUNT );\n-        reporter.forCounts(\n-                new CountsEntry( relationshipKey( WILDCARD, WILDCARD, WILDCARD ),\n-                        relationshipEntries.get() ), CHECK_RELATIONSHIP_KEY_COUNT );\n-        listener.done();\n-    }\n+            new CountsEntry(relationshipKey(startLabelId, relTypeId, endLabelId), count),\n+            CHECK_RELATIONSHIP_COUNT);\n+        listener.add(1);\n+      }\n+    });\n+    reporter.forCounts(\n+        new CountsEntry(nodeKey(WILDCARD), nodeEntries.get()), CHECK_NODE_KEY_COUNT);\n+    reporter.forCounts(\n+        new CountsEntry(relationshipKey(WILDCARD, WILDCARD, WILDCARD),\n+            relationshipEntries.get()), CHECK_RELATIONSHIP_KEY_COUNT);\n+    listener.done();\n+  }\n \n-    private static class NodeCounts implements OwningRecordCheck<NodeRecord,NodeConsistencyReport>\n-    {\n-        private final RecordStore<NodeRecord> nodeStore;\n-        private final MultiSet<CountsKey> counts;\n-        private final Predicate<NodeRecord> countUpdateCondition;\n-        private final OwningRecordCheck<NodeRecord,NodeConsistencyReport> inner;\n+  private static class NodeCounts implements OwningRecordCheck<NodeRecord, NodeConsistencyReport>\n+  {\n+    private final RecordStore<NodeRecord> nodeStore;\n+    private final MultiSet<CountsKey> counts;\n+    private final Predicate<NodeRecord> countUpdateCondition;\n+    private final OwningRecordCheck<NodeRecord, NodeConsistencyReport> inner;\n \n-        NodeCounts( RecordStore<NodeRecord> nodeStore, MultiSet<CountsKey> counts,\n-                Predicate<NodeRecord> countUpdateCondition, OwningRecordCheck<NodeRecord,NodeConsistencyReport> inner )\n-        {\n-            this.nodeStore = nodeStore;\n-            this.counts = counts;\n-            this.countUpdateCondition = countUpdateCondition;\n-            this.inner = inner;\n-        }\n+    NodeCounts(RecordStore<NodeRecord> nodeStore, MultiSet<CountsKey> counts,\n+               Predicate<NodeRecord> countUpdateCondition, OwningRecordCheck<NodeRecord, NodeConsistencyReport> inner)\n+    {\n+      this.nodeStore = nodeStore;\n+      this.counts = counts;\n+      this.countUpdateCondition = countUpdateCondition;\n+      this.inner = inner;\n+    }\n \n-        @Override\n-        public ComparativeRecordChecker<NodeRecord,PrimitiveRecord,NodeConsistencyReport> ownerCheck()\n-        {\n-            return inner.ownerCheck();\n-        }\n+    @Override\n+    public ComparativeRecordChecker<NodeRecord, PrimitiveRecord, NodeConsistencyReport> ownerCheck()\n+    {\n+      return inner.ownerCheck();\n+    }\n \n-        @Override\n-        public void check( NodeRecord record,\n-                           CheckerEngine<NodeRecord,NodeConsistencyReport> engine,\n-                           RecordAccess records )\n+    @Override\n+    public void check(NodeRecord record,\n+                      CheckerEngine<NodeRecord, NodeConsistencyReport> engine,\n+                      RecordAccess records)\n+    {\n+      if (countUpdateCondition.test(record))\n+      {\n+        if (record.inUse())\n         {\n-            if ( countUpdateCondition.test( record ) )\n+          CacheAccess.Client client = records.cacheAccess().client();\n+          client.putToCacheSingle(record.getId(), SLOT_IN_USE, 1);\n+          client.putToCacheSingle(record.getId(), SLOT_LABEL_FIELD, record.getLabelField());\n+          final Set<Long> labels = labelsFor(nodeStore, engine, records, record.getId());\n+          synchronized (counts)\n+          {\n+            counts.add(nodeKey(WILDCARD));\n+            for (long label : labels)\n             {\n-                if ( record.inUse() )\n-                {\n-                    CacheAccess.Client client = records.cacheAccess().client();\n-                    client.putToCacheSingle( record.getId(), SLOT_IN_USE, 1 );\n-                    client.putToCacheSingle( record.getId(), SLOT_LABEL_FIELD, record.getLabelField() );\n-                    final Set<Long> labels = labelsFor( nodeStore, engine, records, record.getId() );\n-                    synchronized ( counts )\n-                    {\n-                        counts.add( nodeKey( WILDCARD ) );\n-                        for ( long label : labels )\n-                        {\n-                            counts.add( nodeKey( (int) label ) );\n-                        }\n-                    }\n-                }\n+              counts.add(nodeKey((int) label));\n             }\n-            inner.check( record, engine, records );\n+          }\n         }\n+      }\n+      inner.check(record, engine, records);\n     }\n+  }\n \n-    private static class RelationshipCounts implements OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport>\n-    {\n-        /** Don't support these counts at the moment so don't compute them */\n-        private static final boolean COMPUTE_DOUBLE_SIDED_RELATIONSHIP_COUNTS = false;\n-        private final NodeStore nodeStore;\n-        private final MultiSet<CountsKey> counts;\n-        private final Predicate<RelationshipRecord> countUpdateCondition;\n-        private final OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> inner;\n+  private static class RelationshipCounts implements OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport>\n+  {\n+    /**\n+     * Don't support these counts at the moment so don't compute them\n+     */\n+    private static final boolean COMPUTE_DOUBLE_SIDED_RELATIONSHIP_COUNTS = false;\n+    private final NodeStore nodeStore;\n+    private final MultiSet<CountsKey> counts;\n+    private final Predicate<RelationshipRecord> countUpdateCondition;\n+    private final OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> inner;\n \n-        RelationshipCounts( StoreAccess storeAccess, MultiSet<CountsKey> counts,\n-                Predicate<RelationshipRecord> countUpdateCondition,\n-                OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> inner )\n-        {\n-            this.nodeStore = storeAccess.getRawNeoStores().getNodeStore();\n-            this.counts = counts;\n-            this.countUpdateCondition = countUpdateCondition;\n-            this.inner = inner;\n-        }\n+    RelationshipCounts(StoreAccess storeAccess, MultiSet<CountsKey> counts,\n+                       Predicate<RelationshipRecord> countUpdateCondition,\n+                       OwningRecordCheck<RelationshipRecord, RelationshipConsistencyReport> inner)\n+    {\n+      this.nodeStore = storeAccess.getRawNeoStores().getNodeStore();\n+      this.counts = counts;\n+      this.countUpdateCondition = countUpdateCondition;\n+      this.inner = inner;\n+    }\n \n-        @Override\n-        public ComparativeRecordChecker<RelationshipRecord,PrimitiveRecord,RelationshipConsistencyReport> ownerCheck()\n-        {\n-            return inner.ownerCheck();\n-        }\n+    @Override\n+    public ComparativeRecordChecker<RelationshipRecord, PrimitiveRecord, RelationshipConsistencyReport> ownerCheck()\n+    {\n+      return inner.ownerCheck();\n+    }\n \n-        @Override\n-        public void check( RelationshipRecord record,\n-                           CheckerEngine<RelationshipRecord,RelationshipConsistencyReport> engine,\n-                           RecordAccess records )\n+    @Override\n+    public void check(RelationshipRecord record,\n+                      CheckerEngine<RelationshipRecord, RelationshipConsistencyReport> engine,\n+                      RecordAccess records)\n+    {\n+      if (countUpdateCondition.test(record))\n+      {\n+        if (record.inUse())\n         {\n-            if ( countUpdateCondition.test( record ) )\n+          CacheAccess.Client cacheAccess = records.cacheAccess().client();\n+          Set<Long> firstNodeLabels;\n+          Set<Long> secondNodeLabels;\n+          long firstLabelsField = cacheAccess.getFromCache(record.getFirstNode(), SLOT_LABEL_FIELD);\n+          if (NodeLabelsField.fieldPointsToDynamicRecordOfLabels(firstLabelsField))\n+          {\n+            firstNodeLabels = labelsFor(nodeStore, engine, records, record.getFirstNode());\n+          } else\n+          {\n+            firstNodeLabels = NodeLabelReader.getListOfLabels(firstLabelsField);\n+          }\n+          long secondLabelsField = cacheAccess.getFromCache(record.getSecondNode(), SLOT_LABEL_FIELD);\n+          if (NodeLabelsField.fieldPointsToDynamicRecordOfLabels(secondLabelsField))\n+          {\n+            secondNodeLabels = labelsFor(nodeStore, engine, records, record.getSecondNode());\n+          } else\n+          {\n+            secondNodeLabels = NodeLabelReader.getListOfLabels(secondLabelsField);\n+          }\n+          final int type = record.getType();\n+          synchronized (counts)\n+          {\n+            counts.add(relationshipKey(WILDCARD, WILDCARD, WILDCARD));\n+            counts.add(relationshipKey(WILDCARD, type, WILDCARD));\n+            if (firstNodeLabels != null)\n             {\n-                if ( record.inUse() )\n+              for (long firstLabel : firstNodeLabels)\n+              {\n+                counts.add(relationshipKey((int) firstLabel, WILDCARD, WILDCARD));\n+                counts.add(relationshipKey((int) firstLabel, type, WILDCARD));\n+              }\n+            }\n+            if (secondNodeLabels != null)\n+            {\n+              for (long secondLabel : secondNodeLabels)\n+              {\n+                counts.add(relationshipKey(WILDCARD, WILDCARD, (int) secondLabel));\n+                counts.add(relationshipKey(WILDCARD, type, (int) secondLabel));\n+              }\n+            }\n+            if (COMPUTE_DOUBLE_SIDED_RELATIONSHIP_COUNTS)\n+            {\n+              for (long firstLabel : firstNodeLabels)\n+              {\n+                for (long secondLabel : secondNodeLabels)\n                 {\n-                    CacheAccess.Client cacheAccess = records.cacheAccess().client();\n-                    Set<Long> firstNodeLabels;\n-                    Set<Long> secondNodeLabels;\n-                    long firstLabelsField = cacheAccess.getFromCache( record.getFirstNode(), SLOT_LABEL_FIELD );\n-                    if ( NodeLabelsField.fieldPointsToDynamicRecordOfLabels( firstLabelsField ) )\n-                    {\n-                        firstNodeLabels = labelsFor( nodeStore, engine, records, record.getFirstNode() );\n-                    }\n-                    else\n-                    {\n-                        firstNodeLabels = NodeLabelReader.getListOfLabels( firstLabelsField );\n-                    }\n-                    long secondLabelsField = cacheAccess.getFromCache( record.getSecondNode(), SLOT_LABEL_FIELD );\n-                    if ( NodeLabelsField.fieldPointsToDynamicRecordOfLabels( secondLabelsField ) )\n-                    {\n-                        secondNodeLabels = labelsFor( nodeStore, engine, records, record.getSecondNode() );\n-                    }\n-                    else\n-                    {\n-                        secondNodeLabels = NodeLabelReader.getListOfLabels( secondLabelsField );\n-                    }\n-                    final int type = record.getType();\n-                    synchronized ( counts )\n-                    {\n-                        counts.add( relationshipKey( WILDCARD, WILDCARD, WILDCARD ) );\n-                        counts.add( relationshipKey( WILDCARD, type, WILDCARD ) );\n-                        if ( firstNodeLabels != null )\n-                        {\n-                            for ( long firstLabel : firstNodeLabels )\n-                            {\n-                                counts.add( relationshipKey( (int) firstLabel, WILDCARD, WILDCARD ) );\n-                                counts.add( relationshipKey( (int) firstLabel, type, WILDCARD ) );\n-                            }\n-                        }\n-                        if ( secondNodeLabels != null )\n-                        {\n-                            for ( long secondLabel : secondNodeLabels )\n-                            {\n-                                counts.add( relationshipKey( WILDCARD, WILDCARD, (int) secondLabel ) );\n-                                counts.add( relationshipKey( WILDCARD, type, (int) secondLabel ) );\n-                            }\n-                        }\n-                        if ( COMPUTE_DOUBLE_SIDED_RELATIONSHIP_COUNTS )\n-                        {\n-                            for ( long firstLabel : firstNodeLabels )\n-                            {\n-                                for ( long secondLabel : secondNodeLabels )\n-                                {\n-                                    counts.add( relationshipKey( (int) firstLabel, WILDCARD, (int) secondLabel ) );\n-                                    counts.add( relationshipKey( (int) firstLabel, type, (int) secondLabel ) );\n-                                }\n-                            }\n-                        }\n-                    }\n+                  counts.add(relationshipKey((int) firstLabel, WILDCARD, (int) secondLabel));\n+                  counts.add(relationshipKey((int) firstLabel, type, (int) secondLabel));\n                 }\n+              }\n             }\n-            inner.check( record, engine, records );\n+          }\n         }\n+      }\n+      inner.check(record, engine, records);\n     }\n+  }\n \n-    private static class MultiPassAvoidanceCondition<T extends AbstractBaseRecord> implements Predicate<T>\n-    {\n-        // Stage which this condition is active, starting from 0, mimicing the CheckStage ordinal\n-        private final int activeStage;\n-        // The same thread updates this every time, the TaskExecutor. Other threads read it\n-        private volatile int stage = -1;\n-\n-        MultiPassAvoidanceCondition( int activeStage )\n-        {\n-            this.activeStage = activeStage;\n-        }\n+  private static class MultiPassAvoidanceCondition<T extends AbstractBaseRecord> implements Predicate<T>\n+  {\n+    // Stage which this condition is active, starting from 0, mimicing the CheckStage ordinal\n+    private final int activeStage;\n+    // The same thread updates this every time, the TaskExecutor. Other threads read it\n+    private volatile int stage = -1;\n \n-        public void prepare()\n-        {\n-            stage++;\n-        }\n+    MultiPassAvoidanceCondition(int activeStage)\n+    {\n+      this.activeStage = activeStage;\n+    }\n \n-        @Override\n-        public boolean test( T record )\n-        {\n-            return stage == activeStage;\n-        }\n+    public void prepare()\n+    {\n+      stage++;\n     }\n \n-    private static Set<Long> labelsFor( RecordStore<NodeRecord> nodeStore,\n-                                        CheckerEngine<? extends AbstractBaseRecord,? extends ConsistencyReport> engine,\n-                                        RecordAccess recordAccess,\n-                                        long nodeId )\n+    @Override\n+    public boolean test(T record)\n     {\n-        return getListOfLabels( nodeStore.getRecord( nodeId, nodeStore.newRecord(), FORCE ), recordAccess, engine );\n+      return stage == activeStage;\n     }\n+  }\n+\n+  private static Set<Long> labelsFor(RecordStore<NodeRecord> nodeStore,\n+                                     CheckerEngine<? extends AbstractBaseRecord, ? extends ConsistencyReport> engine,\n+                                     RecordAccess recordAccess,\n+                                     long nodeId)\n+  {\n+    return getListOfLabels(nodeStore.getRecord(nodeId, nodeStore.newRecord(), FORCE), recordAccess, engine);\n+  }\n }\n",
            "diff_size": 406
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "143",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 186).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "95",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "91",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1898/CountsBuilderDecorator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1898/CountsBuilderDecorator.java\nindex 6b0ab8d71b0..9a48d2655cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1898/CountsBuilderDecorator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1898/CountsBuilderDecorator.java\n@@ -68,10 +68,9 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n     private final CountsEntry.CheckAdapter CHECK_NODE_COUNT = new CountsEntry.CheckAdapter()\n     {\n         @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n+        public void check( CountsEntry record, CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n                            RecordAccess records )\n-        {\n+{\n             final long expectedCount = nodeCounts.count( record.getCountsKey() );\n             if ( expectedCount != record.getCount() )\n             {\n@@ -82,10 +81,9 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n     private final CountsEntry.CheckAdapter CHECK_RELATIONSHIP_COUNT = new CountsEntry.CheckAdapter()\n     {\n         @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n+        public void check( CountsEntry record, CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n                            RecordAccess records )\n-        {\n+{\n             final long expectedCount = relationshipCounts.count( record.getCountsKey() );\n             if ( expectedCount != record.getCount() )\n             {\n@@ -96,10 +94,9 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n     private final CountsEntry.CheckAdapter CHECK_NODE_KEY_COUNT = new CountsEntry.CheckAdapter()\n     {\n         @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n+        public void check( CountsEntry record, CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n                            RecordAccess records )\n-        {\n+{\n             final int expectedCount = nodeCounts.uniqueSize();\n             if ( record.getCount() != expectedCount )\n             {\n@@ -110,10 +107,9 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n     private final CountsEntry.CheckAdapter CHECK_RELATIONSHIP_KEY_COUNT = new CountsEntry.CheckAdapter()\n     {\n         @Override\n-        public void check( CountsEntry record,\n-                           CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n+        public void check( CountsEntry record, CheckerEngine<CountsEntry,ConsistencyReport.CountsConsistencyReport> engine,\n                            RecordAccess records )\n-        {\n+{\n             final int expectedCount = relationshipCounts.uniqueSize();\n             if ( record.getCount() != expectedCount )\n             {\n@@ -138,15 +134,13 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n     }\n \n     @Override\n-    public OwningRecordCheck<NodeRecord,NodeConsistencyReport> decorateNodeChecker(\n-            OwningRecordCheck<NodeRecord,NodeConsistencyReport> checker )\n+    public OwningRecordCheck<NodeRecord,NodeConsistencyReport> decorateNodeChecker( OwningRecordCheck<NodeRecord,NodeConsistencyReport> checker )\n     {\n         return new NodeCounts( nodeStore, nodeCounts, nodeCountBuildCondition, checker );\n     }\n \n     @Override\n-    public OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> decorateRelationshipChecker(\n-            OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> checker )\n+    public OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> decorateRelationshipChecker( OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> checker )\n     {\n         return new RelationshipCounts( storeAccess, relationshipCounts, relationshipCountBuildCondition, checker );\n     }\n@@ -175,18 +169,13 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n             public void visitRelationshipCount( int startLabelId, int relTypeId, int endLabelId, long count )\n             {\n                 relationshipEntries.incrementAndGet();\n-                reporter.forCounts(\n-                        new CountsEntry( relationshipKey( startLabelId, relTypeId, endLabelId ), count ),\n-                        CHECK_RELATIONSHIP_COUNT );\n-                listener.add( 1 );\n+                reporter.forCounts( new CountsEntry( relationshipKey( startLabelId, relTypeId, endLabelId ), count ), CHECK_RELATIONSHIP_COUNT );\n+listener.add( 1 );\n             }\n         } );\n-        reporter.forCounts(\n-                new CountsEntry( nodeKey( WILDCARD ), nodeEntries.get() ), CHECK_NODE_KEY_COUNT );\n-        reporter.forCounts(\n-                new CountsEntry( relationshipKey( WILDCARD, WILDCARD, WILDCARD ),\n-                        relationshipEntries.get() ), CHECK_RELATIONSHIP_KEY_COUNT );\n-        listener.done();\n+        reporter.forCounts( new CountsEntry( nodeKey( WILDCARD ), nodeEntries.get() ), CHECK_NODE_KEY_COUNT );\n+reporter.forCounts( new CountsEntry( relationshipKey( WILDCARD, WILDCARD, WILDCARD ), relationshipEntries.get() ), CHECK_RELATIONSHIP_KEY_COUNT );\n+listener.done();\n     }\n \n     private static class NodeCounts implements OwningRecordCheck<NodeRecord,NodeConsistencyReport>\n@@ -196,8 +185,7 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n         private final Predicate<NodeRecord> countUpdateCondition;\n         private final OwningRecordCheck<NodeRecord,NodeConsistencyReport> inner;\n \n-        NodeCounts( RecordStore<NodeRecord> nodeStore, MultiSet<CountsKey> counts,\n-                Predicate<NodeRecord> countUpdateCondition, OwningRecordCheck<NodeRecord,NodeConsistencyReport> inner )\n+        NodeCounts( RecordStore<NodeRecord> nodeStore, MultiSet<CountsKey> counts, Predicate<NodeRecord> countUpdateCondition, OwningRecordCheck<NodeRecord,NodeConsistencyReport> inner )\n         {\n             this.nodeStore = nodeStore;\n             this.counts = counts;\n@@ -212,10 +200,9 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n         }\n \n         @Override\n-        public void check( NodeRecord record,\n-                           CheckerEngine<NodeRecord,NodeConsistencyReport> engine,\n+        public void check( NodeRecord record, CheckerEngine<NodeRecord,NodeConsistencyReport> engine,\n                            RecordAccess records )\n-        {\n+{\n             if ( countUpdateCondition.test( record ) )\n             {\n                 if ( record.inUse() )\n@@ -229,7 +216,7 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n                         counts.add( nodeKey( WILDCARD ) );\n                         for ( long label : labels )\n                         {\n-                            counts.add( nodeKey( (int) label ) );\n+                            counts.add( nodeKey( ( int) label ) );\n                         }\n                     }\n                 }\n@@ -247,9 +234,7 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n         private final Predicate<RelationshipRecord> countUpdateCondition;\n         private final OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> inner;\n \n-        RelationshipCounts( StoreAccess storeAccess, MultiSet<CountsKey> counts,\n-                Predicate<RelationshipRecord> countUpdateCondition,\n-                OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> inner )\n+        RelationshipCounts( StoreAccess storeAccess, MultiSet<CountsKey> counts, Predicate<RelationshipRecord> countUpdateCondition, OwningRecordCheck<RelationshipRecord,RelationshipConsistencyReport> inner )\n         {\n             this.nodeStore = storeAccess.getRawNeoStores().getNodeStore();\n             this.counts = counts;\n@@ -264,10 +249,9 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n         }\n \n         @Override\n-        public void check( RelationshipRecord record,\n-                           CheckerEngine<RelationshipRecord,RelationshipConsistencyReport> engine,\n+        public void check( RelationshipRecord record, CheckerEngine<RelationshipRecord,RelationshipConsistencyReport> engine,\n                            RecordAccess records )\n-        {\n+{\n             if ( countUpdateCondition.test( record ) )\n             {\n                 if ( record.inUse() )\n@@ -302,16 +286,16 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n                         {\n                             for ( long firstLabel : firstNodeLabels )\n                             {\n-                                counts.add( relationshipKey( (int) firstLabel, WILDCARD, WILDCARD ) );\n-                                counts.add( relationshipKey( (int) firstLabel, type, WILDCARD ) );\n+                                counts.add( relationshipKey( ( int) firstLabel, WILDCARD, WILDCARD ) );\n+                                counts.add( relationshipKey( ( int) firstLabel, type, WILDCARD ) );\n                             }\n                         }\n                         if ( secondNodeLabels != null )\n                         {\n                             for ( long secondLabel : secondNodeLabels )\n                             {\n-                                counts.add( relationshipKey( WILDCARD, WILDCARD, (int) secondLabel ) );\n-                                counts.add( relationshipKey( WILDCARD, type, (int) secondLabel ) );\n+                                counts.add( relationshipKey( WILDCARD, WILDCARD, ( int) secondLabel ) );\n+                                counts.add( relationshipKey( WILDCARD, type, ( int) secondLabel ) );\n                             }\n                         }\n                         if ( COMPUTE_DOUBLE_SIDED_RELATIONSHIP_COUNTS )\n@@ -320,8 +304,8 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n                             {\n                                 for ( long secondLabel : secondNodeLabels )\n                                 {\n-                                    counts.add( relationshipKey( (int) firstLabel, WILDCARD, (int) secondLabel ) );\n-                                    counts.add( relationshipKey( (int) firstLabel, type, (int) secondLabel ) );\n+                                    counts.add( relationshipKey( ( int) firstLabel, WILDCARD, ( int) secondLabel ) );\n+                                    counts.add( relationshipKey( ( int) firstLabel, type, ( int) secondLabel ) );\n                                 }\n                             }\n                         }\n@@ -356,11 +340,10 @@ class CountsBuilderDecorator extends CheckDecorator.Adapter\n         }\n     }\n \n-    private static Set<Long> labelsFor( RecordStore<NodeRecord> nodeStore,\n-                                        CheckerEngine<? extends AbstractBaseRecord,? extends ConsistencyReport> engine,\n+    private static Set<Long> labelsFor( RecordStore<NodeRecord> nodeStore, CheckerEngine<? extends AbstractBaseRecord, ? extends ConsistencyReport> engine,\n                                         RecordAccess recordAccess,\n                                         long nodeId )\n-    {\n+{\n         return getListOfLabels( nodeStore.getRecord( nodeId, nodeStore.newRecord(), FORCE ), recordAccess, engine );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}