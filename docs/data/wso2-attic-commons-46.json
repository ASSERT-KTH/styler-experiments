{
    "project_name": "wso2-attic-commons",
    "violation_id": "46",
    "information": {
        "violations": [
            {
                "line": "88",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 128).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        pvc = new PasswordValidationCallback(execSubject, userName,\n                password.toCharArray());\n        logger.fine(\"[SC] setting password validation callback with user [ \" + userName + \" ] + password [ \" + password + \" ]\");\n\n        callbacks.add(pvc);\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/46/MySecurityContext.java\nindex 4fb311b5f08..a96b7d83ecd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/wso2-attic-commons/styler/05_predictions/final/files-repaired/46/MySecurityContext.java\n@@ -85,9 +85,10 @@ public class MySecurityContext extends SecurityContext {\n         PasswordValidationCallback pvc = null;\r\n         pvc = new PasswordValidationCallback(execSubject, userName,\r\n                 password.toCharArray());\r\n-        logger.fine(\"[SC] setting password validation callback with user [ \" + userName + \" ] + password [ \" + password + \" ]\");\r\n+        logger.fine(\"[SC] setting password validation callback with user [ \" + userName + \" ] + password [ \" + password\r\n+                  + \" ]\");\r\n \r\n-        callbacks.add(pvc);\r\n+         callbacks.add(pvc);\r\n \r\n         Callback callbackArray[] = new Callback[callbacks.size()];\r\n         try{\r\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/46/MySecurityContext.java\nindex 4fb311b5f08..4bfbbda953b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/checkstyle_idea/46/MySecurityContext.java\n@@ -56,70 +56,71 @@ import javax.security.auth.message.callback.PasswordValidationCallback;\n  * @author jagadish\r\n  */\r\n public class MySecurityContext extends SecurityContext {\r\n-    private String userName;\r\n-    private String password;\r\n-    private String principalName;\r\n-    private Subject subject;\r\n-\r\n-        static Logger logger =\r\n-        Logger.getLogger(\"samples.connectors.mailconnector.ra.inbound\");\r\n-\r\n-    public MySecurityContext(String userName, String password, String principalName){\r\n-        this.userName = userName;\r\n-        this.password = password;\r\n-        this.principalName = principalName;\r\n-        logger.fine(\"[MySecurityContext] constructor\");\r\n-    }\r\n+  private String userName;\r\n+  private String password;\r\n+  private String principalName;\r\n+  private Subject subject;\r\n \r\n+  static Logger logger =\r\n+    Logger.getLogger(\"samples.connectors.mailconnector.ra.inbound\");\r\n \r\n-    public void setupSecurityContext(CallbackHandler callbackHandler, Subject execSubject, Subject serviceSubject) {\r\n+  public MySecurityContext(String userName, String password, String principalName) {\r\n+    this.userName = userName;\r\n+    this.password = password;\r\n+    this.principalName = principalName;\r\n+    logger.fine(\"[MySecurityContext] constructor\");\r\n+  }\r\n \r\n-        execSubject.getPrincipals().add(new PrincipalImpl(principalName));\r\n-        List<Callback> callbacks = new ArrayList<Callback>();\r\n \r\n-        CallerPrincipalCallback cpc = new CallerPrincipalCallback(execSubject, new PrincipalImpl(principalName));\r\n+  public void setupSecurityContext(CallbackHandler callbackHandler, Subject execSubject, Subject serviceSubject) {\r\n \r\n-        logger.fine(\"[SC] setting caller principal callback with principal : \" + principalName);\r\n-        callbacks.add(cpc);\r\n+    execSubject.getPrincipals().add(new PrincipalImpl(principalName));\r\n+    List<Callback> callbacks = new ArrayList<Callback>();\r\n \r\n-        PasswordValidationCallback pvc = null;\r\n-        pvc = new PasswordValidationCallback(execSubject, userName,\r\n-                password.toCharArray());\r\n-        logger.fine(\"[SC] setting password validation callback with user [ \" + userName + \" ] + password [ \" + password + \" ]\");\r\n+    CallerPrincipalCallback cpc = new CallerPrincipalCallback(execSubject, new PrincipalImpl(principalName));\r\n \r\n-        callbacks.add(pvc);\r\n+    logger.fine(\"[SC] setting caller principal callback with principal : \" + principalName);\r\n+    callbacks.add(cpc);\r\n \r\n-        Callback callbackArray[] = new Callback[callbacks.size()];\r\n-        try{\r\n-            callbackHandler.handle(callbacks.toArray(callbackArray));\r\n+    PasswordValidationCallback pvc = null;\r\n+    pvc = new PasswordValidationCallback(execSubject, userName,\r\n+      password.toCharArray());\r\n+    logger.fine(\r\n+      \"[SC] setting password validation callback with user [ \" + userName + \" ] + password [ \" + password + \" ]\");\r\n \r\n-        }catch(UnsupportedCallbackException e){\r\n-            debug(\"exception occured : \" + e.getMessage());\r\n-            e.printStackTrace();\r\n-        }catch(IOException e){\r\n-            e.printStackTrace();\r\n-            debug(\"exception occured : \" + e.getMessage());\r\n-        }\r\n+    callbacks.add(pvc);\r\n \r\n+    Callback callbackArray[] = new Callback[callbacks.size()];\r\n+    try {\r\n+      callbackHandler.handle(callbacks.toArray(callbackArray));\r\n \r\n-        if(!pvc.getResult()){\r\n-            logger.info(\"[SC] Password validation callback failure for user : \" + userName);\r\n-            throw new IllegalStateException(\"User [ \" + userName + \" ] not authorized to send message\");\r\n-        }else{\r\n-            logger.info(\"[SC] Password validation callback succeded for user : \" + userName);\r\n-        }\r\n+    } catch (UnsupportedCallbackException e) {\r\n+      debug(\"exception occured : \" + e.getMessage());\r\n+      e.printStackTrace();\r\n+    } catch (IOException e) {\r\n+      e.printStackTrace();\r\n+      debug(\"exception occured : \" + e.getMessage());\r\n     }\r\n \r\n-    public String toString(){\r\n-        StringBuffer toString = new StringBuffer(\"{\");\r\n-        toString.append(\"userName : \" + userName);\r\n-        toString.append(\", password : \" + password);\r\n-        toString.append(\", principalName : \" + principalName);\r\n-        toString.append(\"}\");\r\n-        return toString.toString();\r\n-    }\r\n \r\n-    public void debug(String message){\r\n-        logger.fine(\"[SC]: \" + message);\r\n+    if (!pvc.getResult()) {\r\n+      logger.info(\"[SC] Password validation callback failure for user : \" + userName);\r\n+      throw new IllegalStateException(\"User [ \" + userName + \" ] not authorized to send message\");\r\n+    } else {\r\n+      logger.info(\"[SC] Password validation callback succeded for user : \" + userName);\r\n     }\r\n+  }\r\n+\r\n+  public String toString() {\r\n+    StringBuffer toString = new StringBuffer(\"{\");\r\n+    toString.append(\"userName : \" + userName);\r\n+    toString.append(\", password : \" + password);\r\n+    toString.append(\", principalName : \" + principalName);\r\n+    toString.append(\"}\");\r\n+    return toString.toString();\r\n+  }\r\n+\r\n+  public void debug(String message) {\r\n+    logger.fine(\"[SC]: \" + message);\r\n+  }\r\n }\r\n",
            "diff_size": 81
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/46/MySecurityContext.java\nindex 4fb311b5f08..3ded275f213 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/naturalize/46/MySecurityContext.java\n@@ -61,8 +61,7 @@ public class MySecurityContext extends SecurityContext {\n     private String principalName;\r\n     private Subject subject;\r\n \r\n-        static Logger logger =\r\n-        Logger.getLogger(\"samples.connectors.mailconnector.ra.inbound\");\r\n+        static Logger logger = Logger.getLogger(\"samples.connectors.mailconnector.ra.inbound\");\r\n \r\n     public MySecurityContext(String userName, String password, String principalName){\r\n         this.userName = userName;\r\n@@ -122,4 +121,4 @@ public class MySecurityContext extends SecurityContext {\n     public void debug(String message){\r\n         logger.fine(\"[SC]: \" + message);\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/46/MySecurityContext.java\nindex 4fb311b5f08..a96b7d83ecd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/violations/46/MySecurityContext.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/wso2-attic-commons/styler/05_predictions/three_grams/files-repaired/46/MySecurityContext.java\n@@ -85,9 +85,10 @@ public class MySecurityContext extends SecurityContext {\n         PasswordValidationCallback pvc = null;\r\n         pvc = new PasswordValidationCallback(execSubject, userName,\r\n                 password.toCharArray());\r\n-        logger.fine(\"[SC] setting password validation callback with user [ \" + userName + \" ] + password [ \" + password + \" ]\");\r\n+        logger.fine(\"[SC] setting password validation callback with user [ \" + userName + \" ] + password [ \" + password\r\n+                  + \" ]\");\r\n \r\n-        callbacks.add(pvc);\r\n+         callbacks.add(pvc);\r\n \r\n         Callback callbackArray[] = new Callback[callbacks.size()];\r\n         try{\r\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}