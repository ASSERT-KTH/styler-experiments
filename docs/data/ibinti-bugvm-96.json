{
    "project_name": "ibinti-bugvm",
    "violation_id": "96",
    "information": {
        "violations": [
            {
                "line": "8",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 87).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n// BEGIN android-note\n// omit links to ForkJoinPool, ForkJoinTask, LinkedTransferQueue, Phaser, TransferQueue\n// END android-note\n\n/**",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/ibinti-bugvm/styler/05_predictions/final/files-repaired/96/package-info.java\nindex 51a29e870af..2b5ed4393a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/ibinti-bugvm/styler/05_predictions/final/files-repaired/96/package-info.java\n@@ -5,9 +5,253 @@\n  */\n \n // BEGIN android-note\n-// omit links to ForkJoinPool, ForkJoinTask, LinkedTransferQueue, Phaser, TransferQueue\n // END android-note\n \n+/**\n+ * Utility classes commonly useful in concurrent programming.  This\n+ * package includes a few small standardized extensible frameworks, as\n+ * well as some classes that provide useful functionality and are\n+ * otherwise tedious or difficult to implement.  Here are brief\n+ * descriptions of the main components.  See also the\n+ * {@link java.util.concurrent.locks} and\n+ * {@link java.util.concurrent.atomic} packages.\n+ *\n+ * <h2>Executors</h2>\n+ *\n+ * <b>Interfaces.</b>\n+ *\n+ * {@link java.util.concurrent.Executor} is a simple standardized\n+ * interface for defining custom thread-like subsystems, including\n+ * thread pools, asynchronous I/O, and lightweight task frameworks.\n+ * Depending on which concrete Executor class is being used, tasks may\n+ * execute in a newly created thread, an existing task-execution thread,\n+ * or the thread calling {@link java.util.concurrent.Executor#execute\n+ * execute}, and may execute sequentially or concurrently.\n+ *\n+ * {@link java.util.concurrent.ExecutorService} provides a more\n+ * complete asynchronous task execution framework.  An\n+ * ExecutorService manages queuing and scheduling of tasks,\n+ * and allows controlled shutdown.\n+ *\n+ * The {@link java.util.concurrent.ScheduledExecutorService}\n+ * subinterface and associated interfaces add support for\n+ * delayed and periodic task execution.  ExecutorServices\n+ * provide methods arranging asynchronous execution of any\n+ * function expressed as {@link java.util.concurrent.Callable},\n+ * the result-bearing analog of {@link java.lang.Runnable}.\n+ *\n+ * A {@link java.util.concurrent.Future} returns the results of\n+ * a function, allows determination of whether execution has\n+ * completed, and provides a means to cancel execution.\n+ *\n+ * A {@link java.util.concurrent.RunnableFuture} is a {@code Future}\n+ * that possesses a {@code run} method that upon execution,\n+ * sets its results.\n+ *\n+ * <p>\n+ *\n+ * <b>Implementations.</b>\n+ *\n+ * Classes {@link java.util.concurrent.ThreadPoolExecutor} and\n+ * {@link java.util.concurrent.ScheduledThreadPoolExecutor}\n+ * provide tunable, flexible thread pools.\n+ *\n+ * The {@link java.util.concurrent.Executors} class provides\n+ * factory methods for the most common kinds and configurations\n+ * of Executors, as well as a few utility methods for using\n+ * them.  Other utilities based on {@code Executors} include the\n+ * concrete class {@link java.util.concurrent.FutureTask}\n+ * providing a common extensible implementation of Futures, and\n+ * {@link java.util.concurrent.ExecutorCompletionService}, that\n+ * assists in coordinating the processing of groups of\n+ * asynchronous tasks.\n+ *\n+ * <h2>Queues</h2>\n+ *\n+ * The {@link java.util.concurrent.ConcurrentLinkedQueue} class\n+ * supplies an efficient scalable thread-safe non-blocking FIFO\n+ * queue.\n+ *\n+ * <p>Five implementations in {@code java.util.concurrent} support\n+ * the extended {@link java.util.concurrent.BlockingQueue}\n+ * interface, that defines blocking versions of put and take:\n+ * {@link java.util.concurrent.LinkedBlockingQueue},\n+ * {@link java.util.concurrent.ArrayBlockingQueue},\n+ * {@link java.util.concurrent.SynchronousQueue},\n+ * {@link java.util.concurrent.PriorityBlockingQueue}, and\n+ * {@link java.util.concurrent.DelayQueue}.\n+ * The different classes cover the most common usage contexts\n+ * for producer-consumer, messaging, parallel tasking, and\n+ * related concurrent designs.\n+ *\n+ * <p>The {@link java.util.concurrent.BlockingDeque} interface\n+ * extends {@code BlockingQueue} to support both FIFO and LIFO\n+ * (stack-based) operations.\n+ * Class {@link java.util.concurrent.LinkedBlockingDeque}\n+ * provides an implementation.\n+ *\n+ * <h2>Timing</h2>\n+ *\n+ * The {@link java.util.concurrent.TimeUnit} class provides\n+ * multiple granularities (including nanoseconds) for\n+ * specifying and controlling time-out based operations.  Most\n+ * classes in the package contain operations based on time-outs\n+ * in addition to indefinite waits.  In all cases that\n+ * time-outs are used, the time-out specifies the minimum time\n+ * that the method should wait before indicating that it\n+ * timed-out.  Implementations make a &quot;best effort&quot;\n+ * to detect time-outs as soon as possible after they occur.\n+ * However, an indefinite amount of time may elapse between a\n+ * time-out being detected and a thread actually executing\n+ * again after that time-out.  All methods that accept timeout\n+ * parameters treat values less than or equal to zero to mean\n+ * not to wait at all.  To wait \"forever\", you can use a value\n+ * of {@code Long.MAX_VALUE}.\n+ *\n+ * <h2>Synchronizers</h2>\n+ *\n+ * Four classes aid common special-purpose synchronization idioms.\n+ * <ul>\n+ *\n+ * <li>{@link java.util.concurrent.Semaphore} is a classic concurrency tool.\n+ *\n+ * <li>{@link java.util.concurrent.CountDownLatch} is a very simple yet\n+ * very common utility for blocking until a given number of signals,\n+ * events, or conditions hold.\n+ *\n+ * <li>A {@link java.util.concurrent.CyclicBarrier} is a resettable\n+ * multiway synchronization point useful in some styles of parallel\n+ * programming.\n+ *\n+ * <li>An {@link java.util.concurrent.Exchanger} allows two threads to\n+ * exchange objects at a rendezvous point, and is useful in several\n+ * pipeline designs.\n+ *\n+ * </ul>\n+ *\n+ * <h2>Concurrent Collections</h2>\n+ *\n+ * Besides Queues, this package supplies Collection implementations\n+ * designed for use in multithreaded contexts:\n+ * {@link java.util.concurrent.ConcurrentHashMap},\n+ * {@link java.util.concurrent.ConcurrentSkipListMap},\n+ * {@link java.util.concurrent.ConcurrentSkipListSet},\n+ * {@link java.util.concurrent.CopyOnWriteArrayList}, and\n+ * {@link java.util.concurrent.CopyOnWriteArraySet}.\n+ * When many threads are expected to access a given collection, a\n+ * {@code ConcurrentHashMap} is normally preferable to a synchronized\n+ * {@code HashMap}, and a {@code ConcurrentSkipListMap} is normally\n+ * preferable to a synchronized {@code TreeMap}.\n+ * A {@code CopyOnWriteArrayList} is preferable to a synchronized\n+ * {@code ArrayList} when the expected number of reads and traversals\n+ * greatly outnumber the number of updates to a list.\n+ *\n+ * <p>The \"Concurrent\" prefix used with some classes in this package\n+ * is a shorthand indicating several differences from similar\n+ * \"synchronized\" classes.  For example {@code java.util.Hashtable} and\n+ * {@code Collections.synchronizedMap(new HashMap())} are\n+ * synchronized.  But {@link\n+ * java.util.concurrent.ConcurrentHashMap} is \"concurrent\".  A\n+ * concurrent collection is thread-safe, but not governed by a\n+ * single exclusion lock.  In the particular case of\n+ * ConcurrentHashMap, it safely permits any number of\n+ * concurrent reads as well as a tunable number of concurrent\n+ * writes.  \"Synchronized\" classes can be useful when you need\n+ * to prevent all access to a collection via a single lock, at\n+ * the expense of poorer scalability.  In other cases in which\n+ * multiple threads are expected to access a common collection,\n+ * \"concurrent\" versions are normally preferable.  And\n+ * unsynchronized collections are preferable when either\n+ * collections are unshared, or are accessible only when\n+ * holding other locks.\n+ *\n+ * <p>Most concurrent Collection implementations (including most\n+ * Queues) also differ from the usual java.util conventions in that\n+ * their Iterators provide <em>weakly consistent</em> rather than\n+ * fast-fail traversal.  A weakly consistent iterator is thread-safe,\n+ * but does not necessarily freeze the collection while iterating, so\n+ * it may (or may not) reflect any updates since the iterator was\n+ * created.\n+ *\n+ * <h2 id=\"MemoryVisibility\">Memory Consistency Properties</h2>\n+ *\n+ * <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/memory.html\">\n+ * Chapter 17 of the Java Language Specification</a> defines the\n+ * <i>happens-before</i> relation on memory operations such as reads and\n+ * writes of shared variables.  The results of a write by one thread are\n+ * guaranteed to be visible to a read by another thread only if the write\n+ * operation <i>happens-before</i> the read operation.  The\n+ * {@code synchronized} and {@code volatile} constructs, as well as the\n+ * {@code Thread.start()} and {@code Thread.join()} methods, can form\n+ * <i>happens-before</i> relationships.  In particular:\n+ *\n+ * <ul>\n+ *   <li>Each action in a thread <i>happens-before</i> every action in that\n+ *   thread that comes later in the program's order.\n+ *\n+ *   <li>An unlock ({@code synchronized} block or method exit) of a\n+ *   monitor <i>happens-before</i> every subsequent lock ({@code synchronized}\n+ *   block or method entry) of that same monitor.  And because\n+ *   the <i>happens-before</i> relation is transitive, all actions\n+ *   of a thread prior to unlocking <i>happen-before</i> all actions\n+ *   subsequent to any thread locking that monitor.\n+ *\n+ *   <li>A write to a {@code volatile} field <i>happens-before</i> every\n+ *   subsequent read of that same field.  Writes and reads of\n+ *   {@code volatile} fields have similar memory consistency effects\n+ *   as entering and exiting monitors, but do <em>not</em> entail\n+ *   mutual exclusion locking.\n+ *\n+ *   <li>A call to {@code start} on a thread <i>happens-before</i> any\n+ *   action in the started thread.\n+ *\n+ *   <li>All actions in a thread <i>happen-before</i> any other thread\n+ *   successfully returns from a {@code join} on that thread.\n+ *\n+ * </ul>\n+ *\n+ *\n+ * The methods of all classes in {@code java.util.concurrent} and its\n+ * subpackages extend these guarantees to higher-level\n+ * synchronization.  In particular:\n+ *\n+ * <ul>\n+ *\n+ *   <li>Actions in a thread prior to placing an object into any concurrent\n+ *   collection <i>happen-before</i> actions subsequent to the access or\n+ *   removal of that element from the collection in another thread.\n+ *\n+ *   <li>Actions in a thread prior to the submission of a {@code Runnable}\n+ *   to an {@code Executor} <i>happen-before</i> its execution begins.\n+ *   Similarly for {@code Callables} submitted to an {@code ExecutorService}.\n+ *\n+ *   <li>Actions taken by the asynchronous computation represented by a\n+ *   {@code Future} <i>happen-before</i> actions subsequent to the\n+ *   retrieval of the result via {@code Future.get()} in another thread.\n+ *\n+ *   <li>Actions prior to \"releasing\" synchronizer methods such as\n+ *   {@code Lock.unlock}, {@code Semaphore.release}, and\n+ *   {@code CountDownLatch.countDown} <i>happen-before</i> actions\n+ *   subsequent to a successful \"acquiring\" method such as\n+ *   {@code Lock.lock}, {@code Semaphore.acquire},\n+ *   {@code Condition.await}, and {@code CountDownLatch.await} on the\n+ *   same synchronizer object in another thread.\n+ *\n+ *   <li>For each pair of threads that successfully exchange objects via\n+ *   an {@code Exchanger}, actions prior to the {@code exchange()}\n+ *   in each thread <i>happen-before</i> those subsequent to the\n+ *   corresponding {@code exchange()} in another thread.\n+ *\n+ *   <li>Actions prior to calling {@code CyclicBarrier.await}\n+ *   <i>happen-before</i> actions performed by the barrier action, and\n+ *   actions performed by the barrier action <i>happen-before</i> actions\n+ *   subsequent to a successful return from the corresponding {@code await}\n+ *   in other threads.\n+ *\n+ * </ul>\n+ *\n+ * @since 1.5\n+ */\n /**\n  * Utility classes commonly useful in concurrent programming.  This\n  * package includes a few small standardized extensible frameworks, as\n",
            "diff_size": 246
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/checkstyle_idea/96/package-info.java\nindex 51a29e870af..867a5f895f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/checkstyle_idea/96/package-info.java\n@@ -20,7 +20,7 @@\n  * <h2>Executors</h2>\n  *\n  * <b>Interfaces.</b>\n- *\n+ * <p>\n  * {@link java.util.concurrent.Executor} is a simple standardized\n  * interface for defining custom thread-like subsystems, including\n  * thread pools, asynchronous I/O, and lightweight task frameworks.\n@@ -28,23 +28,23 @@\n  * execute in a newly created thread, an existing task-execution thread,\n  * or the thread calling {@link java.util.concurrent.Executor#execute\n  * execute}, and may execute sequentially or concurrently.\n- *\n+ * <p>\n  * {@link java.util.concurrent.ExecutorService} provides a more\n  * complete asynchronous task execution framework.  An\n  * ExecutorService manages queuing and scheduling of tasks,\n  * and allows controlled shutdown.\n- *\n+ * <p>\n  * The {@link java.util.concurrent.ScheduledExecutorService}\n  * subinterface and associated interfaces add support for\n  * delayed and periodic task execution.  ExecutorServices\n  * provide methods arranging asynchronous execution of any\n  * function expressed as {@link java.util.concurrent.Callable},\n  * the result-bearing analog of {@link java.lang.Runnable}.\n- *\n+ * <p>\n  * A {@link java.util.concurrent.Future} returns the results of\n  * a function, allows determination of whether execution has\n  * completed, and provides a means to cancel execution.\n- *\n+ * <p>\n  * A {@link java.util.concurrent.RunnableFuture} is a {@code Future}\n  * that possesses a {@code run} method that upon execution,\n  * sets its results.\n@@ -52,11 +52,11 @@\n  * <p>\n  *\n  * <b>Implementations.</b>\n- *\n+ * <p>\n  * Classes {@link java.util.concurrent.ThreadPoolExecutor} and\n  * {@link java.util.concurrent.ScheduledThreadPoolExecutor}\n  * provide tunable, flexible thread pools.\n- *\n+ * <p>\n  * The {@link java.util.concurrent.Executors} class provides\n  * factory methods for the most common kinds and configurations\n  * of Executors, as well as a few utility methods for using\n@@ -68,7 +68,7 @@\n  * asynchronous tasks.\n  *\n  * <h2>Queues</h2>\n- *\n+ * <p>\n  * The {@link java.util.concurrent.ConcurrentLinkedQueue} class\n  * supplies an efficient scalable thread-safe non-blocking FIFO\n  * queue.\n@@ -92,7 +92,7 @@\n  * provides an implementation.\n  *\n  * <h2>Timing</h2>\n- *\n+ * <p>\n  * The {@link java.util.concurrent.TimeUnit} class provides\n  * multiple granularities (including nanoseconds) for\n  * specifying and controlling time-out based operations.  Most\n@@ -110,7 +110,7 @@\n  * of {@code Long.MAX_VALUE}.\n  *\n  * <h2>Synchronizers</h2>\n- *\n+ * <p>\n  * Four classes aid common special-purpose synchronization idioms.\n  * <ul>\n  *\n@@ -131,7 +131,7 @@\n  * </ul>\n  *\n  * <h2>Concurrent Collections</h2>\n- *\n+ * <p>\n  * Besides Queues, this package supplies Collection implementations\n  * designed for use in multithreaded contexts:\n  * {@link java.util.concurrent.ConcurrentHashMap},\n@@ -210,8 +210,8 @@\n  *   successfully returns from a {@code join} on that thread.\n  *\n  * </ul>\n- *\n- *\n+ * <p>\n+ * <p>\n  * The methods of all classes in {@code java.util.concurrent} and its\n  * subpackages extend these guarantees to higher-level\n  * synchronization.  In particular:\n@@ -253,4 +253,5 @@\n  *\n  * @since 1.5\n  */\n+\n package java.util.concurrent;\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/naturalize/96/package-info.java\nindex 51a29e870af..acfecf1b6a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/naturalize/96/package-info.java\n@@ -253,4 +253,4 @@\n  *\n  * @since 1.5\n  */\n-package java.util.concurrent;\n+package java.util.concurrent;\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/codebuff/96/package-info.java\nindex 51a29e870af..acfecf1b6a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/codebuff/96/package-info.java\n@@ -253,4 +253,4 @@\n  *\n  * @since 1.5\n  */\n-package java.util.concurrent;\n+package java.util.concurrent;\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/styler/05_predictions/random/files-repaired/96/package-info.java\nindex 51a29e870af..2b5ed4393a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/styler/05_predictions/random/files-repaired/96/package-info.java\n@@ -5,9 +5,253 @@\n  */\n \n // BEGIN android-note\n-// omit links to ForkJoinPool, ForkJoinTask, LinkedTransferQueue, Phaser, TransferQueue\n // END android-note\n \n+/**\n+ * Utility classes commonly useful in concurrent programming.  This\n+ * package includes a few small standardized extensible frameworks, as\n+ * well as some classes that provide useful functionality and are\n+ * otherwise tedious or difficult to implement.  Here are brief\n+ * descriptions of the main components.  See also the\n+ * {@link java.util.concurrent.locks} and\n+ * {@link java.util.concurrent.atomic} packages.\n+ *\n+ * <h2>Executors</h2>\n+ *\n+ * <b>Interfaces.</b>\n+ *\n+ * {@link java.util.concurrent.Executor} is a simple standardized\n+ * interface for defining custom thread-like subsystems, including\n+ * thread pools, asynchronous I/O, and lightweight task frameworks.\n+ * Depending on which concrete Executor class is being used, tasks may\n+ * execute in a newly created thread, an existing task-execution thread,\n+ * or the thread calling {@link java.util.concurrent.Executor#execute\n+ * execute}, and may execute sequentially or concurrently.\n+ *\n+ * {@link java.util.concurrent.ExecutorService} provides a more\n+ * complete asynchronous task execution framework.  An\n+ * ExecutorService manages queuing and scheduling of tasks,\n+ * and allows controlled shutdown.\n+ *\n+ * The {@link java.util.concurrent.ScheduledExecutorService}\n+ * subinterface and associated interfaces add support for\n+ * delayed and periodic task execution.  ExecutorServices\n+ * provide methods arranging asynchronous execution of any\n+ * function expressed as {@link java.util.concurrent.Callable},\n+ * the result-bearing analog of {@link java.lang.Runnable}.\n+ *\n+ * A {@link java.util.concurrent.Future} returns the results of\n+ * a function, allows determination of whether execution has\n+ * completed, and provides a means to cancel execution.\n+ *\n+ * A {@link java.util.concurrent.RunnableFuture} is a {@code Future}\n+ * that possesses a {@code run} method that upon execution,\n+ * sets its results.\n+ *\n+ * <p>\n+ *\n+ * <b>Implementations.</b>\n+ *\n+ * Classes {@link java.util.concurrent.ThreadPoolExecutor} and\n+ * {@link java.util.concurrent.ScheduledThreadPoolExecutor}\n+ * provide tunable, flexible thread pools.\n+ *\n+ * The {@link java.util.concurrent.Executors} class provides\n+ * factory methods for the most common kinds and configurations\n+ * of Executors, as well as a few utility methods for using\n+ * them.  Other utilities based on {@code Executors} include the\n+ * concrete class {@link java.util.concurrent.FutureTask}\n+ * providing a common extensible implementation of Futures, and\n+ * {@link java.util.concurrent.ExecutorCompletionService}, that\n+ * assists in coordinating the processing of groups of\n+ * asynchronous tasks.\n+ *\n+ * <h2>Queues</h2>\n+ *\n+ * The {@link java.util.concurrent.ConcurrentLinkedQueue} class\n+ * supplies an efficient scalable thread-safe non-blocking FIFO\n+ * queue.\n+ *\n+ * <p>Five implementations in {@code java.util.concurrent} support\n+ * the extended {@link java.util.concurrent.BlockingQueue}\n+ * interface, that defines blocking versions of put and take:\n+ * {@link java.util.concurrent.LinkedBlockingQueue},\n+ * {@link java.util.concurrent.ArrayBlockingQueue},\n+ * {@link java.util.concurrent.SynchronousQueue},\n+ * {@link java.util.concurrent.PriorityBlockingQueue}, and\n+ * {@link java.util.concurrent.DelayQueue}.\n+ * The different classes cover the most common usage contexts\n+ * for producer-consumer, messaging, parallel tasking, and\n+ * related concurrent designs.\n+ *\n+ * <p>The {@link java.util.concurrent.BlockingDeque} interface\n+ * extends {@code BlockingQueue} to support both FIFO and LIFO\n+ * (stack-based) operations.\n+ * Class {@link java.util.concurrent.LinkedBlockingDeque}\n+ * provides an implementation.\n+ *\n+ * <h2>Timing</h2>\n+ *\n+ * The {@link java.util.concurrent.TimeUnit} class provides\n+ * multiple granularities (including nanoseconds) for\n+ * specifying and controlling time-out based operations.  Most\n+ * classes in the package contain operations based on time-outs\n+ * in addition to indefinite waits.  In all cases that\n+ * time-outs are used, the time-out specifies the minimum time\n+ * that the method should wait before indicating that it\n+ * timed-out.  Implementations make a &quot;best effort&quot;\n+ * to detect time-outs as soon as possible after they occur.\n+ * However, an indefinite amount of time may elapse between a\n+ * time-out being detected and a thread actually executing\n+ * again after that time-out.  All methods that accept timeout\n+ * parameters treat values less than or equal to zero to mean\n+ * not to wait at all.  To wait \"forever\", you can use a value\n+ * of {@code Long.MAX_VALUE}.\n+ *\n+ * <h2>Synchronizers</h2>\n+ *\n+ * Four classes aid common special-purpose synchronization idioms.\n+ * <ul>\n+ *\n+ * <li>{@link java.util.concurrent.Semaphore} is a classic concurrency tool.\n+ *\n+ * <li>{@link java.util.concurrent.CountDownLatch} is a very simple yet\n+ * very common utility for blocking until a given number of signals,\n+ * events, or conditions hold.\n+ *\n+ * <li>A {@link java.util.concurrent.CyclicBarrier} is a resettable\n+ * multiway synchronization point useful in some styles of parallel\n+ * programming.\n+ *\n+ * <li>An {@link java.util.concurrent.Exchanger} allows two threads to\n+ * exchange objects at a rendezvous point, and is useful in several\n+ * pipeline designs.\n+ *\n+ * </ul>\n+ *\n+ * <h2>Concurrent Collections</h2>\n+ *\n+ * Besides Queues, this package supplies Collection implementations\n+ * designed for use in multithreaded contexts:\n+ * {@link java.util.concurrent.ConcurrentHashMap},\n+ * {@link java.util.concurrent.ConcurrentSkipListMap},\n+ * {@link java.util.concurrent.ConcurrentSkipListSet},\n+ * {@link java.util.concurrent.CopyOnWriteArrayList}, and\n+ * {@link java.util.concurrent.CopyOnWriteArraySet}.\n+ * When many threads are expected to access a given collection, a\n+ * {@code ConcurrentHashMap} is normally preferable to a synchronized\n+ * {@code HashMap}, and a {@code ConcurrentSkipListMap} is normally\n+ * preferable to a synchronized {@code TreeMap}.\n+ * A {@code CopyOnWriteArrayList} is preferable to a synchronized\n+ * {@code ArrayList} when the expected number of reads and traversals\n+ * greatly outnumber the number of updates to a list.\n+ *\n+ * <p>The \"Concurrent\" prefix used with some classes in this package\n+ * is a shorthand indicating several differences from similar\n+ * \"synchronized\" classes.  For example {@code java.util.Hashtable} and\n+ * {@code Collections.synchronizedMap(new HashMap())} are\n+ * synchronized.  But {@link\n+ * java.util.concurrent.ConcurrentHashMap} is \"concurrent\".  A\n+ * concurrent collection is thread-safe, but not governed by a\n+ * single exclusion lock.  In the particular case of\n+ * ConcurrentHashMap, it safely permits any number of\n+ * concurrent reads as well as a tunable number of concurrent\n+ * writes.  \"Synchronized\" classes can be useful when you need\n+ * to prevent all access to a collection via a single lock, at\n+ * the expense of poorer scalability.  In other cases in which\n+ * multiple threads are expected to access a common collection,\n+ * \"concurrent\" versions are normally preferable.  And\n+ * unsynchronized collections are preferable when either\n+ * collections are unshared, or are accessible only when\n+ * holding other locks.\n+ *\n+ * <p>Most concurrent Collection implementations (including most\n+ * Queues) also differ from the usual java.util conventions in that\n+ * their Iterators provide <em>weakly consistent</em> rather than\n+ * fast-fail traversal.  A weakly consistent iterator is thread-safe,\n+ * but does not necessarily freeze the collection while iterating, so\n+ * it may (or may not) reflect any updates since the iterator was\n+ * created.\n+ *\n+ * <h2 id=\"MemoryVisibility\">Memory Consistency Properties</h2>\n+ *\n+ * <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/memory.html\">\n+ * Chapter 17 of the Java Language Specification</a> defines the\n+ * <i>happens-before</i> relation on memory operations such as reads and\n+ * writes of shared variables.  The results of a write by one thread are\n+ * guaranteed to be visible to a read by another thread only if the write\n+ * operation <i>happens-before</i> the read operation.  The\n+ * {@code synchronized} and {@code volatile} constructs, as well as the\n+ * {@code Thread.start()} and {@code Thread.join()} methods, can form\n+ * <i>happens-before</i> relationships.  In particular:\n+ *\n+ * <ul>\n+ *   <li>Each action in a thread <i>happens-before</i> every action in that\n+ *   thread that comes later in the program's order.\n+ *\n+ *   <li>An unlock ({@code synchronized} block or method exit) of a\n+ *   monitor <i>happens-before</i> every subsequent lock ({@code synchronized}\n+ *   block or method entry) of that same monitor.  And because\n+ *   the <i>happens-before</i> relation is transitive, all actions\n+ *   of a thread prior to unlocking <i>happen-before</i> all actions\n+ *   subsequent to any thread locking that monitor.\n+ *\n+ *   <li>A write to a {@code volatile} field <i>happens-before</i> every\n+ *   subsequent read of that same field.  Writes and reads of\n+ *   {@code volatile} fields have similar memory consistency effects\n+ *   as entering and exiting monitors, but do <em>not</em> entail\n+ *   mutual exclusion locking.\n+ *\n+ *   <li>A call to {@code start} on a thread <i>happens-before</i> any\n+ *   action in the started thread.\n+ *\n+ *   <li>All actions in a thread <i>happen-before</i> any other thread\n+ *   successfully returns from a {@code join} on that thread.\n+ *\n+ * </ul>\n+ *\n+ *\n+ * The methods of all classes in {@code java.util.concurrent} and its\n+ * subpackages extend these guarantees to higher-level\n+ * synchronization.  In particular:\n+ *\n+ * <ul>\n+ *\n+ *   <li>Actions in a thread prior to placing an object into any concurrent\n+ *   collection <i>happen-before</i> actions subsequent to the access or\n+ *   removal of that element from the collection in another thread.\n+ *\n+ *   <li>Actions in a thread prior to the submission of a {@code Runnable}\n+ *   to an {@code Executor} <i>happen-before</i> its execution begins.\n+ *   Similarly for {@code Callables} submitted to an {@code ExecutorService}.\n+ *\n+ *   <li>Actions taken by the asynchronous computation represented by a\n+ *   {@code Future} <i>happen-before</i> actions subsequent to the\n+ *   retrieval of the result via {@code Future.get()} in another thread.\n+ *\n+ *   <li>Actions prior to \"releasing\" synchronizer methods such as\n+ *   {@code Lock.unlock}, {@code Semaphore.release}, and\n+ *   {@code CountDownLatch.countDown} <i>happen-before</i> actions\n+ *   subsequent to a successful \"acquiring\" method such as\n+ *   {@code Lock.lock}, {@code Semaphore.acquire},\n+ *   {@code Condition.await}, and {@code CountDownLatch.await} on the\n+ *   same synchronizer object in another thread.\n+ *\n+ *   <li>For each pair of threads that successfully exchange objects via\n+ *   an {@code Exchanger}, actions prior to the {@code exchange()}\n+ *   in each thread <i>happen-before</i> those subsequent to the\n+ *   corresponding {@code exchange()} in another thread.\n+ *\n+ *   <li>Actions prior to calling {@code CyclicBarrier.await}\n+ *   <i>happen-before</i> actions performed by the barrier action, and\n+ *   actions performed by the barrier action <i>happen-before</i> actions\n+ *   subsequent to a successful return from the corresponding {@code await}\n+ *   in other threads.\n+ *\n+ * </ul>\n+ *\n+ * @since 1.5\n+ */\n /**\n  * Utility classes commonly useful in concurrent programming.  This\n  * package includes a few small standardized extensible frameworks, as\n",
            "diff_size": 246
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "9",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/styler/05_predictions/three_grams/files-repaired/96/package-info.java\nindex 51a29e870af..00666736f6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/violations/96/package-info.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/ibinti-bugvm/styler/05_predictions/three_grams/files-repaired/96/package-info.java\n@@ -5,6 +5,7 @@\n  */\n \n // BEGIN android-note\n+\n // omit links to ForkJoinPool, ForkJoinTask, LinkedTransferQueue, Phaser, TransferQueue\n // END android-note\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}