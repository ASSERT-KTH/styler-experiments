{
    "project_name": "couchbase-couchbase-jvm-core",
    "violation_id": "60",
    "information": {
        "violations": [
            {
                "line": "99",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n\n        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n        final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n\n        OpenBucketResponse response = core",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/final/files-repaired/60/BucketLifecycleTest.java\nindex c0bacdfc465..5d77b6f67c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/final/files-repaired/60/BucketLifecycleTest.java\n@@ -96,7 +96,8 @@ public class BucketLifecycleTest {\n \n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n \n-        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n+        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket(\n+        ) + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n \n         OpenBucketResponse response = core\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/checkstyle_idea/60/BucketLifecycleTest.java\nindex c0bacdfc465..d810f6d5cd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/checkstyle_idea/60/BucketLifecycleTest.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core;\n \n import com.couchbase.client.core.config.ConfigurationException;\n@@ -96,7 +97,8 @@ public class BucketLifecycleTest {\n \n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n \n-        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n+        OpenBucketRequest badAttempt =\n+            new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n \n         OpenBucketResponse response = core\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/naturalize/60/BucketLifecycleTest.java\nindex c0bacdfc465..2fb25ffd1a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/naturalize/60/BucketLifecycleTest.java\n@@ -114,4 +114,4 @@ public class BucketLifecycleTest {\n         assertEquals(ResponseStatus.SUCCESS, response.status());\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 102, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 106, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 102, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 98, expected level should be one of the following: 8, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/codebuff/60/BucketLifecycleTest.java\nindex c0bacdfc465..fc8386827c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/codebuff/60/BucketLifecycleTest.java\n@@ -24,11 +24,9 @@ import com.couchbase.client.core.util.TestProperties;\n import org.junit.Test;\n import rx.Observable;\n import rx.functions.Func0;\n-\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.concurrent.TimeUnit;\n-\n import static org.junit.Assert.assertEquals;\n \n /**\n@@ -37,24 +35,25 @@ import static org.junit.Assert.assertEquals;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n-public class BucketLifecycleTest {\n \n+public class BucketLifecycleTest {\n     @Test\n     public void shouldSuccessfullyOpenBucket() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n         Observable<OpenBucketResponse> response = core.send(request);\n         assertEquals(ResponseStatus.SUCCESS, response.toBlocking().single().status());\n     }\n \n+\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailWithNoSeedNodeList() {\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n         new CouchbaseCore().send(request).toBlocking().single();\n     }\n \n+\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailWithEmptySeedNodeList() {\n         CouchbaseCore core = new CouchbaseCore();\n@@ -63,55 +62,46 @@ public class BucketLifecycleTest {\n         core.send(request).toBlocking().single();\n     }\n \n+\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailOpeningNonExistentBucket() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         core.send(request).toBlocking().single();\n     }\n \n+\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailOpeningBucketWithWrongPassword() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password() + \"asd\");\n         core.send(request).toBlocking().single();\n     }\n \n+\n     @Test(expected = ConfigurationException.class)\n     public void shouldFailOpeningWithWrongHost() {\n         CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(\"certainlyInvalidHostname\")));\n         OpenBucketRequest request = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password() + \"asd\");\n         core.send(request).toBlocking().single();\n     }\n \n+\n     @Test\n     public void shouldSucceedSubsequentlyAfterFailedAttempt() {\n         final CouchbaseCore core = new CouchbaseCore();\n-\n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n-\n         OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n-\n-        OpenBucketResponse response = core\n-            .<OpenBucketResponse>send(badAttempt)\n-            .onErrorResumeNext(Observable.defer(new Func0<Observable<OpenBucketResponse>>() {\n-                @Override\n-                public Observable<OpenBucketResponse> call() {\n-                    return core.send(goodAttempt);\n-                }\n-            }))\n-            .timeout(10, TimeUnit.SECONDS)\n-            .toBlocking()\n-            .single();\n-\n+        OpenBucketResponse response = core.<OpenBucketResponse>send(badAttempt).onErrorResumeNext(Observable.defer(new Func0<Observable<OpenBucketResponse>>() {\n+                                                                                                      @Override\n+                                                                                                      public Observable<OpenBucketResponse> call() {\n+                                                                                                          return core.send(goodAttempt);\n+                                                                                                      }\n+                                                                                                  })).timeout(10, TimeUnit.SECONDS).toBlocking().single();\n         assertEquals(ResponseStatus.SUCCESS, response.status());\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/random/files-repaired/60/BucketLifecycleTest.java\nindex c0bacdfc465..5d77b6f67c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/60/BucketLifecycleTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/random/files-repaired/60/BucketLifecycleTest.java\n@@ -96,7 +96,8 @@ public class BucketLifecycleTest {\n \n         core.send(new SeedNodesRequest(Arrays.asList(TestProperties.seedNode())));\n \n-        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket() + \"asd\", TestProperties.password());\n+        OpenBucketRequest badAttempt = new OpenBucketRequest(TestProperties.bucket(\n+        ) + \"asd\", TestProperties.password());\n         final OpenBucketRequest goodAttempt = new OpenBucketRequest(TestProperties.bucket(), TestProperties.password());\n \n         OpenBucketResponse response = core\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "99",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}