{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "227",
    "information": {
        "violations": [
            {
                "line": "129",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      MethodType intfMethodType = MethodType.methodType(intfMethod.getReturnType(), intfMethod.getParameterTypes());\n\n      // the return type of fluent setter is object instead of void, but we can assume the return type is void. it doesn't matter\n      MethodType instanceMethodType = MethodType\n          .methodType(intfMethod.getReturnType(), methodHandle.type().parameterList());\n      CallSite callSite = LambdaMetafactory.metafactory(",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/227/LambdaMetafactoryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/227/LambdaMetafactoryUtils.java\nindex c500d16af5a..1d3932edbf1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/227/LambdaMetafactoryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/227/LambdaMetafactoryUtils.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.foundation.common.utils;\n \n import java.lang.invoke.CallSite;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/227/LambdaMetafactoryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/227/LambdaMetafactoryUtils.java\nindex c500d16af5a..0b57e6557fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/227/LambdaMetafactoryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/227/LambdaMetafactoryUtils.java\n@@ -166,7 +166,7 @@ public final class LambdaMetafactoryUtils {\n     if (!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers())) {\n       throw new IllegalStateException(\n           String.format(\"Can not access field, a public field or and accessor is required.\"\n-                  + \"Declaring class is %s, field is %s\",\n+    + \"Declaring class is %s, field is %s\",\n               field.getDeclaringClass().getName(),\n               field.getName()));\n     }\n@@ -188,4 +188,4 @@ public final class LambdaMetafactoryUtils {\n       }\n     };\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "159",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/227/LambdaMetafactoryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/227/LambdaMetafactoryUtils.java\nindex c500d16af5a..b998e17d6c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/227/LambdaMetafactoryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/227/LambdaMetafactoryUtils.java\n@@ -27,7 +27,6 @@ import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.apache.servicecomb.foundation.common.utils.bean.BoolGetter;\n import org.apache.servicecomb.foundation.common.utils.bean.BoolSetter;\n import org.apache.servicecomb.foundation.common.utils.bean.ByteGetter;\n@@ -67,7 +66,6 @@ public final class LambdaMetafactoryUtils {\n     GETTER_MAP.put(long.class, LongGetter.class);\n     GETTER_MAP.put(float.class, FloatGetter.class);\n     GETTER_MAP.put(double.class, DoubleGetter.class);\n-\n     SETTER_MAP.put(boolean.class, BoolSetter.class);\n     SETTER_MAP.put(byte.class, ByteSetter.class);\n     SETTER_MAP.put(char.class, CharSetter.class);\n@@ -87,7 +85,6 @@ public final class LambdaMetafactoryUtils {\n         return method;\n       }\n     }\n-\n     return null;\n   }\n \n@@ -96,19 +93,16 @@ public final class LambdaMetafactoryUtils {\n     try {\n       Method intfMethod = findAbstractMethod(functionalIntfCls);\n       MethodHandle methodHandle = LOOKUP.unreflect(instanceMethod);\n-\n       MethodType intfMethodType = MethodType.methodType(intfMethod.getReturnType(), intfMethod.getParameterTypes());\n-      MethodType instanceMethodType = MethodType\n-          .methodType(instanceMethod.getReturnType(), instanceMethod.getParameterTypes());\n-      CallSite callSite = LambdaMetafactory.metafactory(\n-          LOOKUP,\n-          intfMethod.getName(),\n-          MethodType.methodType(functionalIntfCls, instance.getClass()),\n-          intfMethodType,\n-          methodHandle,\n-          instanceMethodType);\n-\n-      return (T) callSite.getTarget().bindTo(instance).invoke();\n+      MethodType instanceMethodType = MethodType.methodType(instanceMethod.getReturnType(), instanceMethod.getParameterTypes());\n+      CallSite callSite = LambdaMetafactory.metafactory(LOOKUP,\n+intfMethod.getName(),\n+MethodType.methodType(functionalIntfCls, instance.getClass()),\n+intfMethodType,\n+methodHandle,\n+instanceMethodType);\n+      return (T) callSite.getTarget().bindTo(instance)\n+                                     .invoke();\n     } catch (Throwable e) {\n       throw new IllegalStateException(\"Failed to create lambda from \" + instanceMethod, e);\n     }\n@@ -120,23 +114,20 @@ public final class LambdaMetafactoryUtils {\n       // fix \"Failed to create lambda from public final native java.lang.Class java.lang.Object.getClass()\"\n       return null;\n     }\n+\n     try {\n       Method intfMethod = findAbstractMethod(functionalIntfCls);\n       MethodHandle methodHandle = LOOKUP.unreflect(instanceMethod);\n-\n       MethodType intfMethodType = MethodType.methodType(intfMethod.getReturnType(), intfMethod.getParameterTypes());\n \n       // the return type of fluent setter is object instead of void, but we can assume the return type is void. it doesn't matter\n-      MethodType instanceMethodType = MethodType\n-          .methodType(intfMethod.getReturnType(), methodHandle.type().parameterList());\n-      CallSite callSite = LambdaMetafactory.metafactory(\n-          LOOKUP,\n-          intfMethod.getName(),\n-          MethodType.methodType(functionalIntfCls),\n-          intfMethodType,\n-          methodHandle,\n-          instanceMethodType);\n-\n+      MethodType instanceMethodType = MethodType.methodType(intfMethod.getReturnType(), methodHandle.type().parameterList());\n+      CallSite callSite = LambdaMetafactory.metafactory(LOOKUP,\n+intfMethod.getName(),\n+MethodType.methodType(functionalIntfCls),\n+intfMethodType,\n+methodHandle,\n+instanceMethodType);\n       return (T) callSite.getTarget().invoke();\n     } catch (Throwable e) {\n       throw new IllegalStateException(\"Failed to create lambda from \" + instanceMethod, e);\n@@ -149,6 +140,7 @@ public final class LambdaMetafactoryUtils {\n   }\n \n   // slower than reflect directly\n+\n   @SuppressWarnings(\"unchecked\")\n   public static <C, F> Getter<C, F> createGetter(Field field) {\n     checkAccess(field);\n@@ -164,11 +156,7 @@ public final class LambdaMetafactoryUtils {\n   private static void checkAccess(Field field) {\n     // This check is not accurate. Most of time package visible and protected access can be ignored, so simply do this.\n     if (!Modifier.isPublic(field.getModifiers()) || !Modifier.isPublic(field.getDeclaringClass().getModifiers())) {\n-      throw new IllegalStateException(\n-          String.format(\"Can not access field, a public field or and accessor is required.\"\n-                  + \"Declaring class is %s, field is %s\",\n-              field.getDeclaringClass().getName(),\n-              field.getName()));\n+      throw new IllegalStateException(String.format(\"Can not access field, a public field or and accessor is required.\" + \"Declaring class is %s, field is %s\", field.getDeclaringClass().getName(), field.getName()));\n     }\n   }\n \n@@ -178,6 +166,7 @@ public final class LambdaMetafactoryUtils {\n   }\n \n   // slower than reflect directly\n+\n   public static <C, F> Setter<C, F> createSetter(Field field) {\n     checkAccess(field);\n     return (instance, value) -> {\n@@ -188,4 +177,4 @@ public final class LambdaMetafactoryUtils {\n       }\n     };\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "129",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}