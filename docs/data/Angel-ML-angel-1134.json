{
    "project_name": "Angel-ML-angel",
    "violation_id": "1134",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1134/RowsUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1134/RowsUpdateSplit.java\nindex c836694a5ec..be01991e511 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1134/RowsUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/1134/RowsUpdateSplit.java\n@@ -28,192 +28,194 @@ import it.unimi.dsi.fastutil.longs.Long2FloatOpenHashMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n \n public class RowsUpdateSplit implements Serialize {\n-  private final TVector [] rows;\n-  private final int startPos;\n-  private final int endPos;\n-\n-  public RowsUpdateSplit(TVector [] rows, int startPos, int endPos) {\n-    this.rows = rows;\n-    this.startPos = startPos;\n-    this.endPos = endPos;\n-  }\n-\n-  public RowsUpdateSplit() {\n-    this(null, 0, 0);\n-  }\n-\n-  public TVector [] getRows() {\n-    return rows;\n-  }\n-\n-  public int getStartPos() {\n-    return startPos;\n-  }\n-\n-  public int getEndPos() {\n-    return endPos;\n-  }\n-\n-  @Override\n-  public void serialize(ByteBuf buf) {\n-    buf.writeInt(endPos - startPos);\n-    for(int i = startPos; i < endPos; i++) {\n-      serializeRow(buf, rows[i]);\n+    private final TVector[] rows;\n+    private final int startPos;\n+    private final int endPos;\n+\n+    public RowsUpdateSplit(TVector[] rows, int startPos, int endPos) {\n+        this.rows = rows;\n+        this.startPos = startPos;\n+        this.endPos = endPos;\n     }\n-  }\n-\n-  private void serializeRow(ByteBuf buf, TVector row) {\n-    buf.writeInt(row.getRowId());\n-    buf.writeInt(row.getType().getNumber());\n-    switch (row.getType()) {\n-      case T_DOUBLE_DENSE: {\n-        double [] values = ((DenseDoubleVector) row).getValues();\n-        buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n-          buf.writeDouble(values[i]);\n-        }\n-        break;\n-      }\n-\n-      case T_DOUBLE_SPARSE: {\n-        Int2DoubleOpenHashMap data = ((SparseDoubleVector) row).getIndexToValueMap();\n-        buf.writeInt(data.size());\n-        ObjectIterator<Int2DoubleMap.Entry> iter = data.int2DoubleEntrySet().fastIterator();\n-        Int2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeDouble(entry.getDoubleValue());\n-        }\n-        break;\n-      }\n-\n-      case T_DOUBLE_SPARSE_LONGKEY: {\n-        Long2DoubleOpenHashMap data = ((SparseLongKeyDoubleVector) row).getIndexToValueMap();\n-        buf.writeInt(data.size());\n-        ObjectIterator<Long2DoubleMap.Entry> iter = data.long2DoubleEntrySet().fastIterator();\n-        Long2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeLong(entry.getLongKey());\n-          buf.writeDouble(entry.getDoubleValue());\n-        }\n-        break;\n-      }\n-\n-      case T_FLOAT_DENSE: {\n-        float [] values = ((DenseFloatVector) row).getValues();\n-        buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n-          buf.writeFloat(values[i]);\n-        }\n-        break;\n-      }\n-\n-      case T_FLOAT_SPARSE: {\n-        Int2FloatOpenHashMap data = ((SparseFloatVector) row).getIndexToValueMap();\n-        buf.writeInt(data.size());\n-        ObjectIterator<Int2FloatMap.Entry> iter = data.int2FloatEntrySet().fastIterator();\n-        Int2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeFloat(entry.getFloatValue());\n-        }\n-        break;\n-      }\n-\n-      case T_FLOAT_SPARSE_LONGKEY: {\n-        Long2FloatOpenHashMap data = ((SparseLongKeyFloatVector) row).getIndexToValueMap();\n-        buf.writeInt(data.size());\n-        ObjectIterator<Long2FloatMap.Entry> iter = data.long2FloatEntrySet().fastIterator();\n-        Long2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeLong(entry.getLongKey());\n-          buf.writeFloat(entry.getFloatValue());\n-        }\n-        break;\n-      }\n-\n-      case T_INT_DENSE: {\n-        int [] values = ((DenseIntVector) row).getValues();\n-        buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n-          buf.writeInt(values[i]);\n-        }\n-        break;\n-      }\n-\n-      case T_INT_SPARSE: {\n-        Int2IntOpenHashMap data = ((SparseIntVector) row).getIndexToValueMap();\n-        buf.writeInt(data.size());\n-        ObjectIterator<Int2IntMap.Entry> iter = data.int2IntEntrySet().fastIterator();\n-        Int2IntMap.Entry entry;\n-        while(iter.hasNext()) {\n-          entry = iter.next();\n-          buf.writeInt(entry.getIntKey());\n-          buf.writeInt(entry.getIntValue());\n+\n+    public RowsUpdateSplit() {\n+        this(null, 0, 0);\n+    }\n+\n+    public TVector[] getRows() {\n+        return rows;\n+    }\n+\n+    public int getStartPos() {\n+        return startPos;\n+    }\n+\n+    public int getEndPos() {\n+        return endPos;\n+    }\n+\n+    @Override\n+    public void serialize(ByteBuf buf) {\n+        buf.writeInt(endPos - startPos);\n+        for (int i = startPos; i < endPos; i++) {\n+            serializeRow(buf, rows[i]);\n         }\n-        break;\n-      }\n+    }\n \n-      default:\n-        throw new UnsupportedOperationException(\"Unsupport row type \" + row.getType());\n+    private void serializeRow(ByteBuf buf, TVector row) {\n+        buf.writeInt(row.getRowId());\n+        buf.writeInt(row.getType().getNumber());\n+        switch (row.getType()) {\n+            case T_DOUBLE_DENSE: {\n+                double[] values = ((DenseDoubleVector) row).getValues();\n+                buf.writeInt(values.length);\n+                for (int i = 0; i < values.length; i++) {\n+                    buf.writeDouble(values[i]);\n+                }\n+                break;\n+            }\n+\n+            case T_DOUBLE_SPARSE: {\n+                Int2DoubleOpenHashMap data = ((SparseDoubleVector) row).getIndexToValueMap();\n+                buf.writeInt(data.size());\n+                ObjectIterator<Int2DoubleMap.Entry> iter = data.int2DoubleEntrySet().fastIterator();\n+                Int2DoubleMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeInt(entry.getIntKey());\n+                    buf.writeDouble(entry.getDoubleValue());\n+                }\n+                break;\n+            }\n+\n+            case T_DOUBLE_SPARSE_LONGKEY: {\n+                Long2DoubleOpenHashMap data =\n+                        ((SparseLongKeyDoubleVector) row).getIndexToValueMap();\n+                buf.writeInt(data.size());\n+                ObjectIterator<Long2DoubleMap.Entry> iter =\n+                        data.long2DoubleEntrySet().fastIterator();\n+                Long2DoubleMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeLong(entry.getLongKey());\n+                    buf.writeDouble(entry.getDoubleValue());\n+                }\n+                break;\n+            }\n+\n+            case T_FLOAT_DENSE: {\n+                float[] values = ((DenseFloatVector) row).getValues();\n+                buf.writeInt(values.length);\n+                for (int i = 0; i < values.length; i++) {\n+                    buf.writeFloat(values[i]);\n+                }\n+                break;\n+            }\n+\n+            case T_FLOAT_SPARSE: {\n+                Int2FloatOpenHashMap data = ((SparseFloatVector) row).getIndexToValueMap();\n+                buf.writeInt(data.size());\n+                ObjectIterator<Int2FloatMap.Entry> iter = data.int2FloatEntrySet().fastIterator();\n+                Int2FloatMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeInt(entry.getIntKey());\n+                    buf.writeFloat(entry.getFloatValue());\n+                }\n+                break;\n+            }\n+\n+            case T_FLOAT_SPARSE_LONGKEY: {\n+                Long2FloatOpenHashMap data = ((SparseLongKeyFloatVector) row).getIndexToValueMap();\n+                buf.writeInt(data.size());\n+                ObjectIterator<Long2FloatMap.Entry> iter = data.long2FloatEntrySet().fastIterator();\n+                Long2FloatMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeLong(entry.getLongKey());\n+                    buf.writeFloat(entry.getFloatValue());\n+                }\n+                break;\n+            }\n+\n+            case T_INT_DENSE: {\n+                int[] values = ((DenseIntVector) row).getValues();\n+                buf.writeInt(values.length);\n+                for (int i = 0; i < values.length; i++) {\n+                    buf.writeInt(values[i]);\n+                }\n+                break;\n+            }\n+\n+            case T_INT_SPARSE: {\n+                Int2IntOpenHashMap data = ((SparseIntVector) row).getIndexToValueMap();\n+                buf.writeInt(data.size());\n+                ObjectIterator<Int2IntMap.Entry> iter = data.int2IntEntrySet().fastIterator();\n+                Int2IntMap.Entry entry;\n+                while (iter.hasNext()) {\n+                    entry = iter.next();\n+                    buf.writeInt(entry.getIntKey());\n+                    buf.writeInt(entry.getIntValue());\n+                }\n+                break;\n+            }\n+\n+            default:\n+                throw new UnsupportedOperationException(\"Unsupport row type \" + row.getType());\n+        }\n     }\n-  }\n-\n-  @Override\n-  public void deserialize(ByteBuf buf) {\n-    //unused now\n-  }\n-\n-  @Override\n-  public int bufferLen() {\n-    int len = 4;\n-    for(int i = startPos; i < endPos; i++) {\n-      len += rowBufferLen(rows[i]);\n+\n+    @Override\n+    public void deserialize(ByteBuf buf) {\n+        //unused now\n     }\n-    return len;\n-  }\n-\n-  private int rowBufferLen(TVector row) {\n-    int len = 12;\n-    switch (row.getType()) {\n-      case T_DOUBLE_DENSE:\n-        len += 8 * row.size();\n-        break;\n-\n-      case T_DOUBLE_SPARSE:\n-        len += 12 * row.size();\n-        break;\n-\n-      case T_FLOAT_DENSE:\n-      case T_INT_DENSE:\n-        len += 4 * row.size();\n-        break;\n-\n-      case T_FLOAT_SPARSE:\n-      case T_INT_SPARSE:\n-        len += 8 * row.size();\n-        break;\n-\n-      case T_DOUBLE_SPARSE_LONGKEY:\n-        len += 16 * row.size();\n-        break;\n-\n-      case T_FLOAT_SPARSE_LONGKEY:\n-        len += 12 * row.size();\n-        break;\n-\n-      default:\n-        throw new UnsupportedOperationException(\"Unsupport row type \" + row.getType());\n+\n+    @Override\n+    public int bufferLen() {\n+        int len = 4;\n+        for (int i = startPos; i < endPos; i++) {\n+            len += rowBufferLen(rows[i]);\n+        }\n+        return len;\n     }\n \n-    return len;\n-  }\n+    private int rowBufferLen(TVector row) {\n+        int len = 12;\n+        switch (row.getType()) {\n+            case T_DOUBLE_DENSE:\n+                len += 8 * row.size();\n+                break;\n+\n+            case T_DOUBLE_SPARSE:\n+                len += 12 * row.size();\n+                break;\n+\n+            case T_FLOAT_DENSE:\n+            case T_INT_DENSE:\n+                len += 4 * row.size();\n+                break;\n+\n+            case T_FLOAT_SPARSE:\n+            case T_INT_SPARSE:\n+                len += 8 * row.size();\n+                break;\n+\n+            case T_DOUBLE_SPARSE_LONGKEY:\n+                len += 16 * row.size();\n+                break;\n+\n+            case T_FLOAT_SPARSE_LONGKEY:\n+                len += 12 * row.size();\n+                break;\n+\n+            default:\n+                throw new UnsupportedOperationException(\"Unsupport row type \" + row.getType());\n+        }\n+\n+        return len;\n+    }\n \n-  public int size() {\n-    return endPos - startPos;\n-  }\n+    public int size() {\n+        return endPos - startPos;\n+    }\n }\n",
            "diff_size": 312
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1134/RowsUpdateSplit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1134/RowsUpdateSplit.java\nindex c836694a5ec..dc09798330f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/1134/RowsUpdateSplit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/1134/RowsUpdateSplit.java\n@@ -28,11 +28,11 @@ import it.unimi.dsi.fastutil.longs.Long2FloatOpenHashMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n \n public class RowsUpdateSplit implements Serialize {\n-  private final TVector [] rows;\n+  private final TVector[] rows;\n   private final int startPos;\n   private final int endPos;\n \n-  public RowsUpdateSplit(TVector [] rows, int startPos, int endPos) {\n+  public RowsUpdateSplit(TVector[] rows, int startPos, int endPos) {\n     this.rows = rows;\n     this.startPos = startPos;\n     this.endPos = endPos;\n@@ -42,7 +42,7 @@ public class RowsUpdateSplit implements Serialize {\n     this(null, 0, 0);\n   }\n \n-  public TVector [] getRows() {\n+  public TVector[] getRows() {\n     return rows;\n   }\n \n@@ -57,7 +57,7 @@ public class RowsUpdateSplit implements Serialize {\n   @Override\n   public void serialize(ByteBuf buf) {\n     buf.writeInt(endPos - startPos);\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       serializeRow(buf, rows[i]);\n     }\n   }\n@@ -69,7 +69,7 @@ public class RowsUpdateSplit implements Serialize {\n       case T_DOUBLE_DENSE: {\n         double [] values = ((DenseDoubleVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeDouble(values[i]);\n         }\n         break;\n@@ -80,7 +80,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2DoubleMap.Entry> iter = data.int2DoubleEntrySet().fastIterator();\n         Int2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeDouble(entry.getDoubleValue());\n@@ -93,7 +93,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Long2DoubleMap.Entry> iter = data.long2DoubleEntrySet().fastIterator();\n         Long2DoubleMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeLong(entry.getLongKey());\n           buf.writeDouble(entry.getDoubleValue());\n@@ -102,9 +102,9 @@ public class RowsUpdateSplit implements Serialize {\n       }\n \n       case T_FLOAT_DENSE: {\n-        float [] values = ((DenseFloatVector) row).getValues();\n+        float[] values = ((DenseFloatVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeFloat(values[i]);\n         }\n         break;\n@@ -115,7 +115,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2FloatMap.Entry> iter = data.int2FloatEntrySet().fastIterator();\n         Int2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeFloat(entry.getFloatValue());\n@@ -128,7 +128,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Long2FloatMap.Entry> iter = data.long2FloatEntrySet().fastIterator();\n         Long2FloatMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeLong(entry.getLongKey());\n           buf.writeFloat(entry.getFloatValue());\n@@ -137,9 +137,9 @@ public class RowsUpdateSplit implements Serialize {\n       }\n \n       case T_INT_DENSE: {\n-        int [] values = ((DenseIntVector) row).getValues();\n+        int[] values = ((DenseIntVector) row).getValues();\n         buf.writeInt(values.length);\n-        for(int i = 0; i < values.length; i++) {\n+        for (int i = 0; i < values.length; i++) {\n           buf.writeInt(values[i]);\n         }\n         break;\n@@ -150,7 +150,7 @@ public class RowsUpdateSplit implements Serialize {\n         buf.writeInt(data.size());\n         ObjectIterator<Int2IntMap.Entry> iter = data.int2IntEntrySet().fastIterator();\n         Int2IntMap.Entry entry;\n-        while(iter.hasNext()) {\n+        while (iter.hasNext()) {\n           entry = iter.next();\n           buf.writeInt(entry.getIntKey());\n           buf.writeInt(entry.getIntValue());\n@@ -171,7 +171,7 @@ public class RowsUpdateSplit implements Serialize {\n   @Override\n   public int bufferLen() {\n     int len = 4;\n-    for(int i = startPos; i < endPos; i++) {\n+    for (int i = startPos; i < endPos; i++) {\n       len += rowBufferLen(rows[i]);\n     }\n     return len;\n@@ -183,32 +183,26 @@ public class RowsUpdateSplit implements Serialize {\n       case T_DOUBLE_DENSE:\n         len += 8 * row.size();\n         break;\n-\n-      case T_DOUBLE_SPARSE:\n+  case T_DOUBLE_SPARSE:\n         len += 12 * row.size();\n         break;\n-\n-      case T_FLOAT_DENSE:\n+  case T_FLOAT_DENSE:\n       case T_INT_DENSE:\n         len += 4 * row.size();\n         break;\n-\n-      case T_FLOAT_SPARSE:\n+  case T_FLOAT_SPARSE:\n       case T_INT_SPARSE:\n         len += 8 * row.size();\n         break;\n-\n-      case T_DOUBLE_SPARSE_LONGKEY:\n+  case T_DOUBLE_SPARSE_LONGKEY:\n         len += 16 * row.size();\n         break;\n-\n-      case T_FLOAT_SPARSE_LONGKEY:\n+  case T_FLOAT_SPARSE_LONGKEY:\n         len += 12 * row.size();\n         break;\n-\n-      default:\n+  default:\n         throw new UnsupportedOperationException(\"Unsupport row type \" + row.getType());\n-    }\n+  }\n \n     return len;\n   }\n@@ -216,4 +210,4 @@ public class RowsUpdateSplit implements Serialize {\n   public int size() {\n     return endPos - startPos;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}