{
    "project_name": "couchbase-couchbase-jvm-core",
    "violation_id": "51",
    "information": {
        "violations": [
            {
                "line": "84",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                    if (response.status() == ResponseStatus.NOT_EXISTS) {\n                        LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");\n                        return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n                    } else {\n                        LOGGER.debug(\"Terse bucket config failed, propagating failed response\");\n                        return Observable.just(response);",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/final/files-repaired/51/HttpLoader.java\nindex 568e790664c..4cc44f447ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/final/files-repaired/51/HttpLoader.java\n@@ -81,7 +81,9 @@ public class HttpLoader extends AbstractLoader {\n \n                     if (response.status() == ResponseStatus.NOT_EXISTS) {\n                         LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");\n-                        return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n+\n+                        return cluster().send( new BucketConfigRequest( VERBOSE_PATH ,hostname,bucket,username, password\n+                            ));\n                     } else {\n                         LOGGER.debug(\"Terse bucket config failed, propagating failed response\");\n                         return Observable.just(response);\n",
            "diff_size": 3
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/checkstyle_idea/51/HttpLoader.java\nindex 568e790664c..69b898c5555 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/checkstyle_idea/51/HttpLoader.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.core.config.loader;\n \n import com.couchbase.client.core.ClusterFacade;\n@@ -48,7 +49,7 @@ public class HttpLoader extends AbstractLoader {\n     /**\n      * Creates a new {@link HttpLoader}.\n      *\n-     * @param cluster the cluster reference.\n+     * @param cluster     the cluster reference.\n      * @param environment the environment to use.\n      */\n     public HttpLoader(ClusterFacade cluster, CoreEnvironment environment) {\n@@ -62,7 +63,7 @@ public class HttpLoader extends AbstractLoader {\n \n     @Override\n     protected Observable<String> discoverConfig(final String bucket, final String username, final String password,\n-        final NetworkAddress hostname) {\n+                                                final NetworkAddress hostname) {\n         if (!env().bootstrapHttpEnabled()) {\n             LOGGER.info(\"HTTP Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"HTTP Bootstrap disabled through configuration.\"));\n@@ -81,7 +82,8 @@ public class HttpLoader extends AbstractLoader {\n \n                     if (response.status() == ResponseStatus.NOT_EXISTS) {\n                         LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");\n-                        return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n+                        return cluster().send(\n+                            new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n                     } else {\n                         LOGGER.debug(\"Terse bucket config failed, propagating failed response\");\n                         return Observable.just(response);\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/naturalize/51/HttpLoader.java\nindex 568e790664c..8e5c6963ce8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/naturalize/51/HttpLoader.java\n@@ -63,7 +63,7 @@ public class HttpLoader extends AbstractLoader {\n     @Override\n     protected Observable<String> discoverConfig(final String bucket, final String username, final String password,\n         final NetworkAddress hostname) {\n-        if (!env().bootstrapHttpEnabled()) {\n+    if (!env().bootstrapHttpEnabled()) {\n             LOGGER.info(\"HTTP Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"HTTP Bootstrap disabled through configuration.\"));\n         }\n@@ -92,13 +92,12 @@ public class HttpLoader extends AbstractLoader {\n                 @Override\n                 public String call(BucketConfigResponse response) {\n                     if (!response.status().isSuccess()) {\n-                        throw new IllegalStateException(\"Could not load bucket configuration: \"\n-                            + response.status() + \"(\" + response.config() + \")\");\n-                    }\n+                        throw new IllegalStateException(\"Could not load bucket configuration: \" + response.status() + \"(\" + response.config() + \")\");\n+    }\n \n                     LOGGER.debug(\"Successfully loaded config through HTTP.\");\n                     return replaceHostWildcard(response.config(), hostname);\n                 }\n             });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 130, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 134, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 138, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 138, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 134, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 134, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 138, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 138, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 134, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 138, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 210).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 138, expected level should be one of the following: 20, 24.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'else rcurly' has incorrect indentation level 134, expected level should be one of the following: 16, 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 130, expected level should be one of the following: 12, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 126, expected level should be one of the following: 8, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 132, expected level should be one of the following: 130, 134.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 136, expected level should be one of the following: 134, 138.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 140, expected level should be one of the following: 138, 142.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 265).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 136, expected level should be one of the following: 134, 138.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 136, expected level should be one of the following: 134, 138.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 136, expected level should be one of the following: 134, 138.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 132, expected level should be one of the following: 130, 134.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 128, expected level should be one of the following: 126, 130.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/codebuff/51/HttpLoader.java\nindex 568e790664c..37cc6d78cf9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/codebuff/51/HttpLoader.java\n@@ -35,13 +35,14 @@ import rx.functions.Func1;\n  * @author Michael Nitschinger\n  * @since 1.0\n  */\n+\n public class HttpLoader extends AbstractLoader {\n \n     /**\n      * The logger used.\n      */\n-    private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(HttpLoader.class);\n \n+    private static final CouchbaseLogger LOGGER = CouchbaseLoggerFactory.getInstance(HttpLoader.class);\n     public static final String TERSE_PATH = \"/pools/default/b/\";\n     public static final String VERBOSE_PATH = \"/pools/default/buckets/\";\n \n@@ -51,6 +52,7 @@ public class HttpLoader extends AbstractLoader {\n      * @param cluster the cluster reference.\n      * @param environment the environment to use.\n      */\n+\n     public HttpLoader(ClusterFacade cluster, CoreEnvironment environment) {\n         super(LoaderType.HTTP, ServiceType.CONFIG, cluster, environment);\n     }\n@@ -60,45 +62,39 @@ public class HttpLoader extends AbstractLoader {\n         return env().sslEnabled() ? env().bootstrapHttpSslPort() : env().bootstrapHttpDirectPort();\n     }\n \n+\n     @Override\n-    protected Observable<String> discoverConfig(final String bucket, final String username, final String password,\n-        final NetworkAddress hostname) {\n+    protected Observable<String> discoverConfig(final String bucket, final String username, final String password, final NetworkAddress hostname) {\n         if (!env().bootstrapHttpEnabled()) {\n             LOGGER.info(\"HTTP Bootstrap manually disabled.\");\n             return Observable.error(new ConfigurationException(\"HTTP Bootstrap disabled through configuration.\"));\n         }\n         LOGGER.debug(\"Starting to discover config through HTTP Bootstrap\");\n+        return cluster().<BucketConfigResponse>send(new BucketConfigRequest(TERSE_PATH, hostname, bucket, username, password)).flatMap(new Func1<BucketConfigResponse, Observable<BucketConfigResponse>>() {\n+                                                                                                                                  @Override\n+                                                                                                                                  public Observable<BucketConfigResponse> call(BucketConfigResponse response) {\n+                                                                                                                                      if (response.status().isSuccess()) {\n+                                                                                                                                          LOGGER.debug(\"Successfully got config from terse bucket remote.\");\n+                                                                                                                                          return Observable.just(response);\n+                                                                                                                                      }\n \n-        return cluster()\n-            .<BucketConfigResponse>send(new BucketConfigRequest(TERSE_PATH, hostname, bucket, username, password))\n-            .flatMap(new Func1<BucketConfigResponse, Observable<BucketConfigResponse>>() {\n-                @Override\n-                public Observable<BucketConfigResponse> call(BucketConfigResponse response) {\n-                    if (response.status().isSuccess()) {\n-                        LOGGER.debug(\"Successfully got config from terse bucket remote.\");\n-                        return Observable.just(response);\n-                    }\n-\n-                    if (response.status() == ResponseStatus.NOT_EXISTS) {\n-                        LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");\n-                        return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n-                    } else {\n-                        LOGGER.debug(\"Terse bucket config failed, propagating failed response\");\n-                        return Observable.just(response);\n-                    }\n-                }\n-            })\n-            .map(new Func1<BucketConfigResponse, String>() {\n-                @Override\n-                public String call(BucketConfigResponse response) {\n-                    if (!response.status().isSuccess()) {\n-                        throw new IllegalStateException(\"Could not load bucket configuration: \"\n-                            + response.status() + \"(\" + response.config() + \")\");\n-                    }\n-\n-                    LOGGER.debug(\"Successfully loaded config through HTTP.\");\n-                    return replaceHostWildcard(response.config(), hostname);\n-                }\n-            });\n+                                                                                                                                      if (response.status() == ResponseStatus.NOT_EXISTS) {\n+                                                                                                                                          LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");\n+                                                                                                                                          return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n+                                                                                                                                      } else {\n+                                                                                                                                          LOGGER.debug(\"Terse bucket config failed, propagating failed response\");\n+                                                                                                                                          return Observable.just(response);\n+                                                                                                                                      }\n+                                                                                                                                  }\n+                                                                                                                              }).map(new Func1<BucketConfigResponse, String>() {\n+                                                                                                                                    @Override\n+                                                                                                                                    public String call(BucketConfigResponse response) {\n+                                                                                                                                        if (!response.status().isSuccess()) {\n+                                                                                                                                            throw new IllegalStateException(\"Could not load bucket configuration: \" + response.status() + \"(\" + response.config() + \")\");\n+                                                                                                                                        }\n+                                                                                                                                        LOGGER.debug(\"Successfully loaded config through HTTP.\");\n+                                                                                                                                        return replaceHostWildcard(response.config(), hostname);\n+                                                                                                                                    }\n+                                                                                                                                });\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/random/files-repaired/51/HttpLoader.java\nindex 568e790664c..4cc44f447ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/random/files-repaired/51/HttpLoader.java\n@@ -81,7 +81,9 @@ public class HttpLoader extends AbstractLoader {\n \n                     if (response.status() == ResponseStatus.NOT_EXISTS) {\n                         LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");\n-                        return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n+\n+                        return cluster().send( new BucketConfigRequest( VERBOSE_PATH ,hostname,bucket,username, password\n+                            ));\n                     } else {\n                         LOGGER.debug(\"Terse bucket config failed, propagating failed response\");\n                         return Observable.just(response);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "83",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "83",
                    "column": "106",
                    "severity": "warning",
                    "message": "WhitespaceAround: 'return' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "83",
                    "column": "204",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/three_grams/files-repaired/51/HttpLoader.java\nindex 568e790664c..052e3efa0ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/violations/51/HttpLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/couchbase-couchbase-jvm-core/styler/05_predictions/three_grams/files-repaired/51/HttpLoader.java\n@@ -80,8 +80,7 @@ public class HttpLoader extends AbstractLoader {\n                     }\n \n                     if (response.status() == ResponseStatus.NOT_EXISTS) {\n-                        LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");\n-                        return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n+                        LOGGER.debug(\"Terse bucket config failed (not found), falling back to verbose.\");return cluster().send(new BucketConfigRequest(VERBOSE_PATH, hostname, bucket, username, password));\n                     } else {\n                         LOGGER.debug(\"Terse bucket config failed, propagating failed response\");\n                         return Observable.just(response);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}