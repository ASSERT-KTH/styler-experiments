{
    "project_name": "Angel-ML-angel",
    "violation_id": "23",
    "information": {
        "violations": [
            {
                "line": "53",
                "column": "9",
                "severity": "error",
                "message": "',' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
            }
        ]
    },
    "source_code": "    PartitionKey key = partKey.getPartKey();\n    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n        , (int)key.getStartCol(), (int)key.getEndCol()};\n    return new FullPartitionAggrResult(result, partInfo);\n  }\n",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/23/FullAggrFunc.java\nindex c004df543b2..1c0c00b9e77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/23/FullAggrFunc.java\n@@ -49,8 +49,8 @@ public abstract class FullAggrFunc extends GetFunc {\n       result = process(part, partKey.getPartKey());\n     }\n     PartitionKey key = partKey.getPartKey();\n-    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n-        , (int)key.getStartCol(), (int)key.getEndCol()};\n+    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow(),\n+        (int)key.getStartCol(), (int)key.getEndCol()};\n     return new FullPartitionAggrResult(result, partInfo);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "53",
                    "column": "17",
                    "severity": "error",
                    "message": "',' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/23/FullAggrFunc.java\nindex c004df543b2..c70aab0a53f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/23/FullAggrFunc.java\n@@ -31,44 +31,44 @@ import com.tencent.angel.ps.impl.matrix.ServerPartition;\n  */\n public abstract class FullAggrFunc extends GetFunc {\n \n-  public FullAggrFunc(int matrixId) {\n-    super(new FullAggrParam(matrixId));\n-  }\n+    public FullAggrFunc(int matrixId) {\n+        super(new FullAggrParam(matrixId));\n+    }\n \n-  public FullAggrFunc() {\n-    super(null);\n-  }\n+    public FullAggrFunc() {\n+        super(null);\n+    }\n \n-  @Override\n-  public PartitionGetResult partitionGet(PartitionGetParam partKey) {\n-    ServerPartition part = PSContext.get().getMatrixPartitionManager()\n-        .getPartition(partKey.getMatrixId(), partKey.getPartKey().getPartitionId());\n+    @Override\n+    public PartitionGetResult partitionGet(PartitionGetParam partKey) {\n+        ServerPartition part = PSContext.get().getMatrixPartitionManager()\n+                .getPartition(partKey.getMatrixId(), partKey.getPartKey().getPartitionId());\n \n-    double[][] result = null;\n-    if (part != null) {\n-      result = process(part, partKey.getPartKey());\n+        double[][] result = null;\n+        if (part != null) {\n+            result = process(part, partKey.getPartKey());\n+        }\n+        PartitionKey key = partKey.getPartKey();\n+        int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n+                , (int) key.getStartCol(), (int) key.getEndCol()};\n+        return new FullPartitionAggrResult(result, partInfo);\n     }\n-    PartitionKey key = partKey.getPartKey();\n-    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n-        , (int)key.getStartCol(), (int)key.getEndCol()};\n-    return new FullPartitionAggrResult(result, partInfo);\n-  }\n \n-  private double[][] process(ServerPartition part, PartitionKey key) {\n-    switch (part.getRowType()) {\n-      case T_DOUBLE_DENSE:\n-        int startRow = key.getStartRow();\n-        int endRow = key.getEndRow();\n-        ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[endRow - startRow];\n-        for (int i = startRow; i < endRow; i++) {\n-          denseRows[i - startRow] = (ServerDenseDoubleRow) part.getRow(i);\n+    private double[][] process(ServerPartition part, PartitionKey key) {\n+        switch (part.getRowType()) {\n+            case T_DOUBLE_DENSE:\n+                int startRow = key.getStartRow();\n+                int endRow = key.getEndRow();\n+                ServerDenseDoubleRow[] denseRows = new ServerDenseDoubleRow[endRow - startRow];\n+                for (int i = startRow; i < endRow; i++) {\n+                    denseRows[i - startRow] = (ServerDenseDoubleRow) part.getRow(i);\n+                }\n+                return doProcess(denseRows);\n+            default:\n+                throw new RuntimeException(\"currently only supports Double Dense Row\");\n         }\n-        return doProcess(denseRows);\n-      default:\n-        throw new RuntimeException(\"currently only supports Double Dense Row\");\n     }\n-  }\n \n-  protected abstract double[][] doProcess(ServerDenseDoubleRow[] rows);\n+    protected abstract double[][] doProcess(ServerDenseDoubleRow[] rows);\n \n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/23/FullAggrFunc.java\nindex c004df543b2..3111f608d32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/23/FullAggrFunc.java\n@@ -43,15 +43,13 @@ public abstract class FullAggrFunc extends GetFunc {\n   public PartitionGetResult partitionGet(PartitionGetParam partKey) {\n     ServerPartition part = PSContext.get().getMatrixPartitionManager()\n         .getPartition(partKey.getMatrixId(), partKey.getPartKey().getPartitionId());\n-\n-    double[][] result = null;\n+double[][] result = null;\n     if (part != null) {\n       result = process(part, partKey.getPartKey());\n     }\n     PartitionKey key = partKey.getPartKey();\n-    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n-        , (int)key.getStartCol(), (int)key.getEndCol()};\n-    return new FullPartitionAggrResult(result, partInfo);\n+    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow(), (int)key.getStartCol(), (int)key.getEndCol() };\n+return new FullPartitionAggrResult(result, partInfo);\n   }\n \n   private double[][] process(ServerPartition part, PartitionKey key) {\n@@ -71,4 +69,4 @@ public abstract class FullAggrFunc extends GetFunc {\n \n   protected abstract double[][] doProcess(ServerDenseDoubleRow[] rows);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/23/FullAggrFunc.java\nindex c004df543b2..3a105465df0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/23/FullAggrFunc.java\n@@ -29,6 +29,7 @@ import com.tencent.angel.ps.impl.matrix.ServerPartition;\n  * other aggregate function will extend `FullAggrFunc` and implement `doProcessRow`.\n  * This function will process the whole matrix.\n  */\n+\n public abstract class FullAggrFunc extends GetFunc {\n \n   public FullAggrFunc(int matrixId) {\n@@ -41,16 +42,14 @@ public abstract class FullAggrFunc extends GetFunc {\n \n   @Override\n   public PartitionGetResult partitionGet(PartitionGetParam partKey) {\n-    ServerPartition part = PSContext.get().getMatrixPartitionManager()\n-        .getPartition(partKey.getMatrixId(), partKey.getPartKey().getPartitionId());\n-\n+    ServerPartition part = PSContext.get().getMatrixPartitionManager().getPartition(partKey.getMatrixId(), partKey.getPartKey().getPartitionId());\n     double[][] result = null;\n     if (part != null) {\n       result = process(part, partKey.getPartKey());\n     }\n+\n     PartitionKey key = partKey.getPartKey();\n-    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n-        , (int)key.getStartCol(), (int)key.getEndCol()};\n+    int[] partInfo = new int[]{key.getStartRow(), key.getEndRow(), (int) key.getStartCol(), (int) key.getEndCol()};\n     return new FullPartitionAggrResult(result, partInfo);\n   }\n \n@@ -71,4 +70,4 @@ public abstract class FullAggrFunc extends GetFunc {\n \n   protected abstract double[][] doProcess(ServerDenseDoubleRow[] rows);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/23/FullAggrFunc.java\nindex c004df543b2..1c0c00b9e77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/23/FullAggrFunc.java\n@@ -49,8 +49,8 @@ public abstract class FullAggrFunc extends GetFunc {\n       result = process(part, partKey.getPartKey());\n     }\n     PartitionKey key = partKey.getPartKey();\n-    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n-        , (int)key.getStartCol(), (int)key.getEndCol()};\n+    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow(),\n+        (int)key.getStartCol(), (int)key.getEndCol()};\n     return new FullPartitionAggrResult(result, partInfo);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/23/FullAggrFunc.java\nindex c004df543b2..e05128b0e07 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/23/FullAggrFunc.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/23/FullAggrFunc.java\n@@ -49,8 +49,8 @@ public abstract class FullAggrFunc extends GetFunc {\n       result = process(part, partKey.getPartKey());\n     }\n     PartitionKey key = partKey.getPartKey();\n-    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow()\n-        , (int)key.getStartCol(), (int)key.getEndCol()};\n+    int[] partInfo = new int[] {key.getStartRow(), key.getEndRow(),\n+                   (int)key.getStartCol(), (int)key.getEndCol()};\n     return new FullPartitionAggrResult(result, partInfo);\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}