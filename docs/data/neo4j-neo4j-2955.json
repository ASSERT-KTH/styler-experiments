{
    "project_name": "neo4j-neo4j",
    "violation_id": "2955",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "85",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2955/Neo4j.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2955/Neo4j.java\nindex b9163a20bfd..58532e388b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2955/Neo4j.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2955/Neo4j.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.harness;\n \n import java.io.PrintStream;\n@@ -35,12 +36,14 @@ public interface Neo4j extends AutoCloseable\n {\n     /**\n      * Returns the URI to the Bolt Protocol connector of the instance.\n+     *\n      * @return the bolt address.\n      */\n     URI boltURI();\n \n     /**\n      * Returns the URI to the root resource of the instance. For example, http://localhost:7474/\n+     *\n      * @return the http address to the root resource.\n      */\n     URI httpURI();\n@@ -48,33 +51,38 @@ public interface Neo4j extends AutoCloseable\n     /**\n      * Returns ths URI to the root resource of the instance using the https protocol.\n      * For example, https://localhost:7475/.\n+     *\n      * @return the https address to the root resource.\n      */\n     URI httpsURI();\n \n     /**\n      * Access the {@link DatabaseManagementService} used by the server.\n+     *\n      * @return the database management service backing this instance.\n      */\n     DatabaseManagementService databaseManagementService();\n \n     /**\n      * Access default database service.\n+     *\n      * @return default database service.\n      */\n     GraphDatabaseService defaultDatabaseService();\n \n     /**\n      * Returns the server's configuration.\n+     *\n      * @return the current configuration of the instance.\n      */\n     Configuration config();\n \n     /**\n      * Prints logs to the specified print stream if log is available.\n+     *\n      * @param out the stream to print to.\n      */\n-    void printLogs( PrintStream out );\n+    void printLogs(PrintStream out);\n \n     /**\n      * Shutdown neo4j test instance.\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}