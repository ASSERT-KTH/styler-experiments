{
    "project_name": "CONNECT-Solution-CONNECT",
    "violation_id": "970",
    "information": {
        "violations": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.policyengine.adapter.pep.proxy;\n\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\nimport gov.hhs.fha.nhinc.common.nhinccommonadapter.CheckPolicyRequestType;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/970/AdapterPEPProxyJavaImpl.java\nindex 053f2adea18..336e0f0e179 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/final/files-repaired/970/AdapterPEPProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pep.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/970/AdapterPEPProxyJavaImpl.java\nindex 053f2adea18..603f3fdaad0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/checkstyle_idea/970/AdapterPEPProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pep.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -36,21 +37,21 @@ import org.slf4j.LoggerFactory;\n  * This is the concrete implementation for the Java based call to the AdapterPEP.\n  */\n public class AdapterPEPProxyJavaImpl implements AdapterPEPProxy {\n-    private static final Logger LOG = LoggerFactory.getLogger(AdapterPEPProxyJavaImpl.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(AdapterPEPProxyJavaImpl.class);\n \n-    /**\n-     * Given a request to check the access policy, this service will interface with the PDP to determine if access is to\n-     * be granted or denied.\n-     *\n-     * @param checkPolicyRequest The xacml request to check defined policy\n-     * @return The xacml response which contains the access decision\n-     */\n-    @Override\n-    public CheckPolicyResponseType checkPolicy(CheckPolicyRequestType checkPolicyRequest, AssertionType assertion) {\n-        //Insert custom logic for consent management such as CONNECT PEP plugin\n-        //Default is noop permit.\n+  /**\n+   * Given a request to check the access policy, this service will interface with the PDP to determine if access is to\n+   * be granted or denied.\n+   *\n+   * @param checkPolicyRequest The xacml request to check defined policy\n+   * @return The xacml response which contains the access decision\n+   */\n+  @Override\n+  public CheckPolicyResponseType checkPolicy(CheckPolicyRequestType checkPolicyRequest, AssertionType assertion) {\n+    //Insert custom logic for consent management such as CONNECT PEP plugin\n+    //Default is noop permit.\n \n-        AdapterPEPProxyNoOpImpl noopImpl = new AdapterPEPProxyNoOpImpl();\n-        return noopImpl.checkPolicy(checkPolicyRequest, assertion);\n-    }\n+    AdapterPEPProxyNoOpImpl noopImpl = new AdapterPEPProxyNoOpImpl();\n+    return noopImpl.checkPolicy(checkPolicyRequest, assertion);\n+  }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/970/AdapterPEPProxyJavaImpl.java\nindex 053f2adea18..9130c82e925 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/naturalize/970/AdapterPEPProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pep.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n@@ -51,6 +52,7 @@ public class AdapterPEPProxyJavaImpl implements AdapterPEPProxy {\n         //Default is noop permit.\n \n         AdapterPEPProxyNoOpImpl noopImpl = new AdapterPEPProxyNoOpImpl();\n-        return noopImpl.checkPolicy(checkPolicyRequest, assertion);\n+\n+return noopImpl.checkPolicy(checkPolicyRequest, assertion);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/970/AdapterPEPProxyJavaImpl.java\nindex 053f2adea18..cedd1e0aae3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/codebuff/970/AdapterPEPProxyJavaImpl.java\n@@ -35,7 +35,10 @@ import org.slf4j.LoggerFactory;\n /**\n  * This is the concrete implementation for the Java based call to the AdapterPEP.\n  */\n+\n+\n public class AdapterPEPProxyJavaImpl implements AdapterPEPProxy {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(AdapterPEPProxyJavaImpl.class);\n \n     /**\n@@ -45,12 +48,14 @@ public class AdapterPEPProxyJavaImpl implements AdapterPEPProxy {\n      * @param checkPolicyRequest The xacml request to check defined policy\n      * @return The xacml response which contains the access decision\n      */\n+\n+\n     @Override\n     public CheckPolicyResponseType checkPolicy(CheckPolicyRequestType checkPolicyRequest, AssertionType assertion) {\n         //Insert custom logic for consent management such as CONNECT PEP plugin\n         //Default is noop permit.\n-\n         AdapterPEPProxyNoOpImpl noopImpl = new AdapterPEPProxyNoOpImpl();\n         return noopImpl.checkPolicy(checkPolicyRequest, assertion);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/970/AdapterPEPProxyJavaImpl.java\nindex 053f2adea18..336e0f0e179 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/random/files-repaired/970/AdapterPEPProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pep.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/970/AdapterPEPProxyJavaImpl.java\nindex 053f2adea18..336e0f0e179 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/violations/970/AdapterPEPProxyJavaImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/CONNECT-Solution-CONNECT/styler/05_predictions/three_grams/files-repaired/970/AdapterPEPProxyJavaImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.policyengine.adapter.pep.proxy;\n \n import gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}