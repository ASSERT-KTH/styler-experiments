{
    "project_name": "EMResearch-EMB",
    "violation_id": "87",
    "information": {
        "violations": [
            {
                "line": "89",
                "column": "5",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "  }\n  String getStandard() {\n    if(hasEquivalent()) {\n      return equivalent;\n    } else {\n      return replacement;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/87/DativePluralsEntry.java\nindex 011a75b5959..913f1ca8500 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/EMResearch-EMB/styler/05_predictions/final/files-repaired/87/DativePluralsEntry.java\n@@ -86,7 +86,7 @@ class DativePluralsEntry {\n     return (this.gender.equals(\"f\")) ? \"Noun:Fem:Dat:Pl\" : \"Noun:Masc:Dat:Pl\";\n   }\n   String getStandard() {\n-    if(hasEquivalent()) {\n+    if (hasEquivalent()) {\n       return equivalent;\n     } else {\n       return replacement;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/87/DativePluralsEntry.java\nindex 011a75b5959..06a3bd1b030 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/checkstyle_idea/87/DativePluralsEntry.java\n@@ -16,80 +16,88 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules.ga;\n \n class DativePluralsEntry {\n-  \n-  private String form;\n-  private String formModern;\n-  private String lemma;\n-  private String lemmaModern;\n-  private String equivalent;\n-  private String replacement;\n-\n-  String getForm() {\n-    return form;\n-  }\n-\n-  String getModern() {\n-    return formModern;\n-  }\n-\n-  String getLemma() {\n-    return lemma;\n-  }\n-\n-  String getLemmaModern() {\n-    return lemmaModern;\n-  }\n-\n-  String getEquivalent() {\n-    return equivalent;\n-  }\n-\n-  String getReplacement() {\n-    return replacement;\n-  }\n-\n-  String getGender() {\n-    return gender;\n-  }\n-\n-  private String gender;\n-\n-  DativePluralsEntry(String form, String lemma, String gender, String replacement) {\n-    this.form = form;\n-    this.lemma = lemma;\n-    this.gender = gender;\n-    this.replacement = replacement;\n-  }\n-\n-  void setEquivalent(String equiv) {\n-    this.equivalent = equiv;\n-  }\n-  void setModernised(String modernised) {\n-    this.formModern = modernised;\n-  }\n-  void setModernLemma(String modernised) {\n-    this.lemmaModern = modernised;\n-  }\n-  boolean hasEquivalent() {\n-    return !(equivalent == null || equivalent.equals(\"\"));\n-  }\n-  boolean hasModernised() {\n-    return !(formModern == null || formModern.equals(\"\"));\n-  }\n-  boolean hasModernLemma() {\n-    return !(lemmaModern == null || lemmaModern.equals(\"\"));\n-  }\n-  String getBaseTag() {\n-    return (this.gender.equals(\"f\")) ? \"Noun:Fem:Dat:Pl\" : \"Noun:Masc:Dat:Pl\";\n-  }\n-  String getStandard() {\n-    if(hasEquivalent()) {\n-      return equivalent;\n-    } else {\n-      return replacement;\n-    }\n-  }\n+\n+    private String form;\n+    private String formModern;\n+    private String lemma;\n+    private String lemmaModern;\n+    private String equivalent;\n+    private String replacement;\n+\n+    String getForm() {\n+        return form;\n+    }\n+\n+    String getModern() {\n+        return formModern;\n+    }\n+\n+    String getLemma() {\n+        return lemma;\n+    }\n+\n+    String getLemmaModern() {\n+        return lemmaModern;\n+    }\n+\n+    String getEquivalent() {\n+        return equivalent;\n+    }\n+\n+    String getReplacement() {\n+        return replacement;\n+    }\n+\n+    String getGender() {\n+        return gender;\n+    }\n+\n+    private String gender;\n+\n+    DativePluralsEntry(String form, String lemma, String gender, String replacement) {\n+        this.form = form;\n+        this.lemma = lemma;\n+        this.gender = gender;\n+        this.replacement = replacement;\n+    }\n+\n+    void setEquivalent(String equiv) {\n+        this.equivalent = equiv;\n+    }\n+\n+    void setModernised(String modernised) {\n+        this.formModern = modernised;\n+    }\n+\n+    void setModernLemma(String modernised) {\n+        this.lemmaModern = modernised;\n+    }\n+\n+    boolean hasEquivalent() {\n+        return !(equivalent == null || equivalent.equals(\"\"));\n+    }\n+\n+    boolean hasModernised() {\n+        return !(formModern == null || formModern.equals(\"\"));\n+    }\n+\n+    boolean hasModernLemma() {\n+        return !(lemmaModern == null || lemmaModern.equals(\"\"));\n+    }\n+\n+    String getBaseTag() {\n+        return (this.gender.equals(\"f\")) ? \"Noun:Fem:Dat:Pl\" : \"Noun:Masc:Dat:Pl\";\n+    }\n+\n+    String getStandard() {\n+        if (hasEquivalent()) {\n+            return equivalent;\n+        } else {\n+            return replacement;\n+        }\n+    }\n }\n",
            "diff_size": 81
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/87/DativePluralsEntry.java\nindex 011a75b5959..d54e8ea4a6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/naturalize/87/DativePluralsEntry.java\n@@ -67,10 +67,12 @@ class DativePluralsEntry {\n   void setEquivalent(String equiv) {\n     this.equivalent = equiv;\n   }\n-  void setModernised(String modernised) {\n+\n+void setModernised(String modernised) {\n     this.formModern = modernised;\n   }\n-  void setModernLemma(String modernised) {\n+\n+void setModernLemma(String modernised) {\n     this.lemmaModern = modernised;\n   }\n   boolean hasEquivalent() {\n@@ -86,10 +88,10 @@ class DativePluralsEntry {\n     return (this.gender.equals(\"f\")) ? \"Noun:Fem:Dat:Pl\" : \"Noun:Masc:Dat:Pl\";\n   }\n   String getStandard() {\n-    if(hasEquivalent()) {\n+    if (hasEquivalent()) {\n       return equivalent;\n     } else {\n       return replacement;\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/87/DativePluralsEntry.java\nindex 011a75b5959..eed50e8dd6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/codebuff/87/DativePluralsEntry.java\n@@ -18,78 +18,86 @@\n  */\n package org.languagetool.rules.ga;\n \n+\n class DativePluralsEntry {\n-  \n-  private String form;\n-  private String formModern;\n-  private String lemma;\n-  private String lemmaModern;\n-  private String equivalent;\n-  private String replacement;\n-\n-  String getForm() {\n+\n+    private String form;\n+    private String formModern;\n+    private String lemma;\n+    private String lemmaModern;\n+    private String equivalent;\n+    private String replacement;\n+\n+    String getForm() {\n     return form;\n-  }\n+    }\n \n-  String getModern() {\n+    String getModern() {\n     return formModern;\n-  }\n+    }\n \n-  String getLemma() {\n+    String getLemma() {\n     return lemma;\n-  }\n+    }\n \n-  String getLemmaModern() {\n+    String getLemmaModern() {\n     return lemmaModern;\n-  }\n+    }\n \n-  String getEquivalent() {\n+    String getEquivalent() {\n     return equivalent;\n-  }\n+    }\n \n-  String getReplacement() {\n+    String getReplacement() {\n     return replacement;\n-  }\n+    }\n \n-  String getGender() {\n+    String getGender() {\n     return gender;\n-  }\n+    }\n \n-  private String gender;\n+    private String gender;\n \n-  DativePluralsEntry(String form, String lemma, String gender, String replacement) {\n+    DativePluralsEntry(String form, String lemma, String gender, String replacement) {\n     this.form = form;\n     this.lemma = lemma;\n     this.gender = gender;\n     this.replacement = replacement;\n-  }\n-\n-  void setEquivalent(String equiv) {\n-    this.equivalent = equiv;\n-  }\n-  void setModernised(String modernised) {\n-    this.formModern = modernised;\n-  }\n-  void setModernLemma(String modernised) {\n-    this.lemmaModern = modernised;\n-  }\n-  boolean hasEquivalent() {\n+    }\n+\n+    void setEquivalent(String equiv) {\n+        this.equivalent = equiv;\n+    }\n+\n+    void setModernised(String modernised) {\n+        this.formModern = modernised;\n+    }\n+\n+    void setModernLemma(String modernised) {\n+        this.lemmaModern = modernised;\n+    }\n+\n+    boolean hasEquivalent() {\n     return !(equivalent == null || equivalent.equals(\"\"));\n-  }\n-  boolean hasModernised() {\n+    }\n+\n+    boolean hasModernised() {\n     return !(formModern == null || formModern.equals(\"\"));\n-  }\n-  boolean hasModernLemma() {\n+    }\n+\n+    boolean hasModernLemma() {\n     return !(lemmaModern == null || lemmaModern.equals(\"\"));\n-  }\n-  String getBaseTag() {\n+    }\n+\n+    String getBaseTag() {\n     return (this.gender.equals(\"f\")) ? \"Noun:Fem:Dat:Pl\" : \"Noun:Masc:Dat:Pl\";\n-  }\n-  String getStandard() {\n-    if(hasEquivalent()) {\n-      return equivalent;\n-    } else {\n-      return replacement;\n-    }\n-  }\n-}\n+    }\n+\n+    String getStandard() {\n+        if (hasEquivalent()) {\n+            return equivalent;\n+        } else {\n+            return replacement;\n+        }\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/87/DativePluralsEntry.java\nindex 011a75b5959..913f1ca8500 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/random/files-repaired/87/DativePluralsEntry.java\n@@ -86,7 +86,7 @@ class DativePluralsEntry {\n     return (this.gender.equals(\"f\")) ? \"Noun:Fem:Dat:Pl\" : \"Noun:Masc:Dat:Pl\";\n   }\n   String getStandard() {\n-    if(hasEquivalent()) {\n+    if (hasEquivalent()) {\n       return equivalent;\n     } else {\n       return replacement;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/three_grams/files-repaired/87/DativePluralsEntry.java\nindex 011a75b5959..913f1ca8500 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/violations/87/DativePluralsEntry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/EMResearch-EMB/styler/05_predictions/three_grams/files-repaired/87/DativePluralsEntry.java\n@@ -86,7 +86,7 @@ class DativePluralsEntry {\n     return (this.gender.equals(\"f\")) ? \"Noun:Fem:Dat:Pl\" : \"Noun:Masc:Dat:Pl\";\n   }\n   String getStandard() {\n-    if(hasEquivalent()) {\n+    if (hasEquivalent()) {\n       return equivalent;\n     } else {\n       return replacement;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}