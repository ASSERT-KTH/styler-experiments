{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "151",
    "information": {
        "violations": [
            {
                "line": "108",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @SuppressWarnings(\"unchecked\")\n  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n      Type type) {\n    return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n  }",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "18",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "37",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "108",
                    "column": "47",
                    "severity": "warning",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "69",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "87",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "108",
                    "column": "100",
                    "severity": "warning",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "127",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "108",
                    "column": "128",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/151/SwaggerGeneratorUtils.java\nindex 999bed36aa1..2517c11746f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/151/SwaggerGeneratorUtils.java\n@@ -105,8 +105,7 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n-      Type type) {\n+  public static < SWAGGER_PARAMETER,ANNOTATION > ParameterProcessor< SWAGGER_PARAMETER , ANNOTATION > findParameterProcessors ( Type type) {\n     return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/151/SwaggerGeneratorUtils.java\nindex 999bed36aa1..3f50d018259 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/151/SwaggerGeneratorUtils.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.swagger.generator;\n \n import java.lang.annotation.Annotation;\n@@ -205,7 +206,8 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations,\n-      Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n+                                                             Map<String, List<Annotation>> methodAnnotationMap,\n+                                                             String parameterName) {\n     List<Annotation> methodAnnotations = methodAnnotationMap.remove(parameterName);\n     if (methodAnnotations == null) {\n       methodAnnotations = Collections.emptyList();\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/151/SwaggerGeneratorUtils.java\nindex 999bed36aa1..c86a35d5d85 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/151/SwaggerGeneratorUtils.java\n@@ -107,7 +107,7 @@ public final class SwaggerGeneratorUtils {\n   @SuppressWarnings(\"unchecked\")\n   public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n       Type type) {\n-    return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n+  return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n   public static ResponseTypeProcessor findResponseTypeProcessor(Type type) {\n@@ -174,7 +174,7 @@ public final class SwaggerGeneratorUtils {\n     }\n \n     String msg = String.format(\"parameter name is not present, method=%s:%s\\n\"\n-            + \"solution:\\n\"\n+    + \"solution:\\n\"\n             + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\"\n             + \"    <plugin>\\n\"\n             + \"      <groupId>org.apache.maven.plugins</groupId>\\n\"\n@@ -240,4 +240,4 @@ public final class SwaggerGeneratorUtils {\n \n     return processor.getHttpParameterType(parameterAnnotation);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 505).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/151/SwaggerGeneratorUtils.java\nindex 999bed36aa1..c3b34350bf7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/151/SwaggerGeneratorUtils.java\n@@ -28,25 +28,23 @@ import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.apache.servicecomb.foundation.common.utils.SPIServiceUtils;\n import org.apache.servicecomb.swagger.generator.core.model.HttpParameterType;\n import org.apache.servicecomb.swagger.generator.core.processor.response.DefaultResponseTypeProcessor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.fasterxml.jackson.databind.introspect.BeanPropertyDefinition;\n-\n import io.swagger.models.parameters.Parameter;\n \n public final class SwaggerGeneratorUtils {\n   private static final Logger LOGGER = LoggerFactory.getLogger(SwaggerGeneratorUtils.class);\n \n   // all static fields load from SPI and stateless\n+\n   private static Set<Type> contextTypes = SPIServiceUtils.getOrLoadSortedService(SwaggerContextRegister.class).stream()\n-      .map(SwaggerContextRegister::getContextType)\n-      .collect(Collectors.toSet());\n+                                                                                                              .map(SwaggerContextRegister::getContextType)\n+                                                                                                              .collect(Collectors.toSet());\n \n   private static Map<Type, ClassAnnotationProcessor<?>> classAnnotationProcessors = new HashMap<>();\n \n@@ -60,33 +58,35 @@ public final class SwaggerGeneratorUtils {\n \n   static {\n     // low order value has high priority\n-    for (ClassAnnotationProcessor<?> processor : SPIServiceUtils\n-        .getOrLoadSortedService(ClassAnnotationProcessor.class)) {\n+    for (ClassAnnotationProcessor<?> processor : SPIServiceUtils.getOrLoadSortedService(ClassAnnotationProcessor.class)) {\n       if (classAnnotationProcessors.putIfAbsent(processor.getProcessType(), processor) != null) {\n         LOGGER.info(\"ignore duplicated ClassAnnotationProcessor, type={}, processor={}.\",\n-            processor.getProcessType().getTypeName(), processor.getClass().getName());\n+processor.getProcessType().getTypeName(),\n+processor.getClass().getName());\n       }\n     }\n \n-    for (MethodAnnotationProcessor<?> processor : SPIServiceUtils\n-        .getOrLoadSortedService(MethodAnnotationProcessor.class)) {\n+    for (MethodAnnotationProcessor<?> processor : SPIServiceUtils.getOrLoadSortedService(MethodAnnotationProcessor.class)) {\n       if (methodAnnotationProcessors.putIfAbsent(processor.getProcessType(), processor) != null) {\n         LOGGER.info(\"ignore duplicated MethodAnnotationProcessor, type={}, processor={}.\",\n-            processor.getProcessType().getTypeName(), processor.getClass().getName());\n+processor.getProcessType().getTypeName(),\n+processor.getClass().getName());\n       }\n     }\n \n     for (ParameterProcessor<?, ?> processor : SPIServiceUtils.getOrLoadSortedService(ParameterProcessor.class)) {\n       if (parameterProcessors.putIfAbsent(processor.getProcessType(), processor) != null) {\n         LOGGER.info(\"ignore duplicated ParameterProcessor, type={}, processor={}.\",\n-            processor.getProcessType().getTypeName(), processor.getClass().getName());\n+processor.getProcessType().getTypeName(),\n+processor.getClass().getName());\n       }\n     }\n \n     for (ResponseTypeProcessor processor : SPIServiceUtils.getOrLoadSortedService(ResponseTypeProcessor.class)) {\n       if (responseTypeProcessors.putIfAbsent(processor.getProcessType(), processor) != null) {\n         LOGGER.info(\"ignore duplicated ResponseTypeProcessor, type={}, processor={}.\",\n-            processor.getProcessType().getTypeName(), processor.getClass().getName());\n+processor.getProcessType().getTypeName(),\n+processor.getClass().getName());\n       }\n     }\n   }\n@@ -105,8 +105,7 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n-      Type type) {\n+  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(Type type) {\n     return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n@@ -119,7 +118,6 @@ public final class SwaggerGeneratorUtils {\n     if (type instanceof ParameterizedType) {\n       return responseTypeProcessors.getOrDefault(((ParameterizedType) type).getRawType(), defaultResponseTypeProcessor);\n     }\n-\n     return defaultResponseTypeProcessor;\n   }\n \n@@ -130,20 +128,26 @@ public final class SwaggerGeneratorUtils {\n   public static Annotation[] collectAnnotations(BeanPropertyDefinition propertyDefinition) {\n     List<Annotation> annotations = new ArrayList<>();\n     if (propertyDefinition.getField() != null) {\n-      Collections.addAll(annotations, propertyDefinition.getField().getAnnotated().getAnnotations());\n+      Collections.addAll(annotations, propertyDefinition.getField().getAnnotated()\n+                                                                   .getAnnotations());\n     }\n+\n     if (propertyDefinition.getGetter() != null) {\n-      Collections.addAll(annotations, propertyDefinition.getGetter().getAnnotated().getAnnotations());\n+      Collections.addAll(annotations, propertyDefinition.getGetter().getAnnotated()\n+                                                                    .getAnnotations());\n     }\n+\n     if (propertyDefinition.getSetter() != null) {\n-      Collections.addAll(annotations, propertyDefinition.getSetter().getAnnotated().getAnnotations());\n+      Collections.addAll(annotations, propertyDefinition.getSetter().getAnnotated()\n+                                                                    .getAnnotations());\n     }\n     return annotations.toArray(new Annotation[annotations.size()]);\n   }\n \n   public static String collectParameterName(java.lang.reflect.Parameter methodParameter) {\n-    return collectParameterName(methodParameter.getDeclaringExecutable(), methodParameter.getAnnotations(),\n-        methodParameter.isNamePresent() ? methodParameter.getName() : null);\n+    return collectParameterName(methodParameter.getDeclaringExecutable(),\n+methodParameter.getAnnotations(),\n+methodParameter.isNamePresent() ? methodParameter.getName() : null);\n   }\n \n   public static String collectParameterName(Method method, BeanPropertyDefinition propertyDefinition) {\n@@ -169,21 +173,12 @@ public final class SwaggerGeneratorUtils {\n \n     // 2.use signature name\n     // ensure present parameter name\n+\n     if (StringUtils.isNotEmpty(defaultName)) {\n       return defaultName;\n     }\n \n-    String msg = String.format(\"parameter name is not present, method=%s:%s\\n\"\n-            + \"solution:\\n\"\n-            + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\"\n-            + \"    <plugin>\\n\"\n-            + \"      <groupId>org.apache.maven.plugins</groupId>\\n\"\n-            + \"      <artifactId>maven-compiler-plugin</artifactId>\\n\"\n-            + \"      <configuration>\\n\"\n-            + \"        <compilerArgument>-parameters</compilerArgument>\\n\"\n-            + \"      </configuration>\\n\"\n-            + \"    </plugin>\",\n-        executable.getDeclaringClass().getName(), executable.getName());\n+    String msg = String.format(\"parameter name is not present, method=%s:%s\\n\" + \"solution:\\n\" + \"  change pom.xml, add compiler argument: -parameters, for example:\\n\" + \"    <plugin>\\n\" + \"      <groupId>org.apache.maven.plugins</groupId>\\n\" + \"      <artifactId>maven-compiler-plugin</artifactId>\\n\" + \"      <configuration>\\n\" + \"        <compilerArgument>-parameters</compilerArgument>\\n\" + \"      </configuration>\\n\" + \"    </plugin>\", executable.getDeclaringClass().getName(), executable.getName());\n     throw new IllegalStateException(msg);\n   }\n \n@@ -200,12 +195,10 @@ public final class SwaggerGeneratorUtils {\n         genericType = type;\n       }\n     }\n-\n     return genericType != null ? genericType : defaultType;\n   }\n \n-  public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations,\n-      Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n+  public static List<Annotation> collectParameterAnnotations(Annotation[] parameterAnnotations, Map<String, List<Annotation>> methodAnnotationMap, String parameterName) {\n     List<Annotation> methodAnnotations = methodAnnotationMap.remove(parameterName);\n     if (methodAnnotations == null) {\n       methodAnnotations = Collections.emptyList();\n@@ -214,7 +207,6 @@ public final class SwaggerGeneratorUtils {\n     List<Annotation> annotations = new ArrayList<>();\n     Collections.addAll(annotations, parameterAnnotations);\n     annotations.addAll(methodAnnotations);\n-\n     return annotations;\n   }\n \n@@ -237,7 +229,6 @@ public final class SwaggerGeneratorUtils {\n     if (processor == null) {\n       return null;\n     }\n-\n     return processor.getHttpParameterType(parameterAnnotation);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "column": "18",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "37",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "108",
                    "column": "47",
                    "severity": "warning",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "69",
                    "severity": "warning",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "87",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "108",
                    "column": "100",
                    "severity": "warning",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "108",
                    "column": "127",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "108",
                    "column": "128",
                    "severity": "warning",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/151/SwaggerGeneratorUtils.java\nindex 999bed36aa1..2517c11746f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/151/SwaggerGeneratorUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/151/SwaggerGeneratorUtils.java\n@@ -105,8 +105,7 @@ public final class SwaggerGeneratorUtils {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  public static <SWAGGER_PARAMETER, ANNOTATION> ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION> findParameterProcessors(\n-      Type type) {\n+  public static < SWAGGER_PARAMETER,ANNOTATION > ParameterProcessor< SWAGGER_PARAMETER , ANNOTATION > findParameterProcessors ( Type type) {\n     return (ParameterProcessor<SWAGGER_PARAMETER, ANNOTATION>) parameterProcessors.get(type);\n   }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}