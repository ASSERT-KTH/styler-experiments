{
    "project_name": "Angel-ML-angel",
    "violation_id": "981",
    "information": {
        "violations": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/981/WorkerAttemptContainerAssignedEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/981/WorkerAttemptContainerAssignedEvent.java\nindex bda5b9b314c..e0e23250e4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/981/WorkerAttemptContainerAssignedEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/981/WorkerAttemptContainerAssignedEvent.java\n@@ -22,27 +22,31 @@ import org.apache.hadoop.yarn.api.records.Container;\n /**\n  * Assign container to worker attempt.\n  */\n-public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent{\n-  /**container*/\n-  private final Container container;\n+public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent {\n+    /**\n+     * container\n+     */\n+    private final Container container;\n \n-  /**\n-   * Create a WorkerAttemptContainerAssignedEvent\n-   * @param workerAttemptId worker attempt id\n-   * @param container container\n-   */\n-  public WorkerAttemptContainerAssignedEvent(\n-      WorkerAttemptId workerAttemptId, Container container) {\n-    super(WorkerAttemptEventType.CONTAINER_ASSIGN, workerAttemptId);\n-    this.container = container;\n-  }\n+    /**\n+     * Create a WorkerAttemptContainerAssignedEvent\n+     *\n+     * @param workerAttemptId worker attempt id\n+     * @param container       container\n+     */\n+    public WorkerAttemptContainerAssignedEvent(\n+            WorkerAttemptId workerAttemptId, Container container) {\n+        super(WorkerAttemptEventType.CONTAINER_ASSIGN, workerAttemptId);\n+        this.container = container;\n+    }\n \n-  /**\n-   * Get container\n-   * @return container\n-   */\n-  public Container getContainer() {\n-    return container;\n-  }\n+    /**\n+     * Get container\n+     *\n+     * @return container\n+     */\n+    public Container getContainer() {\n+        return container;\n+    }\n \n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/981/WorkerAttemptContainerAssignedEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/981/WorkerAttemptContainerAssignedEvent.java\nindex bda5b9b314c..d29e64f7a3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/981/WorkerAttemptContainerAssignedEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/981/WorkerAttemptContainerAssignedEvent.java\n@@ -22,7 +22,7 @@ import org.apache.hadoop.yarn.api.records.Container;\n /**\n  * Assign container to worker attempt.\n  */\n-public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent{\n+public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent {\n   /**container*/\n   private final Container container;\n \n@@ -45,4 +45,4 @@ public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent{\n     return container;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/981/WorkerAttemptContainerAssignedEvent.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/981/WorkerAttemptContainerAssignedEvent.java\nindex bda5b9b314c..ad4850fce45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/981/WorkerAttemptContainerAssignedEvent.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/981/WorkerAttemptContainerAssignedEvent.java\n@@ -22,8 +22,10 @@ import org.apache.hadoop.yarn.api.records.Container;\n /**\n  * Assign container to worker attempt.\n  */\n-public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent{\n+\n+public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent {\n   /**container*/\n+\n   private final Container container;\n \n   /**\n@@ -31,8 +33,8 @@ public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent{\n    * @param workerAttemptId worker attempt id\n    * @param container container\n    */\n-  public WorkerAttemptContainerAssignedEvent(\n-      WorkerAttemptId workerAttemptId, Container container) {\n+\n+  public WorkerAttemptContainerAssignedEvent(WorkerAttemptId workerAttemptId, Container container) {\n     super(WorkerAttemptEventType.CONTAINER_ASSIGN, workerAttemptId);\n     this.container = container;\n   }\n@@ -41,8 +43,9 @@ public class WorkerAttemptContainerAssignedEvent extends WorkerAttemptEvent{\n    * Get container\n    * @return container\n    */\n+\n   public Container getContainer() {\n     return container;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}