{
    "project_name": "Angel-ML-angel",
    "violation_id": "108",
    "information": {
        "violations": [
            {
                "line": "14",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 131).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n\n  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n    setInplace(inplace);\n    setKeepStorage(Constant.keepStorage);\n    this.alpha = alpha;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/108/FTRLThresholdInit.java\nindex 8efc40c1cc4..3f0c1fb422a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/108/FTRLThresholdInit.java\n@@ -10,9 +10,10 @@ public class FTRLThresholdInit extends Binary {\n   private double mean, stdev;\n   private Random random;\n \n-\n-  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n-    setInplace(inplace);\n+  public FTRLThresholdInit(\n+      boolean inplace, double alpha, double beta, double lambda1,\n+  double lambda2, double mean, double stdev) {\n+     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n     this.alpha = alpha;\n     this.beta = beta;\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/108/FTRLThresholdInit.java\nindex 8efc40c1cc4..98455a651c4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/108/FTRLThresholdInit.java\n@@ -6,128 +6,129 @@ import java.util.Random;\n \n public class FTRLThresholdInit extends Binary {\n \n-  private double alpha, beta, lambda1, lambda2;\n-  private double mean, stdev;\n-  private Random random;\n-\n-\n-  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n-    setInplace(inplace);\n-    setKeepStorage(Constant.keepStorage);\n-    this.alpha = alpha;\n-    this.beta = beta;\n-    this.lambda1 = lambda1;\n-    this.lambda2 = lambda2;\n-    this.mean = mean;\n-    this.stdev = stdev;\n-    this.random = new Random(System.currentTimeMillis());\n-  }\n-\n-  @Override\n-  public OpType getOpType() {\n-    return OpType.UNION;\n-  }\n-\n-  @Override\n-  public double apply(double zVal, double nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+    private double alpha, beta, lambda1, lambda2;\n+    private double mean, stdev;\n+    private Random random;\n+\n+\n+    public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1,\n+                             double lambda2, double mean, double stdev) {\n+        setInplace(inplace);\n+        setKeepStorage(Constant.keepStorage);\n+        this.alpha = alpha;\n+        this.beta = beta;\n+        this.lambda1 = lambda1;\n+        this.lambda2 = lambda2;\n+        this.mean = mean;\n+        this.stdev = stdev;\n+        this.random = new Random(System.currentTimeMillis());\n     }\n-    return result;\n-  }\n-\n-  @Override\n-  public double apply(double zVal, float nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    @Override\n+    public OpType getOpType() {\n+        return OpType.UNION;\n+    }\n+\n+    @Override\n+    public double apply(double zVal, double nVal) {\n+        if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return result;\n     }\n-    return result;\n-  }\n-\n-  public double apply(double zVal, long nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    @Override\n+    public double apply(double zVal, float nVal) {\n+        if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return result;\n+    }\n+\n+    public double apply(double zVal, long nVal) {\n+        if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return result;\n     }\n-    return result;\n-  }\n-\n-  public double apply(double zVal, int nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    public double apply(double zVal, int nVal) {\n+        if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return result;\n     }\n-    return result;\n-  }\n-\n-  public float apply(float zVal, float nVal) {\n-    if (nVal == 0.0f) return (float) (mean + random.nextGaussian() * stdev);\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    public float apply(float zVal, float nVal) {\n+        if (nVal == 0.0f) return (float) (mean + random.nextGaussian() * stdev);\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return (float) result;\n     }\n-    return (float) result;\n-  }\n-\n-  public float apply(float zVal, long nVal) {\n-    if (nVal == 0L) return (float) (mean + random.nextGaussian() * stdev);\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    public float apply(float zVal, long nVal) {\n+        if (nVal == 0L) return (float) (mean + random.nextGaussian() * stdev);\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return (float) result;\n     }\n-    return (float) result;\n-  }\n \n-  public float apply(float zVal, int nVal) {\n-    if (nVal == 0) return (float) (mean + random.nextGaussian() * stdev);\n+    public float apply(float zVal, int nVal) {\n+        if (nVal == 0) return (float) (mean + random.nextGaussian() * stdev);\n \n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return (float) result;\n     }\n-    return (float) result;\n-  }\n-\n-  public long apply(long zVal, long nVal) {\n-    if (nVal == 0L) return (long) (mean + random.nextGaussian() * stdev);\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    public long apply(long zVal, long nVal) {\n+        if (nVal == 0L) return (long) (mean + random.nextGaussian() * stdev);\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return (long) result;\n     }\n-    return (long) result;\n-  }\n-\n-  public long apply(long zVal, int nVal) {\n-    if (nVal == 0) return (long) (mean + random.nextGaussian() * stdev);\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    public long apply(long zVal, int nVal) {\n+        if (nVal == 0) return (long) (mean + random.nextGaussian() * stdev);\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return (long) result;\n     }\n-    return (long) result;\n-  }\n-\n-  public int apply(int zVal, int nVal) {\n-    if (nVal == 0) return (int) (mean + random.nextGaussian() * stdev);\n-    double result = 0.0;\n-    if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+\n+    public int apply(int zVal, int nVal) {\n+        if (nVal == 0) return (int) (mean + random.nextGaussian() * stdev);\n+        double result = 0.0;\n+        if (Math.abs(zVal) > lambda1) {\n+            result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n+                    - Math.signum(zVal) * lambda1);\n+        }\n+        return (int) result;\n     }\n-    return (int) result;\n-  }\n }\n",
            "diff_size": 130
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "129",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/108/FTRLThresholdInit.java\nindex 8efc40c1cc4..db2c9113207 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/108/FTRLThresholdInit.java\n@@ -30,104 +30,104 @@ public class FTRLThresholdInit extends Binary {\n \n   @Override\n   public double apply(double zVal, double nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   @Override\n   public double apply(double zVal, float nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, long nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, int nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+  return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public float apply(float zVal, float nVal) {\n-    if (nVal == 0.0f) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0.0f)\n+  return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, long nVal) {\n-    if (nVal == 0L) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+  return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, int nVal) {\n-    if (nVal == 0) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+  return (float) (mean + random.nextGaussian() * stdev);\n \n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public long apply(long zVal, long nVal) {\n-    if (nVal == 0L) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+  return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public long apply(long zVal, int nVal) {\n-    if (nVal == 0) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+  return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public int apply(int zVal, int nVal) {\n-    if (nVal == 0) return (int) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+  return (int) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (int) result;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/108/FTRLThresholdInit.java\nindex 8efc40c1cc4..c427acc4a36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/108/FTRLThresholdInit.java\n@@ -1,7 +1,6 @@\n package com.tencent.angel.ml.math2.ufuncs.expression;\n \n import com.tencent.angel.ml.math2.utils.Constant;\n-\n import java.util.Random;\n \n public class FTRLThresholdInit extends Binary {\n@@ -10,7 +9,6 @@ public class FTRLThresholdInit extends Binary {\n   private double mean, stdev;\n   private Random random;\n \n-\n   public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n@@ -30,104 +28,104 @@ public class FTRLThresholdInit extends Binary {\n \n   @Override\n   public double apply(double zVal, double nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   @Override\n   public double apply(double zVal, float nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, long nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public double apply(double zVal, int nVal) {\n-    if (nVal == 0.0) return mean + random.nextGaussian() * stdev;\n+    if (nVal == 0.0)\n+      return mean + random.nextGaussian() * stdev;\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return result;\n   }\n \n   public float apply(float zVal, float nVal) {\n-    if (nVal == 0.0f) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0.0f)\n+      return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, long nVal) {\n-    if (nVal == 0L) return (float) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+      return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public float apply(float zVal, int nVal) {\n-    if (nVal == 0) return (float) (mean + random.nextGaussian() * stdev);\n-\n+    if (nVal == 0)\n+      return (float) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (float) result;\n   }\n \n   public long apply(long zVal, long nVal) {\n-    if (nVal == 0L) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0L)\n+      return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public long apply(long zVal, int nVal) {\n-    if (nVal == 0) return (long) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+      return (long) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (long) result;\n   }\n \n   public int apply(int zVal, int nVal) {\n-    if (nVal == 0) return (int) (mean + random.nextGaussian() * stdev);\n+    if (nVal == 0)\n+      return (int) (mean + random.nextGaussian() * stdev);\n     double result = 0.0;\n     if (Math.abs(zVal) > lambda1) {\n-      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal\n-        - Math.signum(zVal) * lambda1);\n+      result = (-1) * (1.0 / (lambda2 + (beta + Math.sqrt(nVal)) / alpha)) * (zVal - Math.signum(zVal) * lambda1);\n     }\n     return (int) result;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "styler_random",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/108/FTRLThresholdInit.java\nindex 8efc40c1cc4..3f0c1fb422a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/108/FTRLThresholdInit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/108/FTRLThresholdInit.java\n@@ -10,9 +10,10 @@ public class FTRLThresholdInit extends Binary {\n   private double mean, stdev;\n   private Random random;\n \n-\n-  public FTRLThresholdInit(boolean inplace, double alpha, double beta, double lambda1, double lambda2, double mean, double stdev) {\n-    setInplace(inplace);\n+  public FTRLThresholdInit(\n+      boolean inplace, double alpha, double beta, double lambda1,\n+  double lambda2, double mean, double stdev) {\n+     setInplace(inplace);\n     setKeepStorage(Constant.keepStorage);\n     this.alpha = alpha;\n     this.beta = beta;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}