{
    "project_name": "Activiti-Activiti",
    "violation_id": "237",
    "information": {
        "violations": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.bpmn.listener;\n\nimport org.activiti.engine.delegate.ExecutionListener;\nimport org.activiti.engine.delegate.TransactionDependentTaskListener;",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/237/ExecuteTaskListenerTransactionListener.java\nindex d46242a1754..a95c921f670 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Activiti-Activiti/styler/05_predictions/final/files-repaired/237/ExecuteTaskListenerTransactionListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/237/ExecuteTaskListenerTransactionListener.java\nindex d46242a1754..f837e23fe7d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/checkstyle_idea/237/ExecuteTaskListenerTransactionListener.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n@@ -23,31 +24,29 @@ import org.activiti.engine.impl.interceptor.CommandExecutor;\n \n /**\n  * A {@link TransactionListener} that invokes an {@link ExecutionListener}.\n- * \n-\n  */\n public class ExecuteTaskListenerTransactionListener implements TransactionListener {\n \n-  protected TransactionDependentTaskListener listener;\n-  protected TransactionDependentTaskListenerExecutionScope scope;\n-  \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n-      TransactionDependentTaskListenerExecutionScope scope) {\n-    this.listener = listener;\n-    this.scope = scope;\n-  }\n-  \n-  @Override\n-  public void execute(CommandContext commandContext) {\n-    CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n-    CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n-    commandExecutor.execute(commandConfig, new Command<Void>() {\n-      public Void execute(CommandContext commandContext) {\n-        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n-            scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n-        return null;\n-      }\n-    });\n-  }\n+    protected TransactionDependentTaskListener listener;\n+    protected TransactionDependentTaskListenerExecutionScope scope;\n+\n+    public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener,\n+                                                  TransactionDependentTaskListenerExecutionScope scope) {\n+        this.listener = listener;\n+        this.scope = scope;\n+    }\n+\n+    @Override\n+    public void execute(CommandContext commandContext) {\n+        CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n+        CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n+        commandExecutor.execute(commandConfig, new Command<Void>() {\n+            public Void execute(CommandContext commandContext) {\n+                listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(),\n+                        scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n+                return null;\n+            }\n+        });\n+    }\n \n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/237/ExecuteTaskListenerTransactionListener.java\nindex d46242a1754..83f051dce77 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/codebuff/237/ExecuteTaskListenerTransactionListener.java\n@@ -26,28 +26,28 @@ import org.activiti.engine.impl.interceptor.CommandExecutor;\n  * \n \n  */\n+\n+\n public class ExecuteTaskListenerTransactionListener implements TransactionListener {\n \n   protected TransactionDependentTaskListener listener;\n   protected TransactionDependentTaskListenerExecutionScope scope;\n-  \n-  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, \n-      TransactionDependentTaskListenerExecutionScope scope) {\n+\n+  public ExecuteTaskListenerTransactionListener(TransactionDependentTaskListener listener, TransactionDependentTaskListenerExecutionScope scope) {\n     this.listener = listener;\n     this.scope = scope;\n   }\n-  \n+\n   @Override\n   public void execute(CommandContext commandContext) {\n     CommandExecutor commandExecutor = commandContext.getProcessEngineConfiguration().getCommandExecutor();\n     CommandConfig commandConfig = new CommandConfig(false, TransactionPropagation.REQUIRES_NEW);\n     commandExecutor.execute(commandConfig, new Command<Void>() {\n+\n       public Void execute(CommandContext commandContext) {\n-        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), \n-            scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n+        listener.notify(scope.getProcessInstanceId(), scope.getExecutionId(), scope.getTask(), scope.getExecutionVariables(), scope.getCustomPropertiesMap());\n         return null;\n       }\n     });\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/237/ExecuteTaskListenerTransactionListener.java\nindex d46242a1754..a95c921f670 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/random/files-repaired/237/ExecuteTaskListenerTransactionListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/237/ExecuteTaskListenerTransactionListener.java\nindex d46242a1754..a95c921f670 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/violations/237/ExecuteTaskListenerTransactionListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Activiti-Activiti/styler/05_predictions/three_grams/files-repaired/237/ExecuteTaskListenerTransactionListener.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.bpmn.listener;\n \n import org.activiti.engine.delegate.ExecutionListener;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}