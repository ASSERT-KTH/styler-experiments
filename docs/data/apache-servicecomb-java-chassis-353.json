{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "353",
    "information": {
        "violations": [
            {
                "line": "64",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 132).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    createQpsControllerIfNotExist(microserviceName);\n    // create \"microservice.schema\"\n    createQpsControllerIfNotExist(qualifiedNameKey.substring(0, microserviceName.length() + invocation.getSchemaId().length() + 1));\n    // create \"microservice.schema.operation\"\n    createQpsControllerIfNotExist(qualifiedNameKey);\n",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/353/QpsControllerManager.java\nindex 285db7cdf30..216a797c3ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/353/QpsControllerManager.java\n@@ -61,7 +61,8 @@ public class QpsControllerManager {\n     // create \"microservice\"\n     createQpsControllerIfNotExist(microserviceName);\n     // create \"microservice.schema\"\n-    createQpsControllerIfNotExist(qualifiedNameKey.substring(0, microserviceName.length() + invocation.getSchemaId().length() + 1));\n+    createQpsControllerIfNotExist(\n+        qualifiedNameKey.substring(0, microserviceName.length() + invocation.getSchemaId().length() + 1));\n     // create \"microservice.schema.operation\"\n     createQpsControllerIfNotExist(qualifiedNameKey);\n \n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/353/QpsControllerManager.java\nindex 285db7cdf30..9552ccf4ea3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/353/QpsControllerManager.java\n@@ -170,4 +170,4 @@ public class QpsControllerManager {\n   protected DynamicProperty getDynamicProperty(String configKey) {\n     return DynamicProperty.getInstance(configKeyPrefix + configKey);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/353/QpsControllerManager.java\nindex 285db7cdf30..02d7d492bf5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/353/QpsControllerManager.java\n@@ -19,12 +19,10 @@ package org.apache.servicecomb.qps;\n \n import java.util.Map;\n import java.util.Map.Entry;\n-\n import org.apache.servicecomb.core.Invocation;\n import org.apache.servicecomb.foundation.common.concurrent.ConcurrentHashMapEx;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.netflix.config.DynamicProperty;\n \n public class QpsControllerManager {\n@@ -33,11 +31,13 @@ public class QpsControllerManager {\n   /**\n    * Describe the relationship between configuration and qpsController.\n    */\n+\n   protected final Map<String, QpsController> configQpsControllerMap = new ConcurrentHashMapEx<>();\n \n   /**\n    * Describe the relationship between qualifiedKey(format is \"microservice.schema.operation\") and qpsController.\n    */\n+\n   protected final Map<String, QpsController> qualifiedNameControllerMap = new ConcurrentHashMapEx<>();\n \n   protected QpsController globalQpsController;\n@@ -47,16 +47,17 @@ public class QpsControllerManager {\n   private String configKeyPrefix;\n \n   public QpsController getOrCreate(String microserviceName, Invocation invocation) {\n-    return qualifiedNameControllerMap\n-        .computeIfAbsent(microserviceName + SEPARATOR + invocation.getOperationMeta().getSchemaQualifiedName(), key -> {\n-          return create(key, microserviceName, invocation);\n-        });\n+    return qualifiedNameControllerMap.computeIfAbsent(microserviceName + SEPARATOR + invocation.getOperationMeta().getSchemaQualifiedName(),\n+key -> {\n+      return create(key, microserviceName, invocation);\n+    });\n   }\n \n   /**\n    * Create relevant qpsLimit dynamicProperty and watch the configuration change.\n    * Search and return a valid qpsController.\n    */\n+\n   protected QpsController create(String qualifiedNameKey, String microserviceName, Invocation invocation) {\n     // create \"microservice\"\n     createQpsControllerIfNotExist(microserviceName);\n@@ -64,7 +65,6 @@ public class QpsControllerManager {\n     createQpsControllerIfNotExist(qualifiedNameKey.substring(0, microserviceName.length() + invocation.getSchemaId().length() + 1));\n     // create \"microservice.schema.operation\"\n     createQpsControllerIfNotExist(qualifiedNameKey);\n-\n     return searchQpsController(qualifiedNameKey);\n   }\n \n@@ -78,6 +78,7 @@ public class QpsControllerManager {\n    * @param qualifiedNameKey qualifiedNameKey in {@link #qualifiedNameControllerMap}\n    * @return a qps controller, lower level controllers with valid qpsLimit have priority.\n    */\n+\n   protected QpsController searchQpsController(String qualifiedNameKey) {\n     QpsController qpsController = configQpsControllerMap.get(qualifiedNameKey);\n     if (isValidQpsController(qpsController)) {\n@@ -108,8 +109,7 @@ public class QpsControllerManager {\n   }\n \n   private boolean keyMatch(String configKey, Entry<String, QpsController> controllerEntry) {\n-    return controllerEntry.getKey().equals(configKey)\n-        || controllerEntry.getKey().startsWith(configKey + SEPARATOR);\n+    return controllerEntry.getKey().equals(configKey) || controllerEntry.getKey().startsWith(configKey + SEPARATOR);\n   }\n \n   private boolean isValidQpsController(QpsController qpsController) {\n@@ -122,14 +122,15 @@ public class QpsControllerManager {\n     }\n \n     LOGGER.info(\"Create qpsController, configKey = [{}]\", configKey);\n+\n     DynamicProperty property = getDynamicProperty(configKey);\n     QpsController qpsController = new QpsController(configKey, property.getInteger());\n-\n     configQpsControllerMap.put(configKey, qpsController);\n-\n     property.addCallback(() -> {\n       qpsController.setQpsLimit(property.getInteger());\n-      LOGGER.info(\"Qps limit updated, configKey = [{}], value = [{}]\", configKey, property.getString());\n+      LOGGER.info(\"Qps limit updated, configKey = [{}], value = [{}]\",\n+configKey,\n+property.getString());\n       updateObjMap(configKey);\n     });\n   }\n@@ -139,8 +140,7 @@ public class QpsControllerManager {\n       if (keyMatch(configKey, controllerEntry)) {\n         QpsController qpsController = searchQpsController(controllerEntry.getKey());\n         controllerEntry.setValue(qpsController);\n-        LOGGER.info(\"QpsController updated, operationId = [{}], configKey = [{}], qpsLimit = [{}]\",\n-            controllerEntry.getKey(), qpsController.getKey(), qpsController.getQpsLimit());\n+        LOGGER.info(\"QpsController updated, operationId = [{}], configKey = [{}], qpsLimit = [{}]\", controllerEntry.getKey(), qpsController.getKey(), qpsController.getQpsLimit());\n       }\n     }\n   }\n@@ -153,12 +153,10 @@ public class QpsControllerManager {\n   public QpsControllerManager setGlobalQpsController(String globalConfigKey) {\n     DynamicProperty globalQpsProperty = DynamicProperty.getInstance(globalConfigKey);\n     QpsController qpsController = new QpsController(globalConfigKey, globalQpsProperty.getInteger());\n-\n     globalQpsProperty.addCallback(() -> {\n       qpsController.setQpsLimit(globalQpsProperty.getInteger());\n       LOGGER.info(\"Global qps limit update, value = [{}]\", globalQpsProperty.getInteger());\n     });\n-\n     this.globalQpsController = qpsController;\n     return this;\n   }\n@@ -170,4 +168,4 @@ public class QpsControllerManager {\n   protected DynamicProperty getDynamicProperty(String configKey) {\n     return DynamicProperty.getInstance(configKeyPrefix + configKey);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "65",
                    "column": "4",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "65",
                    "column": "6",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "66",
                    "column": "5",
                    "severity": "warning",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/353/QpsControllerManager.java\nindex 285db7cdf30..6d5ca94e354 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/353/QpsControllerManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/353/QpsControllerManager.java\n@@ -61,7 +61,9 @@ public class QpsControllerManager {\n     // create \"microservice\"\n     createQpsControllerIfNotExist(microserviceName);\n     // create \"microservice.schema\"\n-    createQpsControllerIfNotExist(qualifiedNameKey.substring(0, microserviceName.length() + invocation.getSchemaId().length() + 1));\n+    createQpsControllerIfNotExist(qualifiedNameKey.substring(0\n+    ,microserviceName.length() + invocation.getSchemaId\n+    ().length() + 1));\n     // create \"microservice.schema.operation\"\n     createQpsControllerIfNotExist(qualifiedNameKey);\n \n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}