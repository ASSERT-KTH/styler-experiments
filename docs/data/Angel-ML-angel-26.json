{
    "project_name": "Angel-ML-angel",
    "violation_id": "26",
    "information": {
        "violations": [
            {
                "line": "31",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 118).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "public class KryoUtils {\n  private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n  private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n\n  private static Kryo getKryo(){\n    Kryo kryo = kryos.get();",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/26/KryoUtils.java\nindex 5698bfcfd7a..21bde5d5d7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/26/KryoUtils.java\n@@ -27,43 +27,44 @@ import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n \n public class KryoUtils {\n-  private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n-  private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n+    private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n+    private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs =\n+            new ThreadLocal<KryoReflectionFactorySupport>();\n \n-  private static Kryo getKryo(){\n-    Kryo kryo = kryos.get();\n-    if(kryo == null) {\n-      kryo = new Kryo();\n-      kryos.set(kryo);\n+    private static Kryo getKryo() {\n+        Kryo kryo = kryos.get();\n+        if (kryo == null) {\n+            kryo = new Kryo();\n+            kryos.set(kryo);\n+        }\n+\n+        return kryo;\n     }\n \n-    return kryo;\n-  }\n+    private static KryoReflectionFactorySupport getKryoRef() {\n+        KryoReflectionFactorySupport kryoRef = kryoRefs.get();\n+        if (kryoRef == null) {\n+            kryoRef = new KryoReflectionFactorySupport();\n+            kryoRefs.set(kryoRef);\n+        }\n \n-  private static KryoReflectionFactorySupport getKryoRef(){\n-    KryoReflectionFactorySupport kryoRef = kryoRefs.get();\n-    if(kryoRef == null) {\n-      kryoRef = new KryoReflectionFactorySupport();\n-      kryoRefs.set(kryoRef);\n+        return kryoRef;\n     }\n \n-    return kryoRef;\n-  }\n-\n-  public static byte[] serializeAlgoMetric(Metric value) {\n-    Kryo kryo = getKryo();\n-    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-    Output output = new Output(baos);\n-    kryo.writeClassAndObject(output, value);\n-    output.flush();\n-    output.close();\n-    return baos.toByteArray();\n-  }\n+    public static byte[] serializeAlgoMetric(Metric value) {\n+        Kryo kryo = getKryo();\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        Output output = new Output(baos);\n+        kryo.writeClassAndObject(output, value);\n+        output.flush();\n+        output.close();\n+        return baos.toByteArray();\n+    }\n \n-  public static Metric deserializeAlgoMetric(byte [] data) {\n-    ByteArrayInputStream bais = new ByteArrayInputStream(data);\n-    Input input = new Input(bais);\n-    KryoReflectionFactorySupport kryoRef = getKryoRef();\n-    return ((Metric)kryoRef.readClassAndObject(input));\n-  }\n+    public static Metric deserializeAlgoMetric(byte[] data) {\n+        ByteArrayInputStream bais = new ByteArrayInputStream(data);\n+        Input input = new Input(bais);\n+        KryoReflectionFactorySupport kryoRef = getKryoRef();\n+        return ((Metric) kryoRef.readClassAndObject(input));\n+    }\n }\n",
            "diff_size": 40
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/26/KryoUtils.java\nindex 5698bfcfd7a..965d4695314 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/26/KryoUtils.java\n@@ -30,9 +30,9 @@ public class KryoUtils {\n   private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n   private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n \n-  private static Kryo getKryo(){\n+  private static Kryo getKryo() {\n     Kryo kryo = kryos.get();\n-    if(kryo == null) {\n+    if (kryo == null) {\n       kryo = new Kryo();\n       kryos.set(kryo);\n     }\n@@ -40,9 +40,9 @@ public class KryoUtils {\n     return kryo;\n   }\n \n-  private static KryoReflectionFactorySupport getKryoRef(){\n+  private static KryoReflectionFactorySupport getKryoRef() {\n     KryoReflectionFactorySupport kryoRef = kryoRefs.get();\n-    if(kryoRef == null) {\n+    if (kryoRef == null) {\n       kryoRef = new KryoReflectionFactorySupport();\n       kryoRefs.set(kryoRef);\n     }\n@@ -60,10 +60,10 @@ public class KryoUtils {\n     return baos.toByteArray();\n   }\n \n-  public static Metric deserializeAlgoMetric(byte [] data) {\n+  public static Metric deserializeAlgoMetric(byte[] data) {\n     ByteArrayInputStream bais = new ByteArrayInputStream(data);\n     Input input = new Input(bais);\n     KryoReflectionFactorySupport kryoRef = getKryoRef();\n     return ((Metric)kryoRef.readClassAndObject(input));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/26/KryoUtils.java\nindex 5698bfcfd7a..f6eda7c8d42 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/26/KryoUtils.java\n@@ -22,31 +22,28 @@ import com.esotericsoftware.kryo.io.Input;\n import com.esotericsoftware.kryo.io.Output;\n import com.tencent.angel.ml.metrics.Metric;\n import de.javakaffee.kryoserializers.KryoReflectionFactorySupport;\n-\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n \n public class KryoUtils {\n+\n   private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n   private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n-\n-  private static Kryo getKryo(){\n+  private static Kryo getKryo() {\n     Kryo kryo = kryos.get();\n-    if(kryo == null) {\n+    if (kryo == null) {\n       kryo = new Kryo();\n       kryos.set(kryo);\n     }\n-\n     return kryo;\n   }\n \n-  private static KryoReflectionFactorySupport getKryoRef(){\n+  private static KryoReflectionFactorySupport getKryoRef() {\n     KryoReflectionFactorySupport kryoRef = kryoRefs.get();\n-    if(kryoRef == null) {\n+    if (kryoRef == null) {\n       kryoRef = new KryoReflectionFactorySupport();\n       kryoRefs.set(kryoRef);\n     }\n-\n     return kryoRef;\n   }\n \n@@ -60,10 +57,11 @@ public class KryoUtils {\n     return baos.toByteArray();\n   }\n \n-  public static Metric deserializeAlgoMetric(byte [] data) {\n+  public static Metric deserializeAlgoMetric(byte[] data) {\n     ByteArrayInputStream bais = new ByteArrayInputStream(data);\n     Input input = new Input(bais);\n     KryoReflectionFactorySupport kryoRef = getKryoRef();\n-    return ((Metric)kryoRef.readClassAndObject(input));\n+    return ((Metric) kryoRef.readClassAndObject(input));\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/26/KryoUtils.java\nindex 5698bfcfd7a..8a9ab4077d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/26/KryoUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/26/KryoUtils.java\n@@ -28,9 +28,9 @@ import java.io.ByteArrayOutputStream;\n \n public class KryoUtils {\n   private static ThreadLocal<Kryo> kryos = new ThreadLocal<Kryo>();\n-  private static ThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n+  private staticThreadLocal<KryoReflectionFactorySupport> kryoRefs = new ThreadLocal<KryoReflectionFactorySupport>();\n \n-  private static Kryo getKryo(){\n+  private static static Kryo getKryo(){\n     Kryo kryo = kryos.get();\n     if(kryo == null) {\n       kryo = new Kryo();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}