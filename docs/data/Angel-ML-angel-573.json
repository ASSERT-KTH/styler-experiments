{
    "project_name": "Angel-ML-angel",
    "violation_id": "573",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/573/IntDoubleDenseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/573/IntDoubleDenseVectorStorage.java\nindex aa392659cc1..02d4e2eeb73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/573/IntDoubleDenseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/573/IntDoubleDenseVectorStorage.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.math2.utils.ArrayCopy;\n@@ -24,270 +25,270 @@ import java.util.Random;\n \n public class IntDoubleDenseVectorStorage implements IntDoubleVectorStorage {\n \n-  private double[] values;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private int dim;\n-\n-  public IntDoubleDenseVectorStorage() {\n-    super();\n-  }\n-\n-  public IntDoubleDenseVectorStorage(double[] values) {\n-    this.flag = 1;\n-    this.dim = values.length;\n-    this.values = values;\n-  }\n-\n-  public IntDoubleDenseVectorStorage(int dim) {\n-    this(new double[dim]);\n-  }\n-\n-  @Override\n-  public double get(int idx) {\n-    return values[idx];\n-  }\n-\n-  @Override\n-  public void set(int idx, double value) {\n-    values[idx] = value;\n-  }\n-\n-  @Override\n-  public double[] getValues() {\n-    return values;\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage clone() {\n-    return new IntDoubleDenseVectorStorage(ArrayCopy.copy(values));\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage copy() {\n-    return new IntDoubleDenseVectorStorage(ArrayCopy.copy(values));\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeDense() {\n-    double[] oneLikeValues = new double[dim];\n-    for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n+    private double[] values;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private int dim;\n+\n+    public IntDoubleDenseVectorStorage() {\n+        super();\n     }\n-    return new IntDoubleDenseVectorStorage(oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeSparse() {\n-    int capacity = Math.max(128, (int) (dim / 1000));\n-    double[] oneLikeValues = new double[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    public IntDoubleDenseVectorStorage(double[] values) {\n+        this.flag = 1;\n+        this.dim = values.length;\n+        this.values = values;\n     }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    public IntDoubleDenseVectorStorage(int dim) {\n+        this(new double[dim]);\n     }\n-    return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeSorted() {\n-    int capacity = Math.max(128, (int) (dim / 1000));\n-    double[] oneLikeValues = new double[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public double get(int idx) {\n+        return values[idx];\n     }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    @Override\n+    public void set(int idx, double value) {\n+        values[idx] = value;\n     }\n-    return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeDense(int dim) {\n-    double[] oneLikeValues = new double[dim];\n-    for (int i = 0; i < dim; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    @Override\n+    public double[] getValues() {\n+        return values;\n     }\n-    return new IntDoubleDenseVectorStorage(oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeSparse(int dim, int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public IntDoubleVectorStorage clone() {\n+        return new IntDoubleDenseVectorStorage(ArrayCopy.copy(values));\n     }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    @Override\n+    public IntDoubleVectorStorage copy() {\n+        return new IntDoubleDenseVectorStorage(ArrayCopy.copy(values));\n     }\n-    return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeSorted(int dim, int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeDense() {\n+        double[] oneLikeValues = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleDenseVectorStorage(oneLikeValues);\n     }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeSparse() {\n+        int capacity = Math.max(128, (int) (dim / 1000));\n+        double[] oneLikeValues = new double[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeSparse(int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeSorted() {\n+        int capacity = Math.max(128, (int) (dim / 1000));\n+        double[] oneLikeValues = new double[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n     }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeDense(int dim) {\n+        double[] oneLikeValues = new double[dim];\n+        for (int i = 0; i < dim; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleDenseVectorStorage(oneLikeValues);\n     }\n-    return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage oneLikeSorted(int capacity) {\n-    double[] oneLikeValues = new double[capacity];\n-    int[] indices = new int[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt(dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeSparse(int dim, int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeSorted(int dim, int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeSparse(int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage oneLikeSorted(int capacity) {\n+        double[] oneLikeValues = new double[capacity];\n+        int[] indices = new int[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt(dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage emptyDense() {\n+        return new IntDoubleDenseVectorStorage(dim);\n     }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n+\n+    @Override\n+    public IntDoubleVectorStorage emptySparse() {\n+        return new IntDoubleSparseVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage emptySorted() {\n+        return new IntDoubleSortedVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage emptyDense(int length) {\n+        return new IntDoubleDenseVectorStorage(length);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage emptySparse(int dim, int capacity) {\n+        return new IntDoubleSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage emptySorted(int dim, int capacity) {\n+        return new IntDoubleSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage emptySparse(int capacity) {\n+        return new IntDoubleSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public IntDoubleVectorStorage emptySorted(int capacity) {\n+        return new IntDoubleSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public int size() {\n+        return values.length;\n+    }\n+\n+    @Override\n+    public boolean hasKey(int key) {\n+        return (key >= 0 && key < values.length);\n+    }\n+\n+    @Override\n+    public RowType getType() {\n+        return RowType.T_DOUBLE_DENSE;\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return flag == 1;\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return flag == 2;\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return flag == 4;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        Arrays.parallelSetAll(values, (int value) -> 0);\n     }\n-    return new IntDoubleSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptyDense() {\n-    return new IntDoubleDenseVectorStorage(dim);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptySparse() {\n-    return new IntDoubleSparseVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptySorted() {\n-    return new IntDoubleSortedVectorStorage(dim, Math.max(128, (int) (dim / 1000)));\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptyDense(int length) {\n-    return new IntDoubleDenseVectorStorage(length);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptySparse(int dim, int capacity) {\n-    return new IntDoubleSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptySorted(int dim, int capacity) {\n-    return new IntDoubleSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptySparse(int capacity) {\n-    return new IntDoubleSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public IntDoubleVectorStorage emptySorted(int capacity) {\n-    return new IntDoubleSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public int size() {\n-    return values.length;\n-  }\n-\n-  @Override\n-  public boolean hasKey(int key) {\n-    return (key >= 0 && key < values.length);\n-  }\n-\n-  @Override\n-  public RowType getType() {\n-    return RowType.T_DOUBLE_DENSE;\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return flag == 1;\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return flag == 2;\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return flag == 4;\n-  }\n-\n-  @Override\n-  public void clear() {\n-    Arrays.parallelSetAll(values, (int value) -> 0);\n-  }\n }\n",
            "diff_size": 425
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/573/IntDoubleDenseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/573/IntDoubleDenseVectorStorage.java\nindex aa392659cc1..f57d83e45b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/573/IntDoubleDenseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/573/IntDoubleDenseVectorStorage.java\n@@ -290,4 +290,4 @@ public class IntDoubleDenseVectorStorage implements IntDoubleVectorStorage {\n   public void clear() {\n     Arrays.parallelSetAll(values, (int value) -> 0);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/573/IntDoubleDenseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/573/IntDoubleDenseVectorStorage.java\nindex aa392659cc1..85b7cbd1776 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/573/IntDoubleDenseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/573/IntDoubleDenseVectorStorage.java\n@@ -92,6 +92,7 @@ public class IntDoubleDenseVectorStorage implements IntDoubleVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -145,6 +146,7 @@ public class IntDoubleDenseVectorStorage implements IntDoubleVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -188,6 +190,7 @@ public class IntDoubleDenseVectorStorage implements IntDoubleVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -288,6 +291,7 @@ public class IntDoubleDenseVectorStorage implements IntDoubleVectorStorage {\n \n   @Override\n   public void clear() {\n-    Arrays.parallelSetAll(values, (int value) -> 0);\n+    Arrays.parallelSetAll(values, (int value)-> 0);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}