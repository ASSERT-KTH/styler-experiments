{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "583",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "84",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/583/BoltConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/583/BoltConnection.java\nindex c0180cfd6bf..80baff39533 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/583/BoltConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/583/BoltConnection.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.runtime;\n \n import io.netty.channel.Channel;\n@@ -30,82 +31,82 @@ import org.neo4j.bolt.v1.runtime.Job;\n public interface BoltConnection\n {\n \n-    /**\n-     * Returns a unique, not changing over time string that can safely be used to identify this connection.\n-     *\n-     * @return identifier\n-     */\n-    String id();\n-\n-    /**\n-     * Returns the local (server) socket address that this client is bound to\n-     *\n-     * @return local endpoint\n-     */\n-    SocketAddress localAddress();\n-\n-    /**\n-     * Returns the remote (client) socket address that this client established the connection from.\n-     *\n-     * @return remote endpoint\n-     */\n-    SocketAddress remoteAddress();\n-\n-    /**\n-     * Returns the underlying raw netty channel\n-     *\n-     * @return netty channel\n-     */\n-    Channel channel();\n-\n-    /**\n-     * Returns the packer that's used to generate response streams\n-     */\n-    PackOutput output();\n-\n-    /**\n-     * Returns whether there's any pending Job waiting to be processed\n-     *\n-     * @return true when there's at least one job in the queue\n-     */\n-    boolean hasPendingJobs();\n-\n-    /**\n-     * Executes extra initialisation routines before taking this connection into use\n-     */\n-    void start();\n-\n-    /**\n-     * Adds submitted job to the job queue for execution (at the earliest time possible)\n-     *\n-     * @param job the job to be added\n-     */\n-    void enqueue( Job job );\n-\n-    /**\n-     * Executes a batch of queued jobs, which is executed in an another thread (which is part of a thread pool)\n-     *\n-     * @return false when no more processing should take place (i.e. connection is closed)\n-     */\n-    boolean processNextBatch();\n-\n-    /**\n-     * Invoked when an exception is caught during the scheduling of the pending jobs. The caught exception would mostly\n-     * be {@link RejectedExecutionException} which is thrown by the thread pool executor when it fails to accept\n-     * submitted jobs\n-     *\n-     * @param t the exception occurred during scheduling\n-     */\n-    void handleSchedulingError( Throwable t );\n-\n-    /**\n-     * Interrupt and (possibly) stop the current running job, but continue processing next jobs\n-     */\n-    void interrupt();\n-\n-    /**\n-     * Stops this connection\n-     */\n-    void stop();\n+  /**\n+   * Returns a unique, not changing over time string that can safely be used to identify this connection.\n+   *\n+   * @return identifier\n+   */\n+  String id();\n+\n+  /**\n+   * Returns the local (server) socket address that this client is bound to\n+   *\n+   * @return local endpoint\n+   */\n+  SocketAddress localAddress();\n+\n+  /**\n+   * Returns the remote (client) socket address that this client established the connection from.\n+   *\n+   * @return remote endpoint\n+   */\n+  SocketAddress remoteAddress();\n+\n+  /**\n+   * Returns the underlying raw netty channel\n+   *\n+   * @return netty channel\n+   */\n+  Channel channel();\n+\n+  /**\n+   * Returns the packer that's used to generate response streams\n+   */\n+  PackOutput output();\n+\n+  /**\n+   * Returns whether there's any pending Job waiting to be processed\n+   *\n+   * @return true when there's at least one job in the queue\n+   */\n+  boolean hasPendingJobs();\n+\n+  /**\n+   * Executes extra initialisation routines before taking this connection into use\n+   */\n+  void start();\n+\n+  /**\n+   * Adds submitted job to the job queue for execution (at the earliest time possible)\n+   *\n+   * @param job the job to be added\n+   */\n+  void enqueue(Job job);\n+\n+  /**\n+   * Executes a batch of queued jobs, which is executed in an another thread (which is part of a thread pool)\n+   *\n+   * @return false when no more processing should take place (i.e. connection is closed)\n+   */\n+  boolean processNextBatch();\n+\n+  /**\n+   * Invoked when an exception is caught during the scheduling of the pending jobs. The caught exception would mostly\n+   * be {@link RejectedExecutionException} which is thrown by the thread pool executor when it fails to accept\n+   * submitted jobs\n+   *\n+   * @param t the exception occurred during scheduling\n+   */\n+  void handleSchedulingError(Throwable t);\n+\n+  /**\n+   * Interrupt and (possibly) stop the current running job, but continue processing next jobs\n+   */\n+  void interrupt();\n+\n+  /**\n+   * Stops this connection\n+   */\n+  void stop();\n \n }\n",
            "diff_size": 78
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/583/BoltConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/583/BoltConnection.java\nindex c0180cfd6bf..73f92f61cb1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/583/BoltConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/583/BoltConnection.java\n@@ -29,7 +29,6 @@ import org.neo4j.bolt.v1.runtime.Job;\n \n public interface BoltConnection\n {\n-\n     /**\n      * Returns a unique, not changing over time string that can safely be used to identify this connection.\n      *\n@@ -107,5 +106,4 @@ public interface BoltConnection\n      * Stops this connection\n      */\n     void stop();\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}