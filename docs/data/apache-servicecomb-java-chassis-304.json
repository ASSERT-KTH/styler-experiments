{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "304",
    "information": {
        "violations": [
            {
                "line": "273",
                "column": "14",
                "severity": "warning",
                "message": "',' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "                  + \"&version=\" + HttpUtils.encodeURLParam(versionRule)\n                  + \"&rev=\" + HttpUtils.encodeURLParam(revision)\n              , headers, null);\n      FindMicroserviceInstancesResponse result = new FindMicroserviceInstancesResponse();\n      if (response.getStatusCode() == HttpStatus.SC_OK) {\n        result.setModified(true);",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/304/ServiceCenterClient.java\nindex 5c168f1d7e2..6ec2b7c125f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/304/ServiceCenterClient.java\n@@ -269,8 +269,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n           .getHttpRequest(\"/registry/instances?appId=\" + URLEncoder.encode(appId, \"UTF-8\")\r\n                   + \"&serviceName=\" + HttpUtils.encodeURLParam(serviceName)\r\n                   + \"&version=\" + HttpUtils.encodeURLParam(versionRule)\r\n-                  + \"&rev=\" + HttpUtils.encodeURLParam(revision)\r\n-              , headers, null);\r\n+                  + \"&rev=\" + HttpUtils.encodeURLParam(revision), headers, null);\r\n       FindMicroserviceInstancesResponse result = new FindMicroserviceInstancesResponse();\r\n       if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         result.setModified(true);\r\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "278",
                    "column": "14",
                    "severity": "warning",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/304/ServiceCenterClient.java\nindex 5c168f1d7e2..2fd6e9c1952 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/304/ServiceCenterClient.java\n@@ -69,6 +69,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   /**\r\n    * Add TLS config of client\r\n+   *\r\n    * @param tlsConfig\r\n    */\r\n   public ServiceCenterClient(TLSConfig tlsConfig) {\r\n@@ -77,6 +78,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   /**\r\n    * Add extraGlobalHeaders to http request\r\n+   *\r\n    * @param extraGlobalHeaders\r\n    */\r\n   public ServiceCenterClient(Map<String, String> extraGlobalHeaders) {\r\n@@ -85,6 +87,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   /**\r\n    * Add TLS config and extraGlobalHeaders\r\n+   *\r\n    * @param tlsConfig\r\n    * @param extraGlobalHeaders\r\n    */\r\n@@ -94,6 +97,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   /**\r\n    * Customized host,port,\r\n+   *\r\n    * @param host\r\n    * @param port\r\n    */\r\n@@ -103,6 +107,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   /**\r\n    * Customized host, port, projectName, tenantName, TLSConf, headers and any one parameter can be null.\r\n+   *\r\n    * @param host\r\n    * @param port\r\n    * @param projectName\r\n@@ -111,7 +116,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n    * @param extraGlobalHeaders\r\n    */\r\n   public ServiceCenterClient(String host, int port, String projectName, String tenantName, TLSConfig tlsConfig,\r\n-      Map<String, String> extraGlobalHeaders) {\r\n+                             Map<String, String> extraGlobalHeaders) {\r\n     HttpTransport httpTransport = HttpTransportFactory.getDefaultHttpTransport();\r\n     if (tlsConfig != null) {\r\n       httpTransport = new TLSHttpsTransport(tlsConfig);\r\n@@ -260,8 +265,8 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   @Override\r\n   public FindMicroserviceInstancesResponse findMicroserviceInstance(String consumerId, String appId, String serviceName,\r\n-      String versionRule,\r\n-      String revision) {\r\n+                                                                    String versionRule,\r\n+                                                                    String revision) {\r\n     try {\r\n       Map<String, String> headers = new HashMap<>();\r\n       headers.put(\"X-ConsumerId\", consumerId);\r\n@@ -361,7 +366,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   @Override\r\n   public boolean updateMicroserviceInstanceStatus(String serviceId, String instanceId,\r\n-      MicroserviceInstanceStatus status) {\r\n+                                                  MicroserviceInstanceStatus status) {\r\n     try {\r\n       HttpResponse response = httpClient.putHttpRequest(\r\n           \"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId + \"/status?value=\" + status, null, null);\r\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "262",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 266).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/304/ServiceCenterClient.java\nindex 5c168f1d7e2..e3b6e91138a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/304/ServiceCenterClient.java\n@@ -139,8 +139,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service-center instances fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -160,8 +159,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"register service fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -178,8 +176,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service List fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -202,8 +199,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n         return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceResponse.class);\r\n       } else {\r\n         LOGGER.info(\"Query serviceId fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-            .getMessage()\r\n-            + \"; content = \" + response.getContent());\r\n+            .getMessage() + \"; content = \" + response.getContent());\r\n         return null;\r\n       }\r\n     } catch (IOException e) {\r\n@@ -227,8 +223,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service message fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -243,14 +238,13 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       request.setInstance(instance);\r\n       HttpResponse response = httpClient\r\n           .postHttpRequest(\"/registry/microservices/\" + instance.getServiceId() + \"/instances\", null,\r\n-              HttpUtils.serialize(request));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n+              HttpUtils.serialize(request));\n+if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceInstanceResponse.class);\r\n       } else {\r\n         throw new OperationException(\r\n             \"register service instance fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -260,17 +254,12 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n \r\n   @Override\r\n   public FindMicroserviceInstancesResponse findMicroserviceInstance(String consumerId, String appId, String serviceName,\r\n-      String versionRule,\r\n-      String revision) {\r\n+      String versionRule, String revision) {\r\n     try {\r\n       Map<String, String> headers = new HashMap<>();\r\n       headers.put(\"X-ConsumerId\", consumerId);\r\n       HttpResponse response = httpClient\r\n-          .getHttpRequest(\"/registry/instances?appId=\" + URLEncoder.encode(appId, \"UTF-8\")\r\n-                  + \"&serviceName=\" + HttpUtils.encodeURLParam(serviceName)\r\n-                  + \"&version=\" + HttpUtils.encodeURLParam(versionRule)\r\n-                  + \"&rev=\" + HttpUtils.encodeURLParam(revision)\r\n-              , headers, null);\r\n+          .getHttpRequest(\"/registry/instances?appId=\" + URLEncoder.encode(appId, \"UTF-8\") + \"&serviceName=\" + HttpUtils.encodeURLParam(serviceName) + \"&version=\" + HttpUtils.encodeURLParam(versionRule) + \"&rev=\" + HttpUtils.encodeURLParam(revision), headers, null);\r\n       FindMicroserviceInstancesResponse result = new FindMicroserviceInstancesResponse();\r\n       if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         result.setModified(true);\r\n@@ -284,8 +273,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service instances list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -303,8 +291,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service instances list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -324,8 +311,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service instance message fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -350,8 +336,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"delete service instance fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -371,8 +356,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"update service instance status fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -410,9 +394,8 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n     try {\r\n       HttpResponse response = httpClient\r\n           .putHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId + \"/heartbeat\",\r\n-              null, null);\r\n-\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n+              null, null);\n+if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         return true;\r\n       } else {\r\n         throw new OperationException(\r\n@@ -443,8 +426,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service schemas list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -470,8 +452,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       } else {\r\n         throw new OperationException(\r\n             \"get service schema context fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -484,14 +465,13 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n     try {\r\n       HttpResponse response = httpClient\r\n           .putHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaId, null,\r\n-              HttpUtils.serialize(schema));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n+              HttpUtils.serialize(schema));\n+if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         return true;\r\n       } else {\r\n         throw new OperationException(\r\n             \"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -507,14 +487,13 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n       request.setSummary(schemaInfo.getSummary());\r\n       HttpResponse response = httpClient\r\n           .putHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaInfo.getSchemaId(), null,\r\n-              HttpUtils.serialize(request));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n+              HttpUtils.serialize(request));\n+if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         return true;\r\n       } else {\r\n         throw new OperationException(\r\n             \"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n@@ -527,19 +506,18 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n     try {\r\n       HttpResponse response = httpClient\r\n           .postHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas\", null,\r\n-              HttpUtils.serialize(modifySchemasRequest));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n+              HttpUtils.serialize(modifySchemasRequest));\n+if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         LOGGER.info(\"UPDATE SCHEMA OK\");\r\n         return true;\r\n       } else {\r\n         throw new OperationException(\r\n             \"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n+                .getMessage() + \"; content = \" + response.getContent());\r\n       }\r\n     } catch (IOException e) {\r\n       throw new OperationException(\r\n           \"update service schema fails\", e);\r\n     }\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "117",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "174",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 169).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "211",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "227",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "249",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 296).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "254",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "260",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "274",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "307",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "319",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "321",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "328",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "345",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "349",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "359",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "365",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "382",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "384",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 124).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "387",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "405",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "410",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "426",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "440",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "446",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "463",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/304/ServiceCenterClient.java\nindex 5c168f1d7e2..51870a30850 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/304/ServiceCenterClient.java\n@@ -15,90 +15,93 @@\n  * limitations under the License.\r\n  */\r\n \r\n-package org.apache.servicecomb.service.center.client;\r\n-\r\n-import java.io.IOException;\r\n-import java.net.URISyntaxException;\r\n-import java.net.URLEncoder;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-\r\n-import org.apache.http.HttpStatus;\r\n-import org.apache.http.client.utils.URIBuilder;\r\n-import org.apache.servicecomb.http.client.common.HttpResponse;\r\n-import org.apache.servicecomb.http.client.common.HttpTransport;\r\n-import org.apache.servicecomb.http.client.common.HttpTransportFactory;\r\n-import org.apache.servicecomb.http.client.common.HttpUtils;\r\n-import org.apache.servicecomb.http.client.common.TLSConfig;\r\n-import org.apache.servicecomb.http.client.common.TLSHttpsTransport;\r\n-import org.apache.servicecomb.service.center.client.exception.OperationException;\r\n-import org.apache.servicecomb.service.center.client.model.CreateMicroserviceInstanceRequest;\r\n-import org.apache.servicecomb.service.center.client.model.CreateMicroserviceRequest;\r\n-import org.apache.servicecomb.service.center.client.model.CreateSchemaRequest;\r\n-import org.apache.servicecomb.service.center.client.model.FindMicroserviceInstancesResponse;\r\n-import org.apache.servicecomb.service.center.client.model.GetSchemaListResponse;\r\n-import org.apache.servicecomb.service.center.client.model.GetSchemaResponse;\r\n-import org.apache.servicecomb.service.center.client.model.HeartbeatsRequest;\r\n-import org.apache.servicecomb.service.center.client.model.Microservice;\r\n-import org.apache.servicecomb.service.center.client.model.MicroserviceInstance;\r\n-import org.apache.servicecomb.service.center.client.model.MicroserviceInstanceResponse;\r\n-import org.apache.servicecomb.service.center.client.model.MicroserviceInstanceStatus;\r\n-import org.apache.servicecomb.service.center.client.model.MicroserviceInstancesResponse;\r\n-import org.apache.servicecomb.service.center.client.model.MicroserviceResponse;\r\n-import org.apache.servicecomb.service.center.client.model.MicroservicesResponse;\r\n-import org.apache.servicecomb.service.center.client.model.ModifySchemasRequest;\r\n-import org.apache.servicecomb.service.center.client.model.RegisteredMicroserviceInstanceResponse;\r\n-import org.apache.servicecomb.service.center.client.model.RegisteredMicroserviceResponse;\r\n-import org.apache.servicecomb.service.center.client.model.SchemaInfo;\r\n-import org.slf4j.Logger;\r\n-import org.slf4j.LoggerFactory;\r\n-\r\n-public class ServiceCenterClient implements ServiceCenterOperation {\r\n-\r\n-  private static final Logger LOGGER = LoggerFactory.getLogger(ServiceCenterClient.class);\r\n-\r\n+package org.apache.servicecomb.service.center.client;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URLEncoder;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.http.HttpStatus;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.servicecomb.http.client.common.HttpResponse;\n+import org.apache.servicecomb.http.client.common.HttpTransport;\n+import org.apache.servicecomb.http.client.common.HttpTransportFactory;\n+import org.apache.servicecomb.http.client.common.HttpUtils;\n+import org.apache.servicecomb.http.client.common.TLSConfig;\n+import org.apache.servicecomb.http.client.common.TLSHttpsTransport;\n+import org.apache.servicecomb.service.center.client.exception.OperationException;\n+import org.apache.servicecomb.service.center.client.model.CreateMicroserviceInstanceRequest;\n+import org.apache.servicecomb.service.center.client.model.CreateMicroserviceRequest;\n+import org.apache.servicecomb.service.center.client.model.CreateSchemaRequest;\n+import org.apache.servicecomb.service.center.client.model.FindMicroserviceInstancesResponse;\n+import org.apache.servicecomb.service.center.client.model.GetSchemaListResponse;\n+import org.apache.servicecomb.service.center.client.model.GetSchemaResponse;\n+import org.apache.servicecomb.service.center.client.model.HeartbeatsRequest;\n+import org.apache.servicecomb.service.center.client.model.Microservice;\n+import org.apache.servicecomb.service.center.client.model.MicroserviceInstance;\n+import org.apache.servicecomb.service.center.client.model.MicroserviceInstanceResponse;\n+import org.apache.servicecomb.service.center.client.model.MicroserviceInstanceStatus;\n+import org.apache.servicecomb.service.center.client.model.MicroserviceInstancesResponse;\n+import org.apache.servicecomb.service.center.client.model.MicroserviceResponse;\n+import org.apache.servicecomb.service.center.client.model.MicroservicesResponse;\n+import org.apache.servicecomb.service.center.client.model.ModifySchemasRequest;\n+import org.apache.servicecomb.service.center.client.model.RegisteredMicroserviceInstanceResponse;\n+import org.apache.servicecomb.service.center.client.model.RegisteredMicroserviceResponse;\n+import org.apache.servicecomb.service.center.client.model.SchemaInfo;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class ServiceCenterClient implements ServiceCenterOperation {\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ServiceCenterClient.class);\n+\n   private ServiceCenterRawClient httpClient;\r\n \r\n   /**\r\n    * Use default config parameter\r\n-   */\r\n-  public ServiceCenterClient() {\r\n-    this(new ServiceCenterRawClient());\r\n+   */\n+\n+  public ServiceCenterClient() {\n+    this(new ServiceCenterRawClient());\n   }\r\n \r\n   /**\r\n    * Add TLS config of client\r\n    * @param tlsConfig\r\n-   */\r\n-  public ServiceCenterClient(TLSConfig tlsConfig) {\r\n-    this(tlsConfig, null);\r\n+   */\n+\n+  public ServiceCenterClient(TLSConfig tlsConfig) {\n+    this(tlsConfig, null);\n   }\r\n \r\n   /**\r\n    * Add extraGlobalHeaders to http request\r\n    * @param extraGlobalHeaders\r\n-   */\r\n-  public ServiceCenterClient(Map<String, String> extraGlobalHeaders) {\r\n-    this(null, 0, null, null, null, extraGlobalHeaders);\r\n+   */\n+\n+  public ServiceCenterClient(Map<String, String> extraGlobalHeaders) {\n+    this(null, 0, null, null, null, extraGlobalHeaders);\n   }\r\n \r\n   /**\r\n    * Add TLS config and extraGlobalHeaders\r\n    * @param tlsConfig\r\n    * @param extraGlobalHeaders\r\n-   */\r\n-  public ServiceCenterClient(TLSConfig tlsConfig, Map<String, String> extraGlobalHeaders) {\r\n-    this(null, 0, null, null, tlsConfig, extraGlobalHeaders);\r\n+   */\n+\n+  public ServiceCenterClient(TLSConfig tlsConfig, Map<String, String> extraGlobalHeaders) {\n+    this(null, 0, null, null, tlsConfig, extraGlobalHeaders);\n   }\r\n \r\n   /**\r\n    * Customized host,port,\r\n    * @param host\r\n    * @param port\r\n-   */\r\n-  public ServiceCenterClient(String host, int port) {\r\n-    this(host, port, null, null, null, null);\r\n+   */\n+\n+  public ServiceCenterClient(String host, int port) {\n+    this(host, port, null, null, null, null);\n   }\r\n \r\n   /**\r\n@@ -109,228 +112,185 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n    * @param tenantName\r\n    * @param tlsConfig\r\n    * @param extraGlobalHeaders\r\n-   */\r\n-  public ServiceCenterClient(String host, int port, String projectName, String tenantName, TLSConfig tlsConfig,\r\n-      Map<String, String> extraGlobalHeaders) {\r\n-    HttpTransport httpTransport = HttpTransportFactory.getDefaultHttpTransport();\r\n-    if (tlsConfig != null) {\r\n-      httpTransport = new TLSHttpsTransport(tlsConfig);\r\n-    }\r\n-    httpTransport.addHeaders(extraGlobalHeaders);\r\n-\r\n-    this.httpClient = new ServiceCenterRawClient.Builder()\r\n-        .setHost(host)\r\n-        .setPort(port)\r\n-        .setProjectName(projectName)\r\n-        .setTenantName(tenantName)\r\n-        .setHttpTransport(httpTransport).build();\r\n-  }\r\n-\r\n-  public ServiceCenterClient(ServiceCenterRawClient serviceCenterRawClient) {\r\n-    this.httpClient = serviceCenterRawClient;\r\n-  }\r\n-\r\n-  @Override\r\n-  public MicroserviceInstancesResponse getServiceCenterInstances() {\r\n-    try {\r\n-      HttpResponse response = httpClient.getHttpRequest(\"/registry/health\", null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return HttpUtils.deserialize(response.getContent(), MicroserviceInstancesResponse.class);\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service-center instances fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service-center instances fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public RegisteredMicroserviceResponse registerMicroservice(Microservice microservice) {\r\n-    try {\r\n-      CreateMicroserviceRequest request = new CreateMicroserviceRequest();\r\n-      request.setService(microservice);\r\n-      HttpResponse response = httpClient\r\n-          .postHttpRequest(\"/registry/microservices\", null, HttpUtils.serialize(request));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceResponse.class);\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"register service fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"register service fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public MicroservicesResponse getMicroserviceList() {\r\n-    try {\r\n-      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices\", null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return HttpUtils.deserialize(response.getContent(), MicroservicesResponse.class);\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service List fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service List fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public RegisteredMicroserviceResponse queryServiceId(Microservice microservice) {\r\n-    try {\r\n-      URIBuilder uriBuilder = new URIBuilder(\"/registry/existence\");\r\n-      uriBuilder.setParameter(\"type\", \"microservice\");\r\n-      uriBuilder.setParameter(\"appId\", microservice.getAppId());\r\n-      uriBuilder.setParameter(\"serviceName\", microservice.getServiceName());\r\n-      uriBuilder.setParameter(\"version\", microservice.getVersion());\r\n-      uriBuilder.setParameter(\"env\", microservice.getEnvironment());\r\n-\r\n-      HttpResponse response = httpClient.getHttpRequest(uriBuilder.build().toString(), null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceResponse.class);\r\n-      } else {\r\n-        LOGGER.info(\"Query serviceId fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-            .getMessage()\r\n-            + \"; content = \" + response.getContent());\r\n-        return null;\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"query serviceId fails\", e);\r\n-    } catch (URISyntaxException e) {\r\n-      throw new OperationException(\r\n-          \"build url failed.\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  @SuppressWarnings(\"unchecked\")\r\n-  public Microservice getMicroserviceByServiceId(String serviceId) {\r\n-    try {\r\n-      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices/\" + serviceId, null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        MicroserviceResponse microserviceResponse = HttpUtils\r\n-            .deserialize(response.getContent(), MicroserviceResponse.class);\r\n-        return microserviceResponse.getService();\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service message fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service message fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public RegisteredMicroserviceInstanceResponse registerMicroserviceInstance(MicroserviceInstance instance) {\r\n-    try {\r\n-      CreateMicroserviceInstanceRequest request = new CreateMicroserviceInstanceRequest();\r\n-      request.setInstance(instance);\r\n-      HttpResponse response = httpClient\r\n-          .postHttpRequest(\"/registry/microservices/\" + instance.getServiceId() + \"/instances\", null,\r\n-              HttpUtils.serialize(request));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceInstanceResponse.class);\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"register service instance fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"register service instance fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public FindMicroserviceInstancesResponse findMicroserviceInstance(String consumerId, String appId, String serviceName,\r\n-      String versionRule,\r\n-      String revision) {\r\n-    try {\r\n-      Map<String, String> headers = new HashMap<>();\r\n-      headers.put(\"X-ConsumerId\", consumerId);\r\n-      HttpResponse response = httpClient\r\n-          .getHttpRequest(\"/registry/instances?appId=\" + URLEncoder.encode(appId, \"UTF-8\")\r\n-                  + \"&serviceName=\" + HttpUtils.encodeURLParam(serviceName)\r\n-                  + \"&version=\" + HttpUtils.encodeURLParam(versionRule)\r\n-                  + \"&rev=\" + HttpUtils.encodeURLParam(revision)\r\n-              , headers, null);\r\n-      FindMicroserviceInstancesResponse result = new FindMicroserviceInstancesResponse();\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        result.setModified(true);\r\n-        result.setRevision(response.getHeader(\"X-Resource-Revision\"));\r\n-        result.setMicroserviceInstancesResponse(\r\n-            HttpUtils.deserialize(response.getContent(), MicroserviceInstancesResponse.class));\r\n-        return result;\r\n-      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\r\n-        result.setModified(false);\r\n-        return result;\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service instances list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service instances list fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public MicroserviceInstancesResponse getMicroserviceInstanceList(String serviceId) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .getHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances\", null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return HttpUtils.deserialize(response.getContent(), MicroserviceInstancesResponse.class);\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service instances list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service instances list fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public MicroserviceInstance getMicroserviceInstance(String serviceId, String instanceId) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .getHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId, null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        MicroserviceInstanceResponse instanceResponse = HttpUtils\r\n-            .deserialize(response.getContent(), MicroserviceInstanceResponse.class);\r\n-        return instanceResponse.getInstance();\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service instance message fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service instance message fails\", e);\r\n-    }\r\n+   */\n+\n+  public ServiceCenterClient(String host, int port, String projectName, String tenantName, TLSConfig tlsConfig, Map<String, String> extraGlobalHeaders) {\n+    HttpTransport httpTransport = HttpTransportFactory.getDefaultHttpTransport();\n+    if (tlsConfig != null) {\n+      httpTransport = new TLSHttpsTransport(tlsConfig);\n+    }\n+\n+    httpTransport.addHeaders(extraGlobalHeaders);\n+    this.httpClient = new ServiceCenterRawClient.Builder().setHost(host)\n+                                                          .setPort(port)\n+                                                          .setProjectName(projectName)\n+                                                          .setTenantName(tenantName)\n+                                                          .setHttpTransport(httpTransport)\n+                                                          .build();\n+  }\n+\n+  public ServiceCenterClient(ServiceCenterRawClient serviceCenterRawClient) {\n+    this.httpClient = serviceCenterRawClient;\n+  }\n+\n+  @Override\n+  public MicroserviceInstancesResponse getServiceCenterInstances() {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/health\", null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return HttpUtils.deserialize(response.getContent(), MicroserviceInstancesResponse.class);\n+      } else {\n+        throw new OperationException(\"get service-center instances fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service-center instances fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public RegisteredMicroserviceResponse registerMicroservice(Microservice microservice) {\n+    try {\n+      CreateMicroserviceRequest request = new CreateMicroserviceRequest();\n+      request.setService(microservice);\n+\n+      HttpResponse response = httpClient.postHttpRequest(\"/registry/microservices\", null, HttpUtils.serialize(request));\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceResponse.class);\n+      } else {\n+        throw new OperationException(\"register service fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"register service fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public MicroservicesResponse getMicroserviceList() {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices\", null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return HttpUtils.deserialize(response.getContent(), MicroservicesResponse.class);\n+      } else {\n+        throw new OperationException(\"get service List fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service List fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public RegisteredMicroserviceResponse queryServiceId(Microservice microservice) {\n+    try {\n+      URIBuilder uriBuilder = new URIBuilder(\"/registry/existence\");\n+      uriBuilder.setParameter(\"type\", \"microservice\");\n+      uriBuilder.setParameter(\"appId\", microservice.getAppId());\n+      uriBuilder.setParameter(\"serviceName\", microservice.getServiceName());\n+      uriBuilder.setParameter(\"version\", microservice.getVersion());\n+      uriBuilder.setParameter(\"env\", microservice.getEnvironment());\n+\n+      HttpResponse response = httpClient.getHttpRequest(uriBuilder.build().toString(), null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceResponse.class);\n+      } else {\n+        LOGGER.info(\"Query serviceId fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+        return null;\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"query serviceId fails\", e);\n+    } catch (URISyntaxException e) {\n+      throw new OperationException(\"build url failed.\", e);\n+    }\n+  }\n+\n+  @Override\n+  @SuppressWarnings(\"unchecked\")\n+  public Microservice getMicroserviceByServiceId(String serviceId) {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices/\" + serviceId, null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        MicroserviceResponse microserviceResponse = HttpUtils.deserialize(response.getContent(), MicroserviceResponse.class);\n+        return microserviceResponse.getService();\n+      } else {\n+        throw new OperationException(\"get service message fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service message fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public RegisteredMicroserviceInstanceResponse registerMicroserviceInstance(MicroserviceInstance instance) {\n+    try {\n+      CreateMicroserviceInstanceRequest request = new CreateMicroserviceInstanceRequest();\n+      request.setInstance(instance);\n+\n+      HttpResponse response = httpClient.postHttpRequest(\"/registry/microservices/\" + instance.getServiceId() + \"/instances\",\n+                              null,\n+                              HttpUtils.serialize(request));\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return HttpUtils.deserialize(response.getContent(), RegisteredMicroserviceInstanceResponse.class);\n+      } else {\n+        throw new OperationException(\"register service instance fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"register service instance fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public FindMicroserviceInstancesResponse findMicroserviceInstance(String consumerId,\n+    String appId,\n+      String serviceName,\n+        String versionRule, String revision) {\n+    try {\n+      Map<String, String> headers = new HashMap<>();\n+      headers.put(\"X-ConsumerId\", consumerId);\n+\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/instances?appId=\" + URLEncoder.encode(appId, \"UTF-8\") + \"&serviceName=\" + HttpUtils.encodeURLParam(serviceName) + \"&version=\" + HttpUtils.encodeURLParam(versionRule) + \"&rev=\" + HttpUtils.encodeURLParam(revision), headers, null);\n+      FindMicroserviceInstancesResponse result = new FindMicroserviceInstancesResponse();\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        result.setModified(true);\n+        result.setRevision(response.getHeader(\"X-Resource-Revision\"));\n+        result.setMicroserviceInstancesResponse(HttpUtils.deserialize(response.getContent(), MicroserviceInstancesResponse.class));\n+        return result;\n+      } else if (response.getStatusCode() == HttpStatus.SC_NOT_MODIFIED) {\n+        result.setModified(false);\n+        return result;\n+      } else {\n+        throw new OperationException(\"get service instances list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service instances list fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public MicroserviceInstancesResponse getMicroserviceInstanceList(String serviceId) {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances\", null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return HttpUtils.deserialize(response.getContent(), MicroserviceInstancesResponse.class);\n+      } else {\n+        throw new OperationException(\"get service instances list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service instances list fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public MicroserviceInstance getMicroserviceInstance(String serviceId, String instanceId) {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId, null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        MicroserviceInstanceResponse instanceResponse = HttpUtils.deserialize(response.getContent(), MicroserviceInstanceResponse.class);\n+        return instanceResponse.getInstance();\n+      } else {\n+        throw new OperationException(\"get service instance message fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service instance message fails\", e);\n+    }\n   }\r\n \r\n   /**\r\n@@ -340,44 +300,36 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n    * @param instanceId\r\n    * @return\r\n    * @throws OperationException\r\n-   */\r\n-  public void deleteMicroserviceInstance(String serviceId, String instanceId) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .deleteHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId, null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        LOGGER.info(\"DELETE SERVICE INSTANCE OK\");\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"delete service instance fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"delete service instance fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public boolean updateMicroserviceInstanceStatus(String serviceId, String instanceId,\r\n-      MicroserviceInstanceStatus status) {\r\n-    try {\r\n-      HttpResponse response = httpClient.putHttpRequest(\r\n-          \"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId + \"/status?value=\" + status, null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        LOGGER.info(\"UPDATE STATUS OK\");\r\n-        return true;\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"update service instance status fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"update service instance status fails\", e);\r\n-    }\r\n+   */\n+\n+  public void deleteMicroserviceInstance(String serviceId, String instanceId) {\n+    try {\n+      HttpResponse response = httpClient.deleteHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId, null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.info(\"DELETE SERVICE INSTANCE OK\");\n+      } else {\n+        throw new OperationException(\"delete service instance fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"delete service instance fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean updateMicroserviceInstanceStatus(String serviceId, String instanceId, MicroserviceInstanceStatus status) {\n+    try {\n+      HttpResponse response = httpClient.putHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId + \"/status?value=\" + status,\n+                              null,\n+                              null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.info(\"UPDATE STATUS OK\");\n+        return true;\n+      } else {\n+        throw new OperationException(\"update service instance status fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"update service instance status fails\", e);\n+    }\n   }\r\n \r\n   /**\r\n@@ -386,43 +338,35 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n    * @param heartbeatsRequest\r\n    * @return\r\n    * @throws OperationException\r\n-   */\r\n-  public void sendHeartBeats(HeartbeatsRequest heartbeatsRequest) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .putHttpRequest(\"/registry/heartbeats\", null, HttpUtils.serialize(heartbeatsRequest));\r\n-\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        LOGGER.info(\"HEARTBEATS SUCCESS\");\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"heartbeats fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"heartbeats fails \", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public boolean sendHeartBeat(String serviceId, String instanceId) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .putHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId + \"/heartbeat\",\r\n-              null, null);\r\n-\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return true;\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"heartbeats fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"heartbeats fails \", e);\r\n-    }\r\n+   */\n+\n+  public void sendHeartBeats(HeartbeatsRequest heartbeatsRequest) {\n+    try {\n+      HttpResponse response = httpClient.putHttpRequest(\"/registry/heartbeats\", null, HttpUtils.serialize(heartbeatsRequest));\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.info(\"HEARTBEATS SUCCESS\");\n+      } else {\n+        throw new OperationException(\"heartbeats fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"heartbeats fails \", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean sendHeartBeat(String serviceId, String instanceId) {\n+    try {\n+      HttpResponse response = httpClient.putHttpRequest(\"/registry/microservices/\" + serviceId + \"/instances/\" + instanceId + \"/heartbeat\",\n+                              null,\n+                              null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return true;\n+      } else {\n+        throw new OperationException(\"heartbeats fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"heartbeats fails \", e);\n+    }\n   }\r\n \r\n   /**\r\n@@ -431,25 +375,20 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n    * @param serviceId\r\n    * @return\r\n    * @throws OperationException\r\n-   */\r\n-  public List<SchemaInfo> getServiceSchemasList(String serviceId) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .getHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas\", null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        GetSchemaListResponse getSchemaResponse = HttpUtils\r\n-            .deserialize(response.getContent(), GetSchemaListResponse.class);\r\n-        return getSchemaResponse.getSchemas();\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service schemas list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service schemas list fails\", e);\r\n-    }\r\n+   */\n+\n+  public List<SchemaInfo> getServiceSchemasList(String serviceId) {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas\", null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        GetSchemaListResponse getSchemaResponse = HttpUtils.deserialize(response.getContent(), GetSchemaListResponse.class);\n+        return getSchemaResponse.getSchemas();\n+      } else {\n+        throw new OperationException(\"get service schemas list fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service schemas list fails\", e);\n+    }\n   }\r\n \r\n   /**\r\n@@ -459,87 +398,72 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n    * @param schemaId\r\n    * @return\r\n    * @throws OperationException\r\n-   */\r\n-  public String getServiceSchemaContext(String serviceId, String schemaId) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .getHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaId, null, null);\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        GetSchemaResponse getSchemaResponse = HttpUtils.deserialize(response.getContent(), GetSchemaResponse.class);\r\n-        return getSchemaResponse.getSchema();\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"get service schema context fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"get service schemas context fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public boolean registerSchema(String serviceId, String schemaId, CreateSchemaRequest schema) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .putHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaId, null,\r\n-              HttpUtils.serialize(schema));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return true;\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"update service schema fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public boolean updateServiceSchemaContext(String serviceId, SchemaInfo schemaInfo) {\r\n-    try {\r\n-      CreateSchemaRequest request = new CreateSchemaRequest();\r\n-      request.setSchema(schemaInfo.getSchema());\r\n-      request.setSummary(schemaInfo.getSummary());\r\n-      HttpResponse response = httpClient\r\n-          .putHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaInfo.getSchemaId(), null,\r\n-              HttpUtils.serialize(request));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        return true;\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"update service schema fails\", e);\r\n-    }\r\n-  }\r\n-\r\n-  @Override\r\n-  public boolean batchUpdateServiceSchemaContext(String serviceId, ModifySchemasRequest modifySchemasRequest) {\r\n-    try {\r\n-      HttpResponse response = httpClient\r\n-          .postHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas\", null,\r\n-              HttpUtils.serialize(modifySchemasRequest));\r\n-      if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n-        LOGGER.info(\"UPDATE SCHEMA OK\");\r\n-        return true;\r\n-      } else {\r\n-        throw new OperationException(\r\n-            \"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response\r\n-                .getMessage()\r\n-                + \"; content = \" + response.getContent());\r\n-      }\r\n-    } catch (IOException e) {\r\n-      throw new OperationException(\r\n-          \"update service schema fails\", e);\r\n-    }\r\n-  }\r\n-}\r\n+   */\n+\n+  public String getServiceSchemaContext(String serviceId, String schemaId) {\n+    try {\n+      HttpResponse response = httpClient.getHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaId, null, null);\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        GetSchemaResponse getSchemaResponse = HttpUtils.deserialize(response.getContent(), GetSchemaResponse.class);\n+        return getSchemaResponse.getSchema();\n+      } else {\n+        throw new OperationException(\"get service schema context fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"get service schemas context fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean registerSchema(String serviceId, String schemaId, CreateSchemaRequest schema) {\n+    try {\n+      HttpResponse response = httpClient.putHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaId,\n+                              null,\n+                              HttpUtils.serialize(schema));\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return true;\n+      } else {\n+        throw new OperationException(\"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"update service schema fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean updateServiceSchemaContext(String serviceId, SchemaInfo schemaInfo) {\n+    try {\n+      CreateSchemaRequest request = new CreateSchemaRequest();\n+      request.setSchema(schemaInfo.getSchema());\n+      request.setSummary(schemaInfo.getSummary());\n+\n+      HttpResponse response = httpClient.putHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas/\" + schemaInfo.getSchemaId(),\n+                              null,\n+                              HttpUtils.serialize(request));\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        return true;\n+      } else {\n+        throw new OperationException(\"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"update service schema fails\", e);\n+    }\n+  }\n+\n+  @Override\n+  public boolean batchUpdateServiceSchemaContext(String serviceId, ModifySchemasRequest modifySchemasRequest) {\n+    try {\n+      HttpResponse response = httpClient.postHttpRequest(\"/registry/microservices/\" + serviceId + \"/schemas\",\n+                              null,\n+                              HttpUtils.serialize(modifySchemasRequest));\n+      if (response.getStatusCode() == HttpStatus.SC_OK) {\n+        LOGGER.info(\"UPDATE SCHEMA OK\");\n+        return true;\n+      } else {\n+        throw new OperationException(\"update service schema fails, statusCode = \" + response.getStatusCode() + \"; message = \" + response.getMessage() + \"; content = \" + response.getContent());\n+      }\n+    } catch (IOException e) {\n+      throw new OperationException(\"update service schema fails\", e);\n+    }\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 463
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/304/ServiceCenterClient.java\nindex 5c168f1d7e2..6ec2b7c125f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/304/ServiceCenterClient.java\n@@ -269,8 +269,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n           .getHttpRequest(\"/registry/instances?appId=\" + URLEncoder.encode(appId, \"UTF-8\")\r\n                   + \"&serviceName=\" + HttpUtils.encodeURLParam(serviceName)\r\n                   + \"&version=\" + HttpUtils.encodeURLParam(versionRule)\r\n-                  + \"&rev=\" + HttpUtils.encodeURLParam(revision)\r\n-              , headers, null);\r\n+                  + \"&rev=\" + HttpUtils.encodeURLParam(revision), headers, null);\r\n       FindMicroserviceInstancesResponse result = new FindMicroserviceInstancesResponse();\r\n       if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         result.setModified(true);\r\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/304/ServiceCenterClient.java\nindex 5c168f1d7e2..6ec2b7c125f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/304/ServiceCenterClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/304/ServiceCenterClient.java\n@@ -269,8 +269,7 @@ public class ServiceCenterClient implements ServiceCenterOperation {\n           .getHttpRequest(\"/registry/instances?appId=\" + URLEncoder.encode(appId, \"UTF-8\")\r\n                   + \"&serviceName=\" + HttpUtils.encodeURLParam(serviceName)\r\n                   + \"&version=\" + HttpUtils.encodeURLParam(versionRule)\r\n-                  + \"&rev=\" + HttpUtils.encodeURLParam(revision)\r\n-              , headers, null);\r\n+                  + \"&rev=\" + HttpUtils.encodeURLParam(revision), headers, null);\r\n       FindMicroserviceInstancesResponse result = new FindMicroserviceInstancesResponse();\r\n       if (response.getStatusCode() == HttpStatus.SC_OK) {\r\n         result.setModified(true);\r\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ]
}