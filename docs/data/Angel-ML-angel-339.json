{
    "project_name": "Angel-ML-angel",
    "violation_id": "339",
    "information": {
        "violations": [
            {
                "line": "42",
                "column": "31",
                "severity": "error",
                "message": "Only one statement per line allowed.",
                "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
            }
        ]
    },
    "source_code": "\n  protected int [] trans(int[] rowIndices){\n    int start = 0; int end = 0;\n    int [] indptr = new int[shape[0] + 1];\n    indptr[0] = 0;\n    int j = 1;",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "42",
                    "column": "31",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/339/CsrMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/339/CsrMatrix.java\nindex a039598e374..9ebc08094d4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/339/CsrMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/339/CsrMatrix.java\n@@ -2,298 +2,299 @@ package com.tencent.angel.ml.math2.matrix;\n \n import com.tencent.angel.ml.math2.vector.Vector;\n \n-public abstract class CsrMatrix extends Matrix{\n-  protected int [] indices;\n-  protected int [] indptr;\n-  protected int [] shape;\n-\n-  public CsrMatrix() {}\n-\n-  public abstract Vector getRow(int idx);\n-\n-  public abstract Vector getCol(int idx);\n-\n-  public int[] getShape() {\n-    return shape;\n-  }\n-\n-  @Override\n-  public int getNumRows() {\n-    return shape[0];\n-  }\n-\n-  public int getNumCols() {\n-    return shape[1];\n-  }\n-\n-  public int[] getIndices() {\n-    return indices;\n-  }\n-\n-  public int[] getIndptr() {\n-    return indptr;\n-  }\n-\n-  public void reshape(int rows, int cols) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  protected int [] trans(int[] rowIndices){\n-    int start = 0; int end = 0;\n-    int [] indptr = new int[shape[0] + 1];\n-    indptr[0] = 0;\n-    int j = 1;\n-    for (int i = 0; i < rowIndices.length; i++) {\n-      if (start != rowIndices[i]) {\n-        indptr[j] = end;\n-        j++;\n-      }\n-      start = rowIndices[i];\n-      end = end + 1;\n-    }\n-    indptr[shape[0]] = end;\n-    return indptr;\n-  }\n-\n-  @Override\n-  public Vector diag() {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Vector dot(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Vector transDot(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix iadd(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix add(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix isub(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix sub(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix imul(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix mul(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix idiv(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix div(int rowId, Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix iaxpy(int rowId, Vector other, double aplha) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix axpy(int rowId, Vector other, double aplha) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix iadd(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix add(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix isub(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix sub(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix imul(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix mul(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix idiv(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix div(Vector other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix iaxpy(Vector other, double aplha) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix axpy(Vector other, double aplha) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix iadd(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix add(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix isub(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix sub(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix imul(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix mul(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix idiv(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix div(Matrix other) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix iaxpy(Matrix other, double aplha) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix axpy(Matrix other, double aplha) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix iadd(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix add(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix isub(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix sub(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix imul(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix mul(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix idiv(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix div(double x) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-\n-\n-  @Override\n-  public Vector min(int axis) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Vector max(int axis) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Vector sum(int axis) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Vector average(int axis) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Vector std(int axis) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Vector norm(int axis) {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n-\n-  @Override\n-  public Matrix copy() {\n-    throw new UnsupportedOperationException(\"this operation is not support!\");\n-  }\n+public abstract class CsrMatrix extends Matrix {\n+    protected int[] indices;\n+    protected int[] indptr;\n+    protected int[] shape;\n+\n+    public CsrMatrix() {\n+    }\n+\n+    public abstract Vector getRow(int idx);\n+\n+    public abstract Vector getCol(int idx);\n+\n+    public int[] getShape() {\n+        return shape;\n+    }\n+\n+    @Override\n+    public int getNumRows() {\n+        return shape[0];\n+    }\n+\n+    public int getNumCols() {\n+        return shape[1];\n+    }\n+\n+    public int[] getIndices() {\n+        return indices;\n+    }\n+\n+    public int[] getIndptr() {\n+        return indptr;\n+    }\n+\n+    public void reshape(int rows, int cols) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    protected int[] trans(int[] rowIndices) {\n+        int start = 0;\n+        int end = 0;\n+        int[] indptr = new int[shape[0] + 1];\n+        indptr[0] = 0;\n+        int j = 1;\n+        for (int i = 0; i < rowIndices.length; i++) {\n+            if (start != rowIndices[i]) {\n+                indptr[j] = end;\n+                j++;\n+            }\n+            start = rowIndices[i];\n+            end = end + 1;\n+        }\n+        indptr[shape[0]] = end;\n+        return indptr;\n+    }\n+\n+    @Override\n+    public Vector diag() {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Vector dot(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Vector transDot(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix iadd(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix add(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix isub(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix sub(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix imul(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix mul(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix idiv(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix div(int rowId, Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix iaxpy(int rowId, Vector other, double aplha) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix axpy(int rowId, Vector other, double aplha) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix iadd(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix add(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix isub(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix sub(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix imul(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix mul(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix idiv(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix div(Vector other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix iaxpy(Vector other, double aplha) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix axpy(Vector other, double aplha) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix iadd(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix add(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix isub(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix sub(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix imul(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix mul(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix idiv(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix div(Matrix other) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix iaxpy(Matrix other, double aplha) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix axpy(Matrix other, double aplha) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix iadd(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix add(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix isub(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix sub(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix imul(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix mul(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix idiv(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix div(double x) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+\n+    @Override\n+    public Vector min(int axis) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Vector max(int axis) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Vector sum(int axis) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Vector average(int axis) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Vector std(int axis) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Vector norm(int axis) {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n+\n+    @Override\n+    public Matrix copy() {\n+        throw new UnsupportedOperationException(\"this operation is not support!\");\n+    }\n }\n",
            "diff_size": 295
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/339/CsrMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/339/CsrMatrix.java\nindex a039598e374..4d27242c5d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/339/CsrMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/339/CsrMatrix.java\n@@ -2,10 +2,10 @@ package com.tencent.angel.ml.math2.matrix;\n \n import com.tencent.angel.ml.math2.vector.Vector;\n \n-public abstract class CsrMatrix extends Matrix{\n-  protected int [] indices;\n-  protected int [] indptr;\n-  protected int [] shape;\n+public abstract class CsrMatrix extends Matrix {\n+  protected int[] indices;\n+  protected int[] indptr;\n+  protected int[] shape;\n \n   public CsrMatrix() {}\n \n@@ -38,9 +38,10 @@ public abstract class CsrMatrix extends Matrix{\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n   }\n \n-  protected int [] trans(int[] rowIndices){\n-    int start = 0; int end = 0;\n-    int [] indptr = new int[shape[0] + 1];\n+  protected int[] trans(int[] rowIndices) {\n+    int start = 0;\n+int end = 0;\n+    int[] indptr = new int[shape[0] + 1];\n     indptr[0] = 0;\n     int j = 1;\n     for (int i = 0; i < rowIndices.length; i++) {\n@@ -260,9 +261,7 @@ public abstract class CsrMatrix extends Matrix{\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n   }\n \n-\n-\n-  @Override\n+@Override\n   public Vector min(int axis) {\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n   }\n@@ -296,4 +295,4 @@ public abstract class CsrMatrix extends Matrix{\n   public Matrix copy() {\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/339/CsrMatrix.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/339/CsrMatrix.java\nindex a039598e374..d037d717b30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/339/CsrMatrix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/339/CsrMatrix.java\n@@ -2,10 +2,13 @@ package com.tencent.angel.ml.math2.matrix;\n \n import com.tencent.angel.ml.math2.vector.Vector;\n \n-public abstract class CsrMatrix extends Matrix{\n-  protected int [] indices;\n-  protected int [] indptr;\n-  protected int [] shape;\n+public abstract class CsrMatrix extends Matrix {\n+\n+  protected int[] indices;\n+\n+  protected int[] indptr;\n+\n+  protected int[] shape;\n \n   public CsrMatrix() {}\n \n@@ -38,10 +41,12 @@ public abstract class CsrMatrix extends Matrix{\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n   }\n \n-  protected int [] trans(int[] rowIndices){\n-    int start = 0; int end = 0;\n-    int [] indptr = new int[shape[0] + 1];\n+  protected int[] trans(int[] rowIndices) {\n+    int start = 0;\n+    int end = 0;\n+    int[] indptr = new int[shape[0] + 1];\n     indptr[0] = 0;\n+\n     int j = 1;\n     for (int i = 0; i < rowIndices.length; i++) {\n       if (start != rowIndices[i]) {\n@@ -260,8 +265,6 @@ public abstract class CsrMatrix extends Matrix{\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n   }\n \n-\n-\n   @Override\n   public Vector min(int axis) {\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n@@ -296,4 +299,5 @@ public abstract class CsrMatrix extends Matrix{\n   public Matrix copy() {\n     throw new UnsupportedOperationException(\"this operation is not support!\");\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "42",
                    "column": "31",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "42",
                    "column": "31",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "checkstyle_idea",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}