{
    "project_name": "graphfoundation-ongdb",
    "violation_id": "1452",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "84",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1452/CommunityIdTypeConfigurationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1452/CommunityIdTypeConfigurationProvider.java\nindex cda29db9ce8..d3a07b260ad 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1452/CommunityIdTypeConfigurationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/checkstyle_idea/1452/CommunityIdTypeConfigurationProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.id.configuration;\n \n import java.util.Collections;\n@@ -30,31 +31,32 @@ import org.neo4j.kernel.impl.store.id.IdType;\n /**\n  * Id type configuration provider for community edition.\n  * Allow to reuse predefined set of id types.\n+ *\n  * @see IdType\n  * @see IdTypeConfiguration\n  */\n public class CommunityIdTypeConfigurationProvider implements IdTypeConfigurationProvider\n {\n \n-    private static final Set<IdType> TYPES_TO_ALLOW_REUSE =\n-            Collections.unmodifiableSet( EnumSet.of( IdType.PROPERTY, IdType.STRING_BLOCK,\n-                    IdType.ARRAY_BLOCK, IdType.NODE_LABELS ) );\n+  private static final Set<IdType> TYPES_TO_ALLOW_REUSE =\n+      Collections.unmodifiableSet(EnumSet.of(IdType.PROPERTY, IdType.STRING_BLOCK,\n+          IdType.ARRAY_BLOCK, IdType.NODE_LABELS));\n \n-    private final Map<IdType,IdTypeConfiguration> typeConfigurations = new EnumMap<>( IdType.class );\n+  private final Map<IdType, IdTypeConfiguration> typeConfigurations = new EnumMap<>(IdType.class);\n \n-    @Override\n-    public IdTypeConfiguration getIdTypeConfiguration( IdType idType )\n-    {\n-        return typeConfigurations.computeIfAbsent( idType, this::createIdTypeConfiguration );\n-    }\n+  @Override\n+  public IdTypeConfiguration getIdTypeConfiguration(IdType idType)\n+  {\n+    return typeConfigurations.computeIfAbsent(idType, this::createIdTypeConfiguration);\n+  }\n \n-    private IdTypeConfiguration createIdTypeConfiguration( IdType idType )\n-    {\n-        return new IdTypeConfiguration( getTypesToReuse().contains( idType ) );\n-    }\n+  private IdTypeConfiguration createIdTypeConfiguration(IdType idType)\n+  {\n+    return new IdTypeConfiguration(getTypesToReuse().contains(idType));\n+  }\n \n-    protected Set<IdType> getTypesToReuse()\n-    {\n-        return TYPES_TO_ALLOW_REUSE;\n-    }\n+  protected Set<IdType> getTypesToReuse()\n+  {\n+    return TYPES_TO_ALLOW_REUSE;\n+  }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1452/CommunityIdTypeConfigurationProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1452/CommunityIdTypeConfigurationProvider.java\nindex cda29db9ce8..5282e15b8fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/violations/1452/CommunityIdTypeConfigurationProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/graphfoundation-ongdb/naturalize/1452/CommunityIdTypeConfigurationProvider.java\n@@ -35,12 +35,9 @@ import org.neo4j.kernel.impl.store.id.IdType;\n  */\n public class CommunityIdTypeConfigurationProvider implements IdTypeConfigurationProvider\n {\n-\n-    private static final Set<IdType> TYPES_TO_ALLOW_REUSE =\n-            Collections.unmodifiableSet( EnumSet.of( IdType.PROPERTY, IdType.STRING_BLOCK,\n+    private static final Set<IdType> TYPES_TO_ALLOW_REUSE = Collections.unmodifiableSet( EnumSet.of( IdType.PROPERTY, IdType.STRING_BLOCK,\n                     IdType.ARRAY_BLOCK, IdType.NODE_LABELS ) );\n-\n-    private final Map<IdType,IdTypeConfiguration> typeConfigurations = new EnumMap<>( IdType.class );\n+private final Map<IdType,IdTypeConfiguration> typeConfigurations = new EnumMap<>( IdType.class );\n \n     @Override\n     public IdTypeConfiguration getIdTypeConfiguration( IdType idType )\n@@ -57,4 +54,4 @@ public class CommunityIdTypeConfigurationProvider implements IdTypeConfiguration\n     {\n         return TYPES_TO_ALLOW_REUSE;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}