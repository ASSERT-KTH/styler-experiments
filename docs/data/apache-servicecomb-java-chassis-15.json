{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "15",
    "information": {
        "violations": [
            {
                "line": "63",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n\n  // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance()\n      .getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false).get();\n",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/15/BodyProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/15/BodyProcessorCreator.java\nindex ffce8339e10..9eb4ffdfcdc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/15/BodyProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/15/BodyProcessorCreator.java\n@@ -154,7 +154,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n      * Deserialize body object into body buffer, according to the Content-Type.\n      *\n      * @param contentType the Content-Type of request\n-     * @param arg body param object\n+     * @param arg         body param object\n      * @return the deserialized body buffer\n      * @throws IOException\n      */\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 131).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "253",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/15/BodyProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/15/BodyProcessorCreator.java\nindex ffce8339e10..13699d4e0a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/15/BodyProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/15/BodyProcessorCreator.java\n@@ -22,11 +22,9 @@ import java.io.InputStream;\n import java.lang.reflect.Type;\n import java.nio.charset.StandardCharsets;\n import java.util.Locale;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n-\n import org.apache.commons.io.IOUtils;\n import org.apache.servicecomb.common.rest.RestConst;\n import org.apache.servicecomb.common.rest.codec.RestClientRequest;\n@@ -38,14 +36,12 @@ import org.apache.servicecomb.swagger.generator.core.processor.parameter.JsonVie\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.fasterxml.jackson.databind.JavaType;\n import com.fasterxml.jackson.databind.ObjectReader;\n import com.fasterxml.jackson.databind.exc.MismatchedInputException;\n import com.fasterxml.jackson.databind.type.SimpleType;\n import com.fasterxml.jackson.databind.type.TypeFactory;\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.swagger.models.Model;\n import io.swagger.models.ModelImpl;\n import io.swagger.models.parameters.BodyParameter;\n@@ -61,8 +57,9 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n   private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n \n   // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n-  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance()\n-      .getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false).get();\n+\n+  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance().getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false)\n+                                                                              .get();\n \n   public static class BodyProcessor implements ParamValueProcessor {\n     protected JavaType targetType;\n@@ -83,8 +80,10 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n           this.serialViewClass = Class.forName(serialViewClass);\n         } catch (Throwable e) {\n           //ignore\n+\n         }\n       }\n+\n       this.targetType = targetType;\n       this.isString = isString;\n       this.isRequired = isRequired;\n@@ -103,16 +102,17 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n       }\n \n       // edge support convert from form-data or x-www-form-urlencoded to json automatically\n+\n       String contentType = request.getContentType();\n       contentType = contentType == null ? \"\" : contentType.toLowerCase(Locale.US);\n-      if (contentType.startsWith(MediaType.MULTIPART_FORM_DATA)\n-          || contentType.startsWith(MediaType.APPLICATION_FORM_URLENCODED)) {\n+      if (contentType.startsWith(MediaType.MULTIPART_FORM_DATA) || contentType.startsWith(MediaType.APPLICATION_FORM_URLENCODED)) {\n         return convertValue(request.getParameterMap(), targetType);\n       }\n \n       // for standard HttpServletRequest, getInputStream will never return null\n       // but for mocked HttpServletRequest, maybe get a null\n       //  like org.apache.servicecomb.provider.springmvc.reference.ClientToHttpServletRequest\n+\n       InputStream inputStream = request.getInputStream();\n       if (inputStream == null) {\n         return null;\n@@ -122,21 +122,20 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n         // TODO: we should consider body encoding\n         return IOUtils.toString(inputStream, StandardCharsets.UTF_8);\n       }\n+\n       try {\n-        ObjectReader reader = serialViewClass != null\n-            ? RestObjectMapperFactory.getRestObjectMapper().readerWithView(serialViewClass)\n-            : RestObjectMapperFactory.getRestObjectMapper().reader();\n+        ObjectReader reader = serialViewClass != null ? RestObjectMapperFactory.getRestObjectMapper().readerWithView(serialViewClass) : RestObjectMapperFactory.getRestObjectMapper().reader();\n         if (decodeAsObject) {\n           return reader.forType(OBJECT_TYPE).readValue(inputStream);\n         }\n-        return reader.forType(targetType == null ? OBJECT_TYPE : targetType)\n-            .readValue(inputStream);\n+        return reader.forType(targetType == null ? OBJECT_TYPE : targetType).readValue(inputStream);\n       } catch (MismatchedInputException e) {\n         // there is no way to detect InputStream is empty, so have to catch the exception\n         if (!isRequired && e.getMessage().contains(\"No content to map due to end-of-input\")) {\n           LOGGER.info(\"Empty content and required is false, taken as null\");\n           return null;\n         }\n+\n         throw e;\n       }\n     }\n@@ -158,6 +157,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n      * @return the deserialized body buffer\n      * @throws IOException\n      */\n+\n     private Buffer createBodyBuffer(String contentType, Object arg) throws IOException {\n       if (MediaType.TEXT_PLAIN.equals(contentType)) {\n         if (!(arg instanceof String)) {\n@@ -182,9 +182,9 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n     /**\n      * If the Content-Type has not been set yet, set application/json as default value.\n      */\n+\n     private void ensureContentType(RestClientRequest clientRequest) {\n-      if (null == clientRequest.getHeaders()\n-          || StringUtils.isEmpty(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE))) {\n+      if (null == clientRequest.getHeaders() || StringUtils.isEmpty(clientRequest.getHeaders().get(HttpHeaders.CONTENT_TYPE))) {\n         clientRequest.putHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n       }\n     }\n@@ -248,17 +248,19 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n     if (model instanceof ModelImpl) {\n       swaggerType = ConverterMgr.findJavaType(((ModelImpl) model).getType(), ((ModelImpl) model).getFormat());\n     }\n-    boolean isString = swaggerType != null && swaggerType.getRawClass().equals(String.class);\n \n-    JavaType targetType =\n-        genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n+    boolean isString = swaggerType != null && swaggerType.getRawClass().equals(String.class);\n+    JavaType targetType = genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n     boolean rawJson = SwaggerUtils.isRawJsonType(parameter);\n     if (rawJson) {\n-      return new RawJsonBodyProcessor(targetType, (String) parameter.getVendorExtensions().get(\n-          JsonViewProcessor.VENDOR_EXTENSION_KEY), isString, parameter.getRequired());\n+      return new RawJsonBodyProcessor(targetType,\n+        (String) parameter.getVendorExtensions().get(JsonViewProcessor.VENDOR_EXTENSION_KEY),\n+          isString,\n+            parameter.getRequired());\n     }\n-\n-    return new BodyProcessor(targetType, (String) parameter.getVendorExtensions().get(\n-        JsonViewProcessor.VENDOR_EXTENSION_KEY), isString, parameter.getRequired());\n+    return new BodyProcessor(targetType,\n+      (String) parameter.getVendorExtensions().get(JsonViewProcessor.VENDOR_EXTENSION_KEY),\n+        isString,\n+          parameter.getRequired());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}