{
    "project_name": "black-ant-case",
    "violation_id": "39",
    "information": {
        "violations": [
            {
                "line": "105",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements InitializingBean, DisposableBean {\n\n\tprivate Timer backgroundTaskTimer;\n\tprivate MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager;\n\n\tpublic void init() {",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "106",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/black-ant-case/styler/05_predictions/final/files-repaired/39/WebSecurityConfig.java\nindex be90fcf30c0..52f6f6028ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/black-ant-case/styler/05_predictions/final/files-repaired/39/WebSecurityConfig.java\n@@ -102,7 +102,7 @@ import java.util.Timer;\n @EnableGlobalMethodSecurity(securedEnabled = true)\n public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements InitializingBean, DisposableBean {\n \n-\tprivate Timer backgroundTaskTimer;\n+private Timer backgroundTaskTimer;\n \tprivate MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager;\n \n \tpublic void init() {\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/checkstyle_idea/39/WebSecurityConfig.java\nindex be90fcf30c0..e9222d8ce09 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/checkstyle_idea/39/WebSecurityConfig.java\n@@ -102,19 +102,19 @@ import java.util.Timer;\n @EnableGlobalMethodSecurity(securedEnabled = true)\n public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements InitializingBean, DisposableBean {\n \n-\tprivate Timer backgroundTaskTimer;\n-\tprivate MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager;\n+    private Timer backgroundTaskTimer;\n+    private MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager;\n \n-\tpublic void init() {\n-\t\tthis.backgroundTaskTimer = new Timer(true);\n-\t\tthis.multiThreadedHttpConnectionManager = new MultiThreadedHttpConnectionManager();\n-\t}\n+    public void init() {\n+        this.backgroundTaskTimer = new Timer(true);\n+        this.multiThreadedHttpConnectionManager = new MultiThreadedHttpConnectionManager();\n+    }\n \n-\tpublic void shutdown() {\n-\t\tthis.backgroundTaskTimer.purge();\n-\t\tthis.backgroundTaskTimer.cancel();\n-\t\tthis.multiThreadedHttpConnectionManager.shutdown();\n-\t}\n+    public void shutdown() {\n+        this.backgroundTaskTimer.purge();\n+        this.backgroundTaskTimer.cancel();\n+        this.multiThreadedHttpConnectionManager.shutdown();\n+    }\n \n     @Autowired\n     private SAMLUserDetailsServiceImpl samlUserDetailsServiceImpl;\n@@ -210,7 +210,7 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n     public KeyManager keyManager() {\n         DefaultResourceLoader loader = new DefaultResourceLoader();\n         Resource storeFile = loader\n-                .getResource(\"classpath:/saml/samlKeystore.jks\");\n+            .getResource(\"classpath:/saml/samlKeystore.jks\");\n         String storePass = \"nalle123\";\n         Map<String, String> passwords = new HashMap<String, String>();\n         passwords.put(\"apollo\", \"nalle123\");\n@@ -237,12 +237,12 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n     // Setup advanced info about metadata\n     @Bean\n     public ExtendedMetadata extendedMetadata() {\n-\t    ExtendedMetadata extendedMetadata = new ExtendedMetadata();\n-\t    extendedMetadata.setIdpDiscoveryEnabled(true);\n-\t    extendedMetadata.setSigningAlgorithm(\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\");\n-\t    extendedMetadata.setSignMetadata(true);\n-\t    extendedMetadata.setEcpEnabled(true);\n-\t    return extendedMetadata;\n+        ExtendedMetadata extendedMetadata = new ExtendedMetadata();\n+        extendedMetadata.setIdpDiscoveryEnabled(true);\n+        extendedMetadata.setSigningAlgorithm(\"http://www.w3.org/2001/04/xmldsig-more#rsa-sha256\");\n+        extendedMetadata.setSignMetadata(true);\n+        extendedMetadata.setEcpEnabled(true);\n+        return extendedMetadata;\n     }\n \n     // IDP Discovery Service\n@@ -253,21 +253,21 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n         return idpDiscovery;\n     }\n \n-\t@Bean\n-\t@Qualifier(\"idp-ssocircle\")\n-\tpublic ExtendedMetadataDelegate ssoCircleExtendedMetadataProvider()\n-\t\t\tthrows MetadataProviderException {\n-\t\tString idpSSOCircleMetadataURL = \"https://idp.ssocircle.com/meta-idp.xml\";\n-\t\tHTTPMetadataProvider httpMetadataProvider = new HTTPMetadataProvider(\n-\t\t\t\tthis.backgroundTaskTimer, httpClient(), idpSSOCircleMetadataURL);\n-\t\thttpMetadataProvider.setParserPool(parserPool());\n-\t\tExtendedMetadataDelegate extendedMetadataDelegate =\n-\t\t\t\tnew ExtendedMetadataDelegate(httpMetadataProvider, extendedMetadata());\n-\t\textendedMetadataDelegate.setMetadataTrustCheck(true);\n-\t\textendedMetadataDelegate.setMetadataRequireSignature(false);\n-\t\tbackgroundTaskTimer.purge();\n-\t\treturn extendedMetadataDelegate;\n-\t}\n+    @Bean\n+    @Qualifier(\"idp-ssocircle\")\n+    public ExtendedMetadataDelegate ssoCircleExtendedMetadataProvider()\n+        throws MetadataProviderException {\n+        String idpSSOCircleMetadataURL = \"https://idp.ssocircle.com/meta-idp.xml\";\n+        HTTPMetadataProvider httpMetadataProvider = new HTTPMetadataProvider(\n+            this.backgroundTaskTimer, httpClient(), idpSSOCircleMetadataURL);\n+        httpMetadataProvider.setParserPool(parserPool());\n+        ExtendedMetadataDelegate extendedMetadataDelegate =\n+            new ExtendedMetadataDelegate(httpMetadataProvider, extendedMetadata());\n+        extendedMetadataDelegate.setMetadataTrustCheck(true);\n+        extendedMetadataDelegate.setMetadataRequireSignature(false);\n+        backgroundTaskTimer.purge();\n+        return extendedMetadataDelegate;\n+    }\n \n     // IDP Metadata configuration - paths to metadata of IDPs in circle of trust\n     // is here\n@@ -302,19 +302,19 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n     @Bean\n     public SavedRequestAwareAuthenticationSuccessHandler successRedirectHandler() {\n         SavedRequestAwareAuthenticationSuccessHandler successRedirectHandler =\n-                new SavedRequestAwareAuthenticationSuccessHandler();\n+            new SavedRequestAwareAuthenticationSuccessHandler();\n         successRedirectHandler.setDefaultTargetUrl(\"/landing\");\n         return successRedirectHandler;\n     }\n \n-\t// Handler deciding where to redirect user after failed login\n+    // Handler deciding where to redirect user after failed login\n     @Bean\n     public SimpleUrlAuthenticationFailureHandler authenticationFailureHandler() {\n-\t    \tSimpleUrlAuthenticationFailureHandler failureHandler =\n-\t    \t\t\tnew SimpleUrlAuthenticationFailureHandler();\n-\t    \tfailureHandler.setUseForward(true);\n-\t    \tfailureHandler.setDefaultFailureUrl(\"/error\");\n-\t    \treturn failureHandler;\n+        SimpleUrlAuthenticationFailureHandler failureHandler =\n+            new SimpleUrlAuthenticationFailureHandler();\n+        failureHandler.setUseForward(true);\n+        failureHandler.setDefaultFailureUrl(\"/error\");\n+        return failureHandler;\n     }\n \n     @Bean\n@@ -353,7 +353,7 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n     @Bean\n     public SecurityContextLogoutHandler logoutHandler() {\n         SecurityContextLogoutHandler logoutHandler =\n-        \t\tnew SecurityContextLogoutHandler();\n+            new SecurityContextLogoutHandler();\n         logoutHandler.setInvalidateHttpSession(true);\n         logoutHandler.setClearAuthentication(true);\n         return logoutHandler;\n@@ -365,7 +365,7 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n     @Bean\n     public SAMLLogoutProcessingFilter samlLogoutProcessingFilter() {\n         return new SAMLLogoutProcessingFilter(successLogoutHandler(),\n-                logoutHandler());\n+            logoutHandler());\n     }\n \n     // Overrides default logout processing filter with the one processing SAML\n@@ -373,14 +373,14 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n     @Bean\n     public SAMLLogoutFilter samlLogoutFilter() {\n         return new SAMLLogoutFilter(successLogoutHandler(),\n-                new LogoutHandler[] { logoutHandler() },\n-                new LogoutHandler[] { logoutHandler() });\n+            new LogoutHandler[] {logoutHandler()},\n+            new LogoutHandler[] {logoutHandler()});\n     }\n \n     // Bindings\n     private ArtifactResolutionProfile artifactResolutionProfile() {\n         final ArtifactResolutionProfileImpl artifactResolutionProfile =\n-        \t\tnew ArtifactResolutionProfileImpl(httpClient());\n+            new ArtifactResolutionProfileImpl(httpClient());\n         artifactResolutionProfile.setProcessor(new SAMLProcessorImpl(soapBinding()));\n         return artifactResolutionProfile;\n     }\n@@ -397,59 +397,59 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n \n     @Bean\n     public HTTPPostBinding httpPostBinding() {\n-    \t\treturn new HTTPPostBinding(parserPool(), velocityEngine());\n+        return new HTTPPostBinding(parserPool(), velocityEngine());\n     }\n \n     @Bean\n     public HTTPRedirectDeflateBinding httpRedirectDeflateBinding() {\n-    \t\treturn new HTTPRedirectDeflateBinding(parserPool());\n+        return new HTTPRedirectDeflateBinding(parserPool());\n     }\n \n     @Bean\n     public HTTPSOAP11Binding httpSOAP11Binding() {\n-    \treturn new HTTPSOAP11Binding(parserPool());\n+        return new HTTPSOAP11Binding(parserPool());\n     }\n \n     @Bean\n     public HTTPPAOS11Binding httpPAOS11Binding() {\n-    \t\treturn new HTTPPAOS11Binding(parserPool());\n+        return new HTTPPAOS11Binding(parserPool());\n     }\n \n     // Processor\n-\t@Bean\n-\tpublic SAMLProcessorImpl processor() {\n-\t\tCollection<SAMLBinding> bindings = new ArrayList<SAMLBinding>();\n-\t\tbindings.add(httpRedirectDeflateBinding());\n-\t\tbindings.add(httpPostBinding());\n-\t\tbindings.add(artifactBinding(parserPool(), velocityEngine()));\n-\t\tbindings.add(httpSOAP11Binding());\n-\t\tbindings.add(httpPAOS11Binding());\n-\t\treturn new SAMLProcessorImpl(bindings);\n-\t}\n-\n-\t/**\n-\t * Define the security filter chain in order to support SSO Auth by using SAML 2.0\n-\t *\n-\t * @return Filter chain proxy\n-\t * @throws Exception\n-\t */\n+    @Bean\n+    public SAMLProcessorImpl processor() {\n+        Collection<SAMLBinding> bindings = new ArrayList<SAMLBinding>();\n+        bindings.add(httpRedirectDeflateBinding());\n+        bindings.add(httpPostBinding());\n+        bindings.add(artifactBinding(parserPool(), velocityEngine()));\n+        bindings.add(httpSOAP11Binding());\n+        bindings.add(httpPAOS11Binding());\n+        return new SAMLProcessorImpl(bindings);\n+    }\n+\n+    /**\n+     * Define the security filter chain in order to support SSO Auth by using SAML 2.0\n+     *\n+     * @return Filter chain proxy\n+     * @throws Exception\n+     */\n     @Bean\n     public FilterChainProxy samlFilter() throws Exception {\n         List<SecurityFilterChain> chains = new ArrayList<SecurityFilterChain>();\n         chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/login/**\"),\n-                samlEntryPoint()));\n+            samlEntryPoint()));\n         chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/logout/**\"),\n-                samlLogoutFilter()));\n+            samlLogoutFilter()));\n         chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/metadata/**\"),\n-                metadataDisplayFilter()));\n+            metadataDisplayFilter()));\n         chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/SSO/**\"),\n-                samlWebSSOProcessingFilter()));\n+            samlWebSSOProcessingFilter()));\n         chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/SSOHoK/**\"),\n-                samlWebSSOHoKProcessingFilter()));\n+            samlWebSSOHoKProcessingFilter()));\n         chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/SingleLogout/**\"),\n-                samlLogoutProcessingFilter()));\n+            samlLogoutProcessingFilter()));\n         chains.add(new DefaultSecurityFilterChain(new AntPathRequestMatcher(\"/saml/discovery/**\"),\n-                samlIDPDiscovery()));\n+            samlIDPDiscovery()));\n         return new FilterChainProxy(chains);\n     }\n \n@@ -469,35 +469,35 @@ public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements I\n     /**\n      * Defines the web based security configuration.\n      *\n-     * @param   http It allows configuring web based security for specific http requests.\n+     * @param http It allows configuring web based security for specific http requests.\n      * @throws Exception\n      */\n     @Override\n     protected void configure(HttpSecurity http) throws Exception {\n         http\n             .httpBasic()\n-                .authenticationEntryPoint(samlEntryPoint());\n+            .authenticationEntryPoint(samlEntryPoint());\n         http\n-        \t\t.addFilterBefore(metadataGeneratorFilter(), ChannelProcessingFilter.class)\n-        \t\t.addFilterAfter(samlFilter(), BasicAuthenticationFilter.class)\n-        \t\t.addFilterBefore(samlFilter(), CsrfFilter.class);\n+            .addFilterBefore(metadataGeneratorFilter(), ChannelProcessingFilter.class)\n+            .addFilterAfter(samlFilter(), BasicAuthenticationFilter.class)\n+            .addFilterBefore(samlFilter(), CsrfFilter.class);\n         http\n             .authorizeRequests()\n-           \t\t.antMatchers(\"/\").permitAll()\n-           \t\t.antMatchers(\"/saml/**\").permitAll()\n-           \t\t.antMatchers(\"/css/**\").permitAll()\n-           \t\t.antMatchers(\"/img/**\").permitAll()\n-           \t\t.antMatchers(\"/js/**\").permitAll()\n-           \t\t.anyRequest().authenticated();\n+            .antMatchers(\"/\").permitAll()\n+            .antMatchers(\"/saml/**\").permitAll()\n+            .antMatchers(\"/css/**\").permitAll()\n+            .antMatchers(\"/img/**\").permitAll()\n+            .antMatchers(\"/js/**\").permitAll()\n+            .anyRequest().authenticated();\n         http\n-        \t\t.logout()\n-        \t\t\t.disable();\t// The logout procedure is already handled by SAML filters.\n+            .logout()\n+            .disable();    // The logout procedure is already handled by SAML filters.\n     }\n \n     /**\n      * Sets a custom authentication provider.\n      *\n-     * @param   auth SecurityBuilder used to create an AuthenticationManager.\n+     * @param auth SecurityBuilder used to create an AuthenticationManager.\n      * @throws Exception\n      */\n     @Override\n",
            "diff_size": 87
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "106",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/random/files-repaired/39/WebSecurityConfig.java\nindex be90fcf30c0..52f6f6028ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/random/files-repaired/39/WebSecurityConfig.java\n@@ -102,7 +102,7 @@ import java.util.Timer;\n @EnableGlobalMethodSecurity(securedEnabled = true)\n public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements InitializingBean, DisposableBean {\n \n-\tprivate Timer backgroundTaskTimer;\n+private Timer backgroundTaskTimer;\n \tprivate MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager;\n \n \tpublic void init() {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "106",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/three_grams/files-repaired/39/WebSecurityConfig.java\nindex be90fcf30c0..7dbf3ecfab6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/39/WebSecurityConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/three_grams/files-repaired/39/WebSecurityConfig.java\n@@ -102,7 +102,7 @@ import java.util.Timer;\n @EnableGlobalMethodSecurity(securedEnabled = true)\n public class WebSecurityConfig extends WebSecurityConfigurerAdapter implements InitializingBean, DisposableBean {\n \n-\tprivate Timer backgroundTaskTimer;\n+    private Timer backgroundTaskTimer;\n \tprivate MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager;\n \n \tpublic void init() {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}