{
    "project_name": "junkdog-artemis-odb",
    "violation_id": "20",
    "information": {
        "violations": [
            {
                "line": "31",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 195).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * and related classes.\n */\n@Mojo(name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\npublic class ArtemisFluidMaven extends AbstractMojo {\n\n    /**",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/20/ArtemisFluidMaven.java\nindex eacceb86d27..5290d00f36b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/junkdog-artemis-odb/styler/05_predictions/final/files-repaired/20/ArtemisFluidMaven.java\n@@ -28,7 +28,7 @@ import org.sonatype.plexus.build.incremental.BuildContext;\n  * The artemis plugin performs bytecode-weaving on annotated components\n  * and related classes.\n  */\n-@Mojo(name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+@Mojo( name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope. COMPILE_PLUS_RUNTIME , requiresDependencyCollection= ResolutionScope . COMPILE_PLUS_RUNTIME)\n public class ArtemisFluidMaven extends AbstractMojo {\n \n     /**\n",
            "diff_size": 1
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/20/ArtemisFluidMaven.java\nindex eacceb86d27..dd903d74e6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/checkstyle_idea/20/ArtemisFluidMaven.java\n@@ -31,107 +31,112 @@ import org.sonatype.plexus.build.incremental.BuildContext;\n @Mojo(name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n public class ArtemisFluidMaven extends AbstractMojo {\n \n-    /**\n-     * Root folder for class files.\n-     */\n-    @Parameter(property = \"project.build.directory\", readonly = true)\n-    private File outputDirectory;\n+  /**\n+   * Root folder for class files.\n+   */\n+  @Parameter(property = \"project.build.directory\", readonly = true)\n+  private File outputDirectory;\n \n-    /**\n-     * Root source folder.\n-     */\n-    @Parameter(property = \"project.build.sourceDirectory\", readonly = true)\n-    private File sourceDirectory;\n+  /**\n+   * Root source folder.\n+   */\n+  @Parameter(property = \"project.build.sourceDirectory\", readonly = true)\n+  private File sourceDirectory;\n \n-    @org.apache.maven.plugins.annotations.Component\n-    private BuildContext context;\n+  @org.apache.maven.plugins.annotations.Component\n+  private BuildContext context;\n \n-    private Log log = getLog();\n+  private Log log = getLog();\n \n-    @Parameter(property = \"project.compileClasspathElements\", required = true, readonly = true)\n-    private List<String> classpathElements;\n+  @Parameter(property = \"project.compileClasspathElements\", required = true, readonly = true)\n+  private List<String> classpathElements;\n \n-    @Parameter( required = true, property=\"project\" )\n-    private MavenProject project;\n+  @Parameter(required = true, property = \"project\")\n+  private MavenProject project;\n \n-    @Override\n-    public void execute() throws MojoExecutionException, MojoFailureException {\n+  @Override\n+  public void execute() throws MojoExecutionException, MojoFailureException {\n \n-        if (context != null && !context.hasDelta(sourceDirectory))\n-            return;\n-\n-        prepareGeneratedSourcesFolder();\n-        includeGeneratedSourcesInCompilation();\n-\n-        new FluidGenerator().generate(\n-                collectComponents(),\n-                generatedSourcesDirectory());\n-    }\n-\n-    private List<Class<? extends Component>> collectComponents() {\n-\n-        final Set<Class<? extends Component>> unfilteredComponents = collectUnfilteredComponents();\n-        final List<Class<? extends Component>> components = new ArrayList<Class<? extends Component>>();\n-\n-        for (Class<? extends Component> component : unfilteredComponents) {\n-            if (Modifier.isAbstract(component.getModifiers())) {\n-                log.info(\".. Skipping abstract: \" + component.toString());\n-            } else if (component.equals(SerializationTag.class)) {\n-                log.info(\".. Skipping reserved class: \" + component.toString());\n-            } else {\n-                log.info(\".. Including: \" + component.toString());\n-                components.add(component);\n-            }\n-        }\n-        return components;\n-    }\n-\n-    /** Setup generated sources folder if missing. */\n-    private void prepareGeneratedSourcesFolder() {\n-        if (!generatedSourcesDirectory().exists() && !generatedSourcesDirectory().mkdirs()) {\n-            log.error(\"Could not create \" + generatedSourcesDirectory());\n-        }\n+    if (context != null && !context.hasDelta(sourceDirectory)) {\n+      return;\n     }\n \n-    /** Must include manually, or maven buids will fail. */\n-    private void includeGeneratedSourcesInCompilation() {\n-        this.project.addCompileSourceRoot(  generatedSourcesDirectory().getPath());\n-    }\n+    prepareGeneratedSourcesFolder();\n+    includeGeneratedSourcesInCompilation();\n \n-    private Set<Class<? extends Component>> collectUnfilteredComponents() {\n+    new FluidGenerator().generate(\n+        collectComponents(),\n+        generatedSourcesDirectory());\n+  }\n \n-        // add compile classloader to current classloader.\n-        // if we don't do this Reflections gets confused and fetches only a subset\n-        // of components. probably because duplicate entries of Component.class?\n-        ClassLoader compileClassloader = getCompileClassloader();\n-        Thread.currentThread().setContextClassLoader(compileClassloader);\n+  private List<Class<? extends Component>> collectComponents() {\n \n-        // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(compileClassloader))\n-                .setScanners(new SubTypesScanner(false)));\n+    final Set<Class<? extends Component>> unfilteredComponents = collectUnfilteredComponents();\n+    final List<Class<? extends Component>> components = new ArrayList<Class<? extends Component>>();\n \n-        return reflections.getSubTypesOf(Component.class);\n+    for (Class<? extends Component> component : unfilteredComponents) {\n+      if (Modifier.isAbstract(component.getModifiers())) {\n+        log.info(\".. Skipping abstract: \" + component.toString());\n+      } else if (component.equals(SerializationTag.class)) {\n+        log.info(\".. Skipping reserved class: \" + component.toString());\n+      } else {\n+        log.info(\".. Including: \" + component.toString());\n+        components.add(component);\n+      }\n     }\n-\n-    private ClassLoader getCompileClassloader() {\n-        try {\n-            Set<URL> urls = new HashSet<URL>();\n-            for (String element : classpathElements) {\n-                URL url = new File(element).toURI().toURL();\n-                urls.add(url);\n-                log.info(\"Adding URL: \" + url);\n-            }\n-\n-            return URLClassLoader.newInstance(\n-                    urls.toArray(new URL[0]),\n-                    Thread.currentThread().getContextClassLoader());\n-        } catch (MalformedURLException e) {\n-            throw new RuntimeException(\"Error generating compile classloader\");\n-        }\n+    return components;\n+  }\n+\n+  /**\n+   * Setup generated sources folder if missing.\n+   */\n+  private void prepareGeneratedSourcesFolder() {\n+    if (!generatedSourcesDirectory().exists() && !generatedSourcesDirectory().mkdirs()) {\n+      log.error(\"Could not create \" + generatedSourcesDirectory());\n     }\n-\n-    private File generatedSourcesDirectory() {\n-        return new File(outputDirectory, \"generated-sources/fluid\");\n+  }\n+\n+  /**\n+   * Must include manually, or maven buids will fail.\n+   */\n+  private void includeGeneratedSourcesInCompilation() {\n+    this.project.addCompileSourceRoot(generatedSourcesDirectory().getPath());\n+  }\n+\n+  private Set<Class<? extends Component>> collectUnfilteredComponents() {\n+\n+    // add compile classloader to current classloader.\n+    // if we don't do this Reflections gets confused and fetches only a subset\n+    // of components. probably because duplicate entries of Component.class?\n+    ClassLoader compileClassloader = getCompileClassloader();\n+    Thread.currentThread().setContextClassLoader(compileClassloader);\n+\n+    // reflect over components.\n+    Reflections reflections = new Reflections(new ConfigurationBuilder()\n+        .setUrls(ClasspathHelper.forClassLoader(compileClassloader))\n+        .setScanners(new SubTypesScanner(false)));\n+\n+    return reflections.getSubTypesOf(Component.class);\n+  }\n+\n+  private ClassLoader getCompileClassloader() {\n+    try {\n+      Set<URL> urls = new HashSet<URL>();\n+      for (String element : classpathElements) {\n+        URL url = new File(element).toURI().toURL();\n+        urls.add(url);\n+        log.info(\"Adding URL: \" + url);\n+      }\n+\n+      return URLClassLoader.newInstance(\n+          urls.toArray(new URL[0]),\n+          Thread.currentThread().getContextClassLoader());\n+    } catch (MalformedURLException e) {\n+      throw new RuntimeException(\"Error generating compile classloader\");\n     }\n+  }\n+\n+  private File generatedSourcesDirectory() {\n+    return new File(outputDirectory, \"generated-sources/fluid\");\n+  }\n }\n",
            "diff_size": 139
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/20/ArtemisFluidMaven.java\nindex eacceb86d27..3750955b64e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/naturalize/20/ArtemisFluidMaven.java\n@@ -31,7 +31,7 @@ import org.sonatype.plexus.build.incremental.BuildContext;\n @Mojo(name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n public class ArtemisFluidMaven extends AbstractMojo {\n \n-    /**\n+\t/**\n      * Root folder for class files.\n      */\n     @Parameter(property = \"project.build.directory\", readonly = true)\n@@ -51,87 +51,81 @@ public class ArtemisFluidMaven extends AbstractMojo {\n     @Parameter(property = \"project.compileClasspathElements\", required = true, readonly = true)\n     private List<String> classpathElements;\n \n-    @Parameter( required = true, property=\"project\" )\n+    @Parameter(\n+required = true, property=\"project\")\n     private MavenProject project;\n \n     @Override\n     public void execute() throws MojoExecutionException, MojoFailureException {\n+\tif (context != null && !context.hasDelta(sourceDirectory))\n+\treturn;\n \n-        if (context != null && !context.hasDelta(sourceDirectory))\n-            return;\n-\n-        prepareGeneratedSourcesFolder();\n+\tprepareGeneratedSourcesFolder();\n         includeGeneratedSourcesInCompilation();\n \n-        new FluidGenerator().generate(\n-                collectComponents(),\n+        new FluidGenerator().generate(collectComponents(),\n                 generatedSourcesDirectory());\n-    }\n+\t}\n \n     private List<Class<? extends Component>> collectComponents() {\n-\n-        final Set<Class<? extends Component>> unfilteredComponents = collectUnfilteredComponents();\n+\tfinal Set<Class<? extends Component>> unfilteredComponents = collectUnfilteredComponents();\n         final List<Class<? extends Component>> components = new ArrayList<Class<? extends Component>>();\n \n         for (Class<? extends Component> component : unfilteredComponents) {\n-            if (Modifier.isAbstract(component.getModifiers())) {\n+\tif (Modifier.isAbstract(component.getModifiers())) {\n                 log.info(\".. Skipping abstract: \" + component.toString());\n-            } else if (component.equals(SerializationTag.class)) {\n+\t} else if (component.equals(SerializationTag.class)) {\n                 log.info(\".. Skipping reserved class: \" + component.toString());\n-            } else {\n-                log.info(\".. Including: \" + component.toString());\n+\t} else {\n+\tlog.info(\".. Including: \" + component.toString());\n                 components.add(component);\n             }\n         }\n         return components;\n-    }\n+\t}\n \n     /** Setup generated sources folder if missing. */\n     private void prepareGeneratedSourcesFolder() {\n-        if (!generatedSourcesDirectory().exists() && !generatedSourcesDirectory().mkdirs()) {\n+\tif (!generatedSourcesDirectory().exists() && !generatedSourcesDirectory().mkdirs()) {\n             log.error(\"Could not create \" + generatedSourcesDirectory());\n         }\n     }\n \n     /** Must include manually, or maven buids will fail. */\n     private void includeGeneratedSourcesInCompilation() {\n-        this.project.addCompileSourceRoot(  generatedSourcesDirectory().getPath());\n+\tthis.project.addCompileSourceRoot(generatedSourcesDirectory().getPath());\n     }\n \n     private Set<Class<? extends Component>> collectUnfilteredComponents() {\n-\n-        // add compile classloader to current classloader.\n+\t// add compile classloader to current classloader.\n         // if we don't do this Reflections gets confused and fetches only a subset\n         // of components. probably because duplicate entries of Component.class?\n         ClassLoader compileClassloader = getCompileClassloader();\n         Thread.currentThread().setContextClassLoader(compileClassloader);\n \n         // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(compileClassloader))\n+        Reflections reflections = new Reflections(new ConfigurationBuilder().setUrls(ClasspathHelper.forClassLoader(compileClassloader))\n                 .setScanners(new SubTypesScanner(false)));\n-\n-        return reflections.getSubTypesOf(Component.class);\n+return reflections.getSubTypesOf(Component.class);\n     }\n \n     private ClassLoader getCompileClassloader() {\n-        try {\n-            Set<URL> urls = new HashSet<URL>();\n+\ttry {\n+\tSet<URL> urls = new HashSet<URL>();\n             for (String element : classpathElements) {\n                 URL url = new File(element).toURI().toURL();\n                 urls.add(url);\n                 log.info(\"Adding URL: \" + url);\n             }\n \n-            return URLClassLoader.newInstance(\n-                    urls.toArray(new URL[0]),\n+            return URLClassLoader.newInstance(urls.toArray(new URL[0]),\n                     Thread.currentThread().getContextClassLoader());\n-        } catch (MalformedURLException e) {\n-            throw new RuntimeException(\"Error generating compile classloader\");\n+\t} catch (MalformedURLException e) {\n+\tthrow new RuntimeException(\"Error generating compile classloader\");\n         }\n     }\n \n     private File generatedSourcesDirectory() {\n-        return new File(outputDirectory, \"generated-sources/fluid\");\n+\treturn new File(outputDirectory, \"generated-sources/fluid\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "113",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/20/ArtemisFluidMaven.java\nindex eacceb86d27..2b400ba3197 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/codebuff/20/ArtemisFluidMaven.java\n@@ -7,8 +7,8 @@ import java.lang.reflect.Modifier;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n-import java.util.*;\n \n+import java.util.*;\n import com.artemis.components.SerializationTag;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugin.MojoExecutionException;\n@@ -28,110 +28,111 @@ import org.sonatype.plexus.build.incremental.BuildContext;\n  * The artemis plugin performs bytecode-weaving on annotated components\n  * and related classes.\n  */\n-@Mojo(name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+\n+@Mojo(\n+ name = \"generate\",\n+ defaultPhase = GENERATE_SOURCES,\n+ requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME,\n+ requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n public class ArtemisFluidMaven extends AbstractMojo {\n \n     /**\n      * Root folder for class files.\n      */\n-    @Parameter(property = \"project.build.directory\", readonly = true)\n-    private File outputDirectory;\n+ @Parameter(property = \"project.build.directory\", readonly = true)\n+ private File outputDirectory;\n \n     /**\n      * Root source folder.\n      */\n-    @Parameter(property = \"project.build.sourceDirectory\", readonly = true)\n-    private File sourceDirectory;\n-\n-    @org.apache.maven.plugins.annotations.Component\n-    private BuildContext context;\n-\n-    private Log log = getLog();\n-\n-    @Parameter(property = \"project.compileClasspathElements\", required = true, readonly = true)\n-    private List<String> classpathElements;\n-\n-    @Parameter( required = true, property=\"project\" )\n-    private MavenProject project;\n-\n-    @Override\n-    public void execute() throws MojoExecutionException, MojoFailureException {\n \n-        if (context != null && !context.hasDelta(sourceDirectory))\n-            return;\n-\n-        prepareGeneratedSourcesFolder();\n-        includeGeneratedSourcesInCompilation();\n-\n-        new FluidGenerator().generate(\n-                collectComponents(),\n-                generatedSourcesDirectory());\n-    }\n-\n-    private List<Class<? extends Component>> collectComponents() {\n-\n-        final Set<Class<? extends Component>> unfilteredComponents = collectUnfilteredComponents();\n-        final List<Class<? extends Component>> components = new ArrayList<Class<? extends Component>>();\n-\n-        for (Class<? extends Component> component : unfilteredComponents) {\n-            if (Modifier.isAbstract(component.getModifiers())) {\n-                log.info(\".. Skipping abstract: \" + component.toString());\n-            } else if (component.equals(SerializationTag.class)) {\n-                log.info(\".. Skipping reserved class: \" + component.toString());\n-            } else {\n-                log.info(\".. Including: \" + component.toString());\n-                components.add(component);\n-            }\n-        }\n-        return components;\n-    }\n+ @Parameter(property = \"project.build.sourceDirectory\", readonly = true)\n+ private File sourceDirectory;\n+\n+ @org.apache.maven.plugins.annotations.Component\n+ private BuildContext context;\n+\n+ private Log log = getLog();\n+\n+ @Parameter(property = \"project.compileClasspathElements\", required = true, readonly = true)\n+ private List<String> classpathElements;\n+\n+ @Parameter(required = true, property = \"project\")\n+ private MavenProject project;\n+\n+ @Override\n+ public void execute() throws MojoExecutionException, MojoFailureException {\n+  if (context != null && !context.hasDelta(sourceDirectory))\n+   return;\n+  prepareGeneratedSourcesFolder();\n+  includeGeneratedSourcesInCompilation();\n+  new FluidGenerator().generate(collectComponents(), generatedSourcesDirectory());\n+ }\n+\n+ private List<Class<? extends Component>> collectComponents() {\n+  final Set<Class<? extends Component>> unfilteredComponents = collectUnfilteredComponents();\n+  final List<Class<? extends Component>> components = new ArrayList<Class<? extends Component>>();\n+  for (Class<? extends Component> component : unfilteredComponents) {\n+   if (Modifier.isAbstract(component.getModifiers())) {\n+    log.info(\".. Skipping abstract: \" + component.toString());\n+   } else if (component.equals(SerializationTag.class)) {\n+    log.info(\".. Skipping reserved class: \" + component.toString());\n+   } else {\n+           log.info(\".. Including: \" + component.toString());\n+           components.add(component);\n+   }\n+  }\n+\n+  return components;\n+ }\n \n     /** Setup generated sources folder if missing. */\n-    private void prepareGeneratedSourcesFolder() {\n-        if (!generatedSourcesDirectory().exists() && !generatedSourcesDirectory().mkdirs()) {\n-            log.error(\"Could not create \" + generatedSourcesDirectory());\n-        }\n-    }\n+\n+ private void prepareGeneratedSourcesFolder() {\n+  if (!generatedSourcesDirectory().exists() && !generatedSourcesDirectory().mkdirs()) {\n+   log.error(\"Could not create \" + generatedSourcesDirectory());\n+  }\n+ }\n \n     /** Must include manually, or maven buids will fail. */\n-    private void includeGeneratedSourcesInCompilation() {\n-        this.project.addCompileSourceRoot(  generatedSourcesDirectory().getPath());\n-    }\n \n-    private Set<Class<? extends Component>> collectUnfilteredComponents() {\n+ private void includeGeneratedSourcesInCompilation() {\n+  this.project.addCompileSourceRoot(generatedSourcesDirectory().getPath());\n+ }\n+\n+ private Set<Class<? extends Component>> collectUnfilteredComponents() {\n \n         // add compile classloader to current classloader.\n         // if we don't do this Reflections gets confused and fetches only a subset\n         // of components. probably because duplicate entries of Component.class?\n-        ClassLoader compileClassloader = getCompileClassloader();\n-        Thread.currentThread().setContextClassLoader(compileClassloader);\n+  ClassLoader compileClassloader = getCompileClassloader();\n+  Thread.currentThread().setContextClassLoader(compileClassloader);\n \n         // reflect over components.\n-        Reflections reflections = new Reflections(new ConfigurationBuilder()\n-                .setUrls(ClasspathHelper.forClassLoader(compileClassloader))\n-                .setScanners(new SubTypesScanner(false)));\n-\n-        return reflections.getSubTypesOf(Component.class);\n-    }\n-\n-    private ClassLoader getCompileClassloader() {\n-        try {\n-            Set<URL> urls = new HashSet<URL>();\n-            for (String element : classpathElements) {\n-                URL url = new File(element).toURI().toURL();\n-                urls.add(url);\n-                log.info(\"Adding URL: \" + url);\n-            }\n-\n-            return URLClassLoader.newInstance(\n-                    urls.toArray(new URL[0]),\n-                    Thread.currentThread().getContextClassLoader());\n-        } catch (MalformedURLException e) {\n-            throw new RuntimeException(\"Error generating compile classloader\");\n-        }\n-    }\n-\n-    private File generatedSourcesDirectory() {\n-        return new File(outputDirectory, \"generated-sources/fluid\");\n-    }\n-}\n+\n+  Reflections reflections = new Reflections(new ConfigurationBuilder().setUrls(ClasspathHelper.forClassLoader(compileClassloader))\n+                                                                      .setScanners(new SubTypesScanner(false)));\n+  return reflections.getSubTypesOf(Component.class);\n+ }\n+\n+ private ClassLoader getCompileClassloader() {\n+  try {\n+   Set<URL> urls = new HashSet<URL>();\n+   for (String element : classpathElements) {\n+    URL url = new File(element).toURI()\n+                               .toURL();\n+    urls.add(url);\n+    log.info(\"Adding URL: \" + url);\n+   }\n+\n+   return URLClassLoader.newInstance(urls.toArray(new URL[0]),\n+    Thread.currentThread().getContextClassLoader());\n+  } catch (MalformedURLException e) {\n+   throw new RuntimeException(\"Error generating compile classloader\");\n+  }\n+ }\n+\n+ private File generatedSourcesDirectory() {\n+  return new File(outputDirectory, \"generated-sources/fluid\");\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 109
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/20/ArtemisFluidMaven.java\nindex eacceb86d27..5290d00f36b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/random/files-repaired/20/ArtemisFluidMaven.java\n@@ -28,7 +28,7 @@ import org.sonatype.plexus.build.incremental.BuildContext;\n  * The artemis plugin performs bytecode-weaving on annotated components\n  * and related classes.\n  */\n-@Mojo(name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+@Mojo( name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope. COMPILE_PLUS_RUNTIME , requiresDependencyCollection= ResolutionScope . COMPILE_PLUS_RUNTIME)\n public class ArtemisFluidMaven extends AbstractMojo {\n \n     /**\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/20/ArtemisFluidMaven.java\nindex eacceb86d27..661f3ecd1b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/violations/20/ArtemisFluidMaven.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/junkdog-artemis-odb/styler/05_predictions/three_grams/files-repaired/20/ArtemisFluidMaven.java\n@@ -28,8 +28,9 @@ import org.sonatype.plexus.build.incremental.BuildContext;\n  * The artemis plugin performs bytecode-weaving on annotated components\n  * and related classes.\n  */\n-@Mojo(name = \"generate\", defaultPhase = GENERATE_SOURCES, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n-public class ArtemisFluidMaven extends AbstractMojo {\n+\n+@Mojo(name=\"generate\", defaultPhase=GENERATE_SOURCES,requiresDependencyResolution=ResolutionScope\n+.COMPILE_PLUS_RUNTIME,requiresDependencyCollection=ResolutionScope.COMPILE_PLUS_RUNTIME)public class ArtemisFluidMaven extends AbstractMojo {\n \n     /**\n      * Root folder for class files.\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}