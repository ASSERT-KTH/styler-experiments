{
    "project_name": "neo4j-neo4j",
    "violation_id": "2646",
    "information": {
        "violations": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2646/ResourceIterator.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2646/ResourceIterator.java\nindex 3e060063665..ded71b23ef4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/violations/2646/ResourceIterator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/neo4j-neo4j/checkstyle_idea/2646/ResourceIterator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.util.Iterator;\n@@ -30,13 +31,12 @@ import static java.util.Spliterators.spliteratorUnknownSize;\n \n /**\n  * Closeable Iterator with associated resources.\n- *\n+ * <p>\n  * The associated resources are always released when the owning transaction is committed or rolled back.\n  * The resource may also be released eagerly by explicitly calling {@link org.neo4j.graphdb.ResourceIterator#close()}\n  * or by exhausting the iterator.\n  *\n  * @param <T> type of values returned by this Iterator\n- *\n  * @see ResourceIterable\n  */\n @PublicApi\n@@ -44,7 +44,7 @@ public interface ResourceIterator<T> extends Iterator<T>, Resource\n {\n     /**\n      * Close the iterator early, freeing associated resources\n-     *\n+     * <p>\n      * It is an error to use the iterator after this has been called.\n      */\n     @Override\n@@ -56,11 +56,11 @@ public interface ResourceIterator<T> extends Iterator<T>, Resource\n     default Stream<T> stream()\n     {\n         return StreamSupport\n-                .stream( spliteratorUnknownSize( this, 0 ), false )\n-                .onClose( this::close );\n+          .stream(spliteratorUnknownSize(this, 0), false)\n+          .onClose(this::close);\n     }\n \n-    default <R> ResourceIterator<R> map( Function<T,R> map )\n+    default <R> ResourceIterator<R> map(Function<T, R> map)\n     {\n         return new ResourceIterator<>()\n         {\n@@ -79,7 +79,7 @@ public interface ResourceIterator<T> extends Iterator<T>, Resource\n             @Override\n             public R next()\n             {\n-                return map.apply( ResourceIterator.this.next() );\n+                return map.apply(ResourceIterator.this.next());\n             }\n         };\n     }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "violations": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}