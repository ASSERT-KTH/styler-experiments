{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "287",
    "information": {
        "violations": [
            {
                "line": "56",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 145).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    producerMetrics = new HashMap<>();\n\n    //TODO:current java chassis unable know invocation type before starting process,totalWaitInQueue = ProducerInvocation + UnknownTypeInvocation\n    long totalWaitInQueue = 0;\n    long producerWaitInQueue = 0;\n    TimerMetric lifeTimeInQueue = new TimerMetric(MetricsConst.INSTANCE_PRODUCER_PREFIX + \".lifeTimeInQueue\");",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/287/RegistryMetric.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/287/RegistryMetric.java\nindex e7e1460a508..a02fe420a1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/287/RegistryMetric.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/287/RegistryMetric.java\n@@ -88,7 +88,7 @@ public class RegistryMetric {\n     instanceMetric = new InstanceMetric(totalWaitInQueue,\n         new ConsumerInvocationMetric(\"instance\", MetricsConst.INSTANCE_CONSUMER_PREFIX,\n             producerWaitInQueue, consumerLatency, consumerCall),\n-        new ProducerInvocationMetric(\"instance\", MetricsConst.INSTANCE_PRODUCER_PREFIX,\n+new ProducerInvocationMetric(\"instance\", MetricsConst.INSTANCE_PRODUCER_PREFIX,\n             totalWaitInQueue, lifeTimeInQueue, executionTime, producerLatency, producerCall));\n   }\n \n@@ -106,4 +106,4 @@ public class RegistryMetric {\n     }\n     return metrics;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/287/RegistryMetric.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/287/RegistryMetric.java\nindex e7e1460a508..5f4183687ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/287/RegistryMetric.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/287/RegistryMetric.java\n@@ -19,11 +19,9 @@ package io.servicecomb.metrics.core.metric;\n \n import java.util.HashMap;\n import java.util.Map;\n-\n import io.servicecomb.metrics.core.MetricsConst;\n \n public class RegistryMetric {\n-\n   private final InstanceMetric instanceMetric;\n \n   private final Map<String, ConsumerInvocationMetric> consumerMetrics;\n@@ -54,6 +52,7 @@ public class RegistryMetric {\n     producerMetrics = new HashMap<>();\n \n     //TODO:current java chassis unable know invocation type before starting process,totalWaitInQueue = ProducerInvocation + UnknownTypeInvocation\n+\n     long totalWaitInQueue = 0;\n     long producerWaitInQueue = 0;\n     TimerMetric lifeTimeInQueue = new TimerMetric(MetricsConst.INSTANCE_PRODUCER_PREFIX + \".lifeTimeInQueue\");\n@@ -62,7 +61,6 @@ public class RegistryMetric {\n     TimerMetric producerLatency = new TimerMetric(MetricsConst.INSTANCE_PRODUCER_PREFIX + \".producerLatency\");\n     CallMetric consumerCall = new CallMetric(MetricsConst.INSTANCE_CONSUMER_PREFIX + \".consumerCall\");\n     CallMetric producerCall = new CallMetric(MetricsConst.INSTANCE_PRODUCER_PREFIX + \".producerCall\");\n-\n     for (InvocationMetric metric : invocationMetrics.values()) {\n       if (metric != null) {\n         if (metric instanceof ConsumerInvocationMetric) {\n@@ -80,16 +78,22 @@ public class RegistryMetric {\n           producerCall = producerCall.merge(producerMetric.getProducerCall());\n           producerMetrics.put(metric.getOperationName(), producerMetric);\n         } else {\n-          totalWaitInQueue += metric.getWaitInQueue();\n+                 totalWaitInQueue += metric.getWaitInQueue();\n         }\n       }\n     }\n \n-    instanceMetric = new InstanceMetric(totalWaitInQueue,\n-        new ConsumerInvocationMetric(\"instance\", MetricsConst.INSTANCE_CONSUMER_PREFIX,\n-            producerWaitInQueue, consumerLatency, consumerCall),\n-        new ProducerInvocationMetric(\"instance\", MetricsConst.INSTANCE_PRODUCER_PREFIX,\n-            totalWaitInQueue, lifeTimeInQueue, executionTime, producerLatency, producerCall));\n+    instanceMetric = new InstanceMetric(totalWaitInQueue, new ConsumerInvocationMetric(\"instance\",\n+      MetricsConst.INSTANCE_CONSUMER_PREFIX,\n+        producerWaitInQueue,\n+          consumerLatency,\n+            consumerCall), new ProducerInvocationMetric(\"instance\",\n+              MetricsConst.INSTANCE_PRODUCER_PREFIX,\n+                totalWaitInQueue,\n+                  lifeTimeInQueue,\n+                    executionTime,\n+                      producerLatency,\n+                        producerCall));\n   }\n \n   public Map<String, Number> toMap() {\n@@ -97,13 +101,15 @@ public class RegistryMetric {\n     metrics.putAll(instanceMetric.getConsumerMetric().toMap());\n     metrics.putAll(instanceMetric.getProducerMetric().toMap());\n     //will override waitInQueue.count value\n-    metrics.put(MetricsConst.INSTANCE_PRODUCER_PREFIX + \".waitInQueue.count\", instanceMetric.getWaitInQueue());\n+    metrics.put(MetricsConst.INSTANCE_PRODUCER_PREFIX + \".waitInQueue.count\",\n+instanceMetric.getWaitInQueue());\n     for (ConsumerInvocationMetric metric : consumerMetrics.values()) {\n       metrics.putAll(metric.toMap());\n     }\n+\n     for (ProducerInvocationMetric metric : producerMetrics.values()) {\n       metrics.putAll(metric.toMap());\n     }\n     return metrics;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}