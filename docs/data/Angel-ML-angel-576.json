{
    "project_name": "Angel-ML-angel",
    "violation_id": "576",
    "information": {
        "violations": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/576/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/576/LongIntSparseVectorStorage.java\nindex 24047a33c7a..bc789d5060e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/576/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/576/LongIntSparseVectorStorage.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.matrix.RowType;\n@@ -28,252 +29,252 @@ import java.util.Random;\n \n public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n \n-  private Long2IntOpenHashMap map;\n-  private byte flag; // 001: dense; 010: sparse; 100: sorted\n-  private long dim;\n-\n-  public LongIntSparseVectorStorage() {\n-    super();\n-  }\n-\n-  public LongIntSparseVectorStorage(long dim, Long2IntOpenHashMap map) {\n-    this.flag = 2;\n-    this.dim = dim;\n-    this.map = map;\n-  }\n-\n-  public LongIntSparseVectorStorage(long dim, int capacity) {\n-    this(dim, new Long2IntOpenHashMap(capacity));\n-  }\n-\n-  public LongIntSparseVectorStorage(long dim) {\n-    this(dim, (int) Math.min(64, Math.max(dim, 0)));\n-  }\n-\n-  public LongIntSparseVectorStorage(long dim, long[] indices, int[] values) {\n-    this(dim, new Long2IntOpenHashMap(indices, values));\n-  }\n-\n-  @Override\n-  public int get(long idx) {\n-    return map.get(idx);\n-  }\n-\n-  @Override\n-  public void set(long idx, int value) {\n-    map.put(idx, value);\n-  }\n-\n-  @Override\n-  public long[] getIndices() {\n-    return map.keySet().toLongArray();\n-  }\n-\n-  @Override\n-  public ObjectIterator<Long2IntMap.Entry> entryIterator() {\n-    return map.long2IntEntrySet().fastIterator();\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage clone() {\n-    return new LongIntSparseVectorStorage(dim, map.clone());\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage copy() {\n-    return new LongIntSparseVectorStorage(dim, map.clone());\n-  }\n-\n-\n-  @Override\n-  public LongIntVectorStorage oneLikeSparse() {\n-    int capacity = map.size();\n-    int[] oneLikeValues = new int[capacity];\n-\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongIntSparseVectorStorage(dim, map.keySet().toLongArray(), oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage oneLikeSorted() {\n-    int capacity = map.size();\n-    int[] oneLikeValues = new int[capacity];\n-    long[] indices = map.keySet().toLongArray();\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage oneLikeSorted(long dim, int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      long idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage oneLikeSparse(int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage oneLikeSorted(int capacity) {\n-    int[] oneLikeValues = new int[capacity];\n-    long[] indices = new long[capacity];\n-    HashSet set = new HashSet<Integer>();\n-    Random rand = new Random();\n-    int j = 0;\n-    while (set.size() < capacity) {\n-      int idx = rand.nextInt((int) dim);\n-      if (!set.contains(idx)) {\n-        indices[j] = idx;\n-        set.add(idx);\n-        j++;\n-      }\n-    }\n-    Arrays.sort(indices);\n-    for (int i = 0; i < capacity; i++) {\n-      oneLikeValues[i] = 1;\n-    }\n-    return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n-  }\n-\n-\n-  @Override\n-  public LongIntVectorStorage emptySparse() {\n-    return new LongIntSparseVectorStorage(dim, map.size());\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage emptySorted() {\n-    return new LongIntSortedVectorStorage(dim, map.size());\n-  }\n-\n-\n-  @Override\n-  public LongIntVectorStorage emptySparse(long dim, int capacity) {\n-    return new LongIntSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage emptySorted(long dim, int capacity) {\n-    return new LongIntSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage emptySparse(int capacity) {\n-    return new LongIntSparseVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongIntVectorStorage emptySorted(int capacity) {\n-    return new LongIntSortedVectorStorage(dim, capacity);\n-  }\n-\n-  @Override\n-  public LongSet indexIterator() {\n-    return map.keySet();\n-  }\n-\n-  @Override\n-  public int size() {\n-    return map.size();\n-  }\n-\n-  @Override\n-  public boolean hasKey(long key) {\n-    return map.containsKey(key);\n-  }\n-\n-  @Override\n-  public RowType getType() {\n-    return RowType.T_INT_SPARSE_LONGKEY;\n-  }\n-\n-  @Override\n-  public boolean isDense() {\n-    return flag == 1;\n-  }\n-\n-  @Override\n-  public boolean isSparse() {\n-    return flag == 2;\n-  }\n-\n-  @Override\n-  public boolean isSorted() {\n-    return flag == 4;\n-  }\n-\n-  @Override\n-  public void clear() {\n-    map.clear();\n-  }\n-\n-  @Override\n-  public IntIterator valueIterator() {\n-    return map.values().iterator();\n-  }\n-\n-  @Override\n-  public int[] getValues() {\n-    return map.values().toIntArray();\n-  }\n+    private Long2IntOpenHashMap map;\n+    private byte flag; // 001: dense; 010: sparse; 100: sorted\n+    private long dim;\n+\n+    public LongIntSparseVectorStorage() {\n+        super();\n+    }\n+\n+    public LongIntSparseVectorStorage(long dim, Long2IntOpenHashMap map) {\n+        this.flag = 2;\n+        this.dim = dim;\n+        this.map = map;\n+    }\n+\n+    public LongIntSparseVectorStorage(long dim, int capacity) {\n+        this(dim, new Long2IntOpenHashMap(capacity));\n+    }\n+\n+    public LongIntSparseVectorStorage(long dim) {\n+        this(dim, (int) Math.min(64, Math.max(dim, 0)));\n+    }\n+\n+    public LongIntSparseVectorStorage(long dim, long[] indices, int[] values) {\n+        this(dim, new Long2IntOpenHashMap(indices, values));\n+    }\n+\n+    @Override\n+    public int get(long idx) {\n+        return map.get(idx);\n+    }\n+\n+    @Override\n+    public void set(long idx, int value) {\n+        map.put(idx, value);\n+    }\n+\n+    @Override\n+    public long[] getIndices() {\n+        return map.keySet().toLongArray();\n+    }\n+\n+    @Override\n+    public ObjectIterator<Long2IntMap.Entry> entryIterator() {\n+        return map.long2IntEntrySet().fastIterator();\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage clone() {\n+        return new LongIntSparseVectorStorage(dim, map.clone());\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage copy() {\n+        return new LongIntSparseVectorStorage(dim, map.clone());\n+    }\n+\n+\n+    @Override\n+    public LongIntVectorStorage oneLikeSparse() {\n+        int capacity = map.size();\n+        int[] oneLikeValues = new int[capacity];\n+\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongIntSparseVectorStorage(dim, map.keySet().toLongArray(), oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage oneLikeSorted() {\n+        int capacity = map.size();\n+        int[] oneLikeValues = new int[capacity];\n+        long[] indices = map.keySet().toLongArray();\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+\n+    @Override\n+    public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            long idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage oneLikeSorted(long dim, int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            long idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage oneLikeSparse(int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage oneLikeSorted(int capacity) {\n+        int[] oneLikeValues = new int[capacity];\n+        long[] indices = new long[capacity];\n+        HashSet set = new HashSet<Integer>();\n+        Random rand = new Random();\n+        int j = 0;\n+        while (set.size() < capacity) {\n+            int idx = rand.nextInt((int) dim);\n+            if (!set.contains(idx)) {\n+                indices[j] = idx;\n+                set.add(idx);\n+                j++;\n+            }\n+        }\n+        Arrays.sort(indices);\n+        for (int i = 0; i < capacity; i++) {\n+            oneLikeValues[i] = 1;\n+        }\n+        return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n+    }\n+\n+\n+    @Override\n+    public LongIntVectorStorage emptySparse() {\n+        return new LongIntSparseVectorStorage(dim, map.size());\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage emptySorted() {\n+        return new LongIntSortedVectorStorage(dim, map.size());\n+    }\n+\n+\n+    @Override\n+    public LongIntVectorStorage emptySparse(long dim, int capacity) {\n+        return new LongIntSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage emptySorted(long dim, int capacity) {\n+        return new LongIntSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage emptySparse(int capacity) {\n+        return new LongIntSparseVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongIntVectorStorage emptySorted(int capacity) {\n+        return new LongIntSortedVectorStorage(dim, capacity);\n+    }\n+\n+    @Override\n+    public LongSet indexIterator() {\n+        return map.keySet();\n+    }\n+\n+    @Override\n+    public int size() {\n+        return map.size();\n+    }\n+\n+    @Override\n+    public boolean hasKey(long key) {\n+        return map.containsKey(key);\n+    }\n+\n+    @Override\n+    public RowType getType() {\n+        return RowType.T_INT_SPARSE_LONGKEY;\n+    }\n+\n+    @Override\n+    public boolean isDense() {\n+        return flag == 1;\n+    }\n+\n+    @Override\n+    public boolean isSparse() {\n+        return flag == 2;\n+    }\n+\n+    @Override\n+    public boolean isSorted() {\n+        return flag == 4;\n+    }\n+\n+    @Override\n+    public void clear() {\n+        map.clear();\n+    }\n+\n+    @Override\n+    public IntIterator valueIterator() {\n+        return map.values().iterator();\n+    }\n+\n+    @Override\n+    public int[] getValues() {\n+        return map.values().toIntArray();\n+    }\n }\n",
            "diff_size": 249
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/576/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/576/LongIntSparseVectorStorage.java\nindex 24047a33c7a..b53c9043563 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/576/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/576/LongIntSparseVectorStorage.java\n@@ -84,8 +84,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, map.clone());\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     int[] oneLikeValues = new int[capacity];\n@@ -108,8 +107,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n     long[] indices = new long[capacity];\n@@ -195,8 +193,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, map.size());\n   }\n@@ -206,8 +203,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, map.size());\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n   }\n@@ -276,4 +272,4 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n   public int[] getValues() {\n     return map.values().toIntArray();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/576/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/576/LongIntSparseVectorStorage.java\nindex 24047a33c7a..8e9beae32dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/576/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/576/LongIntSparseVectorStorage.java\n@@ -84,12 +84,10 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, map.clone());\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     int[] oneLikeValues = new int[capacity];\n-\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -108,7 +106,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n@@ -124,6 +121,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -167,6 +165,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -195,7 +194,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, map.size());\n@@ -206,7 +204,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, map.size());\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n@@ -276,4 +273,5 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n   public int[] getValues() {\n     return map.values().toIntArray();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "checkstyle_idea",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}