{
    "project_name": "Angel-ML-angel",
    "violation_id": "20",
    "information": {
        "violations": [
            {
                "line": "32",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 114).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        TVector row = client.getRow(0);\n        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n\n        startTs = System.currentTimeMillis();\n        SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/20/SparseDoubleTask.java\nindex 1849d77d087..a574b7e33e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/Angel-ML-angel/styler/05_predictions/final/files-repaired/20/SparseDoubleTask.java\n@@ -29,9 +29,11 @@ public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n         long startTs = System.currentTimeMillis();\n         TVector row = client.getRow(0);\n         LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n+          + \" pull use time=\" + (System.currentTimeMillis() -\n+            startTs ) + \", sum=\"+sum((SparseDoubleVector )\n+            row ));\n \n-        startTs = System.currentTimeMillis();\n+         startTs = System.currentTimeMillis();\n         SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);\n         for(int i = 0; i < 2100000000; i+=20) {\n           deltaV.set(i, 1.0);\n",
            "diff_size": 4
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/20/SparseDoubleTask.java\nindex 1849d77d087..0a96a2e8ee6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/checkstyle_idea/20/SparseDoubleTask.java\n@@ -10,58 +10,67 @@ import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n-  private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n-  public SparseDoubleTask(TaskContext taskContext) {\n-    super(taskContext);\n-  }\n+    private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n \n-  @Override public Long parse(Long key, Long value) {\n-    return null;\n-  }\n+    public SparseDoubleTask(TaskContext taskContext) {\n+        super(taskContext);\n+    }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+    @Override\n+    public Long parse(Long key, Long value) {\n+        return null;\n+    }\n \n+    @Override\n+    public void preProcess(TaskContext taskContext) {\n+    }\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n-      MatrixClient client = taskContext.getMatrix(\"sparse_double_test\");\n-      while (taskContext.getEpoch() < 100) {\n-        long startTs = System.currentTimeMillis();\n-        TVector row = client.getRow(0);\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n \n-        startTs = System.currentTimeMillis();\n-        SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);\n-        for(int i = 0; i < 2100000000; i+=20) {\n-          deltaV.set(i, 1.0);\n-        }\n+    @Override\n+    public void run(TaskContext taskContext) throws AngelException {\n+        try {\n+            MatrixClient client = taskContext.getMatrix(\"sparse_double_test\");\n+            while (taskContext.getEpoch() < 100) {\n+                long startTs = System.currentTimeMillis();\n+                TVector row = client.getRow(0);\n+                LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                        taskContext.getEpoch()\n+                        + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" +\n+                        sum((SparseDoubleVector) row));\n \n-        deltaV.setMatrixId(client.getMatrixId());\n-        deltaV.setRowId(0);\n+                startTs = System.currentTimeMillis();\n+                SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);\n+                for (int i = 0; i < 2100000000; i += 20) {\n+                    deltaV.set(i, 1.0);\n+                }\n \n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" train use time=\" + (System.currentTimeMillis() - startTs));\n+                deltaV.setMatrixId(client.getMatrixId());\n+                deltaV.setRowId(0);\n \n-        startTs = System.currentTimeMillis();\n-        client.increment(deltaV);\n-        client.clock().get();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" flush use time=\" + (System.currentTimeMillis() - startTs));\n-        taskContext.incEpoch();\n-      }\n-    } catch (Throwable x) {\n-      throw new AngelException(\"run task failed \", x);\n-    }\n-  }\n+                LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                        taskContext.getEpoch()\n+                        + \" train use time=\" + (System.currentTimeMillis() - startTs));\n \n-  private double sum(SparseDoubleVector row) {\n-    double [] data = row.getValues();\n-    double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n-      ret += data[i];\n+                startTs = System.currentTimeMillis();\n+                client.increment(deltaV);\n+                client.clock().get();\n+                LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" +\n+                        taskContext.getEpoch()\n+                        + \" flush use time=\" + (System.currentTimeMillis() - startTs));\n+                taskContext.incEpoch();\n+            }\n+        } catch (Throwable x) {\n+            throw new AngelException(\"run task failed \", x);\n+        }\n     }\n \n-    return ret;\n-  }\n+    private double sum(SparseDoubleVector row) {\n+        double[] data = row.getValues();\n+        double ret = 0.0;\n+        for (int i = 0; i < data.length; i++) {\n+            ret += data[i];\n+        }\n+\n+        return ret;\n+    }\n }\n",
            "diff_size": 71
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/20/SparseDoubleTask.java\nindex 1849d77d087..645dff4046b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/naturalize/20/SparseDoubleTask.java\n@@ -15,39 +15,38 @@ public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n     super(taskContext);\n   }\n \n-  @Override public Long parse(Long key, Long value) {\n+  @Override\n+public Long parse(Long key, Long value) {\n     return null;\n   }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n+  @Override\n+public void preProcess(TaskContext taskContext) {}\n \n-\n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n+@Override\n+public void run(TaskContext taskContext) throws AngelException {\n+    try {\n       MatrixClient client = taskContext.getMatrix(\"sparse_double_test\");\n       while (taskContext.getEpoch() < 100) {\n         long startTs = System.currentTimeMillis();\n         TVector row = client.getRow(0);\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n \n         startTs = System.currentTimeMillis();\n         SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);\n-        for(int i = 0; i < 2100000000; i+=20) {\n+        for (int i = 0; i < 2100000000; i+= 20) {\n           deltaV.set(i, 1.0);\n         }\n \n         deltaV.setMatrixId(client.getMatrixId());\n         deltaV.setRowId(0);\n \n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" train use time=\" + (System.currentTimeMillis() - startTs));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" train use time=\" + (System.currentTimeMillis() - startTs));\n \n         startTs = System.currentTimeMillis();\n         client.increment(deltaV);\n         client.clock().get();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" flush use time=\" + (System.currentTimeMillis() - startTs));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" flush use time=\" + (System.currentTimeMillis() - startTs));\n         taskContext.incEpoch();\n       }\n     } catch (Throwable x) {\n@@ -58,10 +57,10 @@ public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n   private double sum(SparseDoubleVector row) {\n     double [] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n+    for (int i = 0; i < data.length; i++) {\n       ret += data[i];\n     }\n \n     return ret;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 200).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/20/SparseDoubleTask.java\nindex 1849d77d087..804e967a483 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/codebuff/20/SparseDoubleTask.java\n@@ -10,44 +10,41 @@ import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n \n public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n+\n   private static final Log LOG = LogFactory.getLog(PSFTestTask.class);\n+\n   public SparseDoubleTask(TaskContext taskContext) {\n     super(taskContext);\n   }\n \n-  @Override public Long parse(Long key, Long value) {\n+  @Override\n+  public Long parse(Long key, Long value) {\n     return null;\n   }\n \n-  @Override public void preProcess(TaskContext taskContext) { }\n-\n+  @Override\n+  public void preProcess(TaskContext taskContext) {}\n \n-  @Override public void run(TaskContext taskContext) throws AngelException {\n-    try{\n+  @Override\n+  public void run(TaskContext taskContext) throws AngelException {\n+    try {\n       MatrixClient client = taskContext.getMatrix(\"sparse_double_test\");\n       while (taskContext.getEpoch() < 100) {\n         long startTs = System.currentTimeMillis();\n         TVector row = client.getRow(0);\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n-\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector) row));\n         startTs = System.currentTimeMillis();\n         SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);\n-        for(int i = 0; i < 2100000000; i+=20) {\n+        for (int i = 0; i < 2100000000; i += 20) {\n           deltaV.set(i, 1.0);\n         }\n-\n         deltaV.setMatrixId(client.getMatrixId());\n         deltaV.setRowId(0);\n-\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" train use time=\" + (System.currentTimeMillis() - startTs));\n-\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" train use time=\" + (System.currentTimeMillis() - startTs));\n         startTs = System.currentTimeMillis();\n         client.increment(deltaV);\n         client.clock().get();\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" flush use time=\" + (System.currentTimeMillis() - startTs));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch() + \" flush use time=\" + (System.currentTimeMillis() - startTs));\n         taskContext.incEpoch();\n       }\n     } catch (Throwable x) {\n@@ -56,12 +53,12 @@ public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n   }\n \n   private double sum(SparseDoubleVector row) {\n-    double [] data = row.getValues();\n+    double[] data = row.getValues();\n     double ret = 0.0;\n-    for(int i = 0; i < data.length; i++) {\n+    for (int i = 0; i < data.length; i++) {\n       ret += data[i];\n     }\n-\n     return ret;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/20/SparseDoubleTask.java\nindex 1849d77d087..a574b7e33e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/random/files-repaired/20/SparseDoubleTask.java\n@@ -29,9 +29,11 @@ public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n         long startTs = System.currentTimeMillis();\n         TVector row = client.getRow(0);\n         LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n+          + \" pull use time=\" + (System.currentTimeMillis() -\n+            startTs ) + \", sum=\"+sum((SparseDoubleVector )\n+            row ));\n \n-        startTs = System.currentTimeMillis();\n+         startTs = System.currentTimeMillis();\n         SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);\n         for(int i = 0; i < 2100000000; i+=20) {\n           deltaV.set(i, 1.0);\n",
            "diff_size": 4
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/20/SparseDoubleTask.java\nindex 1849d77d087..f5804dfb716 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/violations/20/SparseDoubleTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/Angel-ML-angel/styler/05_predictions/three_grams/files-repaired/20/SparseDoubleTask.java\n@@ -28,10 +28,9 @@ public class SparseDoubleTask extends BaseTask<Long, Long, Long> {\n       while (taskContext.getEpoch() < 100) {\n         long startTs = System.currentTimeMillis();\n         TVector row = client.getRow(0);\n-        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()\n-          + \" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n+        LOG.info(\"Task \" + taskContext.getTaskId() + \" in iteration \" + taskContext.getEpoch()+\" pull use time=\" + (System.currentTimeMillis() - startTs) + \", sum=\" + sum((SparseDoubleVector)row));\n \n-        startTs = System.currentTimeMillis();\n+      startTs = System.currentTimeMillis();\n         SparseDoubleVector deltaV = new SparseDoubleVector(2100000000, 150000000);\n         for(int i = 0; i < 2100000000; i+=20) {\n           deltaV.set(i, 1.0);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "checkstyle_idea",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}