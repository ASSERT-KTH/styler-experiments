{
    "project_name": "apache-servicecomb-java-chassis",
    "violation_id": "96",
    "information": {
        "violations": [
            {
                "line": "33",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n\n  private static RootDeserializer<ResponseHeader> rootDeserializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n      .createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n\n  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")",
    "results": [
        {
            "tool": "styler",
            "violations": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "column": "34",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "33",
                    "column": "51",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "33",
                    "column": "67",
                    "severity": "warning",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "33",
                    "column": "68",
                    "severity": "warning",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/96/ResponseHeader.java\nindex 01f7697039d..d2970d20133 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/final/files-repaired/96/ResponseHeader.java\n@@ -30,8 +30,7 @@ public class ResponseHeader {\n   // TODO : refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<ResponseHeader> rootDeserializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n-      .createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n+  private static RootDeserializer <ResponseHeader>rootDeserializer=protoMapperFactory.createFromName(\"ResponseHeader.proto\").createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n       .createRootSerializer(\"ResponseHeader\", ResponseHeader.class);\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/96/ResponseHeader.java\nindex 01f7697039d..6be433e8641 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/checkstyle_idea/96/ResponseHeader.java\n@@ -30,8 +30,9 @@ public class ResponseHeader {\n   // TODO : refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<ResponseHeader> rootDeserializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n-      .createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n+  private static RootDeserializer<ResponseHeader> rootDeserializer =\n+      protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n+          .createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n       .createRootSerializer(\"ResponseHeader\", ResponseHeader.class);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "violations": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/96/ResponseHeader.java\nindex 01f7697039d..81fb8cc0b04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/naturalize/96/ResponseHeader.java\n@@ -97,4 +97,4 @@ public class ResponseHeader {\n   public void setHeaders(Headers headers) {\n     this.headers = headers;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "violations": [
                {
                    "line": "31",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/96/ResponseHeader.java\nindex 01f7697039d..96f4682c0a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/codebuff/96/ResponseHeader.java\n@@ -18,23 +18,19 @@\n package org.apache.servicecomb.transport.highway.message;\n \n import java.util.Map;\n-\n import org.apache.servicecomb.foundation.protobuf.ProtoMapperFactory;\n import org.apache.servicecomb.foundation.protobuf.RootDeserializer;\n import org.apache.servicecomb.foundation.protobuf.RootSerializer;\n import org.apache.servicecomb.swagger.invocation.response.Headers;\n-\n import io.vertx.core.buffer.Buffer;\n \n public class ResponseHeader {\n   // TODO : refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<ResponseHeader> rootDeserializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n-      .createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n+  private static RootDeserializer<ResponseHeader> rootDeserializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\").createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n \n-  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n-      .createRootSerializer(\"ResponseHeader\", ResponseHeader.class);\n+  private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\").createRootSerializer(\"ResponseHeader\", ResponseHeader.class);\n \n   public static RootSerializer getRootSerializer() {\n     return rootSerializer;\n@@ -46,6 +42,7 @@ public class ResponseHeader {\n \n   // \u8fd0\u884c\u65f6\u5fc5\u987b\u7684\u6570\u636e\uff0c\u6bd4\u5982body\u662f\u5426\u538b\u7f29\n   // \u9884\u7559\u7279\u6027\u9009\u9879\n+\n   private int flags;\n \n   private int statusCode;\n@@ -55,6 +52,7 @@ public class ResponseHeader {\n   private Map<String, String> context;\n \n   // TODO : WEAK map headers\n+\n   private Headers headers = new Headers();\n \n   public int getFlags() {\n@@ -66,6 +64,7 @@ public class ResponseHeader {\n   }\n \n   //CHECKSTYLE:ON: magicnumber\n+\n   public int getStatusCode() {\n     return statusCode;\n   }\n@@ -97,4 +96,4 @@ public class ResponseHeader {\n   public void setHeaders(Headers headers) {\n     this.headers = headers;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "violations": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "column": "34",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "33",
                    "column": "51",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "33",
                    "column": "67",
                    "severity": "warning",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "33",
                    "column": "68",
                    "severity": "warning",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/96/ResponseHeader.java\nindex 01f7697039d..d2970d20133 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/random/files-repaired/96/ResponseHeader.java\n@@ -30,8 +30,7 @@ public class ResponseHeader {\n   // TODO : refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<ResponseHeader> rootDeserializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n-      .createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n+  private static RootDeserializer <ResponseHeader>rootDeserializer=protoMapperFactory.createFromName(\"ResponseHeader.proto\").createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n       .createRootSerializer(\"ResponseHeader\", ResponseHeader.class);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "33",
                    "column": "34",
                    "severity": "warning",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "33",
                    "column": "51",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "33",
                    "column": "67",
                    "severity": "warning",
                    "message": "'=' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "33",
                    "column": "68",
                    "severity": "warning",
                    "message": "'=' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/96/ResponseHeader.java\nindex 01f7697039d..d2970d20133 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/violations/96/ResponseHeader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/apache-servicecomb-java-chassis/styler/05_predictions/three_grams/files-repaired/96/ResponseHeader.java\n@@ -30,8 +30,7 @@ public class ResponseHeader {\n   // TODO : refactor reuse\n   private static ProtoMapperFactory protoMapperFactory = new ProtoMapperFactory();\n \n-  private static RootDeserializer<ResponseHeader> rootDeserializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n-      .createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n+  private static RootDeserializer <ResponseHeader>rootDeserializer=protoMapperFactory.createFromName(\"ResponseHeader.proto\").createRootDeserializer(\"ResponseHeader\", ResponseHeader.class);\n \n   private static RootSerializer rootSerializer = protoMapperFactory.createFromName(\"ResponseHeader.proto\")\n       .createRootSerializer(\"ResponseHeader\", ResponseHeader.class);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "checkstyle_idea"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}