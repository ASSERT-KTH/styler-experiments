{
    "project_name": "black-ant-case",
    "violation_id": "12",
    "information": {
        "violations": [
            {
                "line": "135",
                "column": "104",
                "severity": "error",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  @Bean\n  public WebSSOProfileConsumer webSSOprofileConsumer() {\n    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ?\n      new WebSSOProfileConsumerImpl() {\n        @Override\n        @SuppressWarnings(\"unchecked\")",
    "results": [
        {
            "tool": "styler",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/black-ant-case/styler/05_predictions/final/files-repaired/12/SAMLConfig.java\nindex 942f375b450..c5cc48948e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/./experiments/projects/black-ant-case/styler/05_predictions/final/files-repaired/12/SAMLConfig.java\n@@ -132,8 +132,7 @@ public class SAMLConfig {\n \n   @Bean\n   public WebSSOProfileConsumer webSSOprofileConsumer() {\n-    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ?\n-      new WebSSOProfileConsumerImpl() {\n+    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ? new WebSSOProfileConsumerImpl() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         protected void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context) throws AuthenticationException, SAMLException, org.opensaml.xml.security.SecurityException, ValidationException, DecryptionException {\n",
            "diff_size": 2
        },
        {
            "tool": "checkstyle_idea",
            "violations": [
                {
                    "line": "135",
                    "column": "108",
                    "severity": "error",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/checkstyle_idea/12/SAMLConfig.java\nindex 942f375b450..be2f2c6b616 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/checkstyle_idea/12/SAMLConfig.java\n@@ -50,117 +50,117 @@ import java.util.Collection;\n @Configuration\n public class SAMLConfig {\n \n-  @Autowired\n-  private Environment environment;\n-\n-  @Bean\n-  public MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager() {\n-    return new MultiThreadedHttpConnectionManager();\n-  }\n-\n-  @Bean\n-  public HttpClient httpClient() {\n-    return new HttpClient(multiThreadedHttpConnectionManager());\n-  }\n-\n-  private HTTPArtifactBinding artifactBinding(ParserPool parserPool,\n-                                              VelocityEngine velocityEngine,\n-                                              ArtifactResolutionProfile artifactResolutionProfile) {\n-    return new HTTPArtifactBinding(parserPool, velocityEngine, artifactResolutionProfile);\n-  }\n-\n-  @Bean\n-  @Autowired\n-  public HTTPSOAP11Binding soapBinding(ParserPool parserPool) {\n-    return new HTTPSOAP11Binding(parserPool);\n-  }\n-\n-  @Bean\n-  @Autowired\n-  public HTTPPostBinding httpPostBinding(ParserPool parserPool, VelocityEngine velocityEngine, @Value(\"${sp.compare_endpoints}\") boolean compareEndpoints) {\n-    HTTPPostEncoder encoder = new HTTPPostEncoder(velocityEngine, \"/templates/saml2-post-binding.vm\");\n-    HTTPPostDecoder decoder = new HTTPPostDecoder(parserPool);\n-    if (!compareEndpoints) {\n-      decoder.setURIComparator((uri1, uri2) -> true);\n+    @Autowired\n+    private Environment environment;\n+\n+    @Bean\n+    public MultiThreadedHttpConnectionManager multiThreadedHttpConnectionManager() {\n+        return new MultiThreadedHttpConnectionManager();\n+    }\n+\n+    @Bean\n+    public HttpClient httpClient() {\n+        return new HttpClient(multiThreadedHttpConnectionManager());\n+    }\n+\n+    private HTTPArtifactBinding artifactBinding(ParserPool parserPool,\n+                                                VelocityEngine velocityEngine,\n+                                                ArtifactResolutionProfile artifactResolutionProfile) {\n+        return new HTTPArtifactBinding(parserPool, velocityEngine, artifactResolutionProfile);\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public HTTPSOAP11Binding soapBinding(ParserPool parserPool) {\n+        return new HTTPSOAP11Binding(parserPool);\n     }\n-    return new HTTPPostBinding(parserPool, decoder, encoder);\n-  }\n-\n-  @Bean\n-  @Autowired\n-  public HTTPRedirectDeflateBinding httpRedirectDeflateBinding(ParserPool parserPool) {\n-    return new HTTPRedirectDeflateBinding(parserPool);\n-  }\n-\n-  @Bean\n-  @Autowired\n-  public HTTPSOAP11Binding httpSOAP11Binding(ParserPool parserPool) {\n-    return new HTTPSOAP11Binding(parserPool);\n-  }\n-\n-  @Bean\n-  @Autowired\n-  public HTTPPAOS11Binding httpPAOS11Binding(ParserPool parserPool) {\n-    return new HTTPPAOS11Binding(parserPool);\n-  }\n-\n-  @Autowired\n-  @Bean\n-  public SAMLProcessor processor(VelocityEngine velocityEngine,\n-                                 ParserPool parserPool,\n-                                 SpConfiguration spConfiguration,\n-                                 @Value(\"${sp.compare_endpoints}\") boolean compareEndpoints) {\n-    ArtifactResolutionProfile artifactResolutionProfile = new ArtifactResolutionProfileImpl(httpClient());\n-    Collection<SAMLBinding> bindings = new ArrayList<>();\n-    bindings.add(httpRedirectDeflateBinding(parserPool));\n-    bindings.add(httpPostBinding(parserPool, velocityEngine, compareEndpoints));\n-    bindings.add(artifactBinding(parserPool, velocityEngine, artifactResolutionProfile));\n-    bindings.add(httpSOAP11Binding(parserPool));\n-    bindings.add(httpPAOS11Binding(parserPool));\n-    return new ConfigurableSAMLProcessor(bindings, spConfiguration);\n-  }\n-\n-  @Bean\n-  public static SAMLBootstrap sAMLBootstrap() {\n-    return new UpgradedSAMLBootstrap();\n-  }\n-\n-  @Bean\n-  public SAMLDefaultLogger samlLogger() {\n-    return new SAMLDefaultLogger();\n-  }\n-\n-  @Bean\n-  public WebSSOProfileConsumer webSSOprofileConsumer() {\n-    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ?\n-      new WebSSOProfileConsumerImpl() {\n-        @Override\n-        @SuppressWarnings(\"unchecked\")\n-        protected void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context) throws AuthenticationException, SAMLException, org.opensaml.xml.security.SecurityException, ValidationException, DecryptionException {\n-          //nope\n-          context.setSubjectNameIdentifier(assertion.getSubject().getNameID());\n+\n+    @Bean\n+    @Autowired\n+    public HTTPPostBinding httpPostBinding(ParserPool parserPool, VelocityEngine velocityEngine, @Value(\"${sp.compare_endpoints}\") boolean compareEndpoints) {\n+        HTTPPostEncoder encoder = new HTTPPostEncoder(velocityEngine, \"/templates/saml2-post-binding.vm\");\n+        HTTPPostDecoder decoder = new HTTPPostDecoder(parserPool);\n+        if (!compareEndpoints) {\n+            decoder.setURIComparator((uri1, uri2) -> true);\n         }\n-      } : new WebSSOProfileConsumerImpl();\n-    webSSOProfileConsumer.setResponseSkew(15 * 60);\n-    return webSSOProfileConsumer;\n-  }\n-\n-  @Bean\n-  public WebSSOProfileConsumerHoKImpl hokWebSSOprofileConsumer() {\n-    return new WebSSOProfileConsumerHoKImpl();\n-  }\n-\n-  @Bean\n-  @Autowired\n-  public WebSSOProfile webSSOprofile(SAMLProcessor samlProcessor) {\n-    WebSSOProfileImpl webSSOProfile = new WebSSOProfileImpl();\n-    webSSOProfile.setProcessor(samlProcessor);\n-    return webSSOProfile;\n-  }\n-\n-  @Bean\n-  public WebSSOProfileECPImpl ecpprofile() {\n-    return new WebSSOProfileECPImpl();\n-  }\n+        return new HTTPPostBinding(parserPool, decoder, encoder);\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public HTTPRedirectDeflateBinding httpRedirectDeflateBinding(ParserPool parserPool) {\n+        return new HTTPRedirectDeflateBinding(parserPool);\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public HTTPSOAP11Binding httpSOAP11Binding(ParserPool parserPool) {\n+        return new HTTPSOAP11Binding(parserPool);\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public HTTPPAOS11Binding httpPAOS11Binding(ParserPool parserPool) {\n+        return new HTTPPAOS11Binding(parserPool);\n+    }\n+\n+    @Autowired\n+    @Bean\n+    public SAMLProcessor processor(VelocityEngine velocityEngine,\n+                                   ParserPool parserPool,\n+                                   SpConfiguration spConfiguration,\n+                                   @Value(\"${sp.compare_endpoints}\") boolean compareEndpoints) {\n+        ArtifactResolutionProfile artifactResolutionProfile = new ArtifactResolutionProfileImpl(httpClient());\n+        Collection<SAMLBinding> bindings = new ArrayList<>();\n+        bindings.add(httpRedirectDeflateBinding(parserPool));\n+        bindings.add(httpPostBinding(parserPool, velocityEngine, compareEndpoints));\n+        bindings.add(artifactBinding(parserPool, velocityEngine, artifactResolutionProfile));\n+        bindings.add(httpSOAP11Binding(parserPool));\n+        bindings.add(httpPAOS11Binding(parserPool));\n+        return new ConfigurableSAMLProcessor(bindings, spConfiguration);\n+    }\n+\n+    @Bean\n+    public static SAMLBootstrap sAMLBootstrap() {\n+        return new UpgradedSAMLBootstrap();\n+    }\n+\n+    @Bean\n+    public SAMLDefaultLogger samlLogger() {\n+        return new SAMLDefaultLogger();\n+    }\n+\n+    @Bean\n+    public WebSSOProfileConsumer webSSOprofileConsumer() {\n+        WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ?\n+            new WebSSOProfileConsumerImpl() {\n+                @Override\n+                @SuppressWarnings(\"unchecked\")\n+                protected void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context) throws AuthenticationException, SAMLException, org.opensaml.xml.security.SecurityException, ValidationException, DecryptionException {\n+                    //nope\n+                    context.setSubjectNameIdentifier(assertion.getSubject().getNameID());\n+                }\n+            } : new WebSSOProfileConsumerImpl();\n+        webSSOProfileConsumer.setResponseSkew(15 * 60);\n+        return webSSOProfileConsumer;\n+    }\n+\n+    @Bean\n+    public WebSSOProfileConsumerHoKImpl hokWebSSOprofileConsumer() {\n+        return new WebSSOProfileConsumerHoKImpl();\n+    }\n+\n+    @Bean\n+    @Autowired\n+    public WebSSOProfile webSSOprofile(SAMLProcessor samlProcessor) {\n+        WebSSOProfileImpl webSSOProfile = new WebSSOProfileImpl();\n+        webSSOProfile.setProcessor(samlProcessor);\n+        return webSSOProfile;\n+    }\n+\n+    @Bean\n+    public WebSSOProfileECPImpl ecpprofile() {\n+        return new WebSSOProfileECPImpl();\n+    }\n \n }\n",
            "diff_size": 167
        },
        {
            "tool": "naturalize",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/naturalize/12/SAMLConfig.java\nindex 942f375b450..3cd2f14d563 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/naturalize/12/SAMLConfig.java\n@@ -63,8 +63,7 @@ public class SAMLConfig {\n     return new HttpClient(multiThreadedHttpConnectionManager());\n   }\n \n-  private HTTPArtifactBinding artifactBinding(ParserPool parserPool,\n-                                              VelocityEngine velocityEngine,\n+  private HTTPArtifactBinding artifactBinding(ParserPool parserPool, VelocityEngine velocityEngine,\n                                               ArtifactResolutionProfile artifactResolutionProfile) {\n     return new HTTPArtifactBinding(parserPool, velocityEngine, artifactResolutionProfile);\n   }\n@@ -106,8 +105,7 @@ public class SAMLConfig {\n \n   @Autowired\n   @Bean\n-  public SAMLProcessor processor(VelocityEngine velocityEngine,\n-                                 ParserPool parserPool,\n+  public SAMLProcessor processor(VelocityEngine velocityEngine, ParserPool parserPool,\n                                  SpConfiguration spConfiguration,\n                                  @Value(\"${sp.compare_endpoints}\") boolean compareEndpoints) {\n     ArtifactResolutionProfile artifactResolutionProfile = new ArtifactResolutionProfileImpl(httpClient());\n@@ -132,16 +130,16 @@ public class SAMLConfig {\n \n   @Bean\n   public WebSSOProfileConsumer webSSOprofileConsumer() {\n-    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ?\n-      new WebSSOProfileConsumerImpl() {\n-        @Override\n+    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ? new WebSSOProfileConsumerImpl() {\n+    @Override\n         @SuppressWarnings(\"unchecked\")\n         protected void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context) throws AuthenticationException, SAMLException, org.opensaml.xml.security.SecurityException, ValidationException, DecryptionException {\n-          //nope\n+    //nope\n           context.setSubjectNameIdentifier(assertion.getSubject().getNameID());\n         }\n-      } : new WebSSOProfileConsumerImpl();\n-    webSSOProfileConsumer.setResponseSkew(15 * 60);\n+      }\n+: new WebSSOProfileConsumerImpl();\n+webSSOProfileConsumer.setResponseSkew(15 * 60);\n     return webSSOProfileConsumer;\n   }\n \n@@ -163,4 +161,4 @@ public class SAMLConfig {\n     return new WebSSOProfileECPImpl();\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "violations": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/random/files-repaired/12/SAMLConfig.java\nindex 942f375b450..c5cc48948e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/random/files-repaired/12/SAMLConfig.java\n@@ -132,8 +132,7 @@ public class SAMLConfig {\n \n   @Bean\n   public WebSSOProfileConsumer webSSOprofileConsumer() {\n-    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ?\n-      new WebSSOProfileConsumerImpl() {\n+    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ? new WebSSOProfileConsumerImpl() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         protected void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context) throws AuthenticationException, SAMLException, org.opensaml.xml.security.SecurityException, ValidationException, DecryptionException {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "violations": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/three_grams/files-repaired/12/SAMLConfig.java\nindex 942f375b450..c5cc48948e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/violations/12/SAMLConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/src/experiments/projects/black-ant-case/styler/05_predictions/three_grams/files-repaired/12/SAMLConfig.java\n@@ -132,8 +132,7 @@ public class SAMLConfig {\n \n   @Bean\n   public WebSSOProfileConsumer webSSOprofileConsumer() {\n-    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ?\n-      new WebSSOProfileConsumerImpl() {\n+    WebSSOProfileConsumerImpl webSSOProfileConsumer = environment.acceptsProfiles(Profiles.of(\"test\")) ? new WebSSOProfileConsumerImpl() {\n         @Override\n         @SuppressWarnings(\"unchecked\")\n         protected void verifyAssertion(Assertion assertion, AuthnRequest request, SAMLMessageContext context) throws AuthenticationException, SAMLException, org.opensaml.xml.security.SecurityException, ValidationException, DecryptionException {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "checkstyle_idea",
        "codebuff"
    ]
}